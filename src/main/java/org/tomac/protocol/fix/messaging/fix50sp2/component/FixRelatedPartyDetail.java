package org.tomac.protocol.fix.messaging.fix50sp2.component;

// DO NOT EDIT!!!
// This file is generated by FixMessageGenerator.
// If you need additional functionality, put it in a helper class
// that does not live in this folder!!!  Any java file in this folder 
// will be deleted upon the next run of the FixMessageGenerator!

import java.nio.ByteBuffer;

import org.tomac.protocol.fix.FixUtils;
import org.tomac.protocol.fix.FixSessionException;
import org.tomac.protocol.fix.FixGarbledException;
import org.tomac.utils.Utils;
import org.tomac.protocol.fix.FixConstants;


import org.tomac.protocol.fix.messaging.fix50sp2.FixTags;
import org.tomac.protocol.fix.messaging.fix50sp2.FixMessageInfo.*;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixRelatedPtysSubGrp;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixRelatedPartyAltIDs;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixRelatedContextParties;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixRelationshipRiskLimits;

public class FixRelatedPartyDetail implements FixComponent
{

	public byte[] relatedPartyID;
	public byte relatedPartyIDSource = (byte)' ';
	public long relatedPartyRole = 0;
	public FixRelatedPtysSubGrp relatedPtysSubGrp;
	public FixRelatedPartyAltIDs relatedPartyAltIDs;
	public FixRelatedContextParties relatedContextParties;
	public FixRelationshipRiskLimits relationshipRiskLimits;

	public FixRelatedPartyDetail() {
		super();

		relatedPartyID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		relatedPtysSubGrp = new FixRelatedPtysSubGrp();
		relatedPartyAltIDs = new FixRelatedPartyAltIDs();
		relatedContextParties = new FixRelatedContextParties();
		relationshipRiskLimits = new FixRelationshipRiskLimits();
		this.clear();

	}

	@Override
	public void clear()
	{

		// clear out all the fields that aren't msgType

		Utils.fill( relatedPartyID, (byte)0 );
		relatedPartyIDSource = Byte.MAX_VALUE;		
		relatedPartyRole = Long.MAX_VALUE;		
		relatedPtysSubGrp.clear();
		relatedPartyAltIDs.clear();
		relatedContextParties.clear();
		relationshipRiskLimits.clear();
	}

	public void getAll(int id, ByteBuffer buf) throws FixSessionException, FixGarbledException
	{

		int startTagPosition = buf.position();

		int lastTagPosition = buf.position();
		do {
			ByteBuffer value;

			value = buf;

			switch( id ) {

			case FixTags.RELATEDPARTYID_INT:
				relatedPartyID = FixUtils.getTagStringValue(value, relatedPartyID);
				break;

			case FixTags.RELATEDPARTYIDSOURCE_INT:
				relatedPartyIDSource = FixUtils.getTagCharValue( value );
				break;

			case FixTags.RELATEDPARTYROLE_INT:
				relatedPartyRole = FixUtils.getTagIntValue( value );
				break;

			case FixTags.NORELATEDPARTYSUBIDS_INT:
				relatedPtysSubGrp.noRelatedPartySubIDs = FixUtils.getTagIntValue( value );
				relatedPtysSubGrp.getAll(relatedPtysSubGrp.noRelatedPartySubIDs, value );
				break;

			case FixTags.NORELATEDPARTYALTIDS_INT:
				relatedPartyAltIDs.noRelatedPartyAltIDs = FixUtils.getTagIntValue( value );
				relatedPartyAltIDs.getAll(relatedPartyAltIDs.noRelatedPartyAltIDs, value );
				break;

			case FixTags.NORELATEDCONTEXTPARTYIDS_INT:
				relatedContextParties.noRelatedContextPartyIDs = FixUtils.getTagIntValue( value );
				relatedContextParties.getAll(relatedContextParties.noRelatedContextPartyIDs, value );
				break;

			case FixTags.NORELATIONSHIPRISKLIMITS_INT:
				relationshipRiskLimits.noRelationshipRiskLimits = FixUtils.getTagIntValue( value );
				relationshipRiskLimits.getAll(relationshipRiskLimits.noRelationshipRiskLimits, value );
				break;

			// we will always endup with unknown tag, unread and return to upper layer in hierarchy
			default:
				id = checkRequiredTags();
				if (id > 0) throw new FixSessionException(SessionRejectReason.REQUIRED_TAG_MISSING, "Required tag missing".getBytes(), id, new byte[0] );

				buf.position( lastTagPosition );
				return;

			}

			lastTagPosition = buf.position();

		} while ( ( id = FixUtils.getTagId( buf ) ) > 0 );

		buf.position(startTagPosition);

	}

	private int checkRequiredTags() {
		int tag = -1;

		return tag;

	}
	@Override
	public boolean isSet()
	{
		if (FixUtils.isSet(relatedPartyID)) return true;
		if (FixUtils.isSet(relatedPartyIDSource)) return true;
		if (FixUtils.isSet(relatedPartyRole)) return true;
		if (FixUtils.isSet(relatedPtysSubGrp.noRelatedPartySubIDs)) return true;
		if (FixUtils.isSet(relatedPartyAltIDs.noRelatedPartyAltIDs)) return true;
		if (FixUtils.isSet(relatedContextParties.noRelatedContextPartyIDs)) return true;
		if (FixUtils.isSet(relationshipRiskLimits.noRelationshipRiskLimits)) return true;
		return false;
	}
	@Override
	public void encode( ByteBuffer out )
	{
		if (FixUtils.isSet(relatedPartyID)) FixUtils.putFixTag( out, FixTags.RELATEDPARTYID_INT, relatedPartyID, 0, Utils.lastIndexTrim(relatedPartyID, (byte)0) );
		if (FixUtils.isSet(relatedPartyIDSource)) FixUtils.putFixTag( out, FixTags.RELATEDPARTYIDSOURCE_INT, relatedPartyIDSource );
		if (FixUtils.isSet(relatedPartyRole)) FixUtils.putFixTag( out, FixTags.RELATEDPARTYROLE_INT, relatedPartyRole);
		if (FixUtils.isSet(relatedPtysSubGrp.noRelatedPartySubIDs)) relatedPtysSubGrp.encode( out );
		if (FixUtils.isSet(relatedPartyAltIDs.noRelatedPartyAltIDs)) relatedPartyAltIDs.encode( out );
		if (FixUtils.isSet(relatedContextParties.noRelatedContextPartyIDs)) relatedContextParties.encode( out );
		if (FixUtils.isSet(relationshipRiskLimits.noRelationshipRiskLimits)) relationshipRiskLimits.encode( out );
	}
	/**
	 * If you use toString for any other purpose than administrative printout.
	 * You will end up in nifelheim!
	**/
	@Override
	public String toString() {
		char sep = '\n';
		if (Boolean.getBoolean("fix.useOneLiner")) sep = ( byte )0x01;

		String s = "";

			if (FixUtils.isSet(relatedPartyID)) s += "RelatedPartyID(1563)=" + new String(relatedPartyID) + sep;
			if (FixUtils.isSet(relatedPartyIDSource)) s += "RelatedPartyIDSource(1564)=" + String.valueOf(relatedPartyIDSource) + sep;
			if (FixUtils.isSet(relatedPartyRole)) s += "RelatedPartyRole(1565)=" + String.valueOf(relatedPartyRole) + sep;
			if (FixUtils.isSet(relatedPtysSubGrp.noRelatedPartySubIDs)) s += relatedPtysSubGrp.toString();
			if (FixUtils.isSet(relatedPartyAltIDs.noRelatedPartyAltIDs)) s += relatedPartyAltIDs.toString();
			if (FixUtils.isSet(relatedContextParties.noRelatedContextPartyIDs)) s += relatedContextParties.toString();
			if (FixUtils.isSet(relationshipRiskLimits.noRelationshipRiskLimits)) s += relationshipRiskLimits.toString();
		return s;

	}

	@Override
	public boolean equals(Object o) {
		if (! ( o instanceof FixRelatedPartyDetail)) return false;

			FixRelatedPartyDetail msg = (FixRelatedPartyDetail) o;

		if (!Utils.equals( relatedPartyID, msg.relatedPartyID)) return false;

		if (!( relatedPartyIDSource==msg.relatedPartyIDSource)) return false;

		if (!( relatedPartyRole==msg.relatedPartyRole)) return false;

		if (!relatedPtysSubGrp.equals(msg.relatedPtysSubGrp)) return false;

		if (!relatedPartyAltIDs.equals(msg.relatedPartyAltIDs)) return false;

		if (!relatedContextParties.equals(msg.relatedContextParties)) return false;

		if (!relationshipRiskLimits.equals(msg.relationshipRiskLimits)) return false;

		return true;
	}
}
