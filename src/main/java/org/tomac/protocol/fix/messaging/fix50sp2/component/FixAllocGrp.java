package org.tomac.protocol.fix.messaging.fix50sp2.component;

// DO NOT EDIT!!!
// This file is generated by FixMessageGenerator.
// If you need additional functionality, put it in a helper class
// that does not live in this folder!!!  Any java file in this folder 
// will be deleted upon the next run of the FixMessageGenerator!

import java.nio.ByteBuffer;

import org.tomac.protocol.fix.FixUtils;
import org.tomac.protocol.fix.FixSessionException;
import org.tomac.protocol.fix.FixGarbledException;
import org.tomac.utils.Utils;
import org.tomac.protocol.fix.FixConstants;


import org.tomac.protocol.fix.messaging.fix50sp2.FixMessageInfo.SessionRejectReason;
import org.tomac.protocol.fix.messaging.fix50sp2.FixMessageInfo;
import org.tomac.protocol.fix.messaging.fix50sp2.FixTags;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixNestedParties;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixCommissionData;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixMiscFeesGrp;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixClrInstGrp;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixSettlInstructionsData;

public class FixAllocGrp
{

	public int noAllocs;
	public AllocGrp[] group;

	public void getAll(int noAllocs, ByteBuffer buf) throws FixSessionException {
		this.noAllocs = noAllocs;

		if (noAllocs < 1) throw new FixSessionException(SessionRejectReason.INCORRECT_NUMINGROUP_COUNT_FOR_REPEATING_GROUP, ("Incorrect num in group count " + noAllocs ).getBytes(), FixTags.NOALLOCS_INT, new byte[0]);
		// this will leak memory if we grow the group
		if (group == null || group.length < noAllocs) {
			group = new AllocGrp[noAllocs];

			for ( int i = 0; i < noAllocs; i++ ) group[i] = new AllocGrp();
	}

		for ( int i = 0; i < noAllocs; i++ ) 
			group[i].getAllGroup(buf);
	}

	public void clear() {
		for (int i = 0; i<noAllocs; i++)
			group[i].clear();
	}
	public void encode(ByteBuffer out) {
		for (int i = 0; i<noAllocs; i++)
			group[i].encode(out);
	}
	public boolean isSet() {
		for (int i = 0; i<noAllocs; i++)
			if (group[i].isSet()) return true;
		return false;
	}

	@Override
	public String toString() {
		String s = "";
		for (int i = 0; i<noAllocs; i++)
			s += group[i].toString();
		return s;
	}

public class AllocGrp implements FixComponent
{

	public byte[] allocAccount;
	public long allocAcctIDSource = 0;
	public byte matchStatus = (byte)' ';
	public long allocPrice = 0;
	public long allocQty = 0;
	public byte[] individualAllocID;
	public byte processCode = (byte)' ';
	public byte[] secondaryIndividualAllocID;
	public long allocMethod = 0;
	public byte[] allocCustomerCapacity;
	public long individualAllocType = 0;
	public byte allocPositionEffect = (byte)' ';
	public FixNestedParties nestedParties;
	public boolean notifyBrokerOfCredit = false;
	public long allocHandlInst = 0;
	public byte[] allocText;
	public long encodedAllocTextLen = 0;
	public byte[] encodedAllocText;
	public FixCommissionData commissionData;
	public long allocAvgPx = 0;
	public long allocNetMoney = 0;
	public long settlCurrAmt = 0;
	public long allocSettlCurrAmt = 0;
	public byte[] settlCurrency;
	public byte[] allocSettlCurrency;
	public long settlCurrFxRate = 0;
	public byte settlCurrFxRateCalc = (byte)' ';
	public long allocAccruedInterestAmt = 0;
	public long allocInterestAtMaturity = 0;
	public FixMiscFeesGrp miscFeesGrp;
	public byte[] clearingFeeIndicator;
	public FixClrInstGrp clrInstGrp;
	public long allocSettlInstType = 0;
	public FixSettlInstructionsData settlInstructionsData;

	public AllocGrp() {
		super();

		allocAccount = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		individualAllocID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		secondaryIndividualAllocID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		allocCustomerCapacity = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		nestedParties = new FixNestedParties();
		allocText = new byte[FixUtils.FIX_MAX_STRING_TEXT_LENGTH];
		encodedAllocText = new byte[FixUtils.FIX_MAX_STRING_TEXT_LENGTH];
		commissionData = new FixCommissionData();
		settlCurrency = new byte[FixUtils.CURRENCY_LENGTH];
		allocSettlCurrency = new byte[FixUtils.CURRENCY_LENGTH];
		miscFeesGrp = new FixMiscFeesGrp();
		clearingFeeIndicator = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		clrInstGrp = new FixClrInstGrp();
		settlInstructionsData = new FixSettlInstructionsData();
		this.clear();

	}

	@Override
	public void clear()
	{

		// clear out all the fields that aren't msgType

		Utils.fill( allocAccount, (byte)0 );
		allocAcctIDSource = Long.MAX_VALUE;		
		matchStatus = Byte.MAX_VALUE;		
		allocPrice = Long.MAX_VALUE;		
		allocQty = Long.MAX_VALUE;		
		Utils.fill( individualAllocID, (byte)0 );
		processCode = Byte.MAX_VALUE;		
		Utils.fill( secondaryIndividualAllocID, (byte)0 );
		allocMethod = Long.MAX_VALUE;		
		Utils.fill( allocCustomerCapacity, (byte)0 );
		individualAllocType = Long.MAX_VALUE;		
		allocPositionEffect = Byte.MAX_VALUE;		
		notifyBrokerOfCredit = false;		
		allocHandlInst = Long.MAX_VALUE;		
		Utils.fill( allocText, (byte)0 );
		encodedAllocTextLen = Long.MAX_VALUE;		
		Utils.fill( encodedAllocText, (byte)0 );
		allocAvgPx = Long.MAX_VALUE;		
		allocNetMoney = Long.MAX_VALUE;		
		settlCurrAmt = Long.MAX_VALUE;		
		allocSettlCurrAmt = Long.MAX_VALUE;		
		Utils.fill( settlCurrency, (byte)0 );
		Utils.fill( allocSettlCurrency, (byte)0 );
		settlCurrFxRate = Long.MAX_VALUE;		
		settlCurrFxRateCalc = Byte.MAX_VALUE;		
		allocAccruedInterestAmt = Long.MAX_VALUE;		
		allocInterestAtMaturity = Long.MAX_VALUE;		
		Utils.fill( clearingFeeIndicator, (byte)0 );
		allocSettlInstType = Long.MAX_VALUE;		
		nestedParties.clear();
		commissionData.clear();
		miscFeesGrp.clear();
		clrInstGrp.clear();
		settlInstructionsData.clear();
	}

	public void getAllGroup(ByteBuffer buf) throws FixSessionException
	{

		int startTagPosition = buf.position();

		int id = FixUtils.getTagId( buf );
		int lastTagPosition = buf.position();
			ByteBuffer value;

			value = buf;

			if(id == FixTags.ALLOCACCOUNT_INT) {
				allocAccount = FixUtils.getTagStringValue(value, allocAccount);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.ALLOCACCTIDSOURCE_INT) {
				allocAcctIDSource = FixUtils.getTagIntValue( value );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.MATCHSTATUS_INT) {
				matchStatus = FixUtils.getTagCharValue( value );
				if (!FixMessageInfo.MatchStatus.isValid(matchStatus) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + matchStatus + ") for tag").getBytes(), id, new byte[0] );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.ALLOCPRICE_INT) {
				allocPrice = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.ALLOCQTY_INT) {
				allocQty = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.INDIVIDUALALLOCID_INT) {
				individualAllocID = FixUtils.getTagStringValue(value, individualAllocID);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.PROCESSCODE_INT) {
				processCode = FixUtils.getTagCharValue( value );
				if (!FixMessageInfo.ProcessCode.isValid(processCode) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + processCode + ") for tag").getBytes(), id, new byte[0] );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.SECONDARYINDIVIDUALALLOCID_INT) {
				secondaryIndividualAllocID = FixUtils.getTagStringValue(value, secondaryIndividualAllocID);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.ALLOCMETHOD_INT) {
				allocMethod = FixUtils.getTagIntValue( value );
				if (!FixMessageInfo.AllocMethod.isValid(allocMethod) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + allocMethod + ") for tag").getBytes(), id, new byte[0] );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.ALLOCCUSTOMERCAPACITY_INT) {
				allocCustomerCapacity = FixUtils.getTagStringValue(value, allocCustomerCapacity);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.INDIVIDUALALLOCTYPE_INT) {
				individualAllocType = FixUtils.getTagIntValue( value );
				if (!FixMessageInfo.IndividualAllocType.isValid(individualAllocType) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + individualAllocType + ") for tag").getBytes(), id, new byte[0] );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.ALLOCPOSITIONEFFECT_INT) {
				allocPositionEffect = FixUtils.getTagCharValue( value );
				if (!FixMessageInfo.AllocPositionEffect.isValid(allocPositionEffect) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + allocPositionEffect + ") for tag").getBytes(), id, new byte[0] );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.NONESTEDPARTYIDS_INT) {
				nestedParties.getAll(FixTags.NONESTEDPARTYIDS_INT, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.NOTIFYBROKEROFCREDIT_INT) {
				notifyBrokerOfCredit = FixUtils.getTagBooleanValue( value );
				if (!FixMessageInfo.NotifyBrokerOfCredit.isValid(notifyBrokerOfCredit) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + notifyBrokerOfCredit + ") for tag").getBytes(), id, new byte[0] );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.ALLOCHANDLINST_INT) {
				allocHandlInst = FixUtils.getTagIntValue( value );
				if (!FixMessageInfo.AllocHandlInst.isValid(allocHandlInst) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + allocHandlInst + ") for tag").getBytes(), id, new byte[0] );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.ALLOCTEXT_INT) {
				allocText = FixUtils.getTagStringValue(value, allocText);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.ENCODEDALLOCTEXTLEN_INT) {
				encodedAllocTextLen = FixUtils.getTagIntValue( value );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.ENCODEDALLOCTEXT_INT) {
				encodedAllocText = FixUtils.getTagStringValue(value, encodedAllocText);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.COMMISSION_INT) {
				commissionData.getAll(FixTags.COMMISSION_INT, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.ALLOCAVGPX_INT) {
				allocAvgPx = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.ALLOCNETMONEY_INT) {
				allocNetMoney = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.SETTLCURRAMT_INT) {
				settlCurrAmt = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.ALLOCSETTLCURRAMT_INT) {
				allocSettlCurrAmt = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.SETTLCURRENCY_INT) {
				settlCurrency = FixUtils.getTagStringValue(value, settlCurrency);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.ALLOCSETTLCURRENCY_INT) {
				allocSettlCurrency = FixUtils.getTagStringValue(value, allocSettlCurrency);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.SETTLCURRFXRATE_INT) {
				settlCurrFxRate = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.SETTLCURRFXRATECALC_INT) {
				settlCurrFxRateCalc = FixUtils.getTagCharValue( value );
				if (!FixMessageInfo.SettlCurrFxRateCalc.isValid(settlCurrFxRateCalc) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + settlCurrFxRateCalc + ") for tag").getBytes(), id, new byte[0] );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.ALLOCACCRUEDINTERESTAMT_INT) {
				allocAccruedInterestAmt = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.ALLOCINTERESTATMATURITY_INT) {
				allocInterestAtMaturity = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.NOMISCFEES_INT) {
				miscFeesGrp.getAll(FixTags.NOMISCFEES_INT, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.CLEARINGFEEINDICATOR_INT) {
				clearingFeeIndicator = FixUtils.getTagStringValue(value, clearingFeeIndicator);
				if (!FixMessageInfo.ClearingFeeIndicator.isValid(clearingFeeIndicator) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + clearingFeeIndicator + ") for tag").getBytes(), id, new byte[0] );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.NOCLEARINGINSTRUCTIONS_INT) {
				clrInstGrp.getAll(FixTags.NOCLEARINGINSTRUCTIONS_INT, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.ALLOCSETTLINSTTYPE_INT) {
				allocSettlInstType = FixUtils.getTagIntValue( value );
				if (!FixMessageInfo.AllocSettlInstType.isValid(allocSettlInstType) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + allocSettlInstType + ") for tag").getBytes(), id, new byte[0] );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.SETTLDELIVERYTYPE_INT) {
				settlInstructionsData.getAll(FixTags.SETTLDELIVERYTYPE_INT, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			id = checkRequiredTags();
				if (id > 0) throw new FixSessionException(SessionRejectReason.REQUIRED_TAG_MISSING, "Required tag missing".getBytes(), id, new byte[0] );

			buf.position( lastTagPosition );
			return;

	}

	private int checkRequiredTags() {
		int tag = -1;

		return tag;

	}
	@Override
	public boolean isSet()
	{
		if (FixUtils.isSet(allocAccount)) return true;
		if (FixUtils.isSet(allocAcctIDSource)) return true;
		if (FixUtils.isSet(matchStatus)) return true;
		if (FixUtils.isSet(allocPrice)) return true;
		if (FixUtils.isSet(allocQty)) return true;
		if (FixUtils.isSet(individualAllocID)) return true;
		if (FixUtils.isSet(processCode)) return true;
		if (FixUtils.isSet(secondaryIndividualAllocID)) return true;
		if (FixUtils.isSet(allocMethod)) return true;
		if (FixUtils.isSet(allocCustomerCapacity)) return true;
		if (FixUtils.isSet(individualAllocType)) return true;
		if (FixUtils.isSet(allocPositionEffect)) return true;
		if (FixUtils.isSet(nestedParties.noNestedPartyIDs)) return true;
		if (FixUtils.isSet(notifyBrokerOfCredit)) return true;
		if (FixUtils.isSet(allocHandlInst)) return true;
		if (FixUtils.isSet(allocText)) return true;
		if (FixUtils.isSet(encodedAllocTextLen)) return true;
		if (FixUtils.isSet(encodedAllocText)) return true;
		if (FixUtils.isSet(commissionData.commission)) return true;
		if (FixUtils.isSet(allocAvgPx)) return true;
		if (FixUtils.isSet(allocNetMoney)) return true;
		if (FixUtils.isSet(settlCurrAmt)) return true;
		if (FixUtils.isSet(allocSettlCurrAmt)) return true;
		if (FixUtils.isSet(settlCurrency)) return true;
		if (FixUtils.isSet(allocSettlCurrency)) return true;
		if (FixUtils.isSet(settlCurrFxRate)) return true;
		if (FixUtils.isSet(settlCurrFxRateCalc)) return true;
		if (FixUtils.isSet(allocAccruedInterestAmt)) return true;
		if (FixUtils.isSet(allocInterestAtMaturity)) return true;
		if (FixUtils.isSet(miscFeesGrp.noMiscFees)) return true;
		if (FixUtils.isSet(clearingFeeIndicator)) return true;
		if (FixUtils.isSet(clrInstGrp.noClearingInstructions)) return true;
		if (FixUtils.isSet(allocSettlInstType)) return true;
		if (FixUtils.isSet(settlInstructionsData.settlDeliveryType)) return true;
		return false;
	}
	@Override
	public void encode( ByteBuffer out )
	{
		if (FixUtils.isSet(allocAccount)) FixUtils.putFixTag( out, FixTags.ALLOCACCOUNT_INT, allocAccount, 0, Utils.lastIndexTrim(allocAccount, (byte)0) );
		if (FixUtils.isSet(allocAcctIDSource)) FixUtils.putFixTag( out, FixTags.ALLOCACCTIDSOURCE_INT, allocAcctIDSource);
		if (FixUtils.isSet(matchStatus)) FixUtils.putFixTag( out, FixTags.MATCHSTATUS_INT, matchStatus );
		if (FixUtils.isSet(allocPrice)) FixUtils.putFixFloatTag( out, FixTags.ALLOCPRICE_INT, allocPrice);
		if (FixUtils.isSet(allocQty)) FixUtils.putFixFloatTag( out, FixTags.ALLOCQTY_INT, allocQty);
		if (FixUtils.isSet(individualAllocID)) FixUtils.putFixTag( out, FixTags.INDIVIDUALALLOCID_INT, individualAllocID, 0, Utils.lastIndexTrim(individualAllocID, (byte)0) );
		if (FixUtils.isSet(processCode)) FixUtils.putFixTag( out, FixTags.PROCESSCODE_INT, processCode );
		if (FixUtils.isSet(secondaryIndividualAllocID)) FixUtils.putFixTag( out, FixTags.SECONDARYINDIVIDUALALLOCID_INT, secondaryIndividualAllocID, 0, Utils.lastIndexTrim(secondaryIndividualAllocID, (byte)0) );
		if (FixUtils.isSet(allocMethod)) FixUtils.putFixTag( out, FixTags.ALLOCMETHOD_INT, allocMethod);
		if (FixUtils.isSet(allocCustomerCapacity)) FixUtils.putFixTag( out, FixTags.ALLOCCUSTOMERCAPACITY_INT, allocCustomerCapacity, 0, Utils.lastIndexTrim(allocCustomerCapacity, (byte)0) );
		if (FixUtils.isSet(individualAllocType)) FixUtils.putFixTag( out, FixTags.INDIVIDUALALLOCTYPE_INT, individualAllocType);
		if (FixUtils.isSet(allocPositionEffect)) FixUtils.putFixTag( out, FixTags.ALLOCPOSITIONEFFECT_INT, allocPositionEffect );
		if (FixUtils.isSet(nestedParties.noNestedPartyIDs)) nestedParties.encode( out );
		if (FixUtils.isSet(notifyBrokerOfCredit)) FixUtils.putFixTag( out, FixTags.NOTIFYBROKEROFCREDIT_INT, notifyBrokerOfCredit?(byte)'Y':(byte)'N' );
		if (FixUtils.isSet(allocHandlInst)) FixUtils.putFixTag( out, FixTags.ALLOCHANDLINST_INT, allocHandlInst);
		if (FixUtils.isSet(allocText)) FixUtils.putFixTag( out, FixTags.ALLOCTEXT_INT, allocText, 0, Utils.lastIndexTrim(allocText, (byte)0) );
		if (FixUtils.isSet(encodedAllocTextLen)) FixUtils.putFixTag( out, FixTags.ENCODEDALLOCTEXTLEN_INT, encodedAllocTextLen);
		if (FixUtils.isSet(encodedAllocText)) FixUtils.putFixTag( out, FixTags.ENCODEDALLOCTEXT_INT, encodedAllocText, 0, Utils.lastIndexTrim(encodedAllocText, (byte)0) );
		if (FixUtils.isSet(commissionData.commission)) commissionData.encode( out );
		if (FixUtils.isSet(allocAvgPx)) FixUtils.putFixFloatTag( out, FixTags.ALLOCAVGPX_INT, allocAvgPx);
		if (FixUtils.isSet(allocNetMoney)) FixUtils.putFixTag( out, FixTags.ALLOCNETMONEY_INT, allocNetMoney);
		if (FixUtils.isSet(settlCurrAmt)) FixUtils.putFixTag( out, FixTags.SETTLCURRAMT_INT, settlCurrAmt);
		if (FixUtils.isSet(allocSettlCurrAmt)) FixUtils.putFixTag( out, FixTags.ALLOCSETTLCURRAMT_INT, allocSettlCurrAmt);
		if (FixUtils.isSet(settlCurrency)) FixUtils.putFixTag( out, FixTags.SETTLCURRENCY_INT, settlCurrency, 0, Utils.lastIndexTrim(settlCurrency, (byte)0) );
		if (FixUtils.isSet(allocSettlCurrency)) FixUtils.putFixTag( out, FixTags.ALLOCSETTLCURRENCY_INT, allocSettlCurrency, 0, Utils.lastIndexTrim(allocSettlCurrency, (byte)0) );
		if (FixUtils.isSet(settlCurrFxRate)) FixUtils.putFixFloatTag( out, FixTags.SETTLCURRFXRATE_INT, settlCurrFxRate);
		if (FixUtils.isSet(settlCurrFxRateCalc)) FixUtils.putFixTag( out, FixTags.SETTLCURRFXRATECALC_INT, settlCurrFxRateCalc );
		if (FixUtils.isSet(allocAccruedInterestAmt)) FixUtils.putFixTag( out, FixTags.ALLOCACCRUEDINTERESTAMT_INT, allocAccruedInterestAmt);
		if (FixUtils.isSet(allocInterestAtMaturity)) FixUtils.putFixTag( out, FixTags.ALLOCINTERESTATMATURITY_INT, allocInterestAtMaturity);
		if (FixUtils.isSet(miscFeesGrp.noMiscFees)) miscFeesGrp.encode( out );
		if (FixUtils.isSet(clearingFeeIndicator)) FixUtils.putFixTag( out, FixTags.CLEARINGFEEINDICATOR_INT, clearingFeeIndicator, 0, Utils.lastIndexTrim(clearingFeeIndicator, (byte)0) );
		if (FixUtils.isSet(clrInstGrp.noClearingInstructions)) clrInstGrp.encode( out );
		if (FixUtils.isSet(allocSettlInstType)) FixUtils.putFixTag( out, FixTags.ALLOCSETTLINSTTYPE_INT, allocSettlInstType);
		if (FixUtils.isSet(settlInstructionsData.settlDeliveryType)) settlInstructionsData.encode( out );
	}
	/**
	 * If you use toString for any other purpose than administrative printout.
	 * You will end up in nifelheim!
	**/
	@Override
	public String toString() {
		char sep = '\n';
		if (Boolean.getBoolean("fix.useOneLiner")) sep = ( byte )0x01;

		String s = "";

			if (FixUtils.isSet(allocAccount)) s += "AllocAccount(79)=" + new String(allocAccount) + sep;
			if (FixUtils.isSet(allocAcctIDSource)) s += "AllocAcctIDSource(661)=" + String.valueOf(allocAcctIDSource) + sep;
			if (FixUtils.isSet(matchStatus)) s += "MatchStatus(573)=" + String.valueOf(matchStatus) + sep;
			if (FixUtils.isSet(allocPrice)) s += "AllocPrice(366)=" + String.valueOf(allocPrice) + sep;
			if (FixUtils.isSet(allocQty)) s += "AllocQty(80)=" + String.valueOf(allocQty) + sep;
			if (FixUtils.isSet(individualAllocID)) s += "IndividualAllocID(467)=" + new String(individualAllocID) + sep;
			if (FixUtils.isSet(processCode)) s += "ProcessCode(81)=" + String.valueOf(processCode) + sep;
			if (FixUtils.isSet(secondaryIndividualAllocID)) s += "SecondaryIndividualAllocID(989)=" + new String(secondaryIndividualAllocID) + sep;
			if (FixUtils.isSet(allocMethod)) s += "AllocMethod(1002)=" + String.valueOf(allocMethod) + sep;
			if (FixUtils.isSet(allocCustomerCapacity)) s += "AllocCustomerCapacity(993)=" + new String(allocCustomerCapacity) + sep;
			if (FixUtils.isSet(individualAllocType)) s += "IndividualAllocType(992)=" + String.valueOf(individualAllocType) + sep;
			if (FixUtils.isSet(allocPositionEffect)) s += "AllocPositionEffect(1047)=" + String.valueOf(allocPositionEffect) + sep;
			if (FixUtils.isSet(nestedParties.noNestedPartyIDs)) s += nestedParties.toString();
			if (FixUtils.isSet(notifyBrokerOfCredit)) s += "NotifyBrokerOfCredit(208)=" + String.valueOf(notifyBrokerOfCredit) + sep;
			if (FixUtils.isSet(allocHandlInst)) s += "AllocHandlInst(209)=" + String.valueOf(allocHandlInst) + sep;
			if (FixUtils.isSet(allocText)) s += "AllocText(161)=" + new String(allocText) + sep;
			if (FixUtils.isSet(encodedAllocTextLen)) s += "EncodedAllocTextLen(360)=" + String.valueOf(encodedAllocTextLen) + sep;
			if (FixUtils.isSet(encodedAllocText)) s += "EncodedAllocText(361)=" + new String(encodedAllocText) + sep;
			if (FixUtils.isSet(commissionData.commission)) s += commissionData.toString();
			if (FixUtils.isSet(allocAvgPx)) s += "AllocAvgPx(153)=" + String.valueOf(allocAvgPx) + sep;
			if (FixUtils.isSet(allocNetMoney)) s += "AllocNetMoney(154)=" + String.valueOf(allocNetMoney) + sep;
			if (FixUtils.isSet(settlCurrAmt)) s += "SettlCurrAmt(119)=" + String.valueOf(settlCurrAmt) + sep;
			if (FixUtils.isSet(allocSettlCurrAmt)) s += "AllocSettlCurrAmt(737)=" + String.valueOf(allocSettlCurrAmt) + sep;
			if (FixUtils.isSet(settlCurrency)) s += "SettlCurrency(120)=" + new String(settlCurrency) + sep;
			if (FixUtils.isSet(allocSettlCurrency)) s += "AllocSettlCurrency(736)=" + new String(allocSettlCurrency) + sep;
			if (FixUtils.isSet(settlCurrFxRate)) s += "SettlCurrFxRate(155)=" + String.valueOf(settlCurrFxRate) + sep;
			if (FixUtils.isSet(settlCurrFxRateCalc)) s += "SettlCurrFxRateCalc(156)=" + String.valueOf(settlCurrFxRateCalc) + sep;
			if (FixUtils.isSet(allocAccruedInterestAmt)) s += "AllocAccruedInterestAmt(742)=" + String.valueOf(allocAccruedInterestAmt) + sep;
			if (FixUtils.isSet(allocInterestAtMaturity)) s += "AllocInterestAtMaturity(741)=" + String.valueOf(allocInterestAtMaturity) + sep;
			if (FixUtils.isSet(miscFeesGrp.noMiscFees)) s += miscFeesGrp.toString();
			if (FixUtils.isSet(clearingFeeIndicator)) s += "ClearingFeeIndicator(635)=" + new String(clearingFeeIndicator) + sep;
			if (FixUtils.isSet(clrInstGrp.noClearingInstructions)) s += clrInstGrp.toString();
			if (FixUtils.isSet(allocSettlInstType)) s += "AllocSettlInstType(780)=" + String.valueOf(allocSettlInstType) + sep;
			if (FixUtils.isSet(settlInstructionsData.settlDeliveryType)) s += settlInstructionsData.toString();
		return s;

	}

	@Override
	public boolean equals(Object o) {
		if (! ( o instanceof AllocGrp)) return false;

			AllocGrp msg = (AllocGrp) o;

		if ( ! super.equals(msg) ) return false;

		if (!Utils.equals( allocAccount, msg.allocAccount)) return false;

		if (!( allocAcctIDSource==msg.allocAcctIDSource)) return false;

		if (!( matchStatus==msg.matchStatus)) return false;

		if (!( allocPrice==msg.allocPrice)) return false;

		if (!( allocQty==msg.allocQty)) return false;

		if (!Utils.equals( individualAllocID, msg.individualAllocID)) return false;

		if (!( processCode==msg.processCode)) return false;

		if (!Utils.equals( secondaryIndividualAllocID, msg.secondaryIndividualAllocID)) return false;

		if (!( allocMethod==msg.allocMethod)) return false;

		if (!Utils.equals( allocCustomerCapacity, msg.allocCustomerCapacity)) return false;

		if (!( individualAllocType==msg.individualAllocType)) return false;

		if (!( allocPositionEffect==msg.allocPositionEffect)) return false;

		if (!nestedParties.equals(msg.nestedParties)) return false;

		if (!( notifyBrokerOfCredit==msg.notifyBrokerOfCredit)) return false;

		if (!( allocHandlInst==msg.allocHandlInst)) return false;

		if (!Utils.equals( allocText, msg.allocText)) return false;

		if (!( encodedAllocTextLen==msg.encodedAllocTextLen)) return false;

		if (!Utils.equals( encodedAllocText, msg.encodedAllocText)) return false;

		if (!commissionData.equals(msg.commissionData)) return false;

		if (!( allocAvgPx==msg.allocAvgPx)) return false;

		if (!( allocNetMoney==msg.allocNetMoney)) return false;

		if (!( settlCurrAmt==msg.settlCurrAmt)) return false;

		if (!( allocSettlCurrAmt==msg.allocSettlCurrAmt)) return false;

		if (!Utils.equals( settlCurrency, msg.settlCurrency)) return false;

		if (!Utils.equals( allocSettlCurrency, msg.allocSettlCurrency)) return false;

		if (!( settlCurrFxRate==msg.settlCurrFxRate)) return false;

		if (!( settlCurrFxRateCalc==msg.settlCurrFxRateCalc)) return false;

		if (!( allocAccruedInterestAmt==msg.allocAccruedInterestAmt)) return false;

		if (!( allocInterestAtMaturity==msg.allocInterestAtMaturity)) return false;

		if (!miscFeesGrp.equals(msg.miscFeesGrp)) return false;

		if (!Utils.equals( clearingFeeIndicator, msg.clearingFeeIndicator)) return false;

		if (!clrInstGrp.equals(msg.clrInstGrp)) return false;

		if (!( allocSettlInstType==msg.allocSettlInstType)) return false;

		if (!settlInstructionsData.equals(msg.settlInstructionsData)) return false;

		return true;
	}
}
}
