package org.tomac.protocol.fix.messaging.fix50sp2;

// DO NOT EDIT!!!
// This file is generated by FixMessageGenerator.
// If you need additional functionality, put it in a helper class
// that does not live in this folder!!!  Any java file in this folder 
// will be deleted upon the next run of the FixMessageGenerator!

import java.nio.ByteBuffer;

import org.tomac.protocol.fix.FixUtils;
import org.tomac.protocol.fix.FixSessionException;
import org.tomac.protocol.fix.FixGarbledException;
import org.tomac.utils.Utils;
import org.tomac.protocol.fix.FixConstants;


import org.tomac.protocol.fix.messaging.fix50sp2.component.FixHopGrp;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixParties;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixPreAllocMlegGrp;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixDisplayInstruction;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixTrdgSesGrp;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixInstrument;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixUndInstrmtGrp;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixLegOrdGrp;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixOrderQtyData;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixTriggeringInstruction;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixCommissionData;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixPegInstructions;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixDiscretionInstructions;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixStrategyParametersGrp;

public class FixMultilegOrderCancelReplace extends FixMessage
{

	public byte[] orderID;
	public byte[] origClOrdID;
	public byte[] clOrdID;
	public byte[] secondaryClOrdID;
	public byte[] clOrdLinkID;
	public byte[] origOrdModTime;
	public FixParties parties;
	public byte[] tradeOriginationDate;
	public byte[] tradeDate;
	public byte[] account;
	public long acctIDSource = 0;
	public long accountType = 0;
	public byte dayBookingInst = (byte)' ';
	public byte bookingUnit = (byte)' ';
	public byte preallocMethod = (byte)' ';
	public byte[] allocID;
	public FixPreAllocMlegGrp preAllocMlegGrp;
	public byte[] settlType;
	public byte[] settlDate;
	public byte cashMargin = (byte)' ';
	public byte[] clearingFeeIndicator;
	public byte handlInst = (byte)' ';
	public byte[] execInst;
	public long minQty = 0;
	public long matchIncrement = 0;
	public long maxPriceLevels = 0;
	public FixDisplayInstruction displayInstruction;
	public long maxFloor = 0;
	public byte[] exDestination;
	public byte exDestinationIDSource = (byte)' ';
	public FixTrdgSesGrp trdgSesGrp;
	public byte processCode = (byte)' ';
	public byte side = (byte)' ';
	public FixInstrument instrument;
	public FixUndInstrmtGrp undInstrmtGrp;
	public long prevClosePx = 0;
	public long swapPoints = 0;
	public FixLegOrdGrp legOrdGrp;
	public boolean locateReqd = false;
	public byte[] transactTime;
	public long qtyType = 0;
	public FixOrderQtyData orderQtyData;
	public byte ordType = (byte)' ';
	public long multilegModel = 0;
	public long multilegPriceMethod = 0;
	public long priceType = 0;
	public long price = 0;
	public byte priceProtectionScope = (byte)' ';
	public long stopPx = 0;
	public FixTriggeringInstruction triggeringInstruction;
	public byte[] currency;
	public byte[] complianceID;
	public boolean solicitedFlag = false;
	public byte[] iOIID;
	public byte[] quoteID;
	public byte timeInForce = (byte)' ';
	public byte[] effectiveTime;
	public byte[] expireDate;
	public byte[] expireTime;
	public long gTBookingInst = 0;
	public FixCommissionData commissionData;
	public byte orderCapacity = (byte)' ';
	public byte[] orderRestrictions;
	public boolean preTradeAnonymity = false;
	public long custOrderCapacity = 0;
	public boolean forexReq = false;
	public byte[] settlCurrency;
	public long bookingType = 0;
	public byte[] text;
	public long encodedTextLen = 0;
	public byte[] encodedText;
	public byte positionEffect = (byte)' ';
	public long coveredOrUncovered = 0;
	public long maxShow = 0;
	public FixPegInstructions pegInstructions;
	public FixDiscretionInstructions discretionInstructions;
	public long targetStrategy = 0;
	public FixStrategyParametersGrp strategyParametersGrp;
	public byte[] targetStrategyParameters;
	public long riskFreeRate = 0;
	public long participationRate = 0;
	public byte cancellationRights = (byte)' ';
	public byte moneyLaunderingStatus = (byte)' ';
	public byte[] registID;
	public byte[] designation;
	public long multiLegRptTypeReq = 0;

	public FixMultilegOrderCancelReplace() {
		super();

		orderID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		origClOrdID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		clOrdID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		secondaryClOrdID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		clOrdLinkID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		origOrdModTime = new byte[FixUtils.UTCTIMESTAMP_LENGTH];
		parties = new FixParties();
		tradeOriginationDate = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		tradeDate = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		account = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		allocID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		preAllocMlegGrp = new FixPreAllocMlegGrp();
		settlType = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		settlDate = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		clearingFeeIndicator = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		execInst = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		displayInstruction = new FixDisplayInstruction();
		exDestination = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		trdgSesGrp = new FixTrdgSesGrp();
		instrument = new FixInstrument();
		undInstrmtGrp = new FixUndInstrmtGrp();
		legOrdGrp = new FixLegOrdGrp();
		transactTime = new byte[FixUtils.UTCTIMESTAMP_LENGTH];
		orderQtyData = new FixOrderQtyData();
		triggeringInstruction = new FixTriggeringInstruction();
		currency = new byte[FixUtils.CURRENCY_LENGTH];
		complianceID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		iOIID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		quoteID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		effectiveTime = new byte[FixUtils.UTCTIMESTAMP_LENGTH];
		expireDate = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		expireTime = new byte[FixUtils.UTCTIMESTAMP_LENGTH];
		commissionData = new FixCommissionData();
		orderRestrictions = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		settlCurrency = new byte[FixUtils.CURRENCY_LENGTH];
		text = new byte[FixUtils.FIX_MAX_STRING_TEXT_LENGTH];
		encodedText = new byte[FixUtils.FIX_MAX_STRING_TEXT_LENGTH];
		pegInstructions = new FixPegInstructions();
		discretionInstructions = new FixDiscretionInstructions();
		strategyParametersGrp = new FixStrategyParametersGrp();
		targetStrategyParameters = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		registID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		designation = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		this.clear();

		msgType = MsgTypes.MULTILEGORDERCANCELREPLACE_INT;

	}

	@Override
	public void clear()
	{

		// clear out all the fields that aren't msgType

		Utils.fill( orderID, (byte)0 );
		Utils.fill( origClOrdID, (byte)0 );
		Utils.fill( clOrdID, (byte)0 );
		Utils.fill( secondaryClOrdID, (byte)0 );
		Utils.fill( clOrdLinkID, (byte)0 );
		Utils.fill( origOrdModTime, (byte)0 );
		Utils.fill( tradeOriginationDate, (byte)0 );
		Utils.fill( tradeDate, (byte)0 );
		Utils.fill( account, (byte)0 );
		acctIDSource = Long.MAX_VALUE;		
		accountType = Long.MAX_VALUE;		
		dayBookingInst = Byte.MAX_VALUE;		
		bookingUnit = Byte.MAX_VALUE;		
		preallocMethod = Byte.MAX_VALUE;		
		Utils.fill( allocID, (byte)0 );
		Utils.fill( settlType, (byte)0 );
		Utils.fill( settlDate, (byte)0 );
		cashMargin = Byte.MAX_VALUE;		
		Utils.fill( clearingFeeIndicator, (byte)0 );
		handlInst = Byte.MAX_VALUE;		
		Utils.fill( execInst, (byte)0 );
		minQty = Long.MAX_VALUE;		
		matchIncrement = Long.MAX_VALUE;		
		maxPriceLevels = Long.MAX_VALUE;		
		maxFloor = Long.MAX_VALUE;		
		Utils.fill( exDestination, (byte)0 );
		exDestinationIDSource = Byte.MAX_VALUE;		
		processCode = Byte.MAX_VALUE;		
		side = Byte.MAX_VALUE;		
		prevClosePx = Long.MAX_VALUE;		
		swapPoints = Long.MAX_VALUE;		
		locateReqd = false;		
		Utils.fill( transactTime, (byte)0 );
		qtyType = Long.MAX_VALUE;		
		ordType = Byte.MAX_VALUE;		
		multilegModel = Long.MAX_VALUE;		
		multilegPriceMethod = Long.MAX_VALUE;		
		priceType = Long.MAX_VALUE;		
		price = Long.MAX_VALUE;		
		priceProtectionScope = Byte.MAX_VALUE;		
		stopPx = Long.MAX_VALUE;		
		Utils.fill( currency, (byte)0 );
		Utils.fill( complianceID, (byte)0 );
		solicitedFlag = false;		
		Utils.fill( iOIID, (byte)0 );
		Utils.fill( quoteID, (byte)0 );
		timeInForce = Byte.MAX_VALUE;		
		Utils.fill( effectiveTime, (byte)0 );
		Utils.fill( expireDate, (byte)0 );
		Utils.fill( expireTime, (byte)0 );
		gTBookingInst = Long.MAX_VALUE;		
		orderCapacity = Byte.MAX_VALUE;		
		Utils.fill( orderRestrictions, (byte)0 );
		preTradeAnonymity = false;		
		custOrderCapacity = Long.MAX_VALUE;		
		forexReq = false;		
		Utils.fill( settlCurrency, (byte)0 );
		bookingType = Long.MAX_VALUE;		
		Utils.fill( text, (byte)0 );
		encodedTextLen = Long.MAX_VALUE;		
		Utils.fill( encodedText, (byte)0 );
		positionEffect = Byte.MAX_VALUE;		
		coveredOrUncovered = Long.MAX_VALUE;		
		maxShow = Long.MAX_VALUE;		
		targetStrategy = Long.MAX_VALUE;		
		Utils.fill( targetStrategyParameters, (byte)0 );
		riskFreeRate = Long.MAX_VALUE;		
		participationRate = Long.MAX_VALUE;		
		cancellationRights = Byte.MAX_VALUE;		
		moneyLaunderingStatus = Byte.MAX_VALUE;		
		Utils.fill( registID, (byte)0 );
		Utils.fill( designation, (byte)0 );
		multiLegRptTypeReq = Long.MAX_VALUE;		
		parties.clear();
		preAllocMlegGrp.clear();
		displayInstruction.clear();
		trdgSesGrp.clear();
		instrument.clear();
		undInstrmtGrp.clear();
		legOrdGrp.clear();
		orderQtyData.clear();
		triggeringInstruction.clear();
		commissionData.clear();
		pegInstructions.clear();
		discretionInstructions.clear();
		strategyParametersGrp.clear();
	}

	@Override
	public void getAll() throws FixSessionException, FixGarbledException
	{

		int startTagPosition = buf.position();

		super.getAll();

		// assumption message is full otherwise decode would return null
		// so negative id means that we are at the end of the message
		int id;
		int lastTagPosition = buf.position();
		while ( ( id = FixUtils.getTagId( buf ) ) > 0 )
		{
			ByteBuffer value;

			value = buf;

			switch( id ) {

			case FixTags.ORDERID_INT:
				orderID = FixUtils.getTagStringValue(value, orderID);
				break;

			case FixTags.ORIGCLORDID_INT:
				origClOrdID = FixUtils.getTagStringValue(value, origClOrdID);
				break;

			case FixTags.CLORDID_INT:
				clOrdID = FixUtils.getTagStringValue(value, clOrdID);
				break;

			case FixTags.SECONDARYCLORDID_INT:
				secondaryClOrdID = FixUtils.getTagStringValue(value, secondaryClOrdID);
				break;

			case FixTags.CLORDLINKID_INT:
				clOrdLinkID = FixUtils.getTagStringValue(value, clOrdLinkID);
				break;

			case FixTags.ORIGORDMODTIME_INT:
				origOrdModTime = FixUtils.getTagStringValue(value, origOrdModTime);
				break;

			case FixTags.NOPARTYIDS_INT:
				parties.noPartyIDs = FixUtils.getTagIntValue( value );
				parties.getAll(parties.noPartyIDs, value );
				break;

			case FixTags.TRADEORIGINATIONDATE_INT:
				tradeOriginationDate = FixUtils.getTagStringValue(value, tradeOriginationDate);
				break;

			case FixTags.TRADEDATE_INT:
				tradeDate = FixUtils.getTagStringValue(value, tradeDate);
				break;

			case FixTags.ACCOUNT_INT:
				account = FixUtils.getTagStringValue(value, account);
				break;

			case FixTags.ACCTIDSOURCE_INT:
				acctIDSource = FixUtils.getTagIntValue( value );
				if (!AcctIDSource.isValid(acctIDSource) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + acctIDSource + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.ACCOUNTTYPE_INT:
				accountType = FixUtils.getTagIntValue( value );
				if (!AccountType.isValid(accountType) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + accountType + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.DAYBOOKINGINST_INT:
				dayBookingInst = FixUtils.getTagCharValue( value );
				if (!DayBookingInst.isValid(dayBookingInst) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + dayBookingInst + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.BOOKINGUNIT_INT:
				bookingUnit = FixUtils.getTagCharValue( value );
				if (!BookingUnit.isValid(bookingUnit) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + bookingUnit + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.PREALLOCMETHOD_INT:
				preallocMethod = FixUtils.getTagCharValue( value );
				if (!PreallocMethod.isValid(preallocMethod) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + preallocMethod + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.ALLOCID_INT:
				allocID = FixUtils.getTagStringValue(value, allocID);
				break;

			case FixTags.NOALLOCS_INT:
				preAllocMlegGrp.noAllocs = FixUtils.getTagIntValue( value );
				preAllocMlegGrp.getAll(preAllocMlegGrp.noAllocs, value );
				break;

			case FixTags.SETTLTYPE_INT:
				settlType = FixUtils.getTagStringValue(value, settlType);
				if (!SettlType.isValid(settlType) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + settlType + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.SETTLDATE_INT:
				settlDate = FixUtils.getTagStringValue(value, settlDate);
				break;

			case FixTags.CASHMARGIN_INT:
				cashMargin = FixUtils.getTagCharValue( value );
				if (!CashMargin.isValid(cashMargin) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + cashMargin + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.CLEARINGFEEINDICATOR_INT:
				clearingFeeIndicator = FixUtils.getTagStringValue(value, clearingFeeIndicator);
				if (!ClearingFeeIndicator.isValid(clearingFeeIndicator) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + clearingFeeIndicator + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.HANDLINST_INT:
				handlInst = FixUtils.getTagCharValue( value );
				if (!HandlInst.isValid(handlInst) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + handlInst + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.EXECINST_INT:
				execInst = FixUtils.getTagStringValue(value, execInst);
				if (!ExecInst.isValid(execInst) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + execInst + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.MINQTY_INT:
				minQty = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.MATCHINCREMENT_INT:
				matchIncrement = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.MAXPRICELEVELS_INT:
				maxPriceLevels = FixUtils.getTagIntValue( value );
				break;

			case FixTags.DISPLAYQTY_INT:
				displayInstruction.getAll(FixTags.DISPLAYQTY_INT, value );
				break;

			case FixTags.MAXFLOOR_INT:
				maxFloor = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.EXDESTINATION_INT:
				exDestination = FixUtils.getTagStringValue(value, exDestination);
				break;

			case FixTags.EXDESTINATIONIDSOURCE_INT:
				exDestinationIDSource = FixUtils.getTagCharValue( value );
				if (!ExDestinationIDSource.isValid(exDestinationIDSource) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + exDestinationIDSource + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.NOTRADINGSESSIONS_INT:
				trdgSesGrp.noTradingSessions = FixUtils.getTagIntValue( value );
				trdgSesGrp.getAll(trdgSesGrp.noTradingSessions, value );
				break;

			case FixTags.PROCESSCODE_INT:
				processCode = FixUtils.getTagCharValue( value );
				if (!ProcessCode.isValid(processCode) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + processCode + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.SIDE_INT:
				side = FixUtils.getTagCharValue( value );
				if (!Side.isValid(side) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + side + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.SYMBOL_INT:
				instrument.getAll(FixTags.SYMBOL_INT, value );
				break;

			case FixTags.NOUNDERLYINGS_INT:
				undInstrmtGrp.noUnderlyings = FixUtils.getTagIntValue( value );
				undInstrmtGrp.getAll(undInstrmtGrp.noUnderlyings, value );
				break;

			case FixTags.PREVCLOSEPX_INT:
				prevClosePx = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.SWAPPOINTS_INT:
				swapPoints = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.NOLEGS_INT:
				legOrdGrp.noLegs = FixUtils.getTagIntValue( value );
				legOrdGrp.getAll(legOrdGrp.noLegs, value );
				break;

			case FixTags.LOCATEREQD_INT:
				locateReqd = FixUtils.getTagBooleanValue( value );
				if (!LocateReqd.isValid(locateReqd) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + locateReqd + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.TRANSACTTIME_INT:
				transactTime = FixUtils.getTagStringValue(value, transactTime);
				break;

			case FixTags.QTYTYPE_INT:
				qtyType = FixUtils.getTagIntValue( value );
				if (!QtyType.isValid(qtyType) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + qtyType + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.ORDERQTY_INT:
				orderQtyData.getAll(FixTags.ORDERQTY_INT, value );
				break;

			case FixTags.ORDTYPE_INT:
				ordType = FixUtils.getTagCharValue( value );
				if (!OrdType.isValid(ordType) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + ordType + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.MULTILEGMODEL_INT:
				multilegModel = FixUtils.getTagIntValue( value );
				if (!MultilegModel.isValid(multilegModel) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + multilegModel + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.MULTILEGPRICEMETHOD_INT:
				multilegPriceMethod = FixUtils.getTagIntValue( value );
				if (!MultilegPriceMethod.isValid(multilegPriceMethod) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + multilegPriceMethod + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.PRICETYPE_INT:
				priceType = FixUtils.getTagIntValue( value );
				if (!PriceType.isValid(priceType) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + priceType + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.PRICE_INT:
				price = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.PRICEPROTECTIONSCOPE_INT:
				priceProtectionScope = FixUtils.getTagCharValue( value );
				if (!PriceProtectionScope.isValid(priceProtectionScope) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + priceProtectionScope + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.STOPPX_INT:
				stopPx = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.TRIGGERTYPE_INT:
				triggeringInstruction.getAll(FixTags.TRIGGERTYPE_INT, value );
				break;

			case FixTags.CURRENCY_INT:
				currency = FixUtils.getTagStringValue(value, currency);
				break;

			case FixTags.COMPLIANCEID_INT:
				complianceID = FixUtils.getTagStringValue(value, complianceID);
				break;

			case FixTags.SOLICITEDFLAG_INT:
				solicitedFlag = FixUtils.getTagBooleanValue( value );
				if (!SolicitedFlag.isValid(solicitedFlag) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + solicitedFlag + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.IOIID_INT:
				iOIID = FixUtils.getTagStringValue(value, iOIID);
				break;

			case FixTags.QUOTEID_INT:
				quoteID = FixUtils.getTagStringValue(value, quoteID);
				break;

			case FixTags.TIMEINFORCE_INT:
				timeInForce = FixUtils.getTagCharValue( value );
				if (!TimeInForce.isValid(timeInForce) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + timeInForce + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.EFFECTIVETIME_INT:
				effectiveTime = FixUtils.getTagStringValue(value, effectiveTime);
				break;

			case FixTags.EXPIREDATE_INT:
				expireDate = FixUtils.getTagStringValue(value, expireDate);
				break;

			case FixTags.EXPIRETIME_INT:
				expireTime = FixUtils.getTagStringValue(value, expireTime);
				break;

			case FixTags.GTBOOKINGINST_INT:
				gTBookingInst = FixUtils.getTagIntValue( value );
				if (!GTBookingInst.isValid(gTBookingInst) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + gTBookingInst + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.COMMISSION_INT:
				commissionData.getAll(FixTags.COMMISSION_INT, value );
				break;

			case FixTags.ORDERCAPACITY_INT:
				orderCapacity = FixUtils.getTagCharValue( value );
				if (!OrderCapacity.isValid(orderCapacity) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + orderCapacity + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.ORDERRESTRICTIONS_INT:
				orderRestrictions = FixUtils.getTagStringValue(value, orderRestrictions);
				if (!OrderRestrictions.isValid(orderRestrictions) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + orderRestrictions + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.PRETRADEANONYMITY_INT:
				preTradeAnonymity = FixUtils.getTagBooleanValue( value );
				break;

			case FixTags.CUSTORDERCAPACITY_INT:
				custOrderCapacity = FixUtils.getTagIntValue( value );
				if (!CustOrderCapacity.isValid(custOrderCapacity) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + custOrderCapacity + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.FOREXREQ_INT:
				forexReq = FixUtils.getTagBooleanValue( value );
				if (!ForexReq.isValid(forexReq) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + forexReq + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.SETTLCURRENCY_INT:
				settlCurrency = FixUtils.getTagStringValue(value, settlCurrency);
				break;

			case FixTags.BOOKINGTYPE_INT:
				bookingType = FixUtils.getTagIntValue( value );
				if (!BookingType.isValid(bookingType) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + bookingType + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.TEXT_INT:
				text = FixUtils.getTagStringValue(value, text);
				break;

			case FixTags.ENCODEDTEXTLEN_INT:
				encodedTextLen = FixUtils.getTagIntValue( value );
				break;

			case FixTags.ENCODEDTEXT_INT:
				encodedText = FixUtils.getTagStringValue(value, encodedText);
				break;

			case FixTags.POSITIONEFFECT_INT:
				positionEffect = FixUtils.getTagCharValue( value );
				if (!PositionEffect.isValid(positionEffect) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + positionEffect + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.COVEREDORUNCOVERED_INT:
				coveredOrUncovered = FixUtils.getTagIntValue( value );
				if (!CoveredOrUncovered.isValid(coveredOrUncovered) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + coveredOrUncovered + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.MAXSHOW_INT:
				maxShow = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.PEGOFFSETVALUE_INT:
				pegInstructions.getAll(FixTags.PEGOFFSETVALUE_INT, value );
				break;

			case FixTags.DISCRETIONINST_INT:
				discretionInstructions.getAll(FixTags.DISCRETIONINST_INT, value );
				break;

			case FixTags.TARGETSTRATEGY_INT:
				targetStrategy = FixUtils.getTagIntValue( value );
				if (!TargetStrategy.isValid(targetStrategy) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + targetStrategy + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.NOSTRATEGYPARAMETERS_INT:
				strategyParametersGrp.noStrategyParameters = FixUtils.getTagIntValue( value );
				strategyParametersGrp.getAll(strategyParametersGrp.noStrategyParameters, value );
				break;

			case FixTags.TARGETSTRATEGYPARAMETERS_INT:
				targetStrategyParameters = FixUtils.getTagStringValue(value, targetStrategyParameters);
				break;

			case FixTags.RISKFREERATE_INT:
				riskFreeRate = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.PARTICIPATIONRATE_INT:
				participationRate = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.CANCELLATIONRIGHTS_INT:
				cancellationRights = FixUtils.getTagCharValue( value );
				if (!CancellationRights.isValid(cancellationRights) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + cancellationRights + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.MONEYLAUNDERINGSTATUS_INT:
				moneyLaunderingStatus = FixUtils.getTagCharValue( value );
				if (!MoneyLaunderingStatus.isValid(moneyLaunderingStatus) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + moneyLaunderingStatus + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.REGISTID_INT:
				registID = FixUtils.getTagStringValue(value, registID);
				break;

			case FixTags.DESIGNATION_INT:
				designation = FixUtils.getTagStringValue(value, designation);
				break;

			case FixTags.MULTILEGRPTTYPEREQ_INT:
				multiLegRptTypeReq = FixUtils.getTagIntValue( value );
				if (!MultiLegRptTypeReq.isValid(multiLegRptTypeReq) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + multiLegRptTypeReq + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			// for a message always get the checksum
			case FixTags.CHECKSUM_INT:
				checkSum = FixUtils.getTagIntValue( value );

				id = checkRequiredTags();
				if (id > 0) throw new FixSessionException(SessionRejectReason.REQUIRED_TAG_MISSING, "Required tag missing".getBytes(), id, FixUtils.getMsgType(msgType) );

				return;

			default:
				throw new FixSessionException(SessionRejectReason.UNDEFINED_TAG, "Unknown tag".getBytes(), id, FixUtils.getMsgType(msgType) );

			}

			lastTagPosition = buf.position();

		}

		buf.position(startTagPosition);

	}

	private int checkRequiredTags() {
		int tag = -1;

		if (! FixUtils.isSet(senderCompID) ) return FixTags.SENDERCOMPID_INT;
		if (! FixUtils.isSet(targetCompID) ) return FixTags.TARGETCOMPID_INT;
		if (! FixUtils.isSet(msgSeqNum) ) return FixTags.MSGSEQNUM_INT;
		if (! FixUtils.isSet(sendingTime) ) return FixTags.SENDINGTIME_INT;
		if (! FixUtils.isSet(side) ) return FixTags.SIDE_INT;
		if (! FixUtils.isSet(transactTime) ) return FixTags.TRANSACTTIME_INT;
		if (! FixUtils.isSet(ordType) ) return FixTags.ORDTYPE_INT;
		if (! orderQtyData.isSet() ) return FixTags.ORDERQTY_INT;
		if (! FixUtils.isSet(checkSum) ) return FixTags.CHECKSUM_INT;
		return tag;

	}
	@Override
	public void encode( ByteBuffer out )
	{
		// Encode message. Set msgSeqNum and sendingTime and optional resend flags, before encoding. 

		int msgStart = out.position();

		out.put( BEGINSTRING_VALUE_WITH_TAG );

		int msgLengthValueStart = out.position() + 2 /* 9= */;

		// placeholder
		FixUtils.putFixTag(out, FixTags.BODYLENGTH_INT, FixConstants.MAX_MESSAGE_SIZE );

		int msgTypeStart = out.position();

		FixUtils.putFixTag( out, FixTags.MSGTYPE_INT, MsgTypes.MULTILEGORDERCANCELREPLACE);

		// encode all fields including the header

		if (FixUtils.isSet(applVerID)) FixUtils.putFixTag( out, FixTags.APPLVERID_INT, applVerID, 0, Utils.lastIndexTrim(applVerID, (byte)0) );
		if (FixUtils.isSet(cstmApplVerID)) FixUtils.putFixTag( out, FixTags.CSTMAPPLVERID_INT, cstmApplVerID, 0, Utils.lastIndexTrim(cstmApplVerID, (byte)0) );
		if (FixUtils.isSet(applExtID)) FixUtils.putFixTag( out, FixTags.APPLEXTID_INT, applExtID);
		FixUtils.putFixTag( out, FixTags.SENDERCOMPID_INT, senderCompID, 0, Utils.lastIndexTrim(senderCompID, (byte)0) );
		FixUtils.putFixTag( out, FixTags.TARGETCOMPID_INT, targetCompID, 0, Utils.lastIndexTrim(targetCompID, (byte)0) );
		if (FixUtils.isSet(onBehalfOfCompID)) FixUtils.putFixTag( out, FixTags.ONBEHALFOFCOMPID_INT, onBehalfOfCompID, 0, Utils.lastIndexTrim(onBehalfOfCompID, (byte)0) );
		if (FixUtils.isSet(deliverToCompID)) FixUtils.putFixTag( out, FixTags.DELIVERTOCOMPID_INT, deliverToCompID, 0, Utils.lastIndexTrim(deliverToCompID, (byte)0) );
		if (FixUtils.isSet(secureDataLen)) FixUtils.putFixTag( out, FixTags.SECUREDATALEN_INT, secureDataLen);
		if (FixUtils.isSet(secureData)) FixUtils.putFixTag( out, FixTags.SECUREDATA_INT, secureData, 0, Utils.lastIndexTrim(secureData, (byte)0) );
		FixUtils.putFixTag( out, FixTags.MSGSEQNUM_INT, msgSeqNum);
		if (FixUtils.isSet(senderSubID)) FixUtils.putFixTag( out, FixTags.SENDERSUBID_INT, senderSubID, 0, Utils.lastIndexTrim(senderSubID, (byte)0) );
		if (FixUtils.isSet(senderLocationID)) FixUtils.putFixTag( out, FixTags.SENDERLOCATIONID_INT, senderLocationID, 0, Utils.lastIndexTrim(senderLocationID, (byte)0) );
		if (FixUtils.isSet(targetSubID)) FixUtils.putFixTag( out, FixTags.TARGETSUBID_INT, targetSubID, 0, Utils.lastIndexTrim(targetSubID, (byte)0) );
		if (FixUtils.isSet(targetLocationID)) FixUtils.putFixTag( out, FixTags.TARGETLOCATIONID_INT, targetLocationID, 0, Utils.lastIndexTrim(targetLocationID, (byte)0) );
		if (FixUtils.isSet(onBehalfOfSubID)) FixUtils.putFixTag( out, FixTags.ONBEHALFOFSUBID_INT, onBehalfOfSubID, 0, Utils.lastIndexTrim(onBehalfOfSubID, (byte)0) );
		if (FixUtils.isSet(onBehalfOfLocationID)) FixUtils.putFixTag( out, FixTags.ONBEHALFOFLOCATIONID_INT, onBehalfOfLocationID, 0, Utils.lastIndexTrim(onBehalfOfLocationID, (byte)0) );
		if (FixUtils.isSet(deliverToSubID)) FixUtils.putFixTag( out, FixTags.DELIVERTOSUBID_INT, deliverToSubID, 0, Utils.lastIndexTrim(deliverToSubID, (byte)0) );
		if (FixUtils.isSet(deliverToLocationID)) FixUtils.putFixTag( out, FixTags.DELIVERTOLOCATIONID_INT, deliverToLocationID, 0, Utils.lastIndexTrim(deliverToLocationID, (byte)0) );
		if (FixUtils.isSet(possDupFlag)) FixUtils.putFixTag( out, FixTags.POSSDUPFLAG_INT, possDupFlag?(byte)'Y':(byte)'N' );
		if (FixUtils.isSet(possResend)) FixUtils.putFixTag( out, FixTags.POSSRESEND_INT, possResend?(byte)'Y':(byte)'N' );
		FixUtils.putFixTag( out, FixTags.SENDINGTIME_INT, sendingTime);
		if (FixUtils.isSet(origSendingTime)) FixUtils.putFixTag( out, FixTags.ORIGSENDINGTIME_INT, origSendingTime);
		if (FixUtils.isSet(xmlDataLen)) FixUtils.putFixTag( out, FixTags.XMLDATALEN_INT, xmlDataLen);
		if (FixUtils.isSet(xmlData)) FixUtils.putFixTag( out, FixTags.XMLDATA_INT, xmlData, 0, Utils.lastIndexTrim(xmlData, (byte)0) );
		if (FixUtils.isSet(messageEncoding)) FixUtils.putFixTag( out, FixTags.MESSAGEENCODING_INT, messageEncoding, 0, Utils.lastIndexTrim(messageEncoding, (byte)0) );
		if (FixUtils.isSet(lastMsgSeqNumProcessed)) FixUtils.putFixTag( out, FixTags.LASTMSGSEQNUMPROCESSED_INT, lastMsgSeqNumProcessed);
		if ( FixUtils.isSet(hopGrp.noHops) )hopGrp.encode( out );

		if (FixUtils.isSet(orderID)) FixUtils.putFixTag( out, FixTags.ORDERID_INT, orderID, 0, Utils.lastIndexTrim(orderID, (byte)0) );
		if (FixUtils.isSet(origClOrdID)) FixUtils.putFixTag( out, FixTags.ORIGCLORDID_INT, origClOrdID, 0, Utils.lastIndexTrim(origClOrdID, (byte)0) );
		if (FixUtils.isSet(clOrdID)) FixUtils.putFixTag( out, FixTags.CLORDID_INT, clOrdID, 0, Utils.lastIndexTrim(clOrdID, (byte)0) );
		if (FixUtils.isSet(secondaryClOrdID)) FixUtils.putFixTag( out, FixTags.SECONDARYCLORDID_INT, secondaryClOrdID, 0, Utils.lastIndexTrim(secondaryClOrdID, (byte)0) );
		if (FixUtils.isSet(clOrdLinkID)) FixUtils.putFixTag( out, FixTags.CLORDLINKID_INT, clOrdLinkID, 0, Utils.lastIndexTrim(clOrdLinkID, (byte)0) );
		if (FixUtils.isSet(origOrdModTime)) FixUtils.putFixTag( out, FixTags.ORIGORDMODTIME_INT, origOrdModTime);
		if (FixUtils.isSet(parties.noPartyIDs)) parties.encode( out );
		if (FixUtils.isSet(tradeOriginationDate)) FixUtils.putFixTag( out, FixTags.TRADEORIGINATIONDATE_INT, tradeOriginationDate);
		if (FixUtils.isSet(tradeDate)) FixUtils.putFixTag( out, FixTags.TRADEDATE_INT, tradeDate);
		if (FixUtils.isSet(account)) FixUtils.putFixTag( out, FixTags.ACCOUNT_INT, account, 0, Utils.lastIndexTrim(account, (byte)0) );
		if (FixUtils.isSet(acctIDSource)) FixUtils.putFixTag( out, FixTags.ACCTIDSOURCE_INT, acctIDSource);
		if (FixUtils.isSet(accountType)) FixUtils.putFixTag( out, FixTags.ACCOUNTTYPE_INT, accountType);
		if (FixUtils.isSet(dayBookingInst)) FixUtils.putFixTag( out, FixTags.DAYBOOKINGINST_INT, dayBookingInst );
		if (FixUtils.isSet(bookingUnit)) FixUtils.putFixTag( out, FixTags.BOOKINGUNIT_INT, bookingUnit );
		if (FixUtils.isSet(preallocMethod)) FixUtils.putFixTag( out, FixTags.PREALLOCMETHOD_INT, preallocMethod );
		if (FixUtils.isSet(allocID)) FixUtils.putFixTag( out, FixTags.ALLOCID_INT, allocID, 0, Utils.lastIndexTrim(allocID, (byte)0) );
		if (FixUtils.isSet(preAllocMlegGrp.noAllocs)) preAllocMlegGrp.encode( out );
		if (FixUtils.isSet(settlType)) FixUtils.putFixTag( out, FixTags.SETTLTYPE_INT, settlType, 0, Utils.lastIndexTrim(settlType, (byte)0) );
		if (FixUtils.isSet(settlDate)) FixUtils.putFixTag( out, FixTags.SETTLDATE_INT, settlDate);
		if (FixUtils.isSet(cashMargin)) FixUtils.putFixTag( out, FixTags.CASHMARGIN_INT, cashMargin );
		if (FixUtils.isSet(clearingFeeIndicator)) FixUtils.putFixTag( out, FixTags.CLEARINGFEEINDICATOR_INT, clearingFeeIndicator, 0, Utils.lastIndexTrim(clearingFeeIndicator, (byte)0) );
		if (FixUtils.isSet(handlInst)) FixUtils.putFixTag( out, FixTags.HANDLINST_INT, handlInst );
		if (FixUtils.isSet(execInst)) FixUtils.putFixTag( out, FixTags.EXECINST_INT, execInst, 0, Utils.lastIndexTrim(execInst, (byte)0) );
		if (FixUtils.isSet(minQty)) FixUtils.putFixFloatTag( out, FixTags.MINQTY_INT, minQty);
		if (FixUtils.isSet(matchIncrement)) FixUtils.putFixFloatTag( out, FixTags.MATCHINCREMENT_INT, matchIncrement);
		if (FixUtils.isSet(maxPriceLevels)) FixUtils.putFixTag( out, FixTags.MAXPRICELEVELS_INT, maxPriceLevels);
		if (FixUtils.isSet(displayInstruction.displayQty)) displayInstruction.encode( out );
		if (FixUtils.isSet(maxFloor)) FixUtils.putFixFloatTag( out, FixTags.MAXFLOOR_INT, maxFloor);
		if (FixUtils.isSet(exDestination)) FixUtils.putFixTag( out, FixTags.EXDESTINATION_INT, exDestination, 0, Utils.lastIndexTrim(exDestination, (byte)0) );
		if (FixUtils.isSet(exDestinationIDSource)) FixUtils.putFixTag( out, FixTags.EXDESTINATIONIDSOURCE_INT, exDestinationIDSource );
		if (FixUtils.isSet(trdgSesGrp.noTradingSessions)) trdgSesGrp.encode( out );
		if (FixUtils.isSet(processCode)) FixUtils.putFixTag( out, FixTags.PROCESSCODE_INT, processCode );
		FixUtils.putFixTag( out, FixTags.SIDE_INT, side );
		if (FixUtils.isSet(instrument.symbol)) instrument.encode( out );
		if (FixUtils.isSet(undInstrmtGrp.noUnderlyings)) undInstrmtGrp.encode( out );
		if (FixUtils.isSet(prevClosePx)) FixUtils.putFixFloatTag( out, FixTags.PREVCLOSEPX_INT, prevClosePx);
		if (FixUtils.isSet(swapPoints)) FixUtils.putFixFloatTag( out, FixTags.SWAPPOINTS_INT, swapPoints);
		if (FixUtils.isSet(legOrdGrp.noLegs)) legOrdGrp.encode( out );
		if (FixUtils.isSet(locateReqd)) FixUtils.putFixTag( out, FixTags.LOCATEREQD_INT, locateReqd?(byte)'Y':(byte)'N' );
		FixUtils.putFixTag( out, FixTags.TRANSACTTIME_INT, transactTime);
		if (FixUtils.isSet(qtyType)) FixUtils.putFixTag( out, FixTags.QTYTYPE_INT, qtyType);
		if (FixUtils.isSet(orderQtyData.orderQty)) orderQtyData.encode( out );
		FixUtils.putFixTag( out, FixTags.ORDTYPE_INT, ordType );
		if (FixUtils.isSet(multilegModel)) FixUtils.putFixTag( out, FixTags.MULTILEGMODEL_INT, multilegModel);
		if (FixUtils.isSet(multilegPriceMethod)) FixUtils.putFixTag( out, FixTags.MULTILEGPRICEMETHOD_INT, multilegPriceMethod);
		if (FixUtils.isSet(priceType)) FixUtils.putFixTag( out, FixTags.PRICETYPE_INT, priceType);
		if (FixUtils.isSet(price)) FixUtils.putFixFloatTag( out, FixTags.PRICE_INT, price);
		if (FixUtils.isSet(priceProtectionScope)) FixUtils.putFixTag( out, FixTags.PRICEPROTECTIONSCOPE_INT, priceProtectionScope );
		if (FixUtils.isSet(stopPx)) FixUtils.putFixFloatTag( out, FixTags.STOPPX_INT, stopPx);
		if (FixUtils.isSet(triggeringInstruction.triggerType)) triggeringInstruction.encode( out );
		if (FixUtils.isSet(currency)) FixUtils.putFixTag( out, FixTags.CURRENCY_INT, currency, 0, Utils.lastIndexTrim(currency, (byte)0) );
		if (FixUtils.isSet(complianceID)) FixUtils.putFixTag( out, FixTags.COMPLIANCEID_INT, complianceID, 0, Utils.lastIndexTrim(complianceID, (byte)0) );
		if (FixUtils.isSet(solicitedFlag)) FixUtils.putFixTag( out, FixTags.SOLICITEDFLAG_INT, solicitedFlag?(byte)'Y':(byte)'N' );
		if (FixUtils.isSet(iOIID)) FixUtils.putFixTag( out, FixTags.IOIID_INT, iOIID, 0, Utils.lastIndexTrim(iOIID, (byte)0) );
		if (FixUtils.isSet(quoteID)) FixUtils.putFixTag( out, FixTags.QUOTEID_INT, quoteID, 0, Utils.lastIndexTrim(quoteID, (byte)0) );
		if (FixUtils.isSet(timeInForce)) FixUtils.putFixTag( out, FixTags.TIMEINFORCE_INT, timeInForce );
		if (FixUtils.isSet(effectiveTime)) FixUtils.putFixTag( out, FixTags.EFFECTIVETIME_INT, effectiveTime);
		if (FixUtils.isSet(expireDate)) FixUtils.putFixTag( out, FixTags.EXPIREDATE_INT, expireDate);
		if (FixUtils.isSet(expireTime)) FixUtils.putFixTag( out, FixTags.EXPIRETIME_INT, expireTime);
		if (FixUtils.isSet(gTBookingInst)) FixUtils.putFixTag( out, FixTags.GTBOOKINGINST_INT, gTBookingInst);
		if (FixUtils.isSet(commissionData.commission)) commissionData.encode( out );
		if (FixUtils.isSet(orderCapacity)) FixUtils.putFixTag( out, FixTags.ORDERCAPACITY_INT, orderCapacity );
		if (FixUtils.isSet(orderRestrictions)) FixUtils.putFixTag( out, FixTags.ORDERRESTRICTIONS_INT, orderRestrictions, 0, Utils.lastIndexTrim(orderRestrictions, (byte)0) );
		if (FixUtils.isSet(preTradeAnonymity)) FixUtils.putFixTag( out, FixTags.PRETRADEANONYMITY_INT, preTradeAnonymity?(byte)'Y':(byte)'N' );
		if (FixUtils.isSet(custOrderCapacity)) FixUtils.putFixTag( out, FixTags.CUSTORDERCAPACITY_INT, custOrderCapacity);
		if (FixUtils.isSet(forexReq)) FixUtils.putFixTag( out, FixTags.FOREXREQ_INT, forexReq?(byte)'Y':(byte)'N' );
		if (FixUtils.isSet(settlCurrency)) FixUtils.putFixTag( out, FixTags.SETTLCURRENCY_INT, settlCurrency, 0, Utils.lastIndexTrim(settlCurrency, (byte)0) );
		if (FixUtils.isSet(bookingType)) FixUtils.putFixTag( out, FixTags.BOOKINGTYPE_INT, bookingType);
		if (FixUtils.isSet(text)) FixUtils.putFixTag( out, FixTags.TEXT_INT, text, 0, Utils.lastIndexTrim(text, (byte)0) );
		if (FixUtils.isSet(encodedTextLen)) FixUtils.putFixTag( out, FixTags.ENCODEDTEXTLEN_INT, encodedTextLen);
		if (FixUtils.isSet(encodedText)) FixUtils.putFixTag( out, FixTags.ENCODEDTEXT_INT, encodedText, 0, Utils.lastIndexTrim(encodedText, (byte)0) );
		if (FixUtils.isSet(positionEffect)) FixUtils.putFixTag( out, FixTags.POSITIONEFFECT_INT, positionEffect );
		if (FixUtils.isSet(coveredOrUncovered)) FixUtils.putFixTag( out, FixTags.COVEREDORUNCOVERED_INT, coveredOrUncovered);
		if (FixUtils.isSet(maxShow)) FixUtils.putFixFloatTag( out, FixTags.MAXSHOW_INT, maxShow);
		if (FixUtils.isSet(pegInstructions.pegOffsetValue)) pegInstructions.encode( out );
		if (FixUtils.isSet(discretionInstructions.discretionInst)) discretionInstructions.encode( out );
		if (FixUtils.isSet(targetStrategy)) FixUtils.putFixTag( out, FixTags.TARGETSTRATEGY_INT, targetStrategy);
		if (FixUtils.isSet(strategyParametersGrp.noStrategyParameters)) strategyParametersGrp.encode( out );
		if (FixUtils.isSet(targetStrategyParameters)) FixUtils.putFixTag( out, FixTags.TARGETSTRATEGYPARAMETERS_INT, targetStrategyParameters, 0, Utils.lastIndexTrim(targetStrategyParameters, (byte)0) );
		if (FixUtils.isSet(riskFreeRate)) FixUtils.putFixFloatTag( out, FixTags.RISKFREERATE_INT, riskFreeRate);
		if (FixUtils.isSet(participationRate)) FixUtils.putFixFloatTag( out, FixTags.PARTICIPATIONRATE_INT, participationRate);
		if (FixUtils.isSet(cancellationRights)) FixUtils.putFixTag( out, FixTags.CANCELLATIONRIGHTS_INT, cancellationRights );
		if (FixUtils.isSet(moneyLaunderingStatus)) FixUtils.putFixTag( out, FixTags.MONEYLAUNDERINGSTATUS_INT, moneyLaunderingStatus );
		if (FixUtils.isSet(registID)) FixUtils.putFixTag( out, FixTags.REGISTID_INT, registID, 0, Utils.lastIndexTrim(registID, (byte)0) );
		if (FixUtils.isSet(designation)) FixUtils.putFixTag( out, FixTags.DESIGNATION_INT, designation, 0, Utils.lastIndexTrim(designation, (byte)0) );
		if (FixUtils.isSet(multiLegRptTypeReq)) FixUtils.putFixTag( out, FixTags.MULTILEGRPTTYPEREQ_INT, multiLegRptTypeReq);
		// the checksum at the end

		int checkSumStart = out.position();
		out.position( msgLengthValueStart );
		bodyLength = checkSumStart - msgTypeStart;
		Utils.longToNumeric( out, bodyLength, Utils.digits(FixConstants.MAX_MESSAGE_SIZE) );

		checkSum = FixUtils.computeChecksum( out, msgStart, checkSumStart );
		out.position( checkSumStart );
		FixUtils.putFixTag( out, FixTags.CHECKSUM_INT, checkSum );

		out.flip();

	}
	@Override		
	public void printBuffer(ByteBuffer out) {

		out.put(buf);

		out.flip();

	}

	/**
	 * If you use toString for any other purpose than administrative printout.
	 * You will end up in nifelheim!
	**/
	@Override
	public String toString() {
		char sep = '\n';
		if (Boolean.getBoolean("fix.useOneLiner")) sep = SOH;

		String s = "BeginString(8)=" + new String(BEGINSTRING_VALUE) + sep;
		s += "BodyLength(9)=" + bodyLength + sep;
		s += "MsgType(35)=" + new String(MsgTypes.MULTILEGORDERCANCELREPLACE) + sep;

		try {
			// print all fields including the header

			if (FixUtils.isSet(applVerID)) s += "ApplVerID(1128)=" + new String(applVerID) + sep;
			if (FixUtils.isSet(cstmApplVerID)) s += "CstmApplVerID(1129)=" + new String(cstmApplVerID) + sep;
			if (FixUtils.isSet(applExtID)) s += "ApplExtID(1156)=" + String.valueOf(applExtID) + sep;
			 s += "SenderCompID(49)=" + new String(senderCompID) + sep;
			 s += "TargetCompID(56)=" + new String(targetCompID) + sep;
			if (FixUtils.isSet(onBehalfOfCompID)) s += "OnBehalfOfCompID(115)=" + new String(onBehalfOfCompID) + sep;
			if (FixUtils.isSet(deliverToCompID)) s += "DeliverToCompID(128)=" + new String(deliverToCompID) + sep;
			if (FixUtils.isSet(secureDataLen)) s += "SecureDataLen(90)=" + String.valueOf(secureDataLen) + sep;
			if (FixUtils.isSet(secureData)) s += "SecureData(91)=" + new String(secureData) + sep;
			 s += "MsgSeqNum(34)=" + String.valueOf(msgSeqNum) + sep;
			if (FixUtils.isSet(senderSubID)) s += "SenderSubID(50)=" + new String(senderSubID) + sep;
			if (FixUtils.isSet(senderLocationID)) s += "SenderLocationID(142)=" + new String(senderLocationID) + sep;
			if (FixUtils.isSet(targetSubID)) s += "TargetSubID(57)=" + new String(targetSubID) + sep;
			if (FixUtils.isSet(targetLocationID)) s += "TargetLocationID(143)=" + new String(targetLocationID) + sep;
			if (FixUtils.isSet(onBehalfOfSubID)) s += "OnBehalfOfSubID(116)=" + new String(onBehalfOfSubID) + sep;
			if (FixUtils.isSet(onBehalfOfLocationID)) s += "OnBehalfOfLocationID(144)=" + new String(onBehalfOfLocationID) + sep;
			if (FixUtils.isSet(deliverToSubID)) s += "DeliverToSubID(129)=" + new String(deliverToSubID) + sep;
			if (FixUtils.isSet(deliverToLocationID)) s += "DeliverToLocationID(145)=" + new String(deliverToLocationID) + sep;
			if (FixUtils.isSet(possDupFlag)) s += "PossDupFlag(43)=" + String.valueOf(possDupFlag) + sep;
			if (FixUtils.isSet(possResend)) s += "PossResend(97)=" + String.valueOf(possResend) + sep;
			 s += "SendingTime(52)=" + new String(sendingTime) + sep;
			if (FixUtils.isSet(origSendingTime)) s += "OrigSendingTime(122)=" + new String(origSendingTime) + sep;
			if (FixUtils.isSet(xmlDataLen)) s += "XmlDataLen(212)=" + String.valueOf(xmlDataLen) + sep;
			if (FixUtils.isSet(xmlData)) s += "XmlData(213)=" + new String(xmlData) + sep;
			if (FixUtils.isSet(messageEncoding)) s += "MessageEncoding(347)=" + new String(messageEncoding) + sep;
			if (FixUtils.isSet(lastMsgSeqNumProcessed)) s += "LastMsgSeqNumProcessed(369)=" + String.valueOf(lastMsgSeqNumProcessed) + sep;
			if (FixUtils.isSet(hopGrp.noHops)) s += hopGrp.toString();

			if (FixUtils.isSet(orderID)) s += "OrderID(37)=" + new String(orderID) + sep;
			if (FixUtils.isSet(origClOrdID)) s += "OrigClOrdID(41)=" + new String(origClOrdID) + sep;
			if (FixUtils.isSet(clOrdID)) s += "ClOrdID(11)=" + new String(clOrdID) + sep;
			if (FixUtils.isSet(secondaryClOrdID)) s += "SecondaryClOrdID(526)=" + new String(secondaryClOrdID) + sep;
			if (FixUtils.isSet(clOrdLinkID)) s += "ClOrdLinkID(583)=" + new String(clOrdLinkID) + sep;
			if (FixUtils.isSet(origOrdModTime)) s += "OrigOrdModTime(586)=" + new String(origOrdModTime) + sep;
			if (FixUtils.isSet(parties.noPartyIDs)) s += parties.toString();
			if (FixUtils.isSet(tradeOriginationDate)) s += "TradeOriginationDate(229)=" + new String(tradeOriginationDate) + sep;
			if (FixUtils.isSet(tradeDate)) s += "TradeDate(75)=" + new String(tradeDate) + sep;
			if (FixUtils.isSet(account)) s += "Account(1)=" + new String(account) + sep;
			if (FixUtils.isSet(acctIDSource)) s += "AcctIDSource(660)=" + String.valueOf(acctIDSource) + sep;
			if (FixUtils.isSet(accountType)) s += "AccountType(581)=" + String.valueOf(accountType) + sep;
			if (FixUtils.isSet(dayBookingInst)) s += "DayBookingInst(589)=" + String.valueOf(dayBookingInst) + sep;
			if (FixUtils.isSet(bookingUnit)) s += "BookingUnit(590)=" + String.valueOf(bookingUnit) + sep;
			if (FixUtils.isSet(preallocMethod)) s += "PreallocMethod(591)=" + String.valueOf(preallocMethod) + sep;
			if (FixUtils.isSet(allocID)) s += "AllocID(70)=" + new String(allocID) + sep;
			if (FixUtils.isSet(preAllocMlegGrp.noAllocs)) s += preAllocMlegGrp.toString();
			if (FixUtils.isSet(settlType)) s += "SettlType(63)=" + new String(settlType) + sep;
			if (FixUtils.isSet(settlDate)) s += "SettlDate(64)=" + new String(settlDate) + sep;
			if (FixUtils.isSet(cashMargin)) s += "CashMargin(544)=" + String.valueOf(cashMargin) + sep;
			if (FixUtils.isSet(clearingFeeIndicator)) s += "ClearingFeeIndicator(635)=" + new String(clearingFeeIndicator) + sep;
			if (FixUtils.isSet(handlInst)) s += "HandlInst(21)=" + String.valueOf(handlInst) + sep;
			if (FixUtils.isSet(execInst)) s += "ExecInst(18)=" + new String(execInst) + sep;
			if (FixUtils.isSet(minQty)) s += "MinQty(110)=" + String.valueOf(minQty) + sep;
			if (FixUtils.isSet(matchIncrement)) s += "MatchIncrement(1089)=" + String.valueOf(matchIncrement) + sep;
			if (FixUtils.isSet(maxPriceLevels)) s += "MaxPriceLevels(1090)=" + String.valueOf(maxPriceLevels) + sep;
			if (FixUtils.isSet(displayInstruction.displayQty)) s += displayInstruction.toString();
			if (FixUtils.isSet(maxFloor)) s += "MaxFloor(111)=" + String.valueOf(maxFloor) + sep;
			if (FixUtils.isSet(exDestination)) s += "ExDestination(100)=" + new String(exDestination) + sep;
			if (FixUtils.isSet(exDestinationIDSource)) s += "ExDestinationIDSource(1133)=" + String.valueOf(exDestinationIDSource) + sep;
			if (FixUtils.isSet(trdgSesGrp.noTradingSessions)) s += trdgSesGrp.toString();
			if (FixUtils.isSet(processCode)) s += "ProcessCode(81)=" + String.valueOf(processCode) + sep;
			 s += "Side(54)=" + String.valueOf(side) + sep;
			if (FixUtils.isSet(instrument.symbol)) s += instrument.toString();
			if (FixUtils.isSet(undInstrmtGrp.noUnderlyings)) s += undInstrmtGrp.toString();
			if (FixUtils.isSet(prevClosePx)) s += "PrevClosePx(140)=" + String.valueOf(prevClosePx) + sep;
			if (FixUtils.isSet(swapPoints)) s += "SwapPoints(1069)=" + String.valueOf(swapPoints) + sep;
			if (FixUtils.isSet(legOrdGrp.noLegs)) s += legOrdGrp.toString();
			if (FixUtils.isSet(locateReqd)) s += "LocateReqd(114)=" + String.valueOf(locateReqd) + sep;
			 s += "TransactTime(60)=" + new String(transactTime) + sep;
			if (FixUtils.isSet(qtyType)) s += "QtyType(854)=" + String.valueOf(qtyType) + sep;
			if (FixUtils.isSet(orderQtyData.orderQty)) s += orderQtyData.toString();
			 s += "OrdType(40)=" + String.valueOf(ordType) + sep;
			if (FixUtils.isSet(multilegModel)) s += "MultilegModel(1377)=" + String.valueOf(multilegModel) + sep;
			if (FixUtils.isSet(multilegPriceMethod)) s += "MultilegPriceMethod(1378)=" + String.valueOf(multilegPriceMethod) + sep;
			if (FixUtils.isSet(priceType)) s += "PriceType(423)=" + String.valueOf(priceType) + sep;
			if (FixUtils.isSet(price)) s += "Price(44)=" + String.valueOf(price) + sep;
			if (FixUtils.isSet(priceProtectionScope)) s += "PriceProtectionScope(1092)=" + String.valueOf(priceProtectionScope) + sep;
			if (FixUtils.isSet(stopPx)) s += "StopPx(99)=" + String.valueOf(stopPx) + sep;
			if (FixUtils.isSet(triggeringInstruction.triggerType)) s += triggeringInstruction.toString();
			if (FixUtils.isSet(currency)) s += "Currency(15)=" + new String(currency) + sep;
			if (FixUtils.isSet(complianceID)) s += "ComplianceID(376)=" + new String(complianceID) + sep;
			if (FixUtils.isSet(solicitedFlag)) s += "SolicitedFlag(377)=" + String.valueOf(solicitedFlag) + sep;
			if (FixUtils.isSet(iOIID)) s += "IOIID(23)=" + new String(iOIID) + sep;
			if (FixUtils.isSet(quoteID)) s += "QuoteID(117)=" + new String(quoteID) + sep;
			if (FixUtils.isSet(timeInForce)) s += "TimeInForce(59)=" + String.valueOf(timeInForce) + sep;
			if (FixUtils.isSet(effectiveTime)) s += "EffectiveTime(168)=" + new String(effectiveTime) + sep;
			if (FixUtils.isSet(expireDate)) s += "ExpireDate(432)=" + new String(expireDate) + sep;
			if (FixUtils.isSet(expireTime)) s += "ExpireTime(126)=" + new String(expireTime) + sep;
			if (FixUtils.isSet(gTBookingInst)) s += "GTBookingInst(427)=" + String.valueOf(gTBookingInst) + sep;
			if (FixUtils.isSet(commissionData.commission)) s += commissionData.toString();
			if (FixUtils.isSet(orderCapacity)) s += "OrderCapacity(528)=" + String.valueOf(orderCapacity) + sep;
			if (FixUtils.isSet(orderRestrictions)) s += "OrderRestrictions(529)=" + new String(orderRestrictions) + sep;
			if (FixUtils.isSet(preTradeAnonymity)) s += "PreTradeAnonymity(1091)=" + String.valueOf(preTradeAnonymity) + sep;
			if (FixUtils.isSet(custOrderCapacity)) s += "CustOrderCapacity(582)=" + String.valueOf(custOrderCapacity) + sep;
			if (FixUtils.isSet(forexReq)) s += "ForexReq(121)=" + String.valueOf(forexReq) + sep;
			if (FixUtils.isSet(settlCurrency)) s += "SettlCurrency(120)=" + new String(settlCurrency) + sep;
			if (FixUtils.isSet(bookingType)) s += "BookingType(775)=" + String.valueOf(bookingType) + sep;
			if (FixUtils.isSet(text)) s += "Text(58)=" + new String(text) + sep;
			if (FixUtils.isSet(encodedTextLen)) s += "EncodedTextLen(354)=" + String.valueOf(encodedTextLen) + sep;
			if (FixUtils.isSet(encodedText)) s += "EncodedText(355)=" + new String(encodedText) + sep;
			if (FixUtils.isSet(positionEffect)) s += "PositionEffect(77)=" + String.valueOf(positionEffect) + sep;
			if (FixUtils.isSet(coveredOrUncovered)) s += "CoveredOrUncovered(203)=" + String.valueOf(coveredOrUncovered) + sep;
			if (FixUtils.isSet(maxShow)) s += "MaxShow(210)=" + String.valueOf(maxShow) + sep;
			if (FixUtils.isSet(pegInstructions.pegOffsetValue)) s += pegInstructions.toString();
			if (FixUtils.isSet(discretionInstructions.discretionInst)) s += discretionInstructions.toString();
			if (FixUtils.isSet(targetStrategy)) s += "TargetStrategy(847)=" + String.valueOf(targetStrategy) + sep;
			if (FixUtils.isSet(strategyParametersGrp.noStrategyParameters)) s += strategyParametersGrp.toString();
			if (FixUtils.isSet(targetStrategyParameters)) s += "TargetStrategyParameters(848)=" + new String(targetStrategyParameters) + sep;
			if (FixUtils.isSet(riskFreeRate)) s += "RiskFreeRate(1190)=" + String.valueOf(riskFreeRate) + sep;
			if (FixUtils.isSet(participationRate)) s += "ParticipationRate(849)=" + String.valueOf(participationRate) + sep;
			if (FixUtils.isSet(cancellationRights)) s += "CancellationRights(480)=" + String.valueOf(cancellationRights) + sep;
			if (FixUtils.isSet(moneyLaunderingStatus)) s += "MoneyLaunderingStatus(481)=" + String.valueOf(moneyLaunderingStatus) + sep;
			if (FixUtils.isSet(registID)) s += "RegistID(513)=" + new String(registID) + sep;
			if (FixUtils.isSet(designation)) s += "Designation(494)=" + new String(designation) + sep;
			if (FixUtils.isSet(multiLegRptTypeReq)) s += "MultiLegRptTypeReq(563)=" + String.valueOf(multiLegRptTypeReq) + sep;

			s += "checkSum(10)=" + String.valueOf(checkSum) + sep;

		} catch(Exception e) {  };

		return s;
	}

	@Override
	public boolean equals(Object o) {
		if (! ( o instanceof FixMultilegOrderCancelReplace)) return false;

			FixMultilegOrderCancelReplace msg = (FixMultilegOrderCancelReplace) o;

		if ( ! super.equals(msg) ) return false;

		if (!Utils.equals( orderID, msg.orderID)) return false;

		if (!Utils.equals( origClOrdID, msg.origClOrdID)) return false;

		if (!Utils.equals( clOrdID, msg.clOrdID)) return false;

		if (!Utils.equals( secondaryClOrdID, msg.secondaryClOrdID)) return false;

		if (!Utils.equals( clOrdLinkID, msg.clOrdLinkID)) return false;

		if (!parties.equals(msg.parties)) return false;

		if (!Utils.equals( account, msg.account)) return false;

		if (!( acctIDSource==msg.acctIDSource)) return false;

		if (!( accountType==msg.accountType)) return false;

		if (!( dayBookingInst==msg.dayBookingInst)) return false;

		if (!( bookingUnit==msg.bookingUnit)) return false;

		if (!( preallocMethod==msg.preallocMethod)) return false;

		if (!Utils.equals( allocID, msg.allocID)) return false;

		if (!preAllocMlegGrp.equals(msg.preAllocMlegGrp)) return false;

		if (!Utils.equals( settlType, msg.settlType)) return false;

		if (!( cashMargin==msg.cashMargin)) return false;

		if (!Utils.equals( clearingFeeIndicator, msg.clearingFeeIndicator)) return false;

		if (!( handlInst==msg.handlInst)) return false;

		if (!Utils.equals( execInst, msg.execInst)) return false;

		if (!( minQty==msg.minQty)) return false;

		if (!( matchIncrement==msg.matchIncrement)) return false;

		if (!( maxPriceLevels==msg.maxPriceLevels)) return false;

		if (!displayInstruction.equals(msg.displayInstruction)) return false;

		if (!( maxFloor==msg.maxFloor)) return false;

		if (!Utils.equals( exDestination, msg.exDestination)) return false;

		if (!( exDestinationIDSource==msg.exDestinationIDSource)) return false;

		if (!trdgSesGrp.equals(msg.trdgSesGrp)) return false;

		if (!( processCode==msg.processCode)) return false;

		if (!( side==msg.side)) return false;

		if (!instrument.equals(msg.instrument)) return false;

		if (!undInstrmtGrp.equals(msg.undInstrmtGrp)) return false;

		if (!( prevClosePx==msg.prevClosePx)) return false;

		if (!( swapPoints==msg.swapPoints)) return false;

		if (!legOrdGrp.equals(msg.legOrdGrp)) return false;

		if (!( locateReqd==msg.locateReqd)) return false;

		if (!( qtyType==msg.qtyType)) return false;

		if (!orderQtyData.equals(msg.orderQtyData)) return false;

		if (!( ordType==msg.ordType)) return false;

		if (!( multilegModel==msg.multilegModel)) return false;

		if (!( multilegPriceMethod==msg.multilegPriceMethod)) return false;

		if (!( priceType==msg.priceType)) return false;

		if (!( price==msg.price)) return false;

		if (!( priceProtectionScope==msg.priceProtectionScope)) return false;

		if (!( stopPx==msg.stopPx)) return false;

		if (!triggeringInstruction.equals(msg.triggeringInstruction)) return false;

		if (!Utils.equals( currency, msg.currency)) return false;

		if (!Utils.equals( complianceID, msg.complianceID)) return false;

		if (!( solicitedFlag==msg.solicitedFlag)) return false;

		if (!Utils.equals( iOIID, msg.iOIID)) return false;

		if (!Utils.equals( quoteID, msg.quoteID)) return false;

		if (!( timeInForce==msg.timeInForce)) return false;

		if (!( gTBookingInst==msg.gTBookingInst)) return false;

		if (!commissionData.equals(msg.commissionData)) return false;

		if (!( orderCapacity==msg.orderCapacity)) return false;

		if (!Utils.equals( orderRestrictions, msg.orderRestrictions)) return false;

		if (!( preTradeAnonymity==msg.preTradeAnonymity)) return false;

		if (!( custOrderCapacity==msg.custOrderCapacity)) return false;

		if (!( forexReq==msg.forexReq)) return false;

		if (!Utils.equals( settlCurrency, msg.settlCurrency)) return false;

		if (!( bookingType==msg.bookingType)) return false;

		if (!Utils.equals( text, msg.text)) return false;

		if (!( encodedTextLen==msg.encodedTextLen)) return false;

		if (!Utils.equals( encodedText, msg.encodedText)) return false;

		if (!( positionEffect==msg.positionEffect)) return false;

		if (!( coveredOrUncovered==msg.coveredOrUncovered)) return false;

		if (!( maxShow==msg.maxShow)) return false;

		if (!pegInstructions.equals(msg.pegInstructions)) return false;

		if (!discretionInstructions.equals(msg.discretionInstructions)) return false;

		if (!( targetStrategy==msg.targetStrategy)) return false;

		if (!strategyParametersGrp.equals(msg.strategyParametersGrp)) return false;

		if (!Utils.equals( targetStrategyParameters, msg.targetStrategyParameters)) return false;

		if (!( riskFreeRate==msg.riskFreeRate)) return false;

		if (!( participationRate==msg.participationRate)) return false;

		if (!( cancellationRights==msg.cancellationRights)) return false;

		if (!( moneyLaunderingStatus==msg.moneyLaunderingStatus)) return false;

		if (!Utils.equals( registID, msg.registID)) return false;

		if (!Utils.equals( designation, msg.designation)) return false;

		if (!( multiLegRptTypeReq==msg.multiLegRptTypeReq)) return false;

		return true;
	}
}
