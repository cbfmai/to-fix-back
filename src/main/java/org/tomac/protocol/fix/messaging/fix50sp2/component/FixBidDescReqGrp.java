package org.tomac.protocol.fix.messaging.fix50sp2.component;

// DO NOT EDIT!!!
// This file is generated by FixMessageGenerator.
// If you need additional functionality, put it in a helper class
// that does not live in this folder!!!  Any java file in this folder 
// will be deleted upon the next run of the FixMessageGenerator!

import java.nio.ByteBuffer;

import org.tomac.protocol.fix.FixUtils;
import org.tomac.protocol.fix.FixSessionException;
import org.tomac.protocol.fix.FixGarbledException;
import org.tomac.utils.Utils;
import org.tomac.protocol.fix.FixConstants;


import org.tomac.protocol.fix.messaging.fix50sp2.FixMessageInfo.*;
import org.tomac.protocol.fix.messaging.fix50sp2.FixTags;

public class FixBidDescReqGrp
{

	public int noBidDescriptors;
	public BidDescReqGrp[] group;

	public void getAll(int noBidDescriptors, ByteBuffer buf) throws FixSessionException {
		this.noBidDescriptors = noBidDescriptors;

		if (noBidDescriptors < 1) throw new FixSessionException("asdasd");
		// this will leak memory if we grow the group
		if (group.length < noBidDescriptors) 
			group = new BidDescReqGrp[noBidDescriptors];

		for ( int i = 0; i < noBidDescriptors; i++ ) 
			group[i].getAllGroup(buf);
	}

	public void clear() {
		for (int i = 0; i<noBidDescriptors; i++)
			group[i].clear();
	}
	public void encode(ByteBuffer out) {
		for (int i = 0; i<noBidDescriptors; i++)
			group[i].encode(out);
	}
	public boolean isSet() {
		for (int i = 0; i<noBidDescriptors; i++)
			if (group[i].isSet()) return true;
		return false;
	}

	@Override
	public String toString() {
		String s = "";
		for (int i = 0; i<noBidDescriptors; i++)
			s += group[i].toString();
		return s;
	}

public class BidDescReqGrp implements FixComponent
{

	public long bidDescriptorType = 0;
	public byte[] bidDescriptor;
	public long sideValueInd = 0;
	public long liquidityValue = 0;
	public long liquidityNumSecurities = 0;
	public long liquidityPctLow = 0;
	public long liquidityPctHigh = 0;
	public long eFPTrackingError = 0;
	public long fairValue = 0;
	public long outsideIndexPct = 0;
	public long valueOfFutures = 0;

	public BidDescReqGrp() {
		super();

		bidDescriptor = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		this.clear();

	}

	@Override
	public void clear()
	{

		// clear out all the fields that aren't msgType

		bidDescriptorType = Long.MAX_VALUE;		
		Utils.fill( bidDescriptor, (byte)0 );
		sideValueInd = Long.MAX_VALUE;		
		liquidityValue = Long.MAX_VALUE;		
		liquidityNumSecurities = Long.MAX_VALUE;		
		liquidityPctLow = Long.MAX_VALUE;		
		liquidityPctHigh = Long.MAX_VALUE;		
		eFPTrackingError = Long.MAX_VALUE;		
		fairValue = Long.MAX_VALUE;		
		outsideIndexPct = Long.MAX_VALUE;		
		valueOfFutures = Long.MAX_VALUE;		
	}

	public void getAllGroup(ByteBuffer buf) throws FixSessionException
	{

		int startTagPosition = buf.position();

		int id = FixUtils.getTagId( buf );
		int lastTagPosition = buf.position();
			ByteBuffer value;

			value = buf;

			if(id == FixTags.BIDDESCRIPTORTYPE_INT) {
				bidDescriptorType = FixUtils.getTagIntValue( value );
				if (!BidDescriptorType.isValid(bidDescriptorType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + bidDescriptorType + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.BIDDESCRIPTOR_INT) {
				bidDescriptor = FixUtils.getTagStringValue(value, bidDescriptor);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.SIDEVALUEIND_INT) {
				sideValueInd = FixUtils.getTagIntValue( value );
				if (!SideValueInd.isValid(sideValueInd) ) throw new FixSessionException(buf, "Invalid enumerated value(" + sideValueInd + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.LIQUIDITYVALUE_INT) {
				liquidityValue = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.LIQUIDITYNUMSECURITIES_INT) {
				liquidityNumSecurities = FixUtils.getTagIntValue( value );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.LIQUIDITYPCTLOW_INT) {
				liquidityPctLow = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.LIQUIDITYPCTHIGH_INT) {
				liquidityPctHigh = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.EFPTRACKINGERROR_INT) {
				eFPTrackingError = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.FAIRVALUE_INT) {
				fairValue = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.OUTSIDEINDEXPCT_INT) {
				outsideIndexPct = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.VALUEOFFUTURES_INT) {
				valueOfFutures = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			id = checkRequiredTags();
			if (id > 0) throw new FixSessionException(buf, "Required tag missing: " + id );

			buf.position( lastTagPosition );
			return;

	}

	private int checkRequiredTags() {
		int tag = -1;

		return tag;

	}
	@Override
	public boolean isSet()
	{
		if (FixUtils.isSet(bidDescriptorType)) return true;
		if (FixUtils.isSet(bidDescriptor)) return true;
		if (FixUtils.isSet(sideValueInd)) return true;
		if (FixUtils.isSet(liquidityValue)) return true;
		if (FixUtils.isSet(liquidityNumSecurities)) return true;
		if (FixUtils.isSet(liquidityPctLow)) return true;
		if (FixUtils.isSet(liquidityPctHigh)) return true;
		if (FixUtils.isSet(eFPTrackingError)) return true;
		if (FixUtils.isSet(fairValue)) return true;
		if (FixUtils.isSet(outsideIndexPct)) return true;
		if (FixUtils.isSet(valueOfFutures)) return true;
		return false;
	}
	@Override
	public void encode( ByteBuffer out )
	{
		if (FixUtils.isSet(bidDescriptorType)) FixUtils.putFixTag( out, FixTags.BIDDESCRIPTORTYPE_INT, bidDescriptorType);
		if (FixUtils.isSet(bidDescriptor)) FixUtils.putFixTag( out, FixTags.BIDDESCRIPTOR_INT, bidDescriptor, 0, Utils.lastIndexTrim(bidDescriptor, (byte)0) );
		if (FixUtils.isSet(sideValueInd)) FixUtils.putFixTag( out, FixTags.SIDEVALUEIND_INT, sideValueInd);
		if (FixUtils.isSet(liquidityValue)) FixUtils.putFixTag( out, FixTags.LIQUIDITYVALUE_INT, liquidityValue);
		if (FixUtils.isSet(liquidityNumSecurities)) FixUtils.putFixTag( out, FixTags.LIQUIDITYNUMSECURITIES_INT, liquidityNumSecurities);
		if (FixUtils.isSet(liquidityPctLow)) FixUtils.putFixFloatTag( out, FixTags.LIQUIDITYPCTLOW_INT, liquidityPctLow);
		if (FixUtils.isSet(liquidityPctHigh)) FixUtils.putFixFloatTag( out, FixTags.LIQUIDITYPCTHIGH_INT, liquidityPctHigh);
		if (FixUtils.isSet(eFPTrackingError)) FixUtils.putFixFloatTag( out, FixTags.EFPTRACKINGERROR_INT, eFPTrackingError);
		if (FixUtils.isSet(fairValue)) FixUtils.putFixTag( out, FixTags.FAIRVALUE_INT, fairValue);
		if (FixUtils.isSet(outsideIndexPct)) FixUtils.putFixFloatTag( out, FixTags.OUTSIDEINDEXPCT_INT, outsideIndexPct);
		if (FixUtils.isSet(valueOfFutures)) FixUtils.putFixTag( out, FixTags.VALUEOFFUTURES_INT, valueOfFutures);
	}
	/**
	 * If you use toString for any other purpose than administrative printout.
	 * You will end up in nifelheim!
	**/
	@Override
	public String toString() {
		char sep = '\n';
		if (Boolean.getBoolean("fix.useOneLiner")) sep = ( byte )0x01;

		String s = "";

			if (FixUtils.isSet(bidDescriptorType)) s += "BidDescriptorType(399)=" + String.valueOf(bidDescriptorType) + sep;
			if (FixUtils.isSet(bidDescriptor)) s += "BidDescriptor(400)=" + new String(bidDescriptor) + sep;
			if (FixUtils.isSet(sideValueInd)) s += "SideValueInd(401)=" + String.valueOf(sideValueInd) + sep;
			if (FixUtils.isSet(liquidityValue)) s += "LiquidityValue(404)=" + String.valueOf(liquidityValue) + sep;
			if (FixUtils.isSet(liquidityNumSecurities)) s += "LiquidityNumSecurities(441)=" + String.valueOf(liquidityNumSecurities) + sep;
			if (FixUtils.isSet(liquidityPctLow)) s += "LiquidityPctLow(402)=" + String.valueOf(liquidityPctLow) + sep;
			if (FixUtils.isSet(liquidityPctHigh)) s += "LiquidityPctHigh(403)=" + String.valueOf(liquidityPctHigh) + sep;
			if (FixUtils.isSet(eFPTrackingError)) s += "EFPTrackingError(405)=" + String.valueOf(eFPTrackingError) + sep;
			if (FixUtils.isSet(fairValue)) s += "FairValue(406)=" + String.valueOf(fairValue) + sep;
			if (FixUtils.isSet(outsideIndexPct)) s += "OutsideIndexPct(407)=" + String.valueOf(outsideIndexPct) + sep;
			if (FixUtils.isSet(valueOfFutures)) s += "ValueOfFutures(408)=" + String.valueOf(valueOfFutures) + sep;
		return s;

	}

	@Override
	public boolean equals(Object o) {
		if (! ( o instanceof BidDescReqGrp)) return false;

			BidDescReqGrp msg = (BidDescReqGrp) o;

		if ( ! super.equals(msg) ) return false;

		if (!( bidDescriptorType==msg.bidDescriptorType)) return false;

		if (!Utils.equals( bidDescriptor, msg.bidDescriptor)) return false;

		if (!( sideValueInd==msg.sideValueInd)) return false;

		if (!( liquidityValue==msg.liquidityValue)) return false;

		if (!( liquidityNumSecurities==msg.liquidityNumSecurities)) return false;

		if (!( liquidityPctLow==msg.liquidityPctLow)) return false;

		if (!( liquidityPctHigh==msg.liquidityPctHigh)) return false;

		if (!( eFPTrackingError==msg.eFPTrackingError)) return false;

		if (!( fairValue==msg.fairValue)) return false;

		if (!( outsideIndexPct==msg.outsideIndexPct)) return false;

		if (!( valueOfFutures==msg.valueOfFutures)) return false;

		return true;
	}
}
}
