package org.tomac.protocol.fix.messaging.fix50sp2.component;

// DO NOT EDIT!!!
// This file is generated by FixMessageGenerator.
// If you need additional functionality, put it in a helper class
// that does not live in this folder!!!  Any java file in this folder 
// will be deleted upon the next run of the FixMessageGenerator!

import java.nio.ByteBuffer;

import org.tomac.protocol.fix.FixUtils;
import org.tomac.protocol.fix.FixSessionException;
import org.tomac.protocol.fix.FixGarbledException;
import org.tomac.utils.Utils;
import org.tomac.protocol.fix.FixConstants;


import org.tomac.protocol.fix.messaging.fix50sp2.FixTags;
import org.tomac.protocol.fix.messaging.fix50sp2.FixMessageInfo.*;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixOrderQtyData;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixDisplayInstruction;

public class FixTradeReportOrderDetail implements FixComponent
{

	public byte[] orderID;
	public byte[] secondaryOrderID;
	public byte[] clOrdID;
	public byte[] secondaryClOrdID;
	public byte[] listID;
	public byte[] refOrderID;
	public byte refOrderIDSource = (byte)' ';
	public long refOrdIDReason = 0;
	public byte ordType = (byte)' ';
	public long price = 0;
	public long stopPx = 0;
	public byte[] execInst;
	public byte ordStatus = (byte)' ';
	public FixOrderQtyData orderQtyData;
	public long leavesQty = 0;
	public long cumQty = 0;
	public byte timeInForce = (byte)' ';
	public byte[] expireTime;
	public FixDisplayInstruction displayInstruction;
	public byte orderCapacity = (byte)' ';
	public byte[] orderRestrictions;
	public long bookingType = 0;
	public long origCustOrderCapacity = 0;
	public byte[] orderInputDevice;
	public byte lotType = (byte)' ';
	public byte[] transBkdTime;
	public byte[] origOrdModTime;

	public FixTradeReportOrderDetail() {
		super();

		orderID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		secondaryOrderID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		clOrdID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		secondaryClOrdID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		listID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		refOrderID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		execInst = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		orderQtyData = new FixOrderQtyData();
		expireTime = new byte[FixUtils.UTCTIMESTAMP_LENGTH];
		displayInstruction = new FixDisplayInstruction();
		orderRestrictions = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		orderInputDevice = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		transBkdTime = new byte[FixUtils.UTCTIMESTAMP_LENGTH];
		origOrdModTime = new byte[FixUtils.UTCTIMESTAMP_LENGTH];
		this.clear();

	}

	@Override
	public void clear()
	{

		// clear out all the fields that aren't msgType

		Utils.fill( orderID, (byte)0 );
		Utils.fill( secondaryOrderID, (byte)0 );
		Utils.fill( clOrdID, (byte)0 );
		Utils.fill( secondaryClOrdID, (byte)0 );
		Utils.fill( listID, (byte)0 );
		Utils.fill( refOrderID, (byte)0 );
		refOrderIDSource = Byte.MAX_VALUE;		
		refOrdIDReason = Long.MAX_VALUE;		
		ordType = Byte.MAX_VALUE;		
		price = Long.MAX_VALUE;		
		stopPx = Long.MAX_VALUE;		
		Utils.fill( execInst, (byte)0 );
		ordStatus = Byte.MAX_VALUE;		
		leavesQty = Long.MAX_VALUE;		
		cumQty = Long.MAX_VALUE;		
		timeInForce = Byte.MAX_VALUE;		
		Utils.fill( expireTime, (byte)0 );
		orderCapacity = Byte.MAX_VALUE;		
		Utils.fill( orderRestrictions, (byte)0 );
		bookingType = Long.MAX_VALUE;		
		origCustOrderCapacity = Long.MAX_VALUE;		
		Utils.fill( orderInputDevice, (byte)0 );
		lotType = Byte.MAX_VALUE;		
		Utils.fill( transBkdTime, (byte)0 );
		Utils.fill( origOrdModTime, (byte)0 );
		orderQtyData.clear();
		displayInstruction.clear();
	}

	public void getAll(int id, ByteBuffer buf) throws FixSessionException, FixGarbledException
	{

		int startTagPosition = buf.position();

		int lastTagPosition = buf.position();
		do {
			ByteBuffer value;

			value = buf;

			switch( id ) {

			case FixTags.ORDERID_INT:
				orderID = FixUtils.getTagStringValue(value, orderID);
				break;

			case FixTags.SECONDARYORDERID_INT:
				secondaryOrderID = FixUtils.getTagStringValue(value, secondaryOrderID);
				break;

			case FixTags.CLORDID_INT:
				clOrdID = FixUtils.getTagStringValue(value, clOrdID);
				break;

			case FixTags.SECONDARYCLORDID_INT:
				secondaryClOrdID = FixUtils.getTagStringValue(value, secondaryClOrdID);
				break;

			case FixTags.LISTID_INT:
				listID = FixUtils.getTagStringValue(value, listID);
				break;

			case FixTags.REFORDERID_INT:
				refOrderID = FixUtils.getTagStringValue(value, refOrderID);
				break;

			case FixTags.REFORDERIDSOURCE_INT:
				refOrderIDSource = FixUtils.getTagCharValue( value );
				if (!RefOrderIDSource.isValid(refOrderIDSource) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + refOrderIDSource + ") for tag").getBytes(), id, new byte[0] );
				break;

			case FixTags.REFORDIDREASON_INT:
				refOrdIDReason = FixUtils.getTagIntValue( value );
				if (!RefOrdIDReason.isValid(refOrdIDReason) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + refOrdIDReason + ") for tag").getBytes(), id, new byte[0] );
				break;

			case FixTags.ORDTYPE_INT:
				ordType = FixUtils.getTagCharValue( value );
				if (!OrdType.isValid(ordType) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + ordType + ") for tag").getBytes(), id, new byte[0] );
				break;

			case FixTags.PRICE_INT:
				price = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.STOPPX_INT:
				stopPx = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.EXECINST_INT:
				execInst = FixUtils.getTagStringValue(value, execInst);
				if (!ExecInst.isValid(execInst) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + execInst + ") for tag").getBytes(), id, new byte[0] );
				break;

			case FixTags.ORDSTATUS_INT:
				ordStatus = FixUtils.getTagCharValue( value );
				if (!OrdStatus.isValid(ordStatus) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + ordStatus + ") for tag").getBytes(), id, new byte[0] );
				break;

			case FixTags.ORDERQTY_INT:
				orderQtyData.getAll( FixTags.ORDERQTY_INT, value );
				break;

			case FixTags.LEAVESQTY_INT:
				leavesQty = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.CUMQTY_INT:
				cumQty = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.TIMEINFORCE_INT:
				timeInForce = FixUtils.getTagCharValue( value );
				if (!TimeInForce.isValid(timeInForce) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + timeInForce + ") for tag").getBytes(), id, new byte[0] );
				break;

			case FixTags.EXPIRETIME_INT:
				expireTime = FixUtils.getTagStringValue(value, expireTime);
				break;

			case FixTags.DISPLAYQTY_INT:
				displayInstruction.getAll( FixTags.DISPLAYQTY_INT, value );
				break;

			case FixTags.ORDERCAPACITY_INT:
				orderCapacity = FixUtils.getTagCharValue( value );
				if (!OrderCapacity.isValid(orderCapacity) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + orderCapacity + ") for tag").getBytes(), id, new byte[0] );
				break;

			case FixTags.ORDERRESTRICTIONS_INT:
				orderRestrictions = FixUtils.getTagStringValue(value, orderRestrictions);
				if (!OrderRestrictions.isValid(orderRestrictions) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + orderRestrictions + ") for tag").getBytes(), id, new byte[0] );
				break;

			case FixTags.BOOKINGTYPE_INT:
				bookingType = FixUtils.getTagIntValue( value );
				if (!BookingType.isValid(bookingType) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + bookingType + ") for tag").getBytes(), id, new byte[0] );
				break;

			case FixTags.ORIGCUSTORDERCAPACITY_INT:
				origCustOrderCapacity = FixUtils.getTagIntValue( value );
				if (!OrigCustOrderCapacity.isValid(origCustOrderCapacity) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + origCustOrderCapacity + ") for tag").getBytes(), id, new byte[0] );
				break;

			case FixTags.ORDERINPUTDEVICE_INT:
				orderInputDevice = FixUtils.getTagStringValue(value, orderInputDevice);
				break;

			case FixTags.LOTTYPE_INT:
				lotType = FixUtils.getTagCharValue( value );
				if (!LotType.isValid(lotType) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + lotType + ") for tag").getBytes(), id, new byte[0] );
				break;

			case FixTags.TRANSBKDTIME_INT:
				transBkdTime = FixUtils.getTagStringValue(value, transBkdTime);
				break;

			case FixTags.ORIGORDMODTIME_INT:
				origOrdModTime = FixUtils.getTagStringValue(value, origOrdModTime);
				break;

			// we will always endup with unknown tag, unread and return to upper layer in hierarchy
			default:
				id = checkRequiredTags();
				if (id > 0) throw new FixSessionException(SessionRejectReason.REQUIRED_TAG_MISSING, "Required tag missing".getBytes(), id, new byte[0] );

				buf.position( lastTagPosition );
				return;

			}

			lastTagPosition = buf.position();

		} while ( ( id = FixUtils.getTagId( buf ) ) > 0 );

		buf.position(startTagPosition);

	}

	private int checkRequiredTags() {
		int tag = -1;

		return tag;

	}
	@Override
	public boolean isSet()
	{
		if (FixUtils.isSet(orderID)) return true;
		if (FixUtils.isSet(secondaryOrderID)) return true;
		if (FixUtils.isSet(clOrdID)) return true;
		if (FixUtils.isSet(secondaryClOrdID)) return true;
		if (FixUtils.isSet(listID)) return true;
		if (FixUtils.isSet(refOrderID)) return true;
		if (FixUtils.isSet(refOrderIDSource)) return true;
		if (FixUtils.isSet(refOrdIDReason)) return true;
		if (FixUtils.isSet(ordType)) return true;
		if (FixUtils.isSet(price)) return true;
		if (FixUtils.isSet(stopPx)) return true;
		if (FixUtils.isSet(execInst)) return true;
		if (FixUtils.isSet(ordStatus)) return true;
		if (FixUtils.isSet(orderQtyData.orderQty)) return true;
		if (FixUtils.isSet(leavesQty)) return true;
		if (FixUtils.isSet(cumQty)) return true;
		if (FixUtils.isSet(timeInForce)) return true;
		if (FixUtils.isSet(expireTime)) return true;
		if (FixUtils.isSet(displayInstruction.displayQty)) return true;
		if (FixUtils.isSet(orderCapacity)) return true;
		if (FixUtils.isSet(orderRestrictions)) return true;
		if (FixUtils.isSet(bookingType)) return true;
		if (FixUtils.isSet(origCustOrderCapacity)) return true;
		if (FixUtils.isSet(orderInputDevice)) return true;
		if (FixUtils.isSet(lotType)) return true;
		if (FixUtils.isSet(transBkdTime)) return true;
		if (FixUtils.isSet(origOrdModTime)) return true;
		return false;
	}
	@Override
	public void encode( ByteBuffer out )
	{
		if (FixUtils.isSet(orderID)) FixUtils.putFixTag( out, FixTags.ORDERID_INT, orderID, 0, Utils.lastIndexTrim(orderID, (byte)0) );
		if (FixUtils.isSet(secondaryOrderID)) FixUtils.putFixTag( out, FixTags.SECONDARYORDERID_INT, secondaryOrderID, 0, Utils.lastIndexTrim(secondaryOrderID, (byte)0) );
		if (FixUtils.isSet(clOrdID)) FixUtils.putFixTag( out, FixTags.CLORDID_INT, clOrdID, 0, Utils.lastIndexTrim(clOrdID, (byte)0) );
		if (FixUtils.isSet(secondaryClOrdID)) FixUtils.putFixTag( out, FixTags.SECONDARYCLORDID_INT, secondaryClOrdID, 0, Utils.lastIndexTrim(secondaryClOrdID, (byte)0) );
		if (FixUtils.isSet(listID)) FixUtils.putFixTag( out, FixTags.LISTID_INT, listID, 0, Utils.lastIndexTrim(listID, (byte)0) );
		if (FixUtils.isSet(refOrderID)) FixUtils.putFixTag( out, FixTags.REFORDERID_INT, refOrderID, 0, Utils.lastIndexTrim(refOrderID, (byte)0) );
		if (FixUtils.isSet(refOrderIDSource)) FixUtils.putFixTag( out, FixTags.REFORDERIDSOURCE_INT, refOrderIDSource );
		if (FixUtils.isSet(refOrdIDReason)) FixUtils.putFixTag( out, FixTags.REFORDIDREASON_INT, refOrdIDReason);
		if (FixUtils.isSet(ordType)) FixUtils.putFixTag( out, FixTags.ORDTYPE_INT, ordType );
		if (FixUtils.isSet(price)) FixUtils.putFixFloatTag( out, FixTags.PRICE_INT, price);
		if (FixUtils.isSet(stopPx)) FixUtils.putFixFloatTag( out, FixTags.STOPPX_INT, stopPx);
		if (FixUtils.isSet(execInst)) FixUtils.putFixTag( out, FixTags.EXECINST_INT, execInst, 0, Utils.lastIndexTrim(execInst, (byte)0) );
		if (FixUtils.isSet(ordStatus)) FixUtils.putFixTag( out, FixTags.ORDSTATUS_INT, ordStatus );
		if (FixUtils.isSet(orderQtyData.orderQty)) orderQtyData.encode( out );
		if (FixUtils.isSet(leavesQty)) FixUtils.putFixFloatTag( out, FixTags.LEAVESQTY_INT, leavesQty);
		if (FixUtils.isSet(cumQty)) FixUtils.putFixFloatTag( out, FixTags.CUMQTY_INT, cumQty);
		if (FixUtils.isSet(timeInForce)) FixUtils.putFixTag( out, FixTags.TIMEINFORCE_INT, timeInForce );
		if (FixUtils.isSet(expireTime)) FixUtils.putFixTag( out, FixTags.EXPIRETIME_INT, expireTime);
		if (FixUtils.isSet(displayInstruction.displayQty)) displayInstruction.encode( out );
		if (FixUtils.isSet(orderCapacity)) FixUtils.putFixTag( out, FixTags.ORDERCAPACITY_INT, orderCapacity );
		if (FixUtils.isSet(orderRestrictions)) FixUtils.putFixTag( out, FixTags.ORDERRESTRICTIONS_INT, orderRestrictions, 0, Utils.lastIndexTrim(orderRestrictions, (byte)0) );
		if (FixUtils.isSet(bookingType)) FixUtils.putFixTag( out, FixTags.BOOKINGTYPE_INT, bookingType);
		if (FixUtils.isSet(origCustOrderCapacity)) FixUtils.putFixTag( out, FixTags.ORIGCUSTORDERCAPACITY_INT, origCustOrderCapacity);
		if (FixUtils.isSet(orderInputDevice)) FixUtils.putFixTag( out, FixTags.ORDERINPUTDEVICE_INT, orderInputDevice, 0, Utils.lastIndexTrim(orderInputDevice, (byte)0) );
		if (FixUtils.isSet(lotType)) FixUtils.putFixTag( out, FixTags.LOTTYPE_INT, lotType );
		if (FixUtils.isSet(transBkdTime)) FixUtils.putFixTag( out, FixTags.TRANSBKDTIME_INT, transBkdTime);
		if (FixUtils.isSet(origOrdModTime)) FixUtils.putFixTag( out, FixTags.ORIGORDMODTIME_INT, origOrdModTime);
	}
	/**
	 * If you use toString for any other purpose than administrative printout.
	 * You will end up in nifelheim!
	**/
	@Override
	public String toString() {
		char sep = '\n';
		if (Boolean.getBoolean("fix.useOneLiner")) sep = ( byte )0x01;

		String s = "";

			if (FixUtils.isSet(orderID)) s += "OrderID(37)=" + new String(orderID) + sep;
			if (FixUtils.isSet(secondaryOrderID)) s += "SecondaryOrderID(198)=" + new String(secondaryOrderID) + sep;
			if (FixUtils.isSet(clOrdID)) s += "ClOrdID(11)=" + new String(clOrdID) + sep;
			if (FixUtils.isSet(secondaryClOrdID)) s += "SecondaryClOrdID(526)=" + new String(secondaryClOrdID) + sep;
			if (FixUtils.isSet(listID)) s += "ListID(66)=" + new String(listID) + sep;
			if (FixUtils.isSet(refOrderID)) s += "RefOrderID(1080)=" + new String(refOrderID) + sep;
			if (FixUtils.isSet(refOrderIDSource)) s += "RefOrderIDSource(1081)=" + String.valueOf(refOrderIDSource) + sep;
			if (FixUtils.isSet(refOrdIDReason)) s += "RefOrdIDReason(1431)=" + String.valueOf(refOrdIDReason) + sep;
			if (FixUtils.isSet(ordType)) s += "OrdType(40)=" + String.valueOf(ordType) + sep;
			if (FixUtils.isSet(price)) s += "Price(44)=" + String.valueOf(price) + sep;
			if (FixUtils.isSet(stopPx)) s += "StopPx(99)=" + String.valueOf(stopPx) + sep;
			if (FixUtils.isSet(execInst)) s += "ExecInst(18)=" + new String(execInst) + sep;
			if (FixUtils.isSet(ordStatus)) s += "OrdStatus(39)=" + String.valueOf(ordStatus) + sep;
			if (FixUtils.isSet(orderQtyData.orderQty)) s += orderQtyData.toString();
			if (FixUtils.isSet(leavesQty)) s += "LeavesQty(151)=" + String.valueOf(leavesQty) + sep;
			if (FixUtils.isSet(cumQty)) s += "CumQty(14)=" + String.valueOf(cumQty) + sep;
			if (FixUtils.isSet(timeInForce)) s += "TimeInForce(59)=" + String.valueOf(timeInForce) + sep;
			if (FixUtils.isSet(expireTime)) s += "ExpireTime(126)=" + new String(expireTime) + sep;
			if (FixUtils.isSet(displayInstruction.displayQty)) s += displayInstruction.toString();
			if (FixUtils.isSet(orderCapacity)) s += "OrderCapacity(528)=" + String.valueOf(orderCapacity) + sep;
			if (FixUtils.isSet(orderRestrictions)) s += "OrderRestrictions(529)=" + new String(orderRestrictions) + sep;
			if (FixUtils.isSet(bookingType)) s += "BookingType(775)=" + String.valueOf(bookingType) + sep;
			if (FixUtils.isSet(origCustOrderCapacity)) s += "OrigCustOrderCapacity(1432)=" + String.valueOf(origCustOrderCapacity) + sep;
			if (FixUtils.isSet(orderInputDevice)) s += "OrderInputDevice(821)=" + new String(orderInputDevice) + sep;
			if (FixUtils.isSet(lotType)) s += "LotType(1093)=" + String.valueOf(lotType) + sep;
			if (FixUtils.isSet(transBkdTime)) s += "TransBkdTime(483)=" + new String(transBkdTime) + sep;
			if (FixUtils.isSet(origOrdModTime)) s += "OrigOrdModTime(586)=" + new String(origOrdModTime) + sep;
		return s;

	}

	@Override
	public boolean equals(Object o) {
		if (! ( o instanceof FixTradeReportOrderDetail)) return false;

			FixTradeReportOrderDetail msg = (FixTradeReportOrderDetail) o;

		if (!Utils.equals( orderID, msg.orderID)) return false;

		if (!Utils.equals( secondaryOrderID, msg.secondaryOrderID)) return false;

		if (!Utils.equals( clOrdID, msg.clOrdID)) return false;

		if (!Utils.equals( secondaryClOrdID, msg.secondaryClOrdID)) return false;

		if (!Utils.equals( listID, msg.listID)) return false;

		if (!Utils.equals( refOrderID, msg.refOrderID)) return false;

		if (!( refOrderIDSource==msg.refOrderIDSource)) return false;

		if (!( refOrdIDReason==msg.refOrdIDReason)) return false;

		if (!( ordType==msg.ordType)) return false;

		if (!( price==msg.price)) return false;

		if (!( stopPx==msg.stopPx)) return false;

		if (!Utils.equals( execInst, msg.execInst)) return false;

		if (!( ordStatus==msg.ordStatus)) return false;

		if (!orderQtyData.equals(msg.orderQtyData)) return false;

		if (!( leavesQty==msg.leavesQty)) return false;

		if (!( cumQty==msg.cumQty)) return false;

		if (!( timeInForce==msg.timeInForce)) return false;

		if (!displayInstruction.equals(msg.displayInstruction)) return false;

		if (!( orderCapacity==msg.orderCapacity)) return false;

		if (!Utils.equals( orderRestrictions, msg.orderRestrictions)) return false;

		if (!( bookingType==msg.bookingType)) return false;

		if (!( origCustOrderCapacity==msg.origCustOrderCapacity)) return false;

		if (!Utils.equals( orderInputDevice, msg.orderInputDevice)) return false;

		if (!( lotType==msg.lotType)) return false;

		return true;
	}
}
