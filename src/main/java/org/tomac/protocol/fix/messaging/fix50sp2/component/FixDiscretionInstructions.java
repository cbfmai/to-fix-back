package org.tomac.protocol.fix.messaging.fix50sp2.component;

// DO NOT EDIT!!!
// This file is generated by FixMessageGenerator.
// If you need additional functionality, put it in a helper class
// that does not live in this folder!!!  Any java file in this folder 
// will be deleted upon the next run of the FixMessageGenerator!

import java.nio.ByteBuffer;

import org.tomac.protocol.fix.FixUtils;
import org.tomac.protocol.fix.FixSessionException;
import org.tomac.protocol.fix.FixGarbledException;
import org.tomac.utils.Utils;
import org.tomac.protocol.fix.FixConstants;


import org.tomac.protocol.fix.messaging.fix50sp2.FixTags;
import org.tomac.protocol.fix.messaging.fix50sp2.FixMessageInfo.*;

public class FixDiscretionInstructions implements FixComponent
{

	public byte discretionInst = (byte)' ';
	public long discretionOffsetValue = 0;
	public long discretionMoveType = 0;
	public long discretionOffsetType = 0;
	public long discretionLimitType = 0;
	public long discretionRoundDirection = 0;
	public long discretionScope = 0;

	public FixDiscretionInstructions() {
		super();

		this.clear();

	}

	@Override
	public void clear()
	{

		// clear out all the fields that aren't msgType

		discretionInst = Byte.MAX_VALUE;		
		discretionOffsetValue = Long.MAX_VALUE;		
		discretionMoveType = Long.MAX_VALUE;		
		discretionOffsetType = Long.MAX_VALUE;		
		discretionLimitType = Long.MAX_VALUE;		
		discretionRoundDirection = Long.MAX_VALUE;		
		discretionScope = Long.MAX_VALUE;		
	}

	public void getAll(int id, ByteBuffer buf) throws FixSessionException
	{

		int startTagPosition = buf.position();

		int lastTagPosition = buf.position();
		do {
			ByteBuffer value;

			value = buf;

			switch( id ) {

			case FixTags.DISCRETIONINST_INT:
				discretionInst = FixUtils.getTagCharValue( value );
				if (!DiscretionInst.isValid(discretionInst) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + discretionInst + ") for tag").getBytes(), id, new byte[0] );
				break;

			case FixTags.DISCRETIONOFFSETVALUE_INT:
				discretionOffsetValue = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.DISCRETIONMOVETYPE_INT:
				discretionMoveType = FixUtils.getTagIntValue( value );
				if (!DiscretionMoveType.isValid(discretionMoveType) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + discretionMoveType + ") for tag").getBytes(), id, new byte[0] );
				break;

			case FixTags.DISCRETIONOFFSETTYPE_INT:
				discretionOffsetType = FixUtils.getTagIntValue( value );
				if (!DiscretionOffsetType.isValid(discretionOffsetType) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + discretionOffsetType + ") for tag").getBytes(), id, new byte[0] );
				break;

			case FixTags.DISCRETIONLIMITTYPE_INT:
				discretionLimitType = FixUtils.getTagIntValue( value );
				if (!DiscretionLimitType.isValid(discretionLimitType) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + discretionLimitType + ") for tag").getBytes(), id, new byte[0] );
				break;

			case FixTags.DISCRETIONROUNDDIRECTION_INT:
				discretionRoundDirection = FixUtils.getTagIntValue( value );
				if (!DiscretionRoundDirection.isValid(discretionRoundDirection) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + discretionRoundDirection + ") for tag").getBytes(), id, new byte[0] );
				break;

			case FixTags.DISCRETIONSCOPE_INT:
				discretionScope = FixUtils.getTagIntValue( value );
				if (!DiscretionScope.isValid(discretionScope) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + discretionScope + ") for tag").getBytes(), id, new byte[0] );
				break;

			// we will always endup with unknown tag, unread and return to upper layer in hierarchy
			default:
				id = checkRequiredTags();
				if (id > 0) throw new FixSessionException(SessionRejectReason.REQUIRED_TAG_MISSING, "Required tag missing".getBytes(), id, new byte[0] );

				buf.position( lastTagPosition );
				return;

			}

			lastTagPosition = buf.position();

		} while ( ( id = FixUtils.getTagId( buf ) ) > 0 );

		buf.position(startTagPosition);

	}

	private int checkRequiredTags() {
		int tag = -1;

		return tag;

	}
	@Override
	public boolean isSet()
	{
		if (FixUtils.isSet(discretionInst)) return true;
		if (FixUtils.isSet(discretionOffsetValue)) return true;
		if (FixUtils.isSet(discretionMoveType)) return true;
		if (FixUtils.isSet(discretionOffsetType)) return true;
		if (FixUtils.isSet(discretionLimitType)) return true;
		if (FixUtils.isSet(discretionRoundDirection)) return true;
		if (FixUtils.isSet(discretionScope)) return true;
		return false;
	}
	@Override
	public void encode( ByteBuffer out )
	{
		if (FixUtils.isSet(discretionInst)) FixUtils.putFixTag( out, FixTags.DISCRETIONINST_INT, discretionInst );
		if (FixUtils.isSet(discretionOffsetValue)) FixUtils.putFixFloatTag( out, FixTags.DISCRETIONOFFSETVALUE_INT, discretionOffsetValue);
		if (FixUtils.isSet(discretionMoveType)) FixUtils.putFixTag( out, FixTags.DISCRETIONMOVETYPE_INT, discretionMoveType);
		if (FixUtils.isSet(discretionOffsetType)) FixUtils.putFixTag( out, FixTags.DISCRETIONOFFSETTYPE_INT, discretionOffsetType);
		if (FixUtils.isSet(discretionLimitType)) FixUtils.putFixTag( out, FixTags.DISCRETIONLIMITTYPE_INT, discretionLimitType);
		if (FixUtils.isSet(discretionRoundDirection)) FixUtils.putFixTag( out, FixTags.DISCRETIONROUNDDIRECTION_INT, discretionRoundDirection);
		if (FixUtils.isSet(discretionScope)) FixUtils.putFixTag( out, FixTags.DISCRETIONSCOPE_INT, discretionScope);
	}
	/**
	 * If you use toString for any other purpose than administrative printout.
	 * You will end up in nifelheim!
	**/
	@Override
	public String toString() {
		char sep = '\n';
		if (Boolean.getBoolean("fix.useOneLiner")) sep = ( byte )0x01;

		String s = "";

			if (FixUtils.isSet(discretionInst)) s += "DiscretionInst(388)=" + String.valueOf(discretionInst) + sep;
			if (FixUtils.isSet(discretionOffsetValue)) s += "DiscretionOffsetValue(389)=" + String.valueOf(discretionOffsetValue) + sep;
			if (FixUtils.isSet(discretionMoveType)) s += "DiscretionMoveType(841)=" + String.valueOf(discretionMoveType) + sep;
			if (FixUtils.isSet(discretionOffsetType)) s += "DiscretionOffsetType(842)=" + String.valueOf(discretionOffsetType) + sep;
			if (FixUtils.isSet(discretionLimitType)) s += "DiscretionLimitType(843)=" + String.valueOf(discretionLimitType) + sep;
			if (FixUtils.isSet(discretionRoundDirection)) s += "DiscretionRoundDirection(844)=" + String.valueOf(discretionRoundDirection) + sep;
			if (FixUtils.isSet(discretionScope)) s += "DiscretionScope(846)=" + String.valueOf(discretionScope) + sep;
		return s;

	}

	@Override
	public boolean equals(Object o) {
		if (! ( o instanceof FixDiscretionInstructions)) return false;

			FixDiscretionInstructions msg = (FixDiscretionInstructions) o;

		if ( ! super.equals(msg) ) return false;

		if (!( discretionInst==msg.discretionInst)) return false;

		if (!( discretionOffsetValue==msg.discretionOffsetValue)) return false;

		if (!( discretionMoveType==msg.discretionMoveType)) return false;

		if (!( discretionOffsetType==msg.discretionOffsetType)) return false;

		if (!( discretionLimitType==msg.discretionLimitType)) return false;

		if (!( discretionRoundDirection==msg.discretionRoundDirection)) return false;

		if (!( discretionScope==msg.discretionScope)) return false;

		return true;
	}
}
