package org.tomac.protocol.fix.messaging.fix50sp2;

// DO NOT EDIT!!!
// This file is generated by FixMessageGenerator.
// If you need additional functionality, put it in a helper class
// that does not live in this folder!!!  Any java file in this folder 
// will be deleted upon the next run of the FixMessageGenerator!

import java.nio.ByteBuffer;

import org.tomac.protocol.fix.FixUtils;
import org.tomac.protocol.fix.FixSessionException;
import org.tomac.protocol.fix.FixGarbledException;
import org.tomac.utils.Utils;
import org.tomac.protocol.fix.FixConstants;


import org.tomac.protocol.fix.messaging.fix50sp2.component.FixHopGrp;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixOrdAllocGrp;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixExecAllocGrp;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixInstrument;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixInstrumentExtension;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixFinancingDetails;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixUndInstrmtGrp;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixInstrmtLegGrp;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixSpreadOrBenchmarkCurveData;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixParties;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixStipulations;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixYieldData;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixPositionAmountData;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixAllocGrp;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixRateSource;

public class FixAllocationReport extends FixMessage
{

	public byte[] allocReportID;
	public byte[] allocID;
	public byte allocTransType = (byte)' ';
	public byte[] allocReportRefID;
	public long allocCancReplaceReason = 0;
	public byte[] secondaryAllocID;
	public long allocReportType = 0;
	public long allocStatus = 0;
	public long allocRejCode = 0;
	public byte[] refAllocID;
	public long allocIntermedReqType = 0;
	public byte[] allocLinkID;
	public long allocLinkType = 0;
	public byte[] bookingRefID;
	public byte[] clearingBusinessDate;
	public long trdType = 0;
	public long trdSubType = 0;
	public byte multiLegReportingType = (byte)' ';
	public long custOrderCapacity = 0;
	public byte[] tradeInputSource;
	public long rndPx = 0;
	public byte[] messageEventSource;
	public byte[] tradeInputDevice;
	public long avgPxIndicator = 0;
	public long allocNoOrdersType = 0;
	public FixOrdAllocGrp ordAllocGrp;
	public FixExecAllocGrp execAllocGrp;
	public boolean previouslyReported = false;
	public boolean reversalIndicator = false;
	public byte[] matchType;
	public byte side = (byte)' ';
	public FixInstrument instrument;
	public FixInstrumentExtension instrumentExtension;
	public FixFinancingDetails financingDetails;
	public FixUndInstrmtGrp undInstrmtGrp;
	public FixInstrmtLegGrp instrmtLegGrp;
	public long quantity = 0;
	public long qtyType = 0;
	public byte[] lastMkt;
	public byte[] tradeOriginationDate;
	public byte[] tradingSessionID;
	public byte[] tradingSessionSubID;
	public long priceType = 0;
	public long avgPx = 0;
	public long avgParPx = 0;
	public FixSpreadOrBenchmarkCurveData spreadOrBenchmarkCurveData;
	public byte[] currency;
	public long avgPxPrecision = 0;
	public FixParties parties;
	public byte[] tradeDate;
	public byte[] transactTime;
	public byte[] settlType;
	public byte[] settlDate;
	public long bookingType = 0;
	public long grossTradeAmt = 0;
	public long concession = 0;
	public long totalTakedown = 0;
	public long netMoney = 0;
	public byte positionEffect = (byte)' ';
	public boolean autoAcceptIndicator = false;
	public byte[] text;
	public long encodedTextLen = 0;
	public byte[] encodedText;
	public long numDaysInterest = 0;
	public long accruedInterestRate = 0;
	public long accruedInterestAmt = 0;
	public long totalAccruedInterestAmt = 0;
	public long interestAtMaturity = 0;
	public long endAccruedInterestAmt = 0;
	public long startCash = 0;
	public long endCash = 0;
	public boolean legalConfirm = false;
	public FixStipulations stipulations;
	public FixYieldData yieldData;
	public FixPositionAmountData positionAmountData;
	public long totNoAllocs = 0;
	public boolean lastFragment = false;
	public FixAllocGrp allocGrp;
	public FixRateSource rateSource;

	public FixAllocationReport() {
		super();

		allocReportID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		allocID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		allocReportRefID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		secondaryAllocID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		refAllocID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		allocLinkID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		bookingRefID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		clearingBusinessDate = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		tradeInputSource = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		messageEventSource = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		tradeInputDevice = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		ordAllocGrp = new FixOrdAllocGrp();
		execAllocGrp = new FixExecAllocGrp();
		matchType = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		instrument = new FixInstrument();
		instrumentExtension = new FixInstrumentExtension();
		financingDetails = new FixFinancingDetails();
		undInstrmtGrp = new FixUndInstrmtGrp();
		instrmtLegGrp = new FixInstrmtLegGrp();
		lastMkt = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		tradeOriginationDate = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		tradingSessionID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		tradingSessionSubID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		spreadOrBenchmarkCurveData = new FixSpreadOrBenchmarkCurveData();
		currency = new byte[FixUtils.CURRENCY_LENGTH];
		parties = new FixParties();
		tradeDate = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		transactTime = new byte[FixUtils.UTCTIMESTAMP_LENGTH];
		settlType = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		settlDate = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		text = new byte[FixUtils.FIX_MAX_STRING_TEXT_LENGTH];
		encodedText = new byte[FixUtils.FIX_MAX_STRING_TEXT_LENGTH];
		stipulations = new FixStipulations();
		yieldData = new FixYieldData();
		positionAmountData = new FixPositionAmountData();
		allocGrp = new FixAllocGrp();
		rateSource = new FixRateSource();
		this.clear();

		msgType = MsgTypes.ALLOCATIONREPORT_INT;

	}

	@Override
	public void clear()
	{

		// clear out all the fields that aren't msgType

		Utils.fill( allocReportID, (byte)0 );
		Utils.fill( allocID, (byte)0 );
		allocTransType = Byte.MAX_VALUE;		
		Utils.fill( allocReportRefID, (byte)0 );
		allocCancReplaceReason = Long.MAX_VALUE;		
		Utils.fill( secondaryAllocID, (byte)0 );
		allocReportType = Long.MAX_VALUE;		
		allocStatus = Long.MAX_VALUE;		
		allocRejCode = Long.MAX_VALUE;		
		Utils.fill( refAllocID, (byte)0 );
		allocIntermedReqType = Long.MAX_VALUE;		
		Utils.fill( allocLinkID, (byte)0 );
		allocLinkType = Long.MAX_VALUE;		
		Utils.fill( bookingRefID, (byte)0 );
		Utils.fill( clearingBusinessDate, (byte)0 );
		trdType = Long.MAX_VALUE;		
		trdSubType = Long.MAX_VALUE;		
		multiLegReportingType = Byte.MAX_VALUE;		
		custOrderCapacity = Long.MAX_VALUE;		
		Utils.fill( tradeInputSource, (byte)0 );
		rndPx = Long.MAX_VALUE;		
		Utils.fill( messageEventSource, (byte)0 );
		Utils.fill( tradeInputDevice, (byte)0 );
		avgPxIndicator = Long.MAX_VALUE;		
		allocNoOrdersType = Long.MAX_VALUE;		
		previouslyReported = false;		
		reversalIndicator = false;		
		Utils.fill( matchType, (byte)0 );
		side = Byte.MAX_VALUE;		
		quantity = Long.MAX_VALUE;		
		qtyType = Long.MAX_VALUE;		
		Utils.fill( lastMkt, (byte)0 );
		Utils.fill( tradeOriginationDate, (byte)0 );
		Utils.fill( tradingSessionID, (byte)0 );
		Utils.fill( tradingSessionSubID, (byte)0 );
		priceType = Long.MAX_VALUE;		
		avgPx = Long.MAX_VALUE;		
		avgParPx = Long.MAX_VALUE;		
		Utils.fill( currency, (byte)0 );
		avgPxPrecision = Long.MAX_VALUE;		
		Utils.fill( tradeDate, (byte)0 );
		Utils.fill( transactTime, (byte)0 );
		Utils.fill( settlType, (byte)0 );
		Utils.fill( settlDate, (byte)0 );
		bookingType = Long.MAX_VALUE;		
		grossTradeAmt = Long.MAX_VALUE;		
		concession = Long.MAX_VALUE;		
		totalTakedown = Long.MAX_VALUE;		
		netMoney = Long.MAX_VALUE;		
		positionEffect = Byte.MAX_VALUE;		
		autoAcceptIndicator = false;		
		Utils.fill( text, (byte)0 );
		encodedTextLen = Long.MAX_VALUE;		
		Utils.fill( encodedText, (byte)0 );
		numDaysInterest = Long.MAX_VALUE;		
		accruedInterestRate = Long.MAX_VALUE;		
		accruedInterestAmt = Long.MAX_VALUE;		
		totalAccruedInterestAmt = Long.MAX_VALUE;		
		interestAtMaturity = Long.MAX_VALUE;		
		endAccruedInterestAmt = Long.MAX_VALUE;		
		startCash = Long.MAX_VALUE;		
		endCash = Long.MAX_VALUE;		
		legalConfirm = false;		
		totNoAllocs = Long.MAX_VALUE;		
		lastFragment = false;		
		ordAllocGrp.clear();
		execAllocGrp.clear();
		instrument.clear();
		instrumentExtension.clear();
		financingDetails.clear();
		undInstrmtGrp.clear();
		instrmtLegGrp.clear();
		spreadOrBenchmarkCurveData.clear();
		parties.clear();
		stipulations.clear();
		yieldData.clear();
		positionAmountData.clear();
		allocGrp.clear();
		rateSource.clear();
	}

	@Override
	public void getAll() throws FixSessionException, FixGarbledException
	{

		int startTagPosition = buf.position();

		super.getAll();

		// assumption message is full otherwise decode would return null
		// so negative id means that we are at the end of the message
		int id;
		int lastTagPosition = buf.position();
		while ( ( id = FixUtils.getTagId( buf ) ) > 0 )
		{
			ByteBuffer value;

			value = buf;

			switch( id ) {

			case FixTags.ALLOCREPORTID_INT:
				allocReportID = FixUtils.getTagStringValue(value, allocReportID);
				break;

			case FixTags.ALLOCID_INT:
				allocID = FixUtils.getTagStringValue(value, allocID);
				break;

			case FixTags.ALLOCTRANSTYPE_INT:
				allocTransType = FixUtils.getTagCharValue( value );
				if (!AllocTransType.isValid(allocTransType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + allocTransType + ") for tag: " + id );
				break;

			case FixTags.ALLOCREPORTREFID_INT:
				allocReportRefID = FixUtils.getTagStringValue(value, allocReportRefID);
				break;

			case FixTags.ALLOCCANCREPLACEREASON_INT:
				allocCancReplaceReason = FixUtils.getTagIntValue( value );
				if (!AllocCancReplaceReason.isValid(allocCancReplaceReason) ) throw new FixSessionException(buf, "Invalid enumerated value(" + allocCancReplaceReason + ") for tag: " + id );
				break;

			case FixTags.SECONDARYALLOCID_INT:
				secondaryAllocID = FixUtils.getTagStringValue(value, secondaryAllocID);
				break;

			case FixTags.ALLOCREPORTTYPE_INT:
				allocReportType = FixUtils.getTagIntValue( value );
				if (!AllocReportType.isValid(allocReportType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + allocReportType + ") for tag: " + id );
				break;

			case FixTags.ALLOCSTATUS_INT:
				allocStatus = FixUtils.getTagIntValue( value );
				if (!AllocStatus.isValid(allocStatus) ) throw new FixSessionException(buf, "Invalid enumerated value(" + allocStatus + ") for tag: " + id );
				break;

			case FixTags.ALLOCREJCODE_INT:
				allocRejCode = FixUtils.getTagIntValue( value );
				if (!AllocRejCode.isValid(allocRejCode) ) throw new FixSessionException(buf, "Invalid enumerated value(" + allocRejCode + ") for tag: " + id );
				break;

			case FixTags.REFALLOCID_INT:
				refAllocID = FixUtils.getTagStringValue(value, refAllocID);
				break;

			case FixTags.ALLOCINTERMEDREQTYPE_INT:
				allocIntermedReqType = FixUtils.getTagIntValue( value );
				if (!AllocIntermedReqType.isValid(allocIntermedReqType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + allocIntermedReqType + ") for tag: " + id );
				break;

			case FixTags.ALLOCLINKID_INT:
				allocLinkID = FixUtils.getTagStringValue(value, allocLinkID);
				break;

			case FixTags.ALLOCLINKTYPE_INT:
				allocLinkType = FixUtils.getTagIntValue( value );
				if (!AllocLinkType.isValid(allocLinkType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + allocLinkType + ") for tag: " + id );
				break;

			case FixTags.BOOKINGREFID_INT:
				bookingRefID = FixUtils.getTagStringValue(value, bookingRefID);
				break;

			case FixTags.CLEARINGBUSINESSDATE_INT:
				clearingBusinessDate = FixUtils.getTagStringValue(value, clearingBusinessDate);
				break;

			case FixTags.TRDTYPE_INT:
				trdType = FixUtils.getTagIntValue( value );
				if (!TrdType.isValid(trdType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + trdType + ") for tag: " + id );
				break;

			case FixTags.TRDSUBTYPE_INT:
				trdSubType = FixUtils.getTagIntValue( value );
				if (!TrdSubType.isValid(trdSubType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + trdSubType + ") for tag: " + id );
				break;

			case FixTags.MULTILEGREPORTINGTYPE_INT:
				multiLegReportingType = FixUtils.getTagCharValue( value );
				if (!MultiLegReportingType.isValid(multiLegReportingType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + multiLegReportingType + ") for tag: " + id );
				break;

			case FixTags.CUSTORDERCAPACITY_INT:
				custOrderCapacity = FixUtils.getTagIntValue( value );
				if (!CustOrderCapacity.isValid(custOrderCapacity) ) throw new FixSessionException(buf, "Invalid enumerated value(" + custOrderCapacity + ") for tag: " + id );
				break;

			case FixTags.TRADEINPUTSOURCE_INT:
				tradeInputSource = FixUtils.getTagStringValue(value, tradeInputSource);
				break;

			case FixTags.RNDPX_INT:
				rndPx = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.MESSAGEEVENTSOURCE_INT:
				messageEventSource = FixUtils.getTagStringValue(value, messageEventSource);
				break;

			case FixTags.TRADEINPUTDEVICE_INT:
				tradeInputDevice = FixUtils.getTagStringValue(value, tradeInputDevice);
				break;

			case FixTags.AVGPXINDICATOR_INT:
				avgPxIndicator = FixUtils.getTagIntValue( value );
				if (!AvgPxIndicator.isValid(avgPxIndicator) ) throw new FixSessionException(buf, "Invalid enumerated value(" + avgPxIndicator + ") for tag: " + id );
				break;

			case FixTags.ALLOCNOORDERSTYPE_INT:
				allocNoOrdersType = FixUtils.getTagIntValue( value );
				if (!AllocNoOrdersType.isValid(allocNoOrdersType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + allocNoOrdersType + ") for tag: " + id );
				break;

			case FixTags.NOORDERS_INT:
				ordAllocGrp.noOrders = FixUtils.getTagIntValue( value );
				ordAllocGrp.getAll(ordAllocGrp.noOrders, value );
				break;

			case FixTags.NOEXECS_INT:
				execAllocGrp.noExecs = FixUtils.getTagIntValue( value );
				execAllocGrp.getAll(execAllocGrp.noExecs, value );
				break;

			case FixTags.PREVIOUSLYREPORTED_INT:
				previouslyReported = FixUtils.getTagBooleanValue( value );
				if (!PreviouslyReported.isValid(previouslyReported) ) throw new FixSessionException(buf, "Invalid enumerated value(" + previouslyReported + ") for tag: " + id );
				break;

			case FixTags.REVERSALINDICATOR_INT:
				reversalIndicator = FixUtils.getTagBooleanValue( value );
				break;

			case FixTags.MATCHTYPE_INT:
				matchType = FixUtils.getTagStringValue(value, matchType);
				if (!MatchType.isValid(matchType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + matchType + ") for tag: " + id );
				break;

			case FixTags.SIDE_INT:
				side = FixUtils.getTagCharValue( value );
				if (!Side.isValid(side) ) throw new FixSessionException(buf, "Invalid enumerated value(" + side + ") for tag: " + id );
				break;

			case FixTags.SYMBOL_INT:
				instrument.getAll(FixTags.SYMBOL_INT, value );
				break;

			case FixTags.DELIVERYFORM_INT:
				instrumentExtension.getAll(FixTags.DELIVERYFORM_INT, value );
				break;

			case FixTags.AGREEMENTDESC_INT:
				financingDetails.getAll(FixTags.AGREEMENTDESC_INT, value );
				break;

			case FixTags.NOUNDERLYINGS_INT:
				undInstrmtGrp.noUnderlyings = FixUtils.getTagIntValue( value );
				undInstrmtGrp.getAll(undInstrmtGrp.noUnderlyings, value );
				break;

			case FixTags.NOLEGS_INT:
				instrmtLegGrp.noLegs = FixUtils.getTagIntValue( value );
				instrmtLegGrp.getAll(instrmtLegGrp.noLegs, value );
				break;

			case FixTags.QUANTITY_INT:
				quantity = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.QTYTYPE_INT:
				qtyType = FixUtils.getTagIntValue( value );
				if (!QtyType.isValid(qtyType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + qtyType + ") for tag: " + id );
				break;

			case FixTags.LASTMKT_INT:
				lastMkt = FixUtils.getTagStringValue(value, lastMkt);
				break;

			case FixTags.TRADEORIGINATIONDATE_INT:
				tradeOriginationDate = FixUtils.getTagStringValue(value, tradeOriginationDate);
				break;

			case FixTags.TRADINGSESSIONID_INT:
				tradingSessionID = FixUtils.getTagStringValue(value, tradingSessionID);
				if (!TradingSessionID.isValid(tradingSessionID) ) throw new FixSessionException(buf, "Invalid enumerated value(" + tradingSessionID + ") for tag: " + id );
				break;

			case FixTags.TRADINGSESSIONSUBID_INT:
				tradingSessionSubID = FixUtils.getTagStringValue(value, tradingSessionSubID);
				if (!TradingSessionSubID.isValid(tradingSessionSubID) ) throw new FixSessionException(buf, "Invalid enumerated value(" + tradingSessionSubID + ") for tag: " + id );
				break;

			case FixTags.PRICETYPE_INT:
				priceType = FixUtils.getTagIntValue( value );
				if (!PriceType.isValid(priceType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + priceType + ") for tag: " + id );
				break;

			case FixTags.AVGPX_INT:
				avgPx = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.AVGPARPX_INT:
				avgParPx = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.SPREAD_INT:
				spreadOrBenchmarkCurveData.getAll(FixTags.SPREAD_INT, value );
				break;

			case FixTags.CURRENCY_INT:
				currency = FixUtils.getTagStringValue(value, currency);
				break;

			case FixTags.AVGPXPRECISION_INT:
				avgPxPrecision = FixUtils.getTagIntValue( value );
				break;

			case FixTags.NOPARTYIDS_INT:
				parties.noPartyIDs = FixUtils.getTagIntValue( value );
				parties.getAll(parties.noPartyIDs, value );
				break;

			case FixTags.TRADEDATE_INT:
				tradeDate = FixUtils.getTagStringValue(value, tradeDate);
				break;

			case FixTags.TRANSACTTIME_INT:
				transactTime = FixUtils.getTagStringValue(value, transactTime);
				break;

			case FixTags.SETTLTYPE_INT:
				settlType = FixUtils.getTagStringValue(value, settlType);
				if (!SettlType.isValid(settlType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + settlType + ") for tag: " + id );
				break;

			case FixTags.SETTLDATE_INT:
				settlDate = FixUtils.getTagStringValue(value, settlDate);
				break;

			case FixTags.BOOKINGTYPE_INT:
				bookingType = FixUtils.getTagIntValue( value );
				if (!BookingType.isValid(bookingType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + bookingType + ") for tag: " + id );
				break;

			case FixTags.GROSSTRADEAMT_INT:
				grossTradeAmt = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.CONCESSION_INT:
				concession = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.TOTALTAKEDOWN_INT:
				totalTakedown = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.NETMONEY_INT:
				netMoney = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.POSITIONEFFECT_INT:
				positionEffect = FixUtils.getTagCharValue( value );
				if (!PositionEffect.isValid(positionEffect) ) throw new FixSessionException(buf, "Invalid enumerated value(" + positionEffect + ") for tag: " + id );
				break;

			case FixTags.AUTOACCEPTINDICATOR_INT:
				autoAcceptIndicator = FixUtils.getTagBooleanValue( value );
				break;

			case FixTags.TEXT_INT:
				text = FixUtils.getTagStringValue(value, text);
				break;

			case FixTags.ENCODEDTEXTLEN_INT:
				encodedTextLen = FixUtils.getTagIntValue( value );
				break;

			case FixTags.ENCODEDTEXT_INT:
				encodedText = FixUtils.getTagStringValue(value, encodedText);
				break;

			case FixTags.NUMDAYSINTEREST_INT:
				numDaysInterest = FixUtils.getTagIntValue( value );
				break;

			case FixTags.ACCRUEDINTERESTRATE_INT:
				accruedInterestRate = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.ACCRUEDINTERESTAMT_INT:
				accruedInterestAmt = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.TOTALACCRUEDINTERESTAMT_INT:
				totalAccruedInterestAmt = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.INTERESTATMATURITY_INT:
				interestAtMaturity = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.ENDACCRUEDINTERESTAMT_INT:
				endAccruedInterestAmt = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.STARTCASH_INT:
				startCash = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.ENDCASH_INT:
				endCash = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.LEGALCONFIRM_INT:
				legalConfirm = FixUtils.getTagBooleanValue( value );
				if (!LegalConfirm.isValid(legalConfirm) ) throw new FixSessionException(buf, "Invalid enumerated value(" + legalConfirm + ") for tag: " + id );
				break;

			case FixTags.NOSTIPULATIONS_INT:
				stipulations.noStipulations = FixUtils.getTagIntValue( value );
				stipulations.getAll(stipulations.noStipulations, value );
				break;

			case FixTags.YIELDTYPE_INT:
				yieldData.getAll(FixTags.YIELDTYPE_INT, value );
				break;

			case FixTags.NOPOSAMT_INT:
				positionAmountData.noPosAmt = FixUtils.getTagIntValue( value );
				positionAmountData.getAll(positionAmountData.noPosAmt, value );
				break;

			case FixTags.TOTNOALLOCS_INT:
				totNoAllocs = FixUtils.getTagIntValue( value );
				break;

			case FixTags.LASTFRAGMENT_INT:
				lastFragment = FixUtils.getTagBooleanValue( value );
				if (!LastFragment.isValid(lastFragment) ) throw new FixSessionException(buf, "Invalid enumerated value(" + lastFragment + ") for tag: " + id );
				break;

			case FixTags.NOALLOCS_INT:
				allocGrp.noAllocs = FixUtils.getTagIntValue( value );
				allocGrp.getAll(allocGrp.noAllocs, value );
				break;

			case FixTags.NORATESOURCES_INT:
				rateSource.noRateSources = FixUtils.getTagIntValue( value );
				rateSource.getAll(rateSource.noRateSources, value );
				break;

			// for a message always get the checksum
			case FixTags.CHECKSUM_INT:
				checkSum = FixUtils.getTagIntValue( value );

				id = checkRequiredTags();
				if (id > 0) throw new FixSessionException(buf, "Required tag missing: " + id );

				return;

			default:
				throw new FixSessionException(buf, "Unknown tag: " + id );

			}

			lastTagPosition = buf.position();

		}

		buf.position(startTagPosition);

	}

	private int checkRequiredTags() {
		int tag = -1;

		if (! FixUtils.isSet(senderCompID) ) return FixTags.SENDERCOMPID_INT;
		if (! FixUtils.isSet(targetCompID) ) return FixTags.TARGETCOMPID_INT;
		if (! FixUtils.isSet(msgSeqNum) ) return FixTags.MSGSEQNUM_INT;
		if (! FixUtils.isSet(sendingTime) ) return FixTags.SENDINGTIME_INT;
		if (! FixUtils.isSet(allocReportID) ) return FixTags.ALLOCREPORTID_INT;
		if (! FixUtils.isSet(allocTransType) ) return FixTags.ALLOCTRANSTYPE_INT;
		if (! FixUtils.isSet(allocReportType) ) return FixTags.ALLOCREPORTTYPE_INT;
		if (! FixUtils.isSet(allocStatus) ) return FixTags.ALLOCSTATUS_INT;
		if (! FixUtils.isSet(side) ) return FixTags.SIDE_INT;
		if (! FixUtils.isSet(quantity) ) return FixTags.QUANTITY_INT;
		if (! FixUtils.isSet(avgPx) ) return FixTags.AVGPX_INT;
		if (! FixUtils.isSet(tradeDate) ) return FixTags.TRADEDATE_INT;
		if (! instrument.isSet() ) return FixTags.SYMBOL_INT;
		if (! FixUtils.isSet(checkSum) ) return FixTags.CHECKSUM_INT;
		return tag;

	}
	@Override
	public void encode( ByteBuffer out )
	{
		// Encode message. Set msgSeqNum and sendingTime and optional resend flags, before encoding. 

		int msgStart = out.position();

		out.put( BEGINSTRING_VALUE_WITH_TAG );

		int msgLengthValueStart = out.position() + 2 /* 9= */;

		// placeholder
		FixUtils.putFixTag(out, FixTags.BODYLENGTH_INT, FixConstants.MAX_MESSAGE_SIZE );

		int msgTypeStart = out.position();

		FixUtils.putFixTag( out, FixTags.MSGTYPE_INT, MsgTypes.ALLOCATIONREPORT);

		// encode all fields including the header

		if (FixUtils.isSet(applVerID)) FixUtils.putFixTag( out, FixTags.APPLVERID_INT, applVerID, 0, Utils.lastIndexTrim(applVerID, (byte)0) );
		if (FixUtils.isSet(cstmApplVerID)) FixUtils.putFixTag( out, FixTags.CSTMAPPLVERID_INT, cstmApplVerID, 0, Utils.lastIndexTrim(cstmApplVerID, (byte)0) );
		if (FixUtils.isSet(applExtID)) FixUtils.putFixTag( out, FixTags.APPLEXTID_INT, applExtID);
		FixUtils.putFixTag( out, FixTags.SENDERCOMPID_INT, senderCompID, 0, Utils.lastIndexTrim(senderCompID, (byte)0) );
		FixUtils.putFixTag( out, FixTags.TARGETCOMPID_INT, targetCompID, 0, Utils.lastIndexTrim(targetCompID, (byte)0) );
		if (FixUtils.isSet(onBehalfOfCompID)) FixUtils.putFixTag( out, FixTags.ONBEHALFOFCOMPID_INT, onBehalfOfCompID, 0, Utils.lastIndexTrim(onBehalfOfCompID, (byte)0) );
		if (FixUtils.isSet(deliverToCompID)) FixUtils.putFixTag( out, FixTags.DELIVERTOCOMPID_INT, deliverToCompID, 0, Utils.lastIndexTrim(deliverToCompID, (byte)0) );
		if (FixUtils.isSet(secureDataLen)) FixUtils.putFixTag( out, FixTags.SECUREDATALEN_INT, secureDataLen);
		if (FixUtils.isSet(secureData)) FixUtils.putFixTag( out, FixTags.SECUREDATA_INT, secureData, 0, Utils.lastIndexTrim(secureData, (byte)0) );
		FixUtils.putFixTag( out, FixTags.MSGSEQNUM_INT, msgSeqNum);
		if (FixUtils.isSet(senderSubID)) FixUtils.putFixTag( out, FixTags.SENDERSUBID_INT, senderSubID, 0, Utils.lastIndexTrim(senderSubID, (byte)0) );
		if (FixUtils.isSet(senderLocationID)) FixUtils.putFixTag( out, FixTags.SENDERLOCATIONID_INT, senderLocationID, 0, Utils.lastIndexTrim(senderLocationID, (byte)0) );
		if (FixUtils.isSet(targetSubID)) FixUtils.putFixTag( out, FixTags.TARGETSUBID_INT, targetSubID, 0, Utils.lastIndexTrim(targetSubID, (byte)0) );
		if (FixUtils.isSet(targetLocationID)) FixUtils.putFixTag( out, FixTags.TARGETLOCATIONID_INT, targetLocationID, 0, Utils.lastIndexTrim(targetLocationID, (byte)0) );
		if (FixUtils.isSet(onBehalfOfSubID)) FixUtils.putFixTag( out, FixTags.ONBEHALFOFSUBID_INT, onBehalfOfSubID, 0, Utils.lastIndexTrim(onBehalfOfSubID, (byte)0) );
		if (FixUtils.isSet(onBehalfOfLocationID)) FixUtils.putFixTag( out, FixTags.ONBEHALFOFLOCATIONID_INT, onBehalfOfLocationID, 0, Utils.lastIndexTrim(onBehalfOfLocationID, (byte)0) );
		if (FixUtils.isSet(deliverToSubID)) FixUtils.putFixTag( out, FixTags.DELIVERTOSUBID_INT, deliverToSubID, 0, Utils.lastIndexTrim(deliverToSubID, (byte)0) );
		if (FixUtils.isSet(deliverToLocationID)) FixUtils.putFixTag( out, FixTags.DELIVERTOLOCATIONID_INT, deliverToLocationID, 0, Utils.lastIndexTrim(deliverToLocationID, (byte)0) );
		if (FixUtils.isSet(possDupFlag)) FixUtils.putFixTag( out, FixTags.POSSDUPFLAG_INT, possDupFlag?(byte)'Y':(byte)'N' );
		if (FixUtils.isSet(possResend)) FixUtils.putFixTag( out, FixTags.POSSRESEND_INT, possResend?(byte)'Y':(byte)'N' );
		FixUtils.putFixTag( out, FixTags.SENDINGTIME_INT, sendingTime);
		if (FixUtils.isSet(origSendingTime)) FixUtils.putFixTag( out, FixTags.ORIGSENDINGTIME_INT, origSendingTime);
		if (FixUtils.isSet(xmlDataLen)) FixUtils.putFixTag( out, FixTags.XMLDATALEN_INT, xmlDataLen);
		if (FixUtils.isSet(xmlData)) FixUtils.putFixTag( out, FixTags.XMLDATA_INT, xmlData, 0, Utils.lastIndexTrim(xmlData, (byte)0) );
		if (FixUtils.isSet(messageEncoding)) FixUtils.putFixTag( out, FixTags.MESSAGEENCODING_INT, messageEncoding, 0, Utils.lastIndexTrim(messageEncoding, (byte)0) );
		if (FixUtils.isSet(lastMsgSeqNumProcessed)) FixUtils.putFixTag( out, FixTags.LASTMSGSEQNUMPROCESSED_INT, lastMsgSeqNumProcessed);
		if ( FixUtils.isSet(hopGrp.noHops) )hopGrp.encode( out );

		FixUtils.putFixTag( out, FixTags.ALLOCREPORTID_INT, allocReportID, 0, Utils.lastIndexTrim(allocReportID, (byte)0) );
		if (FixUtils.isSet(allocID)) FixUtils.putFixTag( out, FixTags.ALLOCID_INT, allocID, 0, Utils.lastIndexTrim(allocID, (byte)0) );
		FixUtils.putFixTag( out, FixTags.ALLOCTRANSTYPE_INT, allocTransType );
		if (FixUtils.isSet(allocReportRefID)) FixUtils.putFixTag( out, FixTags.ALLOCREPORTREFID_INT, allocReportRefID, 0, Utils.lastIndexTrim(allocReportRefID, (byte)0) );
		if (FixUtils.isSet(allocCancReplaceReason)) FixUtils.putFixTag( out, FixTags.ALLOCCANCREPLACEREASON_INT, allocCancReplaceReason);
		if (FixUtils.isSet(secondaryAllocID)) FixUtils.putFixTag( out, FixTags.SECONDARYALLOCID_INT, secondaryAllocID, 0, Utils.lastIndexTrim(secondaryAllocID, (byte)0) );
		FixUtils.putFixTag( out, FixTags.ALLOCREPORTTYPE_INT, allocReportType);
		FixUtils.putFixTag( out, FixTags.ALLOCSTATUS_INT, allocStatus);
		if (FixUtils.isSet(allocRejCode)) FixUtils.putFixTag( out, FixTags.ALLOCREJCODE_INT, allocRejCode);
		if (FixUtils.isSet(refAllocID)) FixUtils.putFixTag( out, FixTags.REFALLOCID_INT, refAllocID, 0, Utils.lastIndexTrim(refAllocID, (byte)0) );
		if (FixUtils.isSet(allocIntermedReqType)) FixUtils.putFixTag( out, FixTags.ALLOCINTERMEDREQTYPE_INT, allocIntermedReqType);
		if (FixUtils.isSet(allocLinkID)) FixUtils.putFixTag( out, FixTags.ALLOCLINKID_INT, allocLinkID, 0, Utils.lastIndexTrim(allocLinkID, (byte)0) );
		if (FixUtils.isSet(allocLinkType)) FixUtils.putFixTag( out, FixTags.ALLOCLINKTYPE_INT, allocLinkType);
		if (FixUtils.isSet(bookingRefID)) FixUtils.putFixTag( out, FixTags.BOOKINGREFID_INT, bookingRefID, 0, Utils.lastIndexTrim(bookingRefID, (byte)0) );
		if (FixUtils.isSet(clearingBusinessDate)) FixUtils.putFixTag( out, FixTags.CLEARINGBUSINESSDATE_INT, clearingBusinessDate);
		if (FixUtils.isSet(trdType)) FixUtils.putFixTag( out, FixTags.TRDTYPE_INT, trdType);
		if (FixUtils.isSet(trdSubType)) FixUtils.putFixTag( out, FixTags.TRDSUBTYPE_INT, trdSubType);
		if (FixUtils.isSet(multiLegReportingType)) FixUtils.putFixTag( out, FixTags.MULTILEGREPORTINGTYPE_INT, multiLegReportingType );
		if (FixUtils.isSet(custOrderCapacity)) FixUtils.putFixTag( out, FixTags.CUSTORDERCAPACITY_INT, custOrderCapacity);
		if (FixUtils.isSet(tradeInputSource)) FixUtils.putFixTag( out, FixTags.TRADEINPUTSOURCE_INT, tradeInputSource, 0, Utils.lastIndexTrim(tradeInputSource, (byte)0) );
		if (FixUtils.isSet(rndPx)) FixUtils.putFixFloatTag( out, FixTags.RNDPX_INT, rndPx);
		if (FixUtils.isSet(messageEventSource)) FixUtils.putFixTag( out, FixTags.MESSAGEEVENTSOURCE_INT, messageEventSource, 0, Utils.lastIndexTrim(messageEventSource, (byte)0) );
		if (FixUtils.isSet(tradeInputDevice)) FixUtils.putFixTag( out, FixTags.TRADEINPUTDEVICE_INT, tradeInputDevice, 0, Utils.lastIndexTrim(tradeInputDevice, (byte)0) );
		if (FixUtils.isSet(avgPxIndicator)) FixUtils.putFixTag( out, FixTags.AVGPXINDICATOR_INT, avgPxIndicator);
		if (FixUtils.isSet(allocNoOrdersType)) FixUtils.putFixTag( out, FixTags.ALLOCNOORDERSTYPE_INT, allocNoOrdersType);
		if (FixUtils.isSet(ordAllocGrp.noOrders)) ordAllocGrp.encode( out );
		if (FixUtils.isSet(execAllocGrp.noExecs)) execAllocGrp.encode( out );
		if (FixUtils.isSet(previouslyReported)) FixUtils.putFixTag( out, FixTags.PREVIOUSLYREPORTED_INT, previouslyReported?(byte)'Y':(byte)'N' );
		if (FixUtils.isSet(reversalIndicator)) FixUtils.putFixTag( out, FixTags.REVERSALINDICATOR_INT, reversalIndicator?(byte)'Y':(byte)'N' );
		if (FixUtils.isSet(matchType)) FixUtils.putFixTag( out, FixTags.MATCHTYPE_INT, matchType, 0, Utils.lastIndexTrim(matchType, (byte)0) );
		FixUtils.putFixTag( out, FixTags.SIDE_INT, side );
		if (FixUtils.isSet(instrument.symbol)) instrument.encode( out );
		if (FixUtils.isSet(instrumentExtension.deliveryForm)) instrumentExtension.encode( out );
		if (FixUtils.isSet(financingDetails.agreementDesc)) financingDetails.encode( out );
		if (FixUtils.isSet(undInstrmtGrp.noUnderlyings)) undInstrmtGrp.encode( out );
		if (FixUtils.isSet(instrmtLegGrp.noLegs)) instrmtLegGrp.encode( out );
		FixUtils.putFixFloatTag( out, FixTags.QUANTITY_INT, quantity);
		if (FixUtils.isSet(qtyType)) FixUtils.putFixTag( out, FixTags.QTYTYPE_INT, qtyType);
		if (FixUtils.isSet(lastMkt)) FixUtils.putFixTag( out, FixTags.LASTMKT_INT, lastMkt, 0, Utils.lastIndexTrim(lastMkt, (byte)0) );
		if (FixUtils.isSet(tradeOriginationDate)) FixUtils.putFixTag( out, FixTags.TRADEORIGINATIONDATE_INT, tradeOriginationDate);
		if (FixUtils.isSet(tradingSessionID)) FixUtils.putFixTag( out, FixTags.TRADINGSESSIONID_INT, tradingSessionID, 0, Utils.lastIndexTrim(tradingSessionID, (byte)0) );
		if (FixUtils.isSet(tradingSessionSubID)) FixUtils.putFixTag( out, FixTags.TRADINGSESSIONSUBID_INT, tradingSessionSubID, 0, Utils.lastIndexTrim(tradingSessionSubID, (byte)0) );
		if (FixUtils.isSet(priceType)) FixUtils.putFixTag( out, FixTags.PRICETYPE_INT, priceType);
		FixUtils.putFixFloatTag( out, FixTags.AVGPX_INT, avgPx);
		if (FixUtils.isSet(avgParPx)) FixUtils.putFixFloatTag( out, FixTags.AVGPARPX_INT, avgParPx);
		if (FixUtils.isSet(spreadOrBenchmarkCurveData.spread)) spreadOrBenchmarkCurveData.encode( out );
		if (FixUtils.isSet(currency)) FixUtils.putFixTag( out, FixTags.CURRENCY_INT, currency, 0, Utils.lastIndexTrim(currency, (byte)0) );
		if (FixUtils.isSet(avgPxPrecision)) FixUtils.putFixTag( out, FixTags.AVGPXPRECISION_INT, avgPxPrecision);
		if (FixUtils.isSet(parties.noPartyIDs)) parties.encode( out );
		FixUtils.putFixTag( out, FixTags.TRADEDATE_INT, tradeDate);
		if (FixUtils.isSet(transactTime)) FixUtils.putFixTag( out, FixTags.TRANSACTTIME_INT, transactTime);
		if (FixUtils.isSet(settlType)) FixUtils.putFixTag( out, FixTags.SETTLTYPE_INT, settlType, 0, Utils.lastIndexTrim(settlType, (byte)0) );
		if (FixUtils.isSet(settlDate)) FixUtils.putFixTag( out, FixTags.SETTLDATE_INT, settlDate);
		if (FixUtils.isSet(bookingType)) FixUtils.putFixTag( out, FixTags.BOOKINGTYPE_INT, bookingType);
		if (FixUtils.isSet(grossTradeAmt)) FixUtils.putFixTag( out, FixTags.GROSSTRADEAMT_INT, grossTradeAmt);
		if (FixUtils.isSet(concession)) FixUtils.putFixTag( out, FixTags.CONCESSION_INT, concession);
		if (FixUtils.isSet(totalTakedown)) FixUtils.putFixTag( out, FixTags.TOTALTAKEDOWN_INT, totalTakedown);
		if (FixUtils.isSet(netMoney)) FixUtils.putFixTag( out, FixTags.NETMONEY_INT, netMoney);
		if (FixUtils.isSet(positionEffect)) FixUtils.putFixTag( out, FixTags.POSITIONEFFECT_INT, positionEffect );
		if (FixUtils.isSet(autoAcceptIndicator)) FixUtils.putFixTag( out, FixTags.AUTOACCEPTINDICATOR_INT, autoAcceptIndicator?(byte)'Y':(byte)'N' );
		if (FixUtils.isSet(text)) FixUtils.putFixTag( out, FixTags.TEXT_INT, text, 0, Utils.lastIndexTrim(text, (byte)0) );
		if (FixUtils.isSet(encodedTextLen)) FixUtils.putFixTag( out, FixTags.ENCODEDTEXTLEN_INT, encodedTextLen);
		if (FixUtils.isSet(encodedText)) FixUtils.putFixTag( out, FixTags.ENCODEDTEXT_INT, encodedText, 0, Utils.lastIndexTrim(encodedText, (byte)0) );
		if (FixUtils.isSet(numDaysInterest)) FixUtils.putFixTag( out, FixTags.NUMDAYSINTEREST_INT, numDaysInterest);
		if (FixUtils.isSet(accruedInterestRate)) FixUtils.putFixFloatTag( out, FixTags.ACCRUEDINTERESTRATE_INT, accruedInterestRate);
		if (FixUtils.isSet(accruedInterestAmt)) FixUtils.putFixTag( out, FixTags.ACCRUEDINTERESTAMT_INT, accruedInterestAmt);
		if (FixUtils.isSet(totalAccruedInterestAmt)) FixUtils.putFixTag( out, FixTags.TOTALACCRUEDINTERESTAMT_INT, totalAccruedInterestAmt);
		if (FixUtils.isSet(interestAtMaturity)) FixUtils.putFixTag( out, FixTags.INTERESTATMATURITY_INT, interestAtMaturity);
		if (FixUtils.isSet(endAccruedInterestAmt)) FixUtils.putFixTag( out, FixTags.ENDACCRUEDINTERESTAMT_INT, endAccruedInterestAmt);
		if (FixUtils.isSet(startCash)) FixUtils.putFixTag( out, FixTags.STARTCASH_INT, startCash);
		if (FixUtils.isSet(endCash)) FixUtils.putFixTag( out, FixTags.ENDCASH_INT, endCash);
		if (FixUtils.isSet(legalConfirm)) FixUtils.putFixTag( out, FixTags.LEGALCONFIRM_INT, legalConfirm?(byte)'Y':(byte)'N' );
		if (FixUtils.isSet(stipulations.noStipulations)) stipulations.encode( out );
		if (FixUtils.isSet(yieldData.yieldType)) yieldData.encode( out );
		if (FixUtils.isSet(positionAmountData.noPosAmt)) positionAmountData.encode( out );
		if (FixUtils.isSet(totNoAllocs)) FixUtils.putFixTag( out, FixTags.TOTNOALLOCS_INT, totNoAllocs);
		if (FixUtils.isSet(lastFragment)) FixUtils.putFixTag( out, FixTags.LASTFRAGMENT_INT, lastFragment?(byte)'Y':(byte)'N' );
		if (FixUtils.isSet(allocGrp.noAllocs)) allocGrp.encode( out );
		if (FixUtils.isSet(rateSource.noRateSources)) rateSource.encode( out );
		// the checksum at the end

		int checkSumStart = out.position();
		out.position( msgLengthValueStart );
		bodyLength = checkSumStart - msgTypeStart;
		Utils.longToNumeric( out, bodyLength, Utils.digits(FixConstants.MAX_MESSAGE_SIZE) );

		checkSum = FixUtils.computeChecksum( out, msgStart, checkSumStart );
		out.position( checkSumStart );
		FixUtils.putFixTag( out, FixTags.CHECKSUM_INT, checkSum );

		out.flip();

	}
	@Override		
	public void printBuffer(ByteBuffer out) {

		out.put(buf);

		out.flip();

	}

	/**
	 * If you use toString for any other purpose than administrative printout.
	 * You will end up in nifelheim!
	**/
	@Override
	public String toString() {
		char sep = '\n';
		if (Boolean.getBoolean("fix.useOneLiner")) sep = SOH;

		String s = "BeginString(8)=" + new String(BEGINSTRING_VALUE) + sep;
		s += "BodyLength(9)=" + bodyLength + sep;
		s += "MsgType(35)=" + new String(MsgTypes.ALLOCATIONREPORT) + sep;

		try {
			// print all fields including the header

			if (FixUtils.isSet(applVerID)) s += "ApplVerID(1128)=" + new String(applVerID) + sep;
			if (FixUtils.isSet(cstmApplVerID)) s += "CstmApplVerID(1129)=" + new String(cstmApplVerID) + sep;
			if (FixUtils.isSet(applExtID)) s += "ApplExtID(1156)=" + String.valueOf(applExtID) + sep;
			 s += "SenderCompID(49)=" + new String(senderCompID) + sep;
			 s += "TargetCompID(56)=" + new String(targetCompID) + sep;
			if (FixUtils.isSet(onBehalfOfCompID)) s += "OnBehalfOfCompID(115)=" + new String(onBehalfOfCompID) + sep;
			if (FixUtils.isSet(deliverToCompID)) s += "DeliverToCompID(128)=" + new String(deliverToCompID) + sep;
			if (FixUtils.isSet(secureDataLen)) s += "SecureDataLen(90)=" + String.valueOf(secureDataLen) + sep;
			if (FixUtils.isSet(secureData)) s += "SecureData(91)=" + new String(secureData) + sep;
			 s += "MsgSeqNum(34)=" + String.valueOf(msgSeqNum) + sep;
			if (FixUtils.isSet(senderSubID)) s += "SenderSubID(50)=" + new String(senderSubID) + sep;
			if (FixUtils.isSet(senderLocationID)) s += "SenderLocationID(142)=" + new String(senderLocationID) + sep;
			if (FixUtils.isSet(targetSubID)) s += "TargetSubID(57)=" + new String(targetSubID) + sep;
			if (FixUtils.isSet(targetLocationID)) s += "TargetLocationID(143)=" + new String(targetLocationID) + sep;
			if (FixUtils.isSet(onBehalfOfSubID)) s += "OnBehalfOfSubID(116)=" + new String(onBehalfOfSubID) + sep;
			if (FixUtils.isSet(onBehalfOfLocationID)) s += "OnBehalfOfLocationID(144)=" + new String(onBehalfOfLocationID) + sep;
			if (FixUtils.isSet(deliverToSubID)) s += "DeliverToSubID(129)=" + new String(deliverToSubID) + sep;
			if (FixUtils.isSet(deliverToLocationID)) s += "DeliverToLocationID(145)=" + new String(deliverToLocationID) + sep;
			if (FixUtils.isSet(possDupFlag)) s += "PossDupFlag(43)=" + String.valueOf(possDupFlag) + sep;
			if (FixUtils.isSet(possResend)) s += "PossResend(97)=" + String.valueOf(possResend) + sep;
			 s += "SendingTime(52)=" + new String(sendingTime) + sep;
			if (FixUtils.isSet(origSendingTime)) s += "OrigSendingTime(122)=" + new String(origSendingTime) + sep;
			if (FixUtils.isSet(xmlDataLen)) s += "XmlDataLen(212)=" + String.valueOf(xmlDataLen) + sep;
			if (FixUtils.isSet(xmlData)) s += "XmlData(213)=" + new String(xmlData) + sep;
			if (FixUtils.isSet(messageEncoding)) s += "MessageEncoding(347)=" + new String(messageEncoding) + sep;
			if (FixUtils.isSet(lastMsgSeqNumProcessed)) s += "LastMsgSeqNumProcessed(369)=" + String.valueOf(lastMsgSeqNumProcessed) + sep;
			if (FixUtils.isSet(hopGrp.noHops)) s += hopGrp.toString();

			 s += "AllocReportID(755)=" + new String(allocReportID) + sep;
			if (FixUtils.isSet(allocID)) s += "AllocID(70)=" + new String(allocID) + sep;
			 s += "AllocTransType(71)=" + String.valueOf(allocTransType) + sep;
			if (FixUtils.isSet(allocReportRefID)) s += "AllocReportRefID(795)=" + new String(allocReportRefID) + sep;
			if (FixUtils.isSet(allocCancReplaceReason)) s += "AllocCancReplaceReason(796)=" + String.valueOf(allocCancReplaceReason) + sep;
			if (FixUtils.isSet(secondaryAllocID)) s += "SecondaryAllocID(793)=" + new String(secondaryAllocID) + sep;
			 s += "AllocReportType(794)=" + String.valueOf(allocReportType) + sep;
			 s += "AllocStatus(87)=" + String.valueOf(allocStatus) + sep;
			if (FixUtils.isSet(allocRejCode)) s += "AllocRejCode(88)=" + String.valueOf(allocRejCode) + sep;
			if (FixUtils.isSet(refAllocID)) s += "RefAllocID(72)=" + new String(refAllocID) + sep;
			if (FixUtils.isSet(allocIntermedReqType)) s += "AllocIntermedReqType(808)=" + String.valueOf(allocIntermedReqType) + sep;
			if (FixUtils.isSet(allocLinkID)) s += "AllocLinkID(196)=" + new String(allocLinkID) + sep;
			if (FixUtils.isSet(allocLinkType)) s += "AllocLinkType(197)=" + String.valueOf(allocLinkType) + sep;
			if (FixUtils.isSet(bookingRefID)) s += "BookingRefID(466)=" + new String(bookingRefID) + sep;
			if (FixUtils.isSet(clearingBusinessDate)) s += "ClearingBusinessDate(715)=" + new String(clearingBusinessDate) + sep;
			if (FixUtils.isSet(trdType)) s += "TrdType(828)=" + String.valueOf(trdType) + sep;
			if (FixUtils.isSet(trdSubType)) s += "TrdSubType(829)=" + String.valueOf(trdSubType) + sep;
			if (FixUtils.isSet(multiLegReportingType)) s += "MultiLegReportingType(442)=" + String.valueOf(multiLegReportingType) + sep;
			if (FixUtils.isSet(custOrderCapacity)) s += "CustOrderCapacity(582)=" + String.valueOf(custOrderCapacity) + sep;
			if (FixUtils.isSet(tradeInputSource)) s += "TradeInputSource(578)=" + new String(tradeInputSource) + sep;
			if (FixUtils.isSet(rndPx)) s += "RndPx(991)=" + String.valueOf(rndPx) + sep;
			if (FixUtils.isSet(messageEventSource)) s += "MessageEventSource(1011)=" + new String(messageEventSource) + sep;
			if (FixUtils.isSet(tradeInputDevice)) s += "TradeInputDevice(579)=" + new String(tradeInputDevice) + sep;
			if (FixUtils.isSet(avgPxIndicator)) s += "AvgPxIndicator(819)=" + String.valueOf(avgPxIndicator) + sep;
			if (FixUtils.isSet(allocNoOrdersType)) s += "AllocNoOrdersType(857)=" + String.valueOf(allocNoOrdersType) + sep;
			if (FixUtils.isSet(ordAllocGrp.noOrders)) s += ordAllocGrp.toString();
			if (FixUtils.isSet(execAllocGrp.noExecs)) s += execAllocGrp.toString();
			if (FixUtils.isSet(previouslyReported)) s += "PreviouslyReported(570)=" + String.valueOf(previouslyReported) + sep;
			if (FixUtils.isSet(reversalIndicator)) s += "ReversalIndicator(700)=" + String.valueOf(reversalIndicator) + sep;
			if (FixUtils.isSet(matchType)) s += "MatchType(574)=" + new String(matchType) + sep;
			 s += "Side(54)=" + String.valueOf(side) + sep;
			if (FixUtils.isSet(instrument.symbol)) s += instrument.toString();
			if (FixUtils.isSet(instrumentExtension.deliveryForm)) s += instrumentExtension.toString();
			if (FixUtils.isSet(financingDetails.agreementDesc)) s += financingDetails.toString();
			if (FixUtils.isSet(undInstrmtGrp.noUnderlyings)) s += undInstrmtGrp.toString();
			if (FixUtils.isSet(instrmtLegGrp.noLegs)) s += instrmtLegGrp.toString();
			 s += "Quantity(53)=" + String.valueOf(quantity) + sep;
			if (FixUtils.isSet(qtyType)) s += "QtyType(854)=" + String.valueOf(qtyType) + sep;
			if (FixUtils.isSet(lastMkt)) s += "LastMkt(30)=" + new String(lastMkt) + sep;
			if (FixUtils.isSet(tradeOriginationDate)) s += "TradeOriginationDate(229)=" + new String(tradeOriginationDate) + sep;
			if (FixUtils.isSet(tradingSessionID)) s += "TradingSessionID(336)=" + new String(tradingSessionID) + sep;
			if (FixUtils.isSet(tradingSessionSubID)) s += "TradingSessionSubID(625)=" + new String(tradingSessionSubID) + sep;
			if (FixUtils.isSet(priceType)) s += "PriceType(423)=" + String.valueOf(priceType) + sep;
			 s += "AvgPx(6)=" + String.valueOf(avgPx) + sep;
			if (FixUtils.isSet(avgParPx)) s += "AvgParPx(860)=" + String.valueOf(avgParPx) + sep;
			if (FixUtils.isSet(spreadOrBenchmarkCurveData.spread)) s += spreadOrBenchmarkCurveData.toString();
			if (FixUtils.isSet(currency)) s += "Currency(15)=" + new String(currency) + sep;
			if (FixUtils.isSet(avgPxPrecision)) s += "AvgPxPrecision(74)=" + String.valueOf(avgPxPrecision) + sep;
			if (FixUtils.isSet(parties.noPartyIDs)) s += parties.toString();
			 s += "TradeDate(75)=" + new String(tradeDate) + sep;
			if (FixUtils.isSet(transactTime)) s += "TransactTime(60)=" + new String(transactTime) + sep;
			if (FixUtils.isSet(settlType)) s += "SettlType(63)=" + new String(settlType) + sep;
			if (FixUtils.isSet(settlDate)) s += "SettlDate(64)=" + new String(settlDate) + sep;
			if (FixUtils.isSet(bookingType)) s += "BookingType(775)=" + String.valueOf(bookingType) + sep;
			if (FixUtils.isSet(grossTradeAmt)) s += "GrossTradeAmt(381)=" + String.valueOf(grossTradeAmt) + sep;
			if (FixUtils.isSet(concession)) s += "Concession(238)=" + String.valueOf(concession) + sep;
			if (FixUtils.isSet(totalTakedown)) s += "TotalTakedown(237)=" + String.valueOf(totalTakedown) + sep;
			if (FixUtils.isSet(netMoney)) s += "NetMoney(118)=" + String.valueOf(netMoney) + sep;
			if (FixUtils.isSet(positionEffect)) s += "PositionEffect(77)=" + String.valueOf(positionEffect) + sep;
			if (FixUtils.isSet(autoAcceptIndicator)) s += "AutoAcceptIndicator(754)=" + String.valueOf(autoAcceptIndicator) + sep;
			if (FixUtils.isSet(text)) s += "Text(58)=" + new String(text) + sep;
			if (FixUtils.isSet(encodedTextLen)) s += "EncodedTextLen(354)=" + String.valueOf(encodedTextLen) + sep;
			if (FixUtils.isSet(encodedText)) s += "EncodedText(355)=" + new String(encodedText) + sep;
			if (FixUtils.isSet(numDaysInterest)) s += "NumDaysInterest(157)=" + String.valueOf(numDaysInterest) + sep;
			if (FixUtils.isSet(accruedInterestRate)) s += "AccruedInterestRate(158)=" + String.valueOf(accruedInterestRate) + sep;
			if (FixUtils.isSet(accruedInterestAmt)) s += "AccruedInterestAmt(159)=" + String.valueOf(accruedInterestAmt) + sep;
			if (FixUtils.isSet(totalAccruedInterestAmt)) s += "TotalAccruedInterestAmt(540)=" + String.valueOf(totalAccruedInterestAmt) + sep;
			if (FixUtils.isSet(interestAtMaturity)) s += "InterestAtMaturity(738)=" + String.valueOf(interestAtMaturity) + sep;
			if (FixUtils.isSet(endAccruedInterestAmt)) s += "EndAccruedInterestAmt(920)=" + String.valueOf(endAccruedInterestAmt) + sep;
			if (FixUtils.isSet(startCash)) s += "StartCash(921)=" + String.valueOf(startCash) + sep;
			if (FixUtils.isSet(endCash)) s += "EndCash(922)=" + String.valueOf(endCash) + sep;
			if (FixUtils.isSet(legalConfirm)) s += "LegalConfirm(650)=" + String.valueOf(legalConfirm) + sep;
			if (FixUtils.isSet(stipulations.noStipulations)) s += stipulations.toString();
			if (FixUtils.isSet(yieldData.yieldType)) s += yieldData.toString();
			if (FixUtils.isSet(positionAmountData.noPosAmt)) s += positionAmountData.toString();
			if (FixUtils.isSet(totNoAllocs)) s += "TotNoAllocs(892)=" + String.valueOf(totNoAllocs) + sep;
			if (FixUtils.isSet(lastFragment)) s += "LastFragment(893)=" + String.valueOf(lastFragment) + sep;
			if (FixUtils.isSet(allocGrp.noAllocs)) s += allocGrp.toString();
			if (FixUtils.isSet(rateSource.noRateSources)) s += rateSource.toString();

			s += "checkSum(10)=" + String.valueOf(checkSum) + sep;

		} catch(Exception e) {  };

		return s;
	}

	@Override
	public boolean equals(Object o) {
		if (! ( o instanceof FixAllocationReport)) return false;

			FixAllocationReport msg = (FixAllocationReport) o;

		if ( ! super.equals(msg) ) return false;

		if (!Utils.equals( allocReportID, msg.allocReportID)) return false;

		if (!Utils.equals( allocID, msg.allocID)) return false;

		if (!( allocTransType==msg.allocTransType)) return false;

		if (!Utils.equals( allocReportRefID, msg.allocReportRefID)) return false;

		if (!( allocCancReplaceReason==msg.allocCancReplaceReason)) return false;

		if (!Utils.equals( secondaryAllocID, msg.secondaryAllocID)) return false;

		if (!( allocReportType==msg.allocReportType)) return false;

		if (!( allocStatus==msg.allocStatus)) return false;

		if (!( allocRejCode==msg.allocRejCode)) return false;

		if (!Utils.equals( refAllocID, msg.refAllocID)) return false;

		if (!( allocIntermedReqType==msg.allocIntermedReqType)) return false;

		if (!Utils.equals( allocLinkID, msg.allocLinkID)) return false;

		if (!( allocLinkType==msg.allocLinkType)) return false;

		if (!Utils.equals( bookingRefID, msg.bookingRefID)) return false;

		if (!( trdType==msg.trdType)) return false;

		if (!( trdSubType==msg.trdSubType)) return false;

		if (!( multiLegReportingType==msg.multiLegReportingType)) return false;

		if (!( custOrderCapacity==msg.custOrderCapacity)) return false;

		if (!Utils.equals( tradeInputSource, msg.tradeInputSource)) return false;

		if (!( rndPx==msg.rndPx)) return false;

		if (!Utils.equals( messageEventSource, msg.messageEventSource)) return false;

		if (!Utils.equals( tradeInputDevice, msg.tradeInputDevice)) return false;

		if (!( avgPxIndicator==msg.avgPxIndicator)) return false;

		if (!( allocNoOrdersType==msg.allocNoOrdersType)) return false;

		if (!ordAllocGrp.equals(msg.ordAllocGrp)) return false;

		if (!execAllocGrp.equals(msg.execAllocGrp)) return false;

		if (!( previouslyReported==msg.previouslyReported)) return false;

		if (!( reversalIndicator==msg.reversalIndicator)) return false;

		if (!Utils.equals( matchType, msg.matchType)) return false;

		if (!( side==msg.side)) return false;

		if (!instrument.equals(msg.instrument)) return false;

		if (!instrumentExtension.equals(msg.instrumentExtension)) return false;

		if (!financingDetails.equals(msg.financingDetails)) return false;

		if (!undInstrmtGrp.equals(msg.undInstrmtGrp)) return false;

		if (!instrmtLegGrp.equals(msg.instrmtLegGrp)) return false;

		if (!( quantity==msg.quantity)) return false;

		if (!( qtyType==msg.qtyType)) return false;

		if (!Utils.equals( lastMkt, msg.lastMkt)) return false;

		if (!Utils.equals( tradingSessionID, msg.tradingSessionID)) return false;

		if (!Utils.equals( tradingSessionSubID, msg.tradingSessionSubID)) return false;

		if (!( priceType==msg.priceType)) return false;

		if (!( avgPx==msg.avgPx)) return false;

		if (!( avgParPx==msg.avgParPx)) return false;

		if (!spreadOrBenchmarkCurveData.equals(msg.spreadOrBenchmarkCurveData)) return false;

		if (!Utils.equals( currency, msg.currency)) return false;

		if (!( avgPxPrecision==msg.avgPxPrecision)) return false;

		if (!parties.equals(msg.parties)) return false;

		if (!Utils.equals( settlType, msg.settlType)) return false;

		if (!( bookingType==msg.bookingType)) return false;

		if (!( grossTradeAmt==msg.grossTradeAmt)) return false;

		if (!( concession==msg.concession)) return false;

		if (!( totalTakedown==msg.totalTakedown)) return false;

		if (!( netMoney==msg.netMoney)) return false;

		if (!( positionEffect==msg.positionEffect)) return false;

		if (!( autoAcceptIndicator==msg.autoAcceptIndicator)) return false;

		if (!Utils.equals( text, msg.text)) return false;

		if (!( encodedTextLen==msg.encodedTextLen)) return false;

		if (!Utils.equals( encodedText, msg.encodedText)) return false;

		if (!( numDaysInterest==msg.numDaysInterest)) return false;

		if (!( accruedInterestRate==msg.accruedInterestRate)) return false;

		if (!( accruedInterestAmt==msg.accruedInterestAmt)) return false;

		if (!( totalAccruedInterestAmt==msg.totalAccruedInterestAmt)) return false;

		if (!( interestAtMaturity==msg.interestAtMaturity)) return false;

		if (!( endAccruedInterestAmt==msg.endAccruedInterestAmt)) return false;

		if (!( startCash==msg.startCash)) return false;

		if (!( endCash==msg.endCash)) return false;

		if (!( legalConfirm==msg.legalConfirm)) return false;

		if (!stipulations.equals(msg.stipulations)) return false;

		if (!yieldData.equals(msg.yieldData)) return false;

		if (!positionAmountData.equals(msg.positionAmountData)) return false;

		if (!( totNoAllocs==msg.totNoAllocs)) return false;

		if (!( lastFragment==msg.lastFragment)) return false;

		if (!allocGrp.equals(msg.allocGrp)) return false;

		if (!rateSource.equals(msg.rateSource)) return false;

		return true;
	}
}
