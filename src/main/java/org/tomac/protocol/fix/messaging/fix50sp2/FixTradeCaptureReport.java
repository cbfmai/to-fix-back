package org.tomac.protocol.fix.messaging.fix50sp2;

// DO NOT EDIT!!!
// This file is generated by FixMessageGenerator.
// If you need additional functionality, put it in a helper class
// that does not live in this folder!!!  Any java file in this folder 
// will be deleted upon the next run of the FixMessageGenerator!

import java.nio.ByteBuffer;

import org.tomac.protocol.fix.FixUtils;
import org.tomac.protocol.fix.FixSessionException;
import org.tomac.protocol.fix.FixGarbledException;
import org.tomac.utils.Utils;
import org.tomac.protocol.fix.FixConstants;


import org.tomac.protocol.fix.messaging.fix50sp2.component.FixHopGrp;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixApplicationSequenceControl;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixRootParties;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixInstrument;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixFinancingDetails;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixYieldData;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixUndInstrmtGrp;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixSpreadOrBenchmarkCurveData;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixPositionAmountData;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixTrdInstrmtLegGrp;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixTrdRegTimestamps;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixTrdCapRptSideGrp;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixTrdRepIndicatorsGrp;

public class FixTradeCaptureReport extends FixMessage
{

	public FixApplicationSequenceControl applicationSequenceControl;
	public byte[] tradeReportID;
	public byte[] tradeID;
	public byte[] secondaryTradeID;
	public byte[] firmTradeID;
	public byte[] secondaryFirmTradeID;
	public long tradeReportTransType = 0;
	public long tradeReportType = 0;
	public long trdRptStatus = 0;
	public byte[] tradeRequestID;
	public long trdType = 0;
	public long trdSubType = 0;
	public long secondaryTrdType = 0;
	public byte tradeHandlingInstr = (byte)' ';
	public byte origTradeHandlingInstr = (byte)' ';
	public byte[] origTradeDate;
	public byte[] origTradeID;
	public byte[] origSecondaryTradeID;
	public byte[] transferReason;
	public byte execType = (byte)' ';
	public long totNumTradeReports = 0;
	public boolean lastRptRequested = false;
	public boolean unsolicitedIndicator = false;
	public byte subscriptionRequestType = (byte)' ';
	public byte[] tradeReportRefID;
	public byte[] secondaryTradeReportRefID;
	public byte[] secondaryTradeReportID;
	public byte[] tradeLinkID;
	public byte[] trdMatchID;
	public byte[] execID;
	public byte[] secondaryExecID;
	public long execRestatementReason = 0;
	public boolean previouslyReported = false;
	public long priceType = 0;
	public byte asOfIndicator = (byte)' ';
	public byte[] settlSessID;
	public byte[] settlSessSubID;
	public byte venueType = (byte)' ';
	public byte[] marketSegmentID;
	public byte[] marketID;
	public FixRootParties rootParties;
	public FixInstrument instrument;
	public FixFinancingDetails financingDetails;
	public long qtyType = 0;
	public FixYieldData yieldData;
	public FixUndInstrmtGrp undInstrmtGrp;
	public byte[] underlyingTradingSessionID;
	public byte[] underlyingTradingSessionSubID;
	public long lastQty = 0;
	public long lastPx = 0;
	public long calculatedCcyLastQty = 0;
	public byte[] currency;
	public byte[] settlCurrency;
	public long lastParPx = 0;
	public long lastSpotRate = 0;
	public long lastForwardPoints = 0;
	public long lastSwapPoints = 0;
	public byte[] lastMkt;
	public byte[] tradeDate;
	public byte[] clearingBusinessDate;
	public long avgPx = 0;
	public FixSpreadOrBenchmarkCurveData spreadOrBenchmarkCurveData;
	public long avgPxIndicator = 0;
	public FixPositionAmountData positionAmountData;
	public byte multiLegReportingType = (byte)' ';
	public byte[] tradeLegRefID;
	public FixTrdInstrmtLegGrp trdInstrmtLegGrp;
	public byte[] transactTime;
	public FixTrdRegTimestamps trdRegTimestamps;
	public byte[] settlType;
	public byte[] settlDate;
	public byte[] underlyingSettlementDate;
	public byte matchStatus = (byte)' ';
	public byte[] matchType;
	public FixTrdCapRptSideGrp trdCapRptSideGrp;
	public long volatility = 0;
	public long dividendYield = 0;
	public long riskFreeRate = 0;
	public long currencyRatio = 0;
	public boolean copyMsgIndicator = false;
	public FixTrdRepIndicatorsGrp trdRepIndicatorsGrp;
	public boolean publishTrdIndicator = false;
	public long tradePublishIndicator = 0;
	public long shortSaleReason = 0;
	public byte[] tierCode;
	public byte[] messageEventSource;
	public byte[] lastUpdateTime;
	public long rndPx = 0;
	public long grossTradeAmt = 0;
	public byte[] tZTransactTime;
	public boolean reportedPxDiff = false;
	public byte[] rejectText;
	public long feeMultiplier = 0;

	public FixTradeCaptureReport() {
		super();

		applicationSequenceControl = new FixApplicationSequenceControl();
		tradeReportID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		tradeID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		secondaryTradeID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		firmTradeID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		secondaryFirmTradeID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		tradeRequestID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		origTradeDate = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		origTradeID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		origSecondaryTradeID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		transferReason = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		tradeReportRefID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		secondaryTradeReportRefID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		secondaryTradeReportID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		tradeLinkID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		trdMatchID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		execID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		secondaryExecID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		settlSessID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		settlSessSubID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		marketSegmentID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		marketID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		rootParties = new FixRootParties();
		instrument = new FixInstrument();
		financingDetails = new FixFinancingDetails();
		yieldData = new FixYieldData();
		undInstrmtGrp = new FixUndInstrmtGrp();
		underlyingTradingSessionID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		underlyingTradingSessionSubID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		currency = new byte[FixUtils.CURRENCY_LENGTH];
		settlCurrency = new byte[FixUtils.CURRENCY_LENGTH];
		lastMkt = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		tradeDate = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		clearingBusinessDate = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		spreadOrBenchmarkCurveData = new FixSpreadOrBenchmarkCurveData();
		positionAmountData = new FixPositionAmountData();
		tradeLegRefID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		trdInstrmtLegGrp = new FixTrdInstrmtLegGrp();
		transactTime = new byte[FixUtils.UTCTIMESTAMP_LENGTH];
		trdRegTimestamps = new FixTrdRegTimestamps();
		settlType = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		settlDate = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		underlyingSettlementDate = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		matchType = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		trdCapRptSideGrp = new FixTrdCapRptSideGrp();
		trdRepIndicatorsGrp = new FixTrdRepIndicatorsGrp();
		tierCode = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		messageEventSource = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		lastUpdateTime = new byte[FixUtils.UTCTIMESTAMP_LENGTH];
		tZTransactTime = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		rejectText = new byte[FixUtils.FIX_MAX_STRING_TEXT_LENGTH];
		this.clear();

		msgType = MsgTypes.TRADECAPTUREREPORT_INT;

	}

	@Override
	public void clear()
	{

		// clear out all the fields that aren't msgType

		Utils.fill( tradeReportID, (byte)0 );
		Utils.fill( tradeID, (byte)0 );
		Utils.fill( secondaryTradeID, (byte)0 );
		Utils.fill( firmTradeID, (byte)0 );
		Utils.fill( secondaryFirmTradeID, (byte)0 );
		tradeReportTransType = Long.MAX_VALUE;		
		tradeReportType = Long.MAX_VALUE;		
		trdRptStatus = Long.MAX_VALUE;		
		Utils.fill( tradeRequestID, (byte)0 );
		trdType = Long.MAX_VALUE;		
		trdSubType = Long.MAX_VALUE;		
		secondaryTrdType = Long.MAX_VALUE;		
		tradeHandlingInstr = Byte.MAX_VALUE;		
		origTradeHandlingInstr = Byte.MAX_VALUE;		
		Utils.fill( origTradeDate, (byte)0 );
		Utils.fill( origTradeID, (byte)0 );
		Utils.fill( origSecondaryTradeID, (byte)0 );
		Utils.fill( transferReason, (byte)0 );
		execType = Byte.MAX_VALUE;		
		totNumTradeReports = Long.MAX_VALUE;		
		lastRptRequested = false;		
		unsolicitedIndicator = false;		
		subscriptionRequestType = Byte.MAX_VALUE;		
		Utils.fill( tradeReportRefID, (byte)0 );
		Utils.fill( secondaryTradeReportRefID, (byte)0 );
		Utils.fill( secondaryTradeReportID, (byte)0 );
		Utils.fill( tradeLinkID, (byte)0 );
		Utils.fill( trdMatchID, (byte)0 );
		Utils.fill( execID, (byte)0 );
		Utils.fill( secondaryExecID, (byte)0 );
		execRestatementReason = Long.MAX_VALUE;		
		previouslyReported = false;		
		priceType = Long.MAX_VALUE;		
		asOfIndicator = Byte.MAX_VALUE;		
		Utils.fill( settlSessID, (byte)0 );
		Utils.fill( settlSessSubID, (byte)0 );
		venueType = Byte.MAX_VALUE;		
		Utils.fill( marketSegmentID, (byte)0 );
		Utils.fill( marketID, (byte)0 );
		qtyType = Long.MAX_VALUE;		
		Utils.fill( underlyingTradingSessionID, (byte)0 );
		Utils.fill( underlyingTradingSessionSubID, (byte)0 );
		lastQty = Long.MAX_VALUE;		
		lastPx = Long.MAX_VALUE;		
		calculatedCcyLastQty = Long.MAX_VALUE;		
		Utils.fill( currency, (byte)0 );
		Utils.fill( settlCurrency, (byte)0 );
		lastParPx = Long.MAX_VALUE;		
		lastSpotRate = Long.MAX_VALUE;		
		lastForwardPoints = Long.MAX_VALUE;		
		lastSwapPoints = Long.MAX_VALUE;		
		Utils.fill( lastMkt, (byte)0 );
		Utils.fill( tradeDate, (byte)0 );
		Utils.fill( clearingBusinessDate, (byte)0 );
		avgPx = Long.MAX_VALUE;		
		avgPxIndicator = Long.MAX_VALUE;		
		multiLegReportingType = Byte.MAX_VALUE;		
		Utils.fill( tradeLegRefID, (byte)0 );
		Utils.fill( transactTime, (byte)0 );
		Utils.fill( settlType, (byte)0 );
		Utils.fill( settlDate, (byte)0 );
		Utils.fill( underlyingSettlementDate, (byte)0 );
		matchStatus = Byte.MAX_VALUE;		
		Utils.fill( matchType, (byte)0 );
		volatility = Long.MAX_VALUE;		
		dividendYield = Long.MAX_VALUE;		
		riskFreeRate = Long.MAX_VALUE;		
		currencyRatio = Long.MAX_VALUE;		
		copyMsgIndicator = false;		
		publishTrdIndicator = false;		
		tradePublishIndicator = Long.MAX_VALUE;		
		shortSaleReason = Long.MAX_VALUE;		
		Utils.fill( tierCode, (byte)0 );
		Utils.fill( messageEventSource, (byte)0 );
		Utils.fill( lastUpdateTime, (byte)0 );
		rndPx = Long.MAX_VALUE;		
		grossTradeAmt = Long.MAX_VALUE;		
		Utils.fill( tZTransactTime, (byte)0 );
		reportedPxDiff = false;		
		Utils.fill( rejectText, (byte)0 );
		feeMultiplier = Long.MAX_VALUE;		
		applicationSequenceControl.clear();
		rootParties.clear();
		instrument.clear();
		financingDetails.clear();
		yieldData.clear();
		undInstrmtGrp.clear();
		spreadOrBenchmarkCurveData.clear();
		positionAmountData.clear();
		trdInstrmtLegGrp.clear();
		trdRegTimestamps.clear();
		trdCapRptSideGrp.clear();
		trdRepIndicatorsGrp.clear();
	}

	@Override
	public void getAll() throws FixSessionException, FixGarbledException
	{

		int startTagPosition = buf.position();

		super.getAll();

		// assumption message is full otherwise decode would return null
		// so negative id means that we are at the end of the message
		int id;
		int lastTagPosition = buf.position();
		while ( ( id = FixUtils.getTagId( buf ) ) > 0 )
		{
			ByteBuffer value;

			value = buf;

			switch( id ) {

			case FixTags.APPLID_INT:
				applicationSequenceControl.getAll(FixTags.APPLID_INT, value );
				break;

			case FixTags.TRADEREPORTID_INT:
				tradeReportID = FixUtils.getTagStringValue(value, tradeReportID);
				break;

			case FixTags.TRADEID_INT:
				tradeID = FixUtils.getTagStringValue(value, tradeID);
				break;

			case FixTags.SECONDARYTRADEID_INT:
				secondaryTradeID = FixUtils.getTagStringValue(value, secondaryTradeID);
				break;

			case FixTags.FIRMTRADEID_INT:
				firmTradeID = FixUtils.getTagStringValue(value, firmTradeID);
				break;

			case FixTags.SECONDARYFIRMTRADEID_INT:
				secondaryFirmTradeID = FixUtils.getTagStringValue(value, secondaryFirmTradeID);
				break;

			case FixTags.TRADEREPORTTRANSTYPE_INT:
				tradeReportTransType = FixUtils.getTagIntValue( value );
				if (!TradeReportTransType.isValid(tradeReportTransType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + tradeReportTransType + ") for tag: " + id );
				break;

			case FixTags.TRADEREPORTTYPE_INT:
				tradeReportType = FixUtils.getTagIntValue( value );
				if (!TradeReportType.isValid(tradeReportType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + tradeReportType + ") for tag: " + id );
				break;

			case FixTags.TRDRPTSTATUS_INT:
				trdRptStatus = FixUtils.getTagIntValue( value );
				if (!TrdRptStatus.isValid(trdRptStatus) ) throw new FixSessionException(buf, "Invalid enumerated value(" + trdRptStatus + ") for tag: " + id );
				break;

			case FixTags.TRADEREQUESTID_INT:
				tradeRequestID = FixUtils.getTagStringValue(value, tradeRequestID);
				break;

			case FixTags.TRDTYPE_INT:
				trdType = FixUtils.getTagIntValue( value );
				if (!TrdType.isValid(trdType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + trdType + ") for tag: " + id );
				break;

			case FixTags.TRDSUBTYPE_INT:
				trdSubType = FixUtils.getTagIntValue( value );
				if (!TrdSubType.isValid(trdSubType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + trdSubType + ") for tag: " + id );
				break;

			case FixTags.SECONDARYTRDTYPE_INT:
				secondaryTrdType = FixUtils.getTagIntValue( value );
				break;

			case FixTags.TRADEHANDLINGINSTR_INT:
				tradeHandlingInstr = FixUtils.getTagCharValue( value );
				if (!TradeHandlingInstr.isValid(tradeHandlingInstr) ) throw new FixSessionException(buf, "Invalid enumerated value(" + tradeHandlingInstr + ") for tag: " + id );
				break;

			case FixTags.ORIGTRADEHANDLINGINSTR_INT:
				origTradeHandlingInstr = FixUtils.getTagCharValue( value );
				break;

			case FixTags.ORIGTRADEDATE_INT:
				origTradeDate = FixUtils.getTagStringValue(value, origTradeDate);
				break;

			case FixTags.ORIGTRADEID_INT:
				origTradeID = FixUtils.getTagStringValue(value, origTradeID);
				break;

			case FixTags.ORIGSECONDARYTRADEID_INT:
				origSecondaryTradeID = FixUtils.getTagStringValue(value, origSecondaryTradeID);
				break;

			case FixTags.TRANSFERREASON_INT:
				transferReason = FixUtils.getTagStringValue(value, transferReason);
				break;

			case FixTags.EXECTYPE_INT:
				execType = FixUtils.getTagCharValue( value );
				if (!ExecType.isValid(execType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + execType + ") for tag: " + id );
				break;

			case FixTags.TOTNUMTRADEREPORTS_INT:
				totNumTradeReports = FixUtils.getTagIntValue( value );
				break;

			case FixTags.LASTRPTREQUESTED_INT:
				lastRptRequested = FixUtils.getTagBooleanValue( value );
				if (!LastRptRequested.isValid(lastRptRequested) ) throw new FixSessionException(buf, "Invalid enumerated value(" + lastRptRequested + ") for tag: " + id );
				break;

			case FixTags.UNSOLICITEDINDICATOR_INT:
				unsolicitedIndicator = FixUtils.getTagBooleanValue( value );
				if (!UnsolicitedIndicator.isValid(unsolicitedIndicator) ) throw new FixSessionException(buf, "Invalid enumerated value(" + unsolicitedIndicator + ") for tag: " + id );
				break;

			case FixTags.SUBSCRIPTIONREQUESTTYPE_INT:
				subscriptionRequestType = FixUtils.getTagCharValue( value );
				if (!SubscriptionRequestType.isValid(subscriptionRequestType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + subscriptionRequestType + ") for tag: " + id );
				break;

			case FixTags.TRADEREPORTREFID_INT:
				tradeReportRefID = FixUtils.getTagStringValue(value, tradeReportRefID);
				break;

			case FixTags.SECONDARYTRADEREPORTREFID_INT:
				secondaryTradeReportRefID = FixUtils.getTagStringValue(value, secondaryTradeReportRefID);
				break;

			case FixTags.SECONDARYTRADEREPORTID_INT:
				secondaryTradeReportID = FixUtils.getTagStringValue(value, secondaryTradeReportID);
				break;

			case FixTags.TRADELINKID_INT:
				tradeLinkID = FixUtils.getTagStringValue(value, tradeLinkID);
				break;

			case FixTags.TRDMATCHID_INT:
				trdMatchID = FixUtils.getTagStringValue(value, trdMatchID);
				break;

			case FixTags.EXECID_INT:
				execID = FixUtils.getTagStringValue(value, execID);
				break;

			case FixTags.SECONDARYEXECID_INT:
				secondaryExecID = FixUtils.getTagStringValue(value, secondaryExecID);
				break;

			case FixTags.EXECRESTATEMENTREASON_INT:
				execRestatementReason = FixUtils.getTagIntValue( value );
				if (!ExecRestatementReason.isValid(execRestatementReason) ) throw new FixSessionException(buf, "Invalid enumerated value(" + execRestatementReason + ") for tag: " + id );
				break;

			case FixTags.PREVIOUSLYREPORTED_INT:
				previouslyReported = FixUtils.getTagBooleanValue( value );
				if (!PreviouslyReported.isValid(previouslyReported) ) throw new FixSessionException(buf, "Invalid enumerated value(" + previouslyReported + ") for tag: " + id );
				break;

			case FixTags.PRICETYPE_INT:
				priceType = FixUtils.getTagIntValue( value );
				if (!PriceType.isValid(priceType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + priceType + ") for tag: " + id );
				break;

			case FixTags.ASOFINDICATOR_INT:
				asOfIndicator = FixUtils.getTagCharValue( value );
				if (!AsOfIndicator.isValid(asOfIndicator) ) throw new FixSessionException(buf, "Invalid enumerated value(" + asOfIndicator + ") for tag: " + id );
				break;

			case FixTags.SETTLSESSID_INT:
				settlSessID = FixUtils.getTagStringValue(value, settlSessID);
				if (!SettlSessID.isValid(settlSessID) ) throw new FixSessionException(buf, "Invalid enumerated value(" + settlSessID + ") for tag: " + id );
				break;

			case FixTags.SETTLSESSSUBID_INT:
				settlSessSubID = FixUtils.getTagStringValue(value, settlSessSubID);
				break;

			case FixTags.VENUETYPE_INT:
				venueType = FixUtils.getTagCharValue( value );
				if (!VenueType.isValid(venueType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + venueType + ") for tag: " + id );
				break;

			case FixTags.MARKETSEGMENTID_INT:
				marketSegmentID = FixUtils.getTagStringValue(value, marketSegmentID);
				break;

			case FixTags.MARKETID_INT:
				marketID = FixUtils.getTagStringValue(value, marketID);
				break;

			case FixTags.NOROOTPARTYIDS_INT:
				rootParties.noRootPartyIDs = FixUtils.getTagIntValue( value );
				rootParties.getAll(rootParties.noRootPartyIDs, value );
				break;

			case FixTags.SYMBOL_INT:
				instrument.getAll(FixTags.SYMBOL_INT, value );
				break;

			case FixTags.AGREEMENTDESC_INT:
				financingDetails.getAll(FixTags.AGREEMENTDESC_INT, value );
				break;

			case FixTags.QTYTYPE_INT:
				qtyType = FixUtils.getTagIntValue( value );
				if (!QtyType.isValid(qtyType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + qtyType + ") for tag: " + id );
				break;

			case FixTags.YIELDTYPE_INT:
				yieldData.getAll(FixTags.YIELDTYPE_INT, value );
				break;

			case FixTags.NOUNDERLYINGS_INT:
				undInstrmtGrp.noUnderlyings = FixUtils.getTagIntValue( value );
				undInstrmtGrp.getAll(undInstrmtGrp.noUnderlyings, value );
				break;

			case FixTags.UNDERLYINGTRADINGSESSIONID_INT:
				underlyingTradingSessionID = FixUtils.getTagStringValue(value, underlyingTradingSessionID);
				break;

			case FixTags.UNDERLYINGTRADINGSESSIONSUBID_INT:
				underlyingTradingSessionSubID = FixUtils.getTagStringValue(value, underlyingTradingSessionSubID);
				break;

			case FixTags.LASTQTY_INT:
				lastQty = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.LASTPX_INT:
				lastPx = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.CALCULATEDCCYLASTQTY_INT:
				calculatedCcyLastQty = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.CURRENCY_INT:
				currency = FixUtils.getTagStringValue(value, currency);
				break;

			case FixTags.SETTLCURRENCY_INT:
				settlCurrency = FixUtils.getTagStringValue(value, settlCurrency);
				break;

			case FixTags.LASTPARPX_INT:
				lastParPx = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.LASTSPOTRATE_INT:
				lastSpotRate = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.LASTFORWARDPOINTS_INT:
				lastForwardPoints = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.LASTSWAPPOINTS_INT:
				lastSwapPoints = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.LASTMKT_INT:
				lastMkt = FixUtils.getTagStringValue(value, lastMkt);
				break;

			case FixTags.TRADEDATE_INT:
				tradeDate = FixUtils.getTagStringValue(value, tradeDate);
				break;

			case FixTags.CLEARINGBUSINESSDATE_INT:
				clearingBusinessDate = FixUtils.getTagStringValue(value, clearingBusinessDate);
				break;

			case FixTags.AVGPX_INT:
				avgPx = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.SPREAD_INT:
				spreadOrBenchmarkCurveData.getAll(FixTags.SPREAD_INT, value );
				break;

			case FixTags.AVGPXINDICATOR_INT:
				avgPxIndicator = FixUtils.getTagIntValue( value );
				if (!AvgPxIndicator.isValid(avgPxIndicator) ) throw new FixSessionException(buf, "Invalid enumerated value(" + avgPxIndicator + ") for tag: " + id );
				break;

			case FixTags.NOPOSAMT_INT:
				positionAmountData.noPosAmt = FixUtils.getTagIntValue( value );
				positionAmountData.getAll(positionAmountData.noPosAmt, value );
				break;

			case FixTags.MULTILEGREPORTINGTYPE_INT:
				multiLegReportingType = FixUtils.getTagCharValue( value );
				if (!MultiLegReportingType.isValid(multiLegReportingType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + multiLegReportingType + ") for tag: " + id );
				break;

			case FixTags.TRADELEGREFID_INT:
				tradeLegRefID = FixUtils.getTagStringValue(value, tradeLegRefID);
				break;

			case FixTags.NOLEGS_INT:
				trdInstrmtLegGrp.noLegs = FixUtils.getTagIntValue( value );
				trdInstrmtLegGrp.getAll(trdInstrmtLegGrp.noLegs, value );
				break;

			case FixTags.TRANSACTTIME_INT:
				transactTime = FixUtils.getTagStringValue(value, transactTime);
				break;

			case FixTags.NOTRDREGTIMESTAMPS_INT:
				trdRegTimestamps.noTrdRegTimestamps = FixUtils.getTagIntValue( value );
				trdRegTimestamps.getAll(trdRegTimestamps.noTrdRegTimestamps, value );
				break;

			case FixTags.SETTLTYPE_INT:
				settlType = FixUtils.getTagStringValue(value, settlType);
				if (!SettlType.isValid(settlType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + settlType + ") for tag: " + id );
				break;

			case FixTags.SETTLDATE_INT:
				settlDate = FixUtils.getTagStringValue(value, settlDate);
				break;

			case FixTags.UNDERLYINGSETTLEMENTDATE_INT:
				underlyingSettlementDate = FixUtils.getTagStringValue(value, underlyingSettlementDate);
				break;

			case FixTags.MATCHSTATUS_INT:
				matchStatus = FixUtils.getTagCharValue( value );
				if (!MatchStatus.isValid(matchStatus) ) throw new FixSessionException(buf, "Invalid enumerated value(" + matchStatus + ") for tag: " + id );
				break;

			case FixTags.MATCHTYPE_INT:
				matchType = FixUtils.getTagStringValue(value, matchType);
				if (!MatchType.isValid(matchType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + matchType + ") for tag: " + id );
				break;

			case FixTags.NOSIDES_INT:
				trdCapRptSideGrp.noSides = FixUtils.getTagIntValue( value );
				trdCapRptSideGrp.getAll(trdCapRptSideGrp.noSides, value );
				break;

			case FixTags.VOLATILITY_INT:
				volatility = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.DIVIDENDYIELD_INT:
				dividendYield = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.RISKFREERATE_INT:
				riskFreeRate = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.CURRENCYRATIO_INT:
				currencyRatio = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.COPYMSGINDICATOR_INT:
				copyMsgIndicator = FixUtils.getTagBooleanValue( value );
				break;

			case FixTags.NOTRDREPINDICATORS_INT:
				trdRepIndicatorsGrp.noTrdRepIndicators = FixUtils.getTagIntValue( value );
				trdRepIndicatorsGrp.getAll(trdRepIndicatorsGrp.noTrdRepIndicators, value );
				break;

			case FixTags.PUBLISHTRDINDICATOR_INT:
				publishTrdIndicator = FixUtils.getTagBooleanValue( value );
				if (!PublishTrdIndicator.isValid(publishTrdIndicator) ) throw new FixSessionException(buf, "Invalid enumerated value(" + publishTrdIndicator + ") for tag: " + id );
				break;

			case FixTags.TRADEPUBLISHINDICATOR_INT:
				tradePublishIndicator = FixUtils.getTagIntValue( value );
				if (!TradePublishIndicator.isValid(tradePublishIndicator) ) throw new FixSessionException(buf, "Invalid enumerated value(" + tradePublishIndicator + ") for tag: " + id );
				break;

			case FixTags.SHORTSALEREASON_INT:
				shortSaleReason = FixUtils.getTagIntValue( value );
				if (!ShortSaleReason.isValid(shortSaleReason) ) throw new FixSessionException(buf, "Invalid enumerated value(" + shortSaleReason + ") for tag: " + id );
				break;

			case FixTags.TIERCODE_INT:
				tierCode = FixUtils.getTagStringValue(value, tierCode);
				break;

			case FixTags.MESSAGEEVENTSOURCE_INT:
				messageEventSource = FixUtils.getTagStringValue(value, messageEventSource);
				break;

			case FixTags.LASTUPDATETIME_INT:
				lastUpdateTime = FixUtils.getTagStringValue(value, lastUpdateTime);
				break;

			case FixTags.RNDPX_INT:
				rndPx = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.GROSSTRADEAMT_INT:
				grossTradeAmt = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.TZTRANSACTTIME_INT:
				tZTransactTime = FixUtils.getTagStringValue(value, tZTransactTime);
				break;

			case FixTags.REPORTEDPXDIFF_INT:
				reportedPxDiff = FixUtils.getTagBooleanValue( value );
				break;

			case FixTags.REJECTTEXT_INT:
				rejectText = FixUtils.getTagStringValue(value, rejectText);
				break;

			case FixTags.FEEMULTIPLIER_INT:
				feeMultiplier = FixUtils.getTagFloatValue(value);
				break;

			// for a message always get the checksum
			case FixTags.CHECKSUM_INT:
				checkSum = FixUtils.getTagIntValue( value );

				id = checkRequiredTags();
				if (id > 0) throw new FixSessionException(buf, "Required tag missing: " + id );

				return;

			default:
				throw new FixSessionException(buf, "Unknown tag: " + id );

			}

			lastTagPosition = buf.position();

		}

		buf.position(startTagPosition);

	}

	private int checkRequiredTags() {
		int tag = -1;

		if (! FixUtils.isSet(senderCompID) ) return FixTags.SENDERCOMPID_INT;
		if (! FixUtils.isSet(targetCompID) ) return FixTags.TARGETCOMPID_INT;
		if (! FixUtils.isSet(msgSeqNum) ) return FixTags.MSGSEQNUM_INT;
		if (! FixUtils.isSet(sendingTime) ) return FixTags.SENDINGTIME_INT;
		if (! FixUtils.isSet(lastQty) ) return FixTags.LASTQTY_INT;
		if (! FixUtils.isSet(lastPx) ) return FixTags.LASTPX_INT;
		if (! instrument.isSet() ) return FixTags.SYMBOL_INT;
		if (! trdCapRptSideGrp.isSet() ) return FixTags.NOSIDES_INT;
		if (! FixUtils.isSet(checkSum) ) return FixTags.CHECKSUM_INT;
		return tag;

	}
	@Override
	public void encode( ByteBuffer out )
	{
		// Encode message. Set msgSeqNum and sendingTime and optional resend flags, before encoding. 

		int msgStart = out.position();

		out.put( BEGINSTRING_VALUE_WITH_TAG );

		int msgLengthValueStart = out.position() + 2 /* 9= */;

		// placeholder
		FixUtils.putFixTag(out, FixTags.BODYLENGTH_INT, FixConstants.MAX_MESSAGE_SIZE );

		int msgTypeStart = out.position();

		FixUtils.putFixTag( out, FixTags.MSGTYPE_INT, MsgTypes.TRADECAPTUREREPORT);

		// encode all fields including the header

		if (FixUtils.isSet(applVerID)) FixUtils.putFixTag( out, FixTags.APPLVERID_INT, applVerID, 0, Utils.lastIndexTrim(applVerID, (byte)0) );
		if (FixUtils.isSet(cstmApplVerID)) FixUtils.putFixTag( out, FixTags.CSTMAPPLVERID_INT, cstmApplVerID, 0, Utils.lastIndexTrim(cstmApplVerID, (byte)0) );
		if (FixUtils.isSet(applExtID)) FixUtils.putFixTag( out, FixTags.APPLEXTID_INT, applExtID);
		FixUtils.putFixTag( out, FixTags.SENDERCOMPID_INT, senderCompID, 0, Utils.lastIndexTrim(senderCompID, (byte)0) );
		FixUtils.putFixTag( out, FixTags.TARGETCOMPID_INT, targetCompID, 0, Utils.lastIndexTrim(targetCompID, (byte)0) );
		if (FixUtils.isSet(onBehalfOfCompID)) FixUtils.putFixTag( out, FixTags.ONBEHALFOFCOMPID_INT, onBehalfOfCompID, 0, Utils.lastIndexTrim(onBehalfOfCompID, (byte)0) );
		if (FixUtils.isSet(deliverToCompID)) FixUtils.putFixTag( out, FixTags.DELIVERTOCOMPID_INT, deliverToCompID, 0, Utils.lastIndexTrim(deliverToCompID, (byte)0) );
		if (FixUtils.isSet(secureDataLen)) FixUtils.putFixTag( out, FixTags.SECUREDATALEN_INT, secureDataLen);
		if (FixUtils.isSet(secureData)) FixUtils.putFixTag( out, FixTags.SECUREDATA_INT, secureData, 0, Utils.lastIndexTrim(secureData, (byte)0) );
		FixUtils.putFixTag( out, FixTags.MSGSEQNUM_INT, msgSeqNum);
		if (FixUtils.isSet(senderSubID)) FixUtils.putFixTag( out, FixTags.SENDERSUBID_INT, senderSubID, 0, Utils.lastIndexTrim(senderSubID, (byte)0) );
		if (FixUtils.isSet(senderLocationID)) FixUtils.putFixTag( out, FixTags.SENDERLOCATIONID_INT, senderLocationID, 0, Utils.lastIndexTrim(senderLocationID, (byte)0) );
		if (FixUtils.isSet(targetSubID)) FixUtils.putFixTag( out, FixTags.TARGETSUBID_INT, targetSubID, 0, Utils.lastIndexTrim(targetSubID, (byte)0) );
		if (FixUtils.isSet(targetLocationID)) FixUtils.putFixTag( out, FixTags.TARGETLOCATIONID_INT, targetLocationID, 0, Utils.lastIndexTrim(targetLocationID, (byte)0) );
		if (FixUtils.isSet(onBehalfOfSubID)) FixUtils.putFixTag( out, FixTags.ONBEHALFOFSUBID_INT, onBehalfOfSubID, 0, Utils.lastIndexTrim(onBehalfOfSubID, (byte)0) );
		if (FixUtils.isSet(onBehalfOfLocationID)) FixUtils.putFixTag( out, FixTags.ONBEHALFOFLOCATIONID_INT, onBehalfOfLocationID, 0, Utils.lastIndexTrim(onBehalfOfLocationID, (byte)0) );
		if (FixUtils.isSet(deliverToSubID)) FixUtils.putFixTag( out, FixTags.DELIVERTOSUBID_INT, deliverToSubID, 0, Utils.lastIndexTrim(deliverToSubID, (byte)0) );
		if (FixUtils.isSet(deliverToLocationID)) FixUtils.putFixTag( out, FixTags.DELIVERTOLOCATIONID_INT, deliverToLocationID, 0, Utils.lastIndexTrim(deliverToLocationID, (byte)0) );
		if (FixUtils.isSet(possDupFlag)) FixUtils.putFixTag( out, FixTags.POSSDUPFLAG_INT, possDupFlag?(byte)'Y':(byte)'N' );
		if (FixUtils.isSet(possResend)) FixUtils.putFixTag( out, FixTags.POSSRESEND_INT, possResend?(byte)'Y':(byte)'N' );
		FixUtils.putFixTag( out, FixTags.SENDINGTIME_INT, sendingTime);
		if (FixUtils.isSet(origSendingTime)) FixUtils.putFixTag( out, FixTags.ORIGSENDINGTIME_INT, origSendingTime);
		if (FixUtils.isSet(xmlDataLen)) FixUtils.putFixTag( out, FixTags.XMLDATALEN_INT, xmlDataLen);
		if (FixUtils.isSet(xmlData)) FixUtils.putFixTag( out, FixTags.XMLDATA_INT, xmlData, 0, Utils.lastIndexTrim(xmlData, (byte)0) );
		if (FixUtils.isSet(messageEncoding)) FixUtils.putFixTag( out, FixTags.MESSAGEENCODING_INT, messageEncoding, 0, Utils.lastIndexTrim(messageEncoding, (byte)0) );
		if (FixUtils.isSet(lastMsgSeqNumProcessed)) FixUtils.putFixTag( out, FixTags.LASTMSGSEQNUMPROCESSED_INT, lastMsgSeqNumProcessed);
		if ( FixUtils.isSet(hopGrp.noHops) )hopGrp.encode( out );

		if (FixUtils.isSet(applicationSequenceControl.applID)) applicationSequenceControl.encode( out );
		if (FixUtils.isSet(tradeReportID)) FixUtils.putFixTag( out, FixTags.TRADEREPORTID_INT, tradeReportID, 0, Utils.lastIndexTrim(tradeReportID, (byte)0) );
		if (FixUtils.isSet(tradeID)) FixUtils.putFixTag( out, FixTags.TRADEID_INT, tradeID, 0, Utils.lastIndexTrim(tradeID, (byte)0) );
		if (FixUtils.isSet(secondaryTradeID)) FixUtils.putFixTag( out, FixTags.SECONDARYTRADEID_INT, secondaryTradeID, 0, Utils.lastIndexTrim(secondaryTradeID, (byte)0) );
		if (FixUtils.isSet(firmTradeID)) FixUtils.putFixTag( out, FixTags.FIRMTRADEID_INT, firmTradeID, 0, Utils.lastIndexTrim(firmTradeID, (byte)0) );
		if (FixUtils.isSet(secondaryFirmTradeID)) FixUtils.putFixTag( out, FixTags.SECONDARYFIRMTRADEID_INT, secondaryFirmTradeID, 0, Utils.lastIndexTrim(secondaryFirmTradeID, (byte)0) );
		if (FixUtils.isSet(tradeReportTransType)) FixUtils.putFixTag( out, FixTags.TRADEREPORTTRANSTYPE_INT, tradeReportTransType);
		if (FixUtils.isSet(tradeReportType)) FixUtils.putFixTag( out, FixTags.TRADEREPORTTYPE_INT, tradeReportType);
		if (FixUtils.isSet(trdRptStatus)) FixUtils.putFixTag( out, FixTags.TRDRPTSTATUS_INT, trdRptStatus);
		if (FixUtils.isSet(tradeRequestID)) FixUtils.putFixTag( out, FixTags.TRADEREQUESTID_INT, tradeRequestID, 0, Utils.lastIndexTrim(tradeRequestID, (byte)0) );
		if (FixUtils.isSet(trdType)) FixUtils.putFixTag( out, FixTags.TRDTYPE_INT, trdType);
		if (FixUtils.isSet(trdSubType)) FixUtils.putFixTag( out, FixTags.TRDSUBTYPE_INT, trdSubType);
		if (FixUtils.isSet(secondaryTrdType)) FixUtils.putFixTag( out, FixTags.SECONDARYTRDTYPE_INT, secondaryTrdType);
		if (FixUtils.isSet(tradeHandlingInstr)) FixUtils.putFixTag( out, FixTags.TRADEHANDLINGINSTR_INT, tradeHandlingInstr );
		if (FixUtils.isSet(origTradeHandlingInstr)) FixUtils.putFixTag( out, FixTags.ORIGTRADEHANDLINGINSTR_INT, origTradeHandlingInstr );
		if (FixUtils.isSet(origTradeDate)) FixUtils.putFixTag( out, FixTags.ORIGTRADEDATE_INT, origTradeDate);
		if (FixUtils.isSet(origTradeID)) FixUtils.putFixTag( out, FixTags.ORIGTRADEID_INT, origTradeID, 0, Utils.lastIndexTrim(origTradeID, (byte)0) );
		if (FixUtils.isSet(origSecondaryTradeID)) FixUtils.putFixTag( out, FixTags.ORIGSECONDARYTRADEID_INT, origSecondaryTradeID, 0, Utils.lastIndexTrim(origSecondaryTradeID, (byte)0) );
		if (FixUtils.isSet(transferReason)) FixUtils.putFixTag( out, FixTags.TRANSFERREASON_INT, transferReason, 0, Utils.lastIndexTrim(transferReason, (byte)0) );
		if (FixUtils.isSet(execType)) FixUtils.putFixTag( out, FixTags.EXECTYPE_INT, execType );
		if (FixUtils.isSet(totNumTradeReports)) FixUtils.putFixTag( out, FixTags.TOTNUMTRADEREPORTS_INT, totNumTradeReports);
		if (FixUtils.isSet(lastRptRequested)) FixUtils.putFixTag( out, FixTags.LASTRPTREQUESTED_INT, lastRptRequested?(byte)'Y':(byte)'N' );
		if (FixUtils.isSet(unsolicitedIndicator)) FixUtils.putFixTag( out, FixTags.UNSOLICITEDINDICATOR_INT, unsolicitedIndicator?(byte)'Y':(byte)'N' );
		if (FixUtils.isSet(subscriptionRequestType)) FixUtils.putFixTag( out, FixTags.SUBSCRIPTIONREQUESTTYPE_INT, subscriptionRequestType );
		if (FixUtils.isSet(tradeReportRefID)) FixUtils.putFixTag( out, FixTags.TRADEREPORTREFID_INT, tradeReportRefID, 0, Utils.lastIndexTrim(tradeReportRefID, (byte)0) );
		if (FixUtils.isSet(secondaryTradeReportRefID)) FixUtils.putFixTag( out, FixTags.SECONDARYTRADEREPORTREFID_INT, secondaryTradeReportRefID, 0, Utils.lastIndexTrim(secondaryTradeReportRefID, (byte)0) );
		if (FixUtils.isSet(secondaryTradeReportID)) FixUtils.putFixTag( out, FixTags.SECONDARYTRADEREPORTID_INT, secondaryTradeReportID, 0, Utils.lastIndexTrim(secondaryTradeReportID, (byte)0) );
		if (FixUtils.isSet(tradeLinkID)) FixUtils.putFixTag( out, FixTags.TRADELINKID_INT, tradeLinkID, 0, Utils.lastIndexTrim(tradeLinkID, (byte)0) );
		if (FixUtils.isSet(trdMatchID)) FixUtils.putFixTag( out, FixTags.TRDMATCHID_INT, trdMatchID, 0, Utils.lastIndexTrim(trdMatchID, (byte)0) );
		if (FixUtils.isSet(execID)) FixUtils.putFixTag( out, FixTags.EXECID_INT, execID, 0, Utils.lastIndexTrim(execID, (byte)0) );
		if (FixUtils.isSet(secondaryExecID)) FixUtils.putFixTag( out, FixTags.SECONDARYEXECID_INT, secondaryExecID, 0, Utils.lastIndexTrim(secondaryExecID, (byte)0) );
		if (FixUtils.isSet(execRestatementReason)) FixUtils.putFixTag( out, FixTags.EXECRESTATEMENTREASON_INT, execRestatementReason);
		if (FixUtils.isSet(previouslyReported)) FixUtils.putFixTag( out, FixTags.PREVIOUSLYREPORTED_INT, previouslyReported?(byte)'Y':(byte)'N' );
		if (FixUtils.isSet(priceType)) FixUtils.putFixTag( out, FixTags.PRICETYPE_INT, priceType);
		if (FixUtils.isSet(asOfIndicator)) FixUtils.putFixTag( out, FixTags.ASOFINDICATOR_INT, asOfIndicator );
		if (FixUtils.isSet(settlSessID)) FixUtils.putFixTag( out, FixTags.SETTLSESSID_INT, settlSessID, 0, Utils.lastIndexTrim(settlSessID, (byte)0) );
		if (FixUtils.isSet(settlSessSubID)) FixUtils.putFixTag( out, FixTags.SETTLSESSSUBID_INT, settlSessSubID, 0, Utils.lastIndexTrim(settlSessSubID, (byte)0) );
		if (FixUtils.isSet(venueType)) FixUtils.putFixTag( out, FixTags.VENUETYPE_INT, venueType );
		if (FixUtils.isSet(marketSegmentID)) FixUtils.putFixTag( out, FixTags.MARKETSEGMENTID_INT, marketSegmentID, 0, Utils.lastIndexTrim(marketSegmentID, (byte)0) );
		if (FixUtils.isSet(marketID)) FixUtils.putFixTag( out, FixTags.MARKETID_INT, marketID, 0, Utils.lastIndexTrim(marketID, (byte)0) );
		if (FixUtils.isSet(rootParties.noRootPartyIDs)) rootParties.encode( out );
		instrument.encode( out );
		if (FixUtils.isSet(financingDetails.agreementDesc)) financingDetails.encode( out );
		if (FixUtils.isSet(qtyType)) FixUtils.putFixTag( out, FixTags.QTYTYPE_INT, qtyType);
		if (FixUtils.isSet(yieldData.yieldType)) yieldData.encode( out );
		if (FixUtils.isSet(undInstrmtGrp.noUnderlyings)) undInstrmtGrp.encode( out );
		if (FixUtils.isSet(underlyingTradingSessionID)) FixUtils.putFixTag( out, FixTags.UNDERLYINGTRADINGSESSIONID_INT, underlyingTradingSessionID, 0, Utils.lastIndexTrim(underlyingTradingSessionID, (byte)0) );
		if (FixUtils.isSet(underlyingTradingSessionSubID)) FixUtils.putFixTag( out, FixTags.UNDERLYINGTRADINGSESSIONSUBID_INT, underlyingTradingSessionSubID, 0, Utils.lastIndexTrim(underlyingTradingSessionSubID, (byte)0) );
		FixUtils.putFixFloatTag( out, FixTags.LASTQTY_INT, lastQty);
		FixUtils.putFixFloatTag( out, FixTags.LASTPX_INT, lastPx);
		if (FixUtils.isSet(calculatedCcyLastQty)) FixUtils.putFixFloatTag( out, FixTags.CALCULATEDCCYLASTQTY_INT, calculatedCcyLastQty);
		if (FixUtils.isSet(currency)) FixUtils.putFixTag( out, FixTags.CURRENCY_INT, currency, 0, Utils.lastIndexTrim(currency, (byte)0) );
		if (FixUtils.isSet(settlCurrency)) FixUtils.putFixTag( out, FixTags.SETTLCURRENCY_INT, settlCurrency, 0, Utils.lastIndexTrim(settlCurrency, (byte)0) );
		if (FixUtils.isSet(lastParPx)) FixUtils.putFixFloatTag( out, FixTags.LASTPARPX_INT, lastParPx);
		if (FixUtils.isSet(lastSpotRate)) FixUtils.putFixFloatTag( out, FixTags.LASTSPOTRATE_INT, lastSpotRate);
		if (FixUtils.isSet(lastForwardPoints)) FixUtils.putFixFloatTag( out, FixTags.LASTFORWARDPOINTS_INT, lastForwardPoints);
		if (FixUtils.isSet(lastSwapPoints)) FixUtils.putFixFloatTag( out, FixTags.LASTSWAPPOINTS_INT, lastSwapPoints);
		if (FixUtils.isSet(lastMkt)) FixUtils.putFixTag( out, FixTags.LASTMKT_INT, lastMkt, 0, Utils.lastIndexTrim(lastMkt, (byte)0) );
		if (FixUtils.isSet(tradeDate)) FixUtils.putFixTag( out, FixTags.TRADEDATE_INT, tradeDate);
		if (FixUtils.isSet(clearingBusinessDate)) FixUtils.putFixTag( out, FixTags.CLEARINGBUSINESSDATE_INT, clearingBusinessDate);
		if (FixUtils.isSet(avgPx)) FixUtils.putFixFloatTag( out, FixTags.AVGPX_INT, avgPx);
		if (FixUtils.isSet(spreadOrBenchmarkCurveData.spread)) spreadOrBenchmarkCurveData.encode( out );
		if (FixUtils.isSet(avgPxIndicator)) FixUtils.putFixTag( out, FixTags.AVGPXINDICATOR_INT, avgPxIndicator);
		if (FixUtils.isSet(positionAmountData.noPosAmt)) positionAmountData.encode( out );
		if (FixUtils.isSet(multiLegReportingType)) FixUtils.putFixTag( out, FixTags.MULTILEGREPORTINGTYPE_INT, multiLegReportingType );
		if (FixUtils.isSet(tradeLegRefID)) FixUtils.putFixTag( out, FixTags.TRADELEGREFID_INT, tradeLegRefID, 0, Utils.lastIndexTrim(tradeLegRefID, (byte)0) );
		if (FixUtils.isSet(trdInstrmtLegGrp.noLegs)) trdInstrmtLegGrp.encode( out );
		if (FixUtils.isSet(transactTime)) FixUtils.putFixTag( out, FixTags.TRANSACTTIME_INT, transactTime);
		if (FixUtils.isSet(trdRegTimestamps.noTrdRegTimestamps)) trdRegTimestamps.encode( out );
		if (FixUtils.isSet(settlType)) FixUtils.putFixTag( out, FixTags.SETTLTYPE_INT, settlType, 0, Utils.lastIndexTrim(settlType, (byte)0) );
		if (FixUtils.isSet(settlDate)) FixUtils.putFixTag( out, FixTags.SETTLDATE_INT, settlDate);
		if (FixUtils.isSet(underlyingSettlementDate)) FixUtils.putFixTag( out, FixTags.UNDERLYINGSETTLEMENTDATE_INT, underlyingSettlementDate);
		if (FixUtils.isSet(matchStatus)) FixUtils.putFixTag( out, FixTags.MATCHSTATUS_INT, matchStatus );
		if (FixUtils.isSet(matchType)) FixUtils.putFixTag( out, FixTags.MATCHTYPE_INT, matchType, 0, Utils.lastIndexTrim(matchType, (byte)0) );
		trdCapRptSideGrp.encode( out );
		if (FixUtils.isSet(volatility)) FixUtils.putFixFloatTag( out, FixTags.VOLATILITY_INT, volatility);
		if (FixUtils.isSet(dividendYield)) FixUtils.putFixFloatTag( out, FixTags.DIVIDENDYIELD_INT, dividendYield);
		if (FixUtils.isSet(riskFreeRate)) FixUtils.putFixFloatTag( out, FixTags.RISKFREERATE_INT, riskFreeRate);
		if (FixUtils.isSet(currencyRatio)) FixUtils.putFixFloatTag( out, FixTags.CURRENCYRATIO_INT, currencyRatio);
		if (FixUtils.isSet(copyMsgIndicator)) FixUtils.putFixTag( out, FixTags.COPYMSGINDICATOR_INT, copyMsgIndicator?(byte)'Y':(byte)'N' );
		if (FixUtils.isSet(trdRepIndicatorsGrp.noTrdRepIndicators)) trdRepIndicatorsGrp.encode( out );
		if (FixUtils.isSet(publishTrdIndicator)) FixUtils.putFixTag( out, FixTags.PUBLISHTRDINDICATOR_INT, publishTrdIndicator?(byte)'Y':(byte)'N' );
		if (FixUtils.isSet(tradePublishIndicator)) FixUtils.putFixTag( out, FixTags.TRADEPUBLISHINDICATOR_INT, tradePublishIndicator);
		if (FixUtils.isSet(shortSaleReason)) FixUtils.putFixTag( out, FixTags.SHORTSALEREASON_INT, shortSaleReason);
		if (FixUtils.isSet(tierCode)) FixUtils.putFixTag( out, FixTags.TIERCODE_INT, tierCode, 0, Utils.lastIndexTrim(tierCode, (byte)0) );
		if (FixUtils.isSet(messageEventSource)) FixUtils.putFixTag( out, FixTags.MESSAGEEVENTSOURCE_INT, messageEventSource, 0, Utils.lastIndexTrim(messageEventSource, (byte)0) );
		if (FixUtils.isSet(lastUpdateTime)) FixUtils.putFixTag( out, FixTags.LASTUPDATETIME_INT, lastUpdateTime);
		if (FixUtils.isSet(rndPx)) FixUtils.putFixFloatTag( out, FixTags.RNDPX_INT, rndPx);
		if (FixUtils.isSet(grossTradeAmt)) FixUtils.putFixTag( out, FixTags.GROSSTRADEAMT_INT, grossTradeAmt);
		if (FixUtils.isSet(tZTransactTime)) FixUtils.putFixTag( out, FixTags.TZTRANSACTTIME_INT, tZTransactTime);
		if (FixUtils.isSet(reportedPxDiff)) FixUtils.putFixTag( out, FixTags.REPORTEDPXDIFF_INT, reportedPxDiff?(byte)'Y':(byte)'N' );
		if (FixUtils.isSet(rejectText)) FixUtils.putFixTag( out, FixTags.REJECTTEXT_INT, rejectText, 0, Utils.lastIndexTrim(rejectText, (byte)0) );
		if (FixUtils.isSet(feeMultiplier)) FixUtils.putFixFloatTag( out, FixTags.FEEMULTIPLIER_INT, feeMultiplier);
		// the checksum at the end

		int checkSumStart = out.position();
		out.position( msgLengthValueStart );
		bodyLength = checkSumStart - msgTypeStart;
		Utils.longToNumeric( out, bodyLength, Utils.digits(FixConstants.MAX_MESSAGE_SIZE) );

		checkSum = FixUtils.computeChecksum( out, msgStart, checkSumStart );
		out.position( checkSumStart );
		FixUtils.putFixTag( out, FixTags.CHECKSUM_INT, checkSum );

		out.flip();

	}
	@Override		
	public void printBuffer(ByteBuffer out) {

		out.put(buf);

		out.flip();

	}

	/**
	 * If you use toString for any other purpose than administrative printout.
	 * You will end up in nifelheim!
	**/
	@Override
	public String toString() {
		char sep = '\n';
		if (Boolean.getBoolean("fix.useOneLiner")) sep = SOH;

		String s = "BeginString(8)=" + new String(BEGINSTRING_VALUE) + sep;
		s += "BodyLength(9)=" + bodyLength + sep;
		s += "MsgType(35)=" + new String(MsgTypes.TRADECAPTUREREPORT) + sep;

		try {
			// print all fields including the header

			if (FixUtils.isSet(applVerID)) s += "ApplVerID(1128)=" + new String(applVerID) + sep;
			if (FixUtils.isSet(cstmApplVerID)) s += "CstmApplVerID(1129)=" + new String(cstmApplVerID) + sep;
			if (FixUtils.isSet(applExtID)) s += "ApplExtID(1156)=" + String.valueOf(applExtID) + sep;
			 s += "SenderCompID(49)=" + new String(senderCompID) + sep;
			 s += "TargetCompID(56)=" + new String(targetCompID) + sep;
			if (FixUtils.isSet(onBehalfOfCompID)) s += "OnBehalfOfCompID(115)=" + new String(onBehalfOfCompID) + sep;
			if (FixUtils.isSet(deliverToCompID)) s += "DeliverToCompID(128)=" + new String(deliverToCompID) + sep;
			if (FixUtils.isSet(secureDataLen)) s += "SecureDataLen(90)=" + String.valueOf(secureDataLen) + sep;
			if (FixUtils.isSet(secureData)) s += "SecureData(91)=" + new String(secureData) + sep;
			 s += "MsgSeqNum(34)=" + String.valueOf(msgSeqNum) + sep;
			if (FixUtils.isSet(senderSubID)) s += "SenderSubID(50)=" + new String(senderSubID) + sep;
			if (FixUtils.isSet(senderLocationID)) s += "SenderLocationID(142)=" + new String(senderLocationID) + sep;
			if (FixUtils.isSet(targetSubID)) s += "TargetSubID(57)=" + new String(targetSubID) + sep;
			if (FixUtils.isSet(targetLocationID)) s += "TargetLocationID(143)=" + new String(targetLocationID) + sep;
			if (FixUtils.isSet(onBehalfOfSubID)) s += "OnBehalfOfSubID(116)=" + new String(onBehalfOfSubID) + sep;
			if (FixUtils.isSet(onBehalfOfLocationID)) s += "OnBehalfOfLocationID(144)=" + new String(onBehalfOfLocationID) + sep;
			if (FixUtils.isSet(deliverToSubID)) s += "DeliverToSubID(129)=" + new String(deliverToSubID) + sep;
			if (FixUtils.isSet(deliverToLocationID)) s += "DeliverToLocationID(145)=" + new String(deliverToLocationID) + sep;
			if (FixUtils.isSet(possDupFlag)) s += "PossDupFlag(43)=" + String.valueOf(possDupFlag) + sep;
			if (FixUtils.isSet(possResend)) s += "PossResend(97)=" + String.valueOf(possResend) + sep;
			 s += "SendingTime(52)=" + new String(sendingTime) + sep;
			if (FixUtils.isSet(origSendingTime)) s += "OrigSendingTime(122)=" + new String(origSendingTime) + sep;
			if (FixUtils.isSet(xmlDataLen)) s += "XmlDataLen(212)=" + String.valueOf(xmlDataLen) + sep;
			if (FixUtils.isSet(xmlData)) s += "XmlData(213)=" + new String(xmlData) + sep;
			if (FixUtils.isSet(messageEncoding)) s += "MessageEncoding(347)=" + new String(messageEncoding) + sep;
			if (FixUtils.isSet(lastMsgSeqNumProcessed)) s += "LastMsgSeqNumProcessed(369)=" + String.valueOf(lastMsgSeqNumProcessed) + sep;
			if (FixUtils.isSet(hopGrp.noHops)) s += hopGrp.toString();

			if (FixUtils.isSet(applicationSequenceControl.applID)) s += applicationSequenceControl.toString();
			if (FixUtils.isSet(tradeReportID)) s += "TradeReportID(571)=" + new String(tradeReportID) + sep;
			if (FixUtils.isSet(tradeID)) s += "TradeID(1003)=" + new String(tradeID) + sep;
			if (FixUtils.isSet(secondaryTradeID)) s += "SecondaryTradeID(1040)=" + new String(secondaryTradeID) + sep;
			if (FixUtils.isSet(firmTradeID)) s += "FirmTradeID(1041)=" + new String(firmTradeID) + sep;
			if (FixUtils.isSet(secondaryFirmTradeID)) s += "SecondaryFirmTradeID(1042)=" + new String(secondaryFirmTradeID) + sep;
			if (FixUtils.isSet(tradeReportTransType)) s += "TradeReportTransType(487)=" + String.valueOf(tradeReportTransType) + sep;
			if (FixUtils.isSet(tradeReportType)) s += "TradeReportType(856)=" + String.valueOf(tradeReportType) + sep;
			if (FixUtils.isSet(trdRptStatus)) s += "TrdRptStatus(939)=" + String.valueOf(trdRptStatus) + sep;
			if (FixUtils.isSet(tradeRequestID)) s += "TradeRequestID(568)=" + new String(tradeRequestID) + sep;
			if (FixUtils.isSet(trdType)) s += "TrdType(828)=" + String.valueOf(trdType) + sep;
			if (FixUtils.isSet(trdSubType)) s += "TrdSubType(829)=" + String.valueOf(trdSubType) + sep;
			if (FixUtils.isSet(secondaryTrdType)) s += "SecondaryTrdType(855)=" + String.valueOf(secondaryTrdType) + sep;
			if (FixUtils.isSet(tradeHandlingInstr)) s += "TradeHandlingInstr(1123)=" + String.valueOf(tradeHandlingInstr) + sep;
			if (FixUtils.isSet(origTradeHandlingInstr)) s += "OrigTradeHandlingInstr(1124)=" + String.valueOf(origTradeHandlingInstr) + sep;
			if (FixUtils.isSet(origTradeDate)) s += "OrigTradeDate(1125)=" + new String(origTradeDate) + sep;
			if (FixUtils.isSet(origTradeID)) s += "OrigTradeID(1126)=" + new String(origTradeID) + sep;
			if (FixUtils.isSet(origSecondaryTradeID)) s += "OrigSecondaryTradeID(1127)=" + new String(origSecondaryTradeID) + sep;
			if (FixUtils.isSet(transferReason)) s += "TransferReason(830)=" + new String(transferReason) + sep;
			if (FixUtils.isSet(execType)) s += "ExecType(150)=" + String.valueOf(execType) + sep;
			if (FixUtils.isSet(totNumTradeReports)) s += "TotNumTradeReports(748)=" + String.valueOf(totNumTradeReports) + sep;
			if (FixUtils.isSet(lastRptRequested)) s += "LastRptRequested(912)=" + String.valueOf(lastRptRequested) + sep;
			if (FixUtils.isSet(unsolicitedIndicator)) s += "UnsolicitedIndicator(325)=" + String.valueOf(unsolicitedIndicator) + sep;
			if (FixUtils.isSet(subscriptionRequestType)) s += "SubscriptionRequestType(263)=" + String.valueOf(subscriptionRequestType) + sep;
			if (FixUtils.isSet(tradeReportRefID)) s += "TradeReportRefID(572)=" + new String(tradeReportRefID) + sep;
			if (FixUtils.isSet(secondaryTradeReportRefID)) s += "SecondaryTradeReportRefID(881)=" + new String(secondaryTradeReportRefID) + sep;
			if (FixUtils.isSet(secondaryTradeReportID)) s += "SecondaryTradeReportID(818)=" + new String(secondaryTradeReportID) + sep;
			if (FixUtils.isSet(tradeLinkID)) s += "TradeLinkID(820)=" + new String(tradeLinkID) + sep;
			if (FixUtils.isSet(trdMatchID)) s += "TrdMatchID(880)=" + new String(trdMatchID) + sep;
			if (FixUtils.isSet(execID)) s += "ExecID(17)=" + new String(execID) + sep;
			if (FixUtils.isSet(secondaryExecID)) s += "SecondaryExecID(527)=" + new String(secondaryExecID) + sep;
			if (FixUtils.isSet(execRestatementReason)) s += "ExecRestatementReason(378)=" + String.valueOf(execRestatementReason) + sep;
			if (FixUtils.isSet(previouslyReported)) s += "PreviouslyReported(570)=" + String.valueOf(previouslyReported) + sep;
			if (FixUtils.isSet(priceType)) s += "PriceType(423)=" + String.valueOf(priceType) + sep;
			if (FixUtils.isSet(asOfIndicator)) s += "AsOfIndicator(1015)=" + String.valueOf(asOfIndicator) + sep;
			if (FixUtils.isSet(settlSessID)) s += "SettlSessID(716)=" + new String(settlSessID) + sep;
			if (FixUtils.isSet(settlSessSubID)) s += "SettlSessSubID(717)=" + new String(settlSessSubID) + sep;
			if (FixUtils.isSet(venueType)) s += "VenueType(1430)=" + String.valueOf(venueType) + sep;
			if (FixUtils.isSet(marketSegmentID)) s += "MarketSegmentID(1300)=" + new String(marketSegmentID) + sep;
			if (FixUtils.isSet(marketID)) s += "MarketID(1301)=" + new String(marketID) + sep;
			if (FixUtils.isSet(rootParties.noRootPartyIDs)) s += rootParties.toString();
			 s += instrument.toString();
			if (FixUtils.isSet(financingDetails.agreementDesc)) s += financingDetails.toString();
			if (FixUtils.isSet(qtyType)) s += "QtyType(854)=" + String.valueOf(qtyType) + sep;
			if (FixUtils.isSet(yieldData.yieldType)) s += yieldData.toString();
			if (FixUtils.isSet(undInstrmtGrp.noUnderlyings)) s += undInstrmtGrp.toString();
			if (FixUtils.isSet(underlyingTradingSessionID)) s += "UnderlyingTradingSessionID(822)=" + new String(underlyingTradingSessionID) + sep;
			if (FixUtils.isSet(underlyingTradingSessionSubID)) s += "UnderlyingTradingSessionSubID(823)=" + new String(underlyingTradingSessionSubID) + sep;
			 s += "LastQty(32)=" + String.valueOf(lastQty) + sep;
			 s += "LastPx(31)=" + String.valueOf(lastPx) + sep;
			if (FixUtils.isSet(calculatedCcyLastQty)) s += "CalculatedCcyLastQty(1056)=" + String.valueOf(calculatedCcyLastQty) + sep;
			if (FixUtils.isSet(currency)) s += "Currency(15)=" + new String(currency) + sep;
			if (FixUtils.isSet(settlCurrency)) s += "SettlCurrency(120)=" + new String(settlCurrency) + sep;
			if (FixUtils.isSet(lastParPx)) s += "LastParPx(669)=" + String.valueOf(lastParPx) + sep;
			if (FixUtils.isSet(lastSpotRate)) s += "LastSpotRate(194)=" + String.valueOf(lastSpotRate) + sep;
			if (FixUtils.isSet(lastForwardPoints)) s += "LastForwardPoints(195)=" + String.valueOf(lastForwardPoints) + sep;
			if (FixUtils.isSet(lastSwapPoints)) s += "LastSwapPoints(1071)=" + String.valueOf(lastSwapPoints) + sep;
			if (FixUtils.isSet(lastMkt)) s += "LastMkt(30)=" + new String(lastMkt) + sep;
			if (FixUtils.isSet(tradeDate)) s += "TradeDate(75)=" + new String(tradeDate) + sep;
			if (FixUtils.isSet(clearingBusinessDate)) s += "ClearingBusinessDate(715)=" + new String(clearingBusinessDate) + sep;
			if (FixUtils.isSet(avgPx)) s += "AvgPx(6)=" + String.valueOf(avgPx) + sep;
			if (FixUtils.isSet(spreadOrBenchmarkCurveData.spread)) s += spreadOrBenchmarkCurveData.toString();
			if (FixUtils.isSet(avgPxIndicator)) s += "AvgPxIndicator(819)=" + String.valueOf(avgPxIndicator) + sep;
			if (FixUtils.isSet(positionAmountData.noPosAmt)) s += positionAmountData.toString();
			if (FixUtils.isSet(multiLegReportingType)) s += "MultiLegReportingType(442)=" + String.valueOf(multiLegReportingType) + sep;
			if (FixUtils.isSet(tradeLegRefID)) s += "TradeLegRefID(824)=" + new String(tradeLegRefID) + sep;
			if (FixUtils.isSet(trdInstrmtLegGrp.noLegs)) s += trdInstrmtLegGrp.toString();
			if (FixUtils.isSet(transactTime)) s += "TransactTime(60)=" + new String(transactTime) + sep;
			if (FixUtils.isSet(trdRegTimestamps.noTrdRegTimestamps)) s += trdRegTimestamps.toString();
			if (FixUtils.isSet(settlType)) s += "SettlType(63)=" + new String(settlType) + sep;
			if (FixUtils.isSet(settlDate)) s += "SettlDate(64)=" + new String(settlDate) + sep;
			if (FixUtils.isSet(underlyingSettlementDate)) s += "UnderlyingSettlementDate(987)=" + new String(underlyingSettlementDate) + sep;
			if (FixUtils.isSet(matchStatus)) s += "MatchStatus(573)=" + String.valueOf(matchStatus) + sep;
			if (FixUtils.isSet(matchType)) s += "MatchType(574)=" + new String(matchType) + sep;
			 s += trdCapRptSideGrp.toString();
			if (FixUtils.isSet(volatility)) s += "Volatility(1188)=" + String.valueOf(volatility) + sep;
			if (FixUtils.isSet(dividendYield)) s += "DividendYield(1380)=" + String.valueOf(dividendYield) + sep;
			if (FixUtils.isSet(riskFreeRate)) s += "RiskFreeRate(1190)=" + String.valueOf(riskFreeRate) + sep;
			if (FixUtils.isSet(currencyRatio)) s += "CurrencyRatio(1382)=" + String.valueOf(currencyRatio) + sep;
			if (FixUtils.isSet(copyMsgIndicator)) s += "CopyMsgIndicator(797)=" + String.valueOf(copyMsgIndicator) + sep;
			if (FixUtils.isSet(trdRepIndicatorsGrp.noTrdRepIndicators)) s += trdRepIndicatorsGrp.toString();
			if (FixUtils.isSet(publishTrdIndicator)) s += "PublishTrdIndicator(852)=" + String.valueOf(publishTrdIndicator) + sep;
			if (FixUtils.isSet(tradePublishIndicator)) s += "TradePublishIndicator(1390)=" + String.valueOf(tradePublishIndicator) + sep;
			if (FixUtils.isSet(shortSaleReason)) s += "ShortSaleReason(853)=" + String.valueOf(shortSaleReason) + sep;
			if (FixUtils.isSet(tierCode)) s += "TierCode(994)=" + new String(tierCode) + sep;
			if (FixUtils.isSet(messageEventSource)) s += "MessageEventSource(1011)=" + new String(messageEventSource) + sep;
			if (FixUtils.isSet(lastUpdateTime)) s += "LastUpdateTime(779)=" + new String(lastUpdateTime) + sep;
			if (FixUtils.isSet(rndPx)) s += "RndPx(991)=" + String.valueOf(rndPx) + sep;
			if (FixUtils.isSet(grossTradeAmt)) s += "GrossTradeAmt(381)=" + String.valueOf(grossTradeAmt) + sep;
			if (FixUtils.isSet(tZTransactTime)) s += "TZTransactTime(1132)=" + new String(tZTransactTime) + sep;
			if (FixUtils.isSet(reportedPxDiff)) s += "ReportedPxDiff(1134)=" + String.valueOf(reportedPxDiff) + sep;
			if (FixUtils.isSet(rejectText)) s += "RejectText(1328)=" + new String(rejectText) + sep;
			if (FixUtils.isSet(feeMultiplier)) s += "FeeMultiplier(1329)=" + String.valueOf(feeMultiplier) + sep;

			s += "checkSum(10)=" + String.valueOf(checkSum) + sep;

		} catch(Exception e) {  };

		return s;
	}

	@Override
	public boolean equals(Object o) {
		if (! ( o instanceof FixTradeCaptureReport)) return false;

			FixTradeCaptureReport msg = (FixTradeCaptureReport) o;

		if ( ! super.equals(msg) ) return false;

		if (!applicationSequenceControl.equals(msg.applicationSequenceControl)) return false;

		if (!Utils.equals( tradeReportID, msg.tradeReportID)) return false;

		if (!Utils.equals( tradeID, msg.tradeID)) return false;

		if (!Utils.equals( secondaryTradeID, msg.secondaryTradeID)) return false;

		if (!Utils.equals( firmTradeID, msg.firmTradeID)) return false;

		if (!Utils.equals( secondaryFirmTradeID, msg.secondaryFirmTradeID)) return false;

		if (!( tradeReportTransType==msg.tradeReportTransType)) return false;

		if (!( tradeReportType==msg.tradeReportType)) return false;

		if (!( trdRptStatus==msg.trdRptStatus)) return false;

		if (!Utils.equals( tradeRequestID, msg.tradeRequestID)) return false;

		if (!( trdType==msg.trdType)) return false;

		if (!( trdSubType==msg.trdSubType)) return false;

		if (!( secondaryTrdType==msg.secondaryTrdType)) return false;

		if (!( tradeHandlingInstr==msg.tradeHandlingInstr)) return false;

		if (!( origTradeHandlingInstr==msg.origTradeHandlingInstr)) return false;

		if (!Utils.equals( origTradeID, msg.origTradeID)) return false;

		if (!Utils.equals( origSecondaryTradeID, msg.origSecondaryTradeID)) return false;

		if (!Utils.equals( transferReason, msg.transferReason)) return false;

		if (!( execType==msg.execType)) return false;

		if (!( totNumTradeReports==msg.totNumTradeReports)) return false;

		if (!( lastRptRequested==msg.lastRptRequested)) return false;

		if (!( unsolicitedIndicator==msg.unsolicitedIndicator)) return false;

		if (!( subscriptionRequestType==msg.subscriptionRequestType)) return false;

		if (!Utils.equals( tradeReportRefID, msg.tradeReportRefID)) return false;

		if (!Utils.equals( secondaryTradeReportRefID, msg.secondaryTradeReportRefID)) return false;

		if (!Utils.equals( secondaryTradeReportID, msg.secondaryTradeReportID)) return false;

		if (!Utils.equals( tradeLinkID, msg.tradeLinkID)) return false;

		if (!Utils.equals( trdMatchID, msg.trdMatchID)) return false;

		if (!Utils.equals( execID, msg.execID)) return false;

		if (!Utils.equals( secondaryExecID, msg.secondaryExecID)) return false;

		if (!( execRestatementReason==msg.execRestatementReason)) return false;

		if (!( previouslyReported==msg.previouslyReported)) return false;

		if (!( priceType==msg.priceType)) return false;

		if (!( asOfIndicator==msg.asOfIndicator)) return false;

		if (!Utils.equals( settlSessID, msg.settlSessID)) return false;

		if (!Utils.equals( settlSessSubID, msg.settlSessSubID)) return false;

		if (!( venueType==msg.venueType)) return false;

		if (!Utils.equals( marketSegmentID, msg.marketSegmentID)) return false;

		if (!Utils.equals( marketID, msg.marketID)) return false;

		if (!rootParties.equals(msg.rootParties)) return false;

		if (!instrument.equals(msg.instrument)) return false;

		if (!financingDetails.equals(msg.financingDetails)) return false;

		if (!( qtyType==msg.qtyType)) return false;

		if (!yieldData.equals(msg.yieldData)) return false;

		if (!undInstrmtGrp.equals(msg.undInstrmtGrp)) return false;

		if (!Utils.equals( underlyingTradingSessionID, msg.underlyingTradingSessionID)) return false;

		if (!Utils.equals( underlyingTradingSessionSubID, msg.underlyingTradingSessionSubID)) return false;

		if (!( lastQty==msg.lastQty)) return false;

		if (!( lastPx==msg.lastPx)) return false;

		if (!( calculatedCcyLastQty==msg.calculatedCcyLastQty)) return false;

		if (!Utils.equals( currency, msg.currency)) return false;

		if (!Utils.equals( settlCurrency, msg.settlCurrency)) return false;

		if (!( lastParPx==msg.lastParPx)) return false;

		if (!( lastSpotRate==msg.lastSpotRate)) return false;

		if (!( lastForwardPoints==msg.lastForwardPoints)) return false;

		if (!( lastSwapPoints==msg.lastSwapPoints)) return false;

		if (!Utils.equals( lastMkt, msg.lastMkt)) return false;

		if (!( avgPx==msg.avgPx)) return false;

		if (!spreadOrBenchmarkCurveData.equals(msg.spreadOrBenchmarkCurveData)) return false;

		if (!( avgPxIndicator==msg.avgPxIndicator)) return false;

		if (!positionAmountData.equals(msg.positionAmountData)) return false;

		if (!( multiLegReportingType==msg.multiLegReportingType)) return false;

		if (!Utils.equals( tradeLegRefID, msg.tradeLegRefID)) return false;

		if (!trdInstrmtLegGrp.equals(msg.trdInstrmtLegGrp)) return false;

		if (!trdRegTimestamps.equals(msg.trdRegTimestamps)) return false;

		if (!Utils.equals( settlType, msg.settlType)) return false;

		if (!( matchStatus==msg.matchStatus)) return false;

		if (!Utils.equals( matchType, msg.matchType)) return false;

		if (!trdCapRptSideGrp.equals(msg.trdCapRptSideGrp)) return false;

		if (!( volatility==msg.volatility)) return false;

		if (!( dividendYield==msg.dividendYield)) return false;

		if (!( riskFreeRate==msg.riskFreeRate)) return false;

		if (!( currencyRatio==msg.currencyRatio)) return false;

		if (!( copyMsgIndicator==msg.copyMsgIndicator)) return false;

		if (!trdRepIndicatorsGrp.equals(msg.trdRepIndicatorsGrp)) return false;

		if (!( publishTrdIndicator==msg.publishTrdIndicator)) return false;

		if (!( tradePublishIndicator==msg.tradePublishIndicator)) return false;

		if (!( shortSaleReason==msg.shortSaleReason)) return false;

		if (!Utils.equals( tierCode, msg.tierCode)) return false;

		if (!Utils.equals( messageEventSource, msg.messageEventSource)) return false;

		if (!( rndPx==msg.rndPx)) return false;

		if (!( grossTradeAmt==msg.grossTradeAmt)) return false;

		if (!( reportedPxDiff==msg.reportedPxDiff)) return false;

		if (!Utils.equals( rejectText, msg.rejectText)) return false;

		if (!( feeMultiplier==msg.feeMultiplier)) return false;

		return true;
	}
}
