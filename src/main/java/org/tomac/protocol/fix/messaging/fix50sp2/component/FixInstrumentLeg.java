package org.tomac.protocol.fix.messaging.fix50sp2.component;

// DO NOT EDIT!!!
// This file is generated by FixMessageGenerator.
// If you need additional functionality, put it in a helper class
// that does not live in this folder!!!  Any java file in this folder 
// will be deleted upon the next run of the FixMessageGenerator!

import java.nio.ByteBuffer;

import org.tomac.protocol.fix.FixUtils;
import org.tomac.protocol.fix.FixSessionException;
import org.tomac.protocol.fix.FixGarbledException;
import org.tomac.utils.Utils;
import org.tomac.protocol.fix.FixConstants;


import org.tomac.protocol.fix.messaging.fix50sp2.FixTags;
import org.tomac.protocol.fix.messaging.fix50sp2.FixMessageInfo.*;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixLegSecAltIDGrp;

public class FixInstrumentLeg implements FixComponent
{

	public byte[] legSymbol;
	public byte[] legSymbolSfx;
	public byte[] legSecurityID;
	public byte[] legSecurityIDSource;
	public FixLegSecAltIDGrp legSecAltIDGrp;
	public long legProduct = 0;
	public byte[] legCFICode;
	public byte[] legSecurityType;
	public byte[] legSecuritySubType;
	public byte[] legMaturityMonthYear;
	public byte[] legMaturityDate;
	public byte[] legMaturityTime;
	public byte[] legCouponPaymentDate;
	public byte[] legIssueDate;
	public long legRepoCollateralSecurityType = 0;
	public long legRepurchaseTerm = 0;
	public long legRepurchaseRate = 0;
	public long legFactor = 0;
	public byte[] legCreditRating;
	public byte[] legInstrRegistry;
	public byte[] legCountryOfIssue;
	public byte[] legStateOrProvinceOfIssue;
	public byte[] legLocaleOfIssue;
	public byte[] legRedemptionDate;
	public long legStrikePrice = 0;
	public byte[] legStrikeCurrency;
	public byte legOptAttribute = (byte)' ';
	public long legContractMultiplier = 0;
	public byte[] legUnitOfMeasure;
	public byte[] legTimeUnit;
	public long legExerciseStyle = 0;
	public long legUnitOfMeasureQty = 0;
	public byte[] legPriceUnitOfMeasure;
	public long legPriceUnitOfMeasureQty = 0;
	public long legContractMultiplierUnit = 0;
	public long legFlowScheduleType = 0;
	public long legCouponRate = 0;
	public byte[] legSecurityExchange;
	public byte[] legIssuer;
	public long encodedLegIssuerLen = 0;
	public byte[] encodedLegIssuer;
	public byte[] legSecurityDesc;
	public long encodedLegSecurityDescLen = 0;
	public byte[] encodedLegSecurityDesc;
	public long legRatioQty = 0;
	public byte legSide = (byte)' ';
	public byte[] legCurrency;
	public byte[] legPool;
	public byte[] legDatedDate;
	public byte[] legContractSettlMonth;
	public byte[] legInterestAccrualDate;
	public long legOptionRatio = 0;
	public long legPrice = 0;
	public long legPutOrCall = 0;

	public FixInstrumentLeg() {
		super();

		legSymbol = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		legSymbolSfx = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		legSecurityID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		legSecurityIDSource = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		legSecAltIDGrp = new FixLegSecAltIDGrp();
		legCFICode = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		legSecurityType = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		legSecuritySubType = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		legMaturityMonthYear = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		legMaturityDate = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		legMaturityTime = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		legCouponPaymentDate = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		legIssueDate = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		legCreditRating = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		legInstrRegistry = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		legCountryOfIssue = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		legStateOrProvinceOfIssue = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		legLocaleOfIssue = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		legRedemptionDate = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		legStrikeCurrency = new byte[FixUtils.CURRENCY_LENGTH];
		legUnitOfMeasure = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		legTimeUnit = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		legPriceUnitOfMeasure = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		legSecurityExchange = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		legIssuer = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		encodedLegIssuer = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		legSecurityDesc = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		encodedLegSecurityDesc = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		legCurrency = new byte[FixUtils.CURRENCY_LENGTH];
		legPool = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		legDatedDate = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		legContractSettlMonth = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		legInterestAccrualDate = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		this.clear();

	}

	@Override
	public void clear()
	{

		// clear out all the fields that aren't msgType

		Utils.fill( legSymbol, (byte)0 );
		Utils.fill( legSymbolSfx, (byte)0 );
		Utils.fill( legSecurityID, (byte)0 );
		Utils.fill( legSecurityIDSource, (byte)0 );
		legProduct = Long.MAX_VALUE;		
		Utils.fill( legCFICode, (byte)0 );
		Utils.fill( legSecurityType, (byte)0 );
		Utils.fill( legSecuritySubType, (byte)0 );
		Utils.fill( legMaturityMonthYear, (byte)0 );
		Utils.fill( legMaturityDate, (byte)0 );
		Utils.fill( legMaturityTime, (byte)0 );
		Utils.fill( legCouponPaymentDate, (byte)0 );
		Utils.fill( legIssueDate, (byte)0 );
		legRepoCollateralSecurityType = Long.MAX_VALUE;		
		legRepurchaseTerm = Long.MAX_VALUE;		
		legRepurchaseRate = Long.MAX_VALUE;		
		legFactor = Long.MAX_VALUE;		
		Utils.fill( legCreditRating, (byte)0 );
		Utils.fill( legInstrRegistry, (byte)0 );
		Utils.fill( legCountryOfIssue, (byte)0 );
		Utils.fill( legStateOrProvinceOfIssue, (byte)0 );
		Utils.fill( legLocaleOfIssue, (byte)0 );
		Utils.fill( legRedemptionDate, (byte)0 );
		legStrikePrice = Long.MAX_VALUE;		
		Utils.fill( legStrikeCurrency, (byte)0 );
		legOptAttribute = Byte.MAX_VALUE;		
		legContractMultiplier = Long.MAX_VALUE;		
		Utils.fill( legUnitOfMeasure, (byte)0 );
		Utils.fill( legTimeUnit, (byte)0 );
		legExerciseStyle = Long.MAX_VALUE;		
		legUnitOfMeasureQty = Long.MAX_VALUE;		
		Utils.fill( legPriceUnitOfMeasure, (byte)0 );
		legPriceUnitOfMeasureQty = Long.MAX_VALUE;		
		legContractMultiplierUnit = Long.MAX_VALUE;		
		legFlowScheduleType = Long.MAX_VALUE;		
		legCouponRate = Long.MAX_VALUE;		
		Utils.fill( legSecurityExchange, (byte)0 );
		Utils.fill( legIssuer, (byte)0 );
		encodedLegIssuerLen = Long.MAX_VALUE;		
		Utils.fill( encodedLegIssuer, (byte)0 );
		Utils.fill( legSecurityDesc, (byte)0 );
		encodedLegSecurityDescLen = Long.MAX_VALUE;		
		Utils.fill( encodedLegSecurityDesc, (byte)0 );
		legRatioQty = Long.MAX_VALUE;		
		legSide = Byte.MAX_VALUE;		
		Utils.fill( legCurrency, (byte)0 );
		Utils.fill( legPool, (byte)0 );
		Utils.fill( legDatedDate, (byte)0 );
		Utils.fill( legContractSettlMonth, (byte)0 );
		Utils.fill( legInterestAccrualDate, (byte)0 );
		legOptionRatio = Long.MAX_VALUE;		
		legPrice = Long.MAX_VALUE;		
		legPutOrCall = Long.MAX_VALUE;		
		legSecAltIDGrp.clear();
	}

	public void getAll(int id, ByteBuffer buf) throws FixSessionException, FixGarbledException
	{

		int startTagPosition = buf.position();

		int lastTagPosition = buf.position();
		do {
			ByteBuffer value;

			value = buf;

			switch( id ) {

			case FixTags.LEGSYMBOL_INT:
				legSymbol = FixUtils.getTagStringValue(null ,id ,value, legSymbol);
				break;

			case FixTags.LEGSYMBOLSFX_INT:
				legSymbolSfx = FixUtils.getTagStringValue(null ,id ,value, legSymbolSfx);
				break;

			case FixTags.LEGSECURITYID_INT:
				legSecurityID = FixUtils.getTagStringValue(null ,id ,value, legSecurityID);
				break;

			case FixTags.LEGSECURITYIDSOURCE_INT:
				legSecurityIDSource = FixUtils.getTagStringValue(null ,id ,value, legSecurityIDSource);
				break;

			case FixTags.NOLEGSECURITYALTID_INT:
				legSecAltIDGrp.noLegSecurityAltID = FixUtils.getTagIntValue(null, FixTags.NOLEGSECURITYALTID_INT, value );
				legSecAltIDGrp.getAll(legSecAltIDGrp.noLegSecurityAltID, value );
				break;

			case FixTags.LEGPRODUCT_INT:
				legProduct = FixUtils.getTagIntValue(null ,id ,value );
				break;

			case FixTags.LEGCFICODE_INT:
				legCFICode = FixUtils.getTagStringValue(null ,id ,value, legCFICode);
				break;

			case FixTags.LEGSECURITYTYPE_INT:
				legSecurityType = FixUtils.getTagStringValue(null ,id ,value, legSecurityType);
				break;

			case FixTags.LEGSECURITYSUBTYPE_INT:
				legSecuritySubType = FixUtils.getTagStringValue(null ,id ,value, legSecuritySubType);
				break;

			case FixTags.LEGMATURITYMONTHYEAR_INT:
				legMaturityMonthYear = FixUtils.getTagStringValue(null ,id ,value, legMaturityMonthYear);
				break;

			case FixTags.LEGMATURITYDATE_INT:
				legMaturityDate = FixUtils.getTagStringValue(null ,id ,value, legMaturityDate);
				break;

			case FixTags.LEGMATURITYTIME_INT:
				legMaturityTime = FixUtils.getTagStringValue(null ,id ,value, legMaturityTime);
				break;

			case FixTags.LEGCOUPONPAYMENTDATE_INT:
				legCouponPaymentDate = FixUtils.getTagStringValue(null ,id ,value, legCouponPaymentDate);
				break;

			case FixTags.LEGISSUEDATE_INT:
				legIssueDate = FixUtils.getTagStringValue(null ,id ,value, legIssueDate);
				break;

			case FixTags.LEGREPOCOLLATERALSECURITYTYPE_INT:
				legRepoCollateralSecurityType = FixUtils.getTagIntValue(null ,id ,value );
				break;

			case FixTags.LEGREPURCHASETERM_INT:
				legRepurchaseTerm = FixUtils.getTagIntValue(null ,id ,value );
				break;

			case FixTags.LEGREPURCHASERATE_INT:
				legRepurchaseRate = FixUtils.getTagFloatValue(null ,id ,value);
				break;

			case FixTags.LEGFACTOR_INT:
				legFactor = FixUtils.getTagFloatValue(null ,id ,value);
				break;

			case FixTags.LEGCREDITRATING_INT:
				legCreditRating = FixUtils.getTagStringValue(null ,id ,value, legCreditRating);
				break;

			case FixTags.LEGINSTRREGISTRY_INT:
				legInstrRegistry = FixUtils.getTagStringValue(null ,id ,value, legInstrRegistry);
				break;

			case FixTags.LEGCOUNTRYOFISSUE_INT:
				legCountryOfIssue = FixUtils.getTagStringValue(null ,id ,value, legCountryOfIssue);
				break;

			case FixTags.LEGSTATEORPROVINCEOFISSUE_INT:
				legStateOrProvinceOfIssue = FixUtils.getTagStringValue(null ,id ,value, legStateOrProvinceOfIssue);
				break;

			case FixTags.LEGLOCALEOFISSUE_INT:
				legLocaleOfIssue = FixUtils.getTagStringValue(null ,id ,value, legLocaleOfIssue);
				break;

			case FixTags.LEGREDEMPTIONDATE_INT:
				legRedemptionDate = FixUtils.getTagStringValue(null ,id ,value, legRedemptionDate);
				break;

			case FixTags.LEGSTRIKEPRICE_INT:
				legStrikePrice = FixUtils.getTagFloatValue(null ,id ,value);
				break;

			case FixTags.LEGSTRIKECURRENCY_INT:
				legStrikeCurrency = FixUtils.getTagStringValue(null ,id ,value, legStrikeCurrency);
				break;

			case FixTags.LEGOPTATTRIBUTE_INT:
				legOptAttribute = FixUtils.getTagCharValue(null ,id ,value );
				break;

			case FixTags.LEGCONTRACTMULTIPLIER_INT:
				legContractMultiplier = FixUtils.getTagFloatValue(null ,id ,value);
				break;

			case FixTags.LEGUNITOFMEASURE_INT:
				legUnitOfMeasure = FixUtils.getTagStringValue(null ,id ,value, legUnitOfMeasure);
				break;

			case FixTags.LEGTIMEUNIT_INT:
				legTimeUnit = FixUtils.getTagStringValue(null ,id ,value, legTimeUnit);
				break;

			case FixTags.LEGEXERCISESTYLE_INT:
				legExerciseStyle = FixUtils.getTagIntValue(null ,id ,value );
				break;

			case FixTags.LEGUNITOFMEASUREQTY_INT:
				legUnitOfMeasureQty = FixUtils.getTagFloatValue(null ,id ,value);
				break;

			case FixTags.LEGPRICEUNITOFMEASURE_INT:
				legPriceUnitOfMeasure = FixUtils.getTagStringValue(null ,id ,value, legPriceUnitOfMeasure);
				break;

			case FixTags.LEGPRICEUNITOFMEASUREQTY_INT:
				legPriceUnitOfMeasureQty = FixUtils.getTagFloatValue(null ,id ,value);
				break;

			case FixTags.LEGCONTRACTMULTIPLIERUNIT_INT:
				legContractMultiplierUnit = FixUtils.getTagIntValue(null ,id ,value );
				break;

			case FixTags.LEGFLOWSCHEDULETYPE_INT:
				legFlowScheduleType = FixUtils.getTagIntValue(null ,id ,value );
				break;

			case FixTags.LEGCOUPONRATE_INT:
				legCouponRate = FixUtils.getTagFloatValue(null ,id ,value);
				break;

			case FixTags.LEGSECURITYEXCHANGE_INT:
				legSecurityExchange = FixUtils.getTagStringValue(null ,id ,value, legSecurityExchange);
				break;

			case FixTags.LEGISSUER_INT:
				legIssuer = FixUtils.getTagStringValue(null ,id ,value, legIssuer);
				break;

			case FixTags.ENCODEDLEGISSUERLEN_INT:
				encodedLegIssuerLen = FixUtils.getTagIntValue(null ,id ,value );
				break;

			case FixTags.ENCODEDLEGISSUER_INT:
				encodedLegIssuer = FixUtils.getTagStringValue(null ,id ,value, encodedLegIssuer);
				break;

			case FixTags.LEGSECURITYDESC_INT:
				legSecurityDesc = FixUtils.getTagStringValue(null ,id ,value, legSecurityDesc);
				break;

			case FixTags.ENCODEDLEGSECURITYDESCLEN_INT:
				encodedLegSecurityDescLen = FixUtils.getTagIntValue(null ,id ,value );
				break;

			case FixTags.ENCODEDLEGSECURITYDESC_INT:
				encodedLegSecurityDesc = FixUtils.getTagStringValue(null ,id ,value, encodedLegSecurityDesc);
				break;

			case FixTags.LEGRATIOQTY_INT:
				legRatioQty = FixUtils.getTagFloatValue(null ,id ,value);
				break;

			case FixTags.LEGSIDE_INT:
				legSide = FixUtils.getTagCharValue(null ,id ,value );
				break;

			case FixTags.LEGCURRENCY_INT:
				legCurrency = FixUtils.getTagStringValue(null ,id ,value, legCurrency);
				break;

			case FixTags.LEGPOOL_INT:
				legPool = FixUtils.getTagStringValue(null ,id ,value, legPool);
				break;

			case FixTags.LEGDATEDDATE_INT:
				legDatedDate = FixUtils.getTagStringValue(null ,id ,value, legDatedDate);
				break;

			case FixTags.LEGCONTRACTSETTLMONTH_INT:
				legContractSettlMonth = FixUtils.getTagStringValue(null ,id ,value, legContractSettlMonth);
				break;

			case FixTags.LEGINTERESTACCRUALDATE_INT:
				legInterestAccrualDate = FixUtils.getTagStringValue(null ,id ,value, legInterestAccrualDate);
				break;

			case FixTags.LEGOPTIONRATIO_INT:
				legOptionRatio = FixUtils.getTagFloatValue(null ,id ,value);
				break;

			case FixTags.LEGPRICE_INT:
				legPrice = FixUtils.getTagFloatValue(null ,id ,value);
				break;

			case FixTags.LEGPUTORCALL_INT:
				legPutOrCall = FixUtils.getTagIntValue(null ,id ,value );
				break;

			// we will always endup with unknown tag, unread and return to upper layer in hierarchy
			default:
				id = checkRequiredTags();
				if (id > 0) throw new FixSessionException(SessionRejectReason.REQUIRED_TAG_MISSING, "Required tag missing".getBytes(), id, new byte[0] );

				buf.position( lastTagPosition );
				return;

			}

			lastTagPosition = buf.position();

		} while ( ( id = FixUtils.getTagId( buf ) ) >= 0 );

		buf.position(startTagPosition);

	}

	private int checkRequiredTags() {
		int tag = -1;

		return tag;

	}
	@Override
	public boolean isSet()
	{
		if (FixUtils.isSet(legSymbol)) return true;
		if (FixUtils.isSet(legSymbolSfx)) return true;
		if (FixUtils.isSet(legSecurityID)) return true;
		if (FixUtils.isSet(legSecurityIDSource)) return true;
		if (FixUtils.isSet(legSecAltIDGrp.noLegSecurityAltID)) return true;
		if (FixUtils.isSet(legProduct)) return true;
		if (FixUtils.isSet(legCFICode)) return true;
		if (FixUtils.isSet(legSecurityType)) return true;
		if (FixUtils.isSet(legSecuritySubType)) return true;
		if (FixUtils.isSet(legMaturityMonthYear)) return true;
		if (FixUtils.isSet(legMaturityDate)) return true;
		if (FixUtils.isSet(legMaturityTime)) return true;
		if (FixUtils.isSet(legCouponPaymentDate)) return true;
		if (FixUtils.isSet(legIssueDate)) return true;
		if (FixUtils.isSet(legRepoCollateralSecurityType)) return true;
		if (FixUtils.isSet(legRepurchaseTerm)) return true;
		if (FixUtils.isSet(legRepurchaseRate)) return true;
		if (FixUtils.isSet(legFactor)) return true;
		if (FixUtils.isSet(legCreditRating)) return true;
		if (FixUtils.isSet(legInstrRegistry)) return true;
		if (FixUtils.isSet(legCountryOfIssue)) return true;
		if (FixUtils.isSet(legStateOrProvinceOfIssue)) return true;
		if (FixUtils.isSet(legLocaleOfIssue)) return true;
		if (FixUtils.isSet(legRedemptionDate)) return true;
		if (FixUtils.isSet(legStrikePrice)) return true;
		if (FixUtils.isSet(legStrikeCurrency)) return true;
		if (FixUtils.isSet(legOptAttribute)) return true;
		if (FixUtils.isSet(legContractMultiplier)) return true;
		if (FixUtils.isSet(legUnitOfMeasure)) return true;
		if (FixUtils.isSet(legTimeUnit)) return true;
		if (FixUtils.isSet(legExerciseStyle)) return true;
		if (FixUtils.isSet(legUnitOfMeasureQty)) return true;
		if (FixUtils.isSet(legPriceUnitOfMeasure)) return true;
		if (FixUtils.isSet(legPriceUnitOfMeasureQty)) return true;
		if (FixUtils.isSet(legContractMultiplierUnit)) return true;
		if (FixUtils.isSet(legFlowScheduleType)) return true;
		if (FixUtils.isSet(legCouponRate)) return true;
		if (FixUtils.isSet(legSecurityExchange)) return true;
		if (FixUtils.isSet(legIssuer)) return true;
		if (FixUtils.isSet(encodedLegIssuerLen)) return true;
		if (FixUtils.isSet(encodedLegIssuer)) return true;
		if (FixUtils.isSet(legSecurityDesc)) return true;
		if (FixUtils.isSet(encodedLegSecurityDescLen)) return true;
		if (FixUtils.isSet(encodedLegSecurityDesc)) return true;
		if (FixUtils.isSet(legRatioQty)) return true;
		if (FixUtils.isSet(legSide)) return true;
		if (FixUtils.isSet(legCurrency)) return true;
		if (FixUtils.isSet(legPool)) return true;
		if (FixUtils.isSet(legDatedDate)) return true;
		if (FixUtils.isSet(legContractSettlMonth)) return true;
		if (FixUtils.isSet(legInterestAccrualDate)) return true;
		if (FixUtils.isSet(legOptionRatio)) return true;
		if (FixUtils.isSet(legPrice)) return true;
		if (FixUtils.isSet(legPutOrCall)) return true;
		return false;
	}
	@Override
	public void encode( ByteBuffer out )
	{
		if (FixUtils.isSet(legSymbol)) FixUtils.putFixTag( out, FixTags.LEGSYMBOL_INT, legSymbol, 0, Utils.lastIndexTrim(legSymbol, (byte)0) );
		if (FixUtils.isSet(legSymbolSfx)) FixUtils.putFixTag( out, FixTags.LEGSYMBOLSFX_INT, legSymbolSfx, 0, Utils.lastIndexTrim(legSymbolSfx, (byte)0) );
		if (FixUtils.isSet(legSecurityID)) FixUtils.putFixTag( out, FixTags.LEGSECURITYID_INT, legSecurityID, 0, Utils.lastIndexTrim(legSecurityID, (byte)0) );
		if (FixUtils.isSet(legSecurityIDSource)) FixUtils.putFixTag( out, FixTags.LEGSECURITYIDSOURCE_INT, legSecurityIDSource, 0, Utils.lastIndexTrim(legSecurityIDSource, (byte)0) );
		if (FixUtils.isSet(legSecAltIDGrp.noLegSecurityAltID)) legSecAltIDGrp.encode( out );
		if (FixUtils.isSet(legProduct)) FixUtils.putFixTag( out, FixTags.LEGPRODUCT_INT, legProduct);
		if (FixUtils.isSet(legCFICode)) FixUtils.putFixTag( out, FixTags.LEGCFICODE_INT, legCFICode, 0, Utils.lastIndexTrim(legCFICode, (byte)0) );
		if (FixUtils.isSet(legSecurityType)) FixUtils.putFixTag( out, FixTags.LEGSECURITYTYPE_INT, legSecurityType, 0, Utils.lastIndexTrim(legSecurityType, (byte)0) );
		if (FixUtils.isSet(legSecuritySubType)) FixUtils.putFixTag( out, FixTags.LEGSECURITYSUBTYPE_INT, legSecuritySubType, 0, Utils.lastIndexTrim(legSecuritySubType, (byte)0) );
		if (FixUtils.isSet(legMaturityMonthYear)) FixUtils.putFixTag( out, FixTags.LEGMATURITYMONTHYEAR_INT, legMaturityMonthYear);
		if (FixUtils.isSet(legMaturityDate)) FixUtils.putFixTag( out, FixTags.LEGMATURITYDATE_INT, legMaturityDate);
		if (FixUtils.isSet(legMaturityTime)) FixUtils.putFixTag( out, FixTags.LEGMATURITYTIME_INT, legMaturityTime);
		if (FixUtils.isSet(legCouponPaymentDate)) FixUtils.putFixTag( out, FixTags.LEGCOUPONPAYMENTDATE_INT, legCouponPaymentDate);
		if (FixUtils.isSet(legIssueDate)) FixUtils.putFixTag( out, FixTags.LEGISSUEDATE_INT, legIssueDate);
		if (FixUtils.isSet(legRepoCollateralSecurityType)) FixUtils.putFixTag( out, FixTags.LEGREPOCOLLATERALSECURITYTYPE_INT, legRepoCollateralSecurityType);
		if (FixUtils.isSet(legRepurchaseTerm)) FixUtils.putFixTag( out, FixTags.LEGREPURCHASETERM_INT, legRepurchaseTerm);
		if (FixUtils.isSet(legRepurchaseRate)) FixUtils.putFixFloatTag( out, FixTags.LEGREPURCHASERATE_INT, legRepurchaseRate);
		if (FixUtils.isSet(legFactor)) FixUtils.putFixFloatTag( out, FixTags.LEGFACTOR_INT, legFactor);
		if (FixUtils.isSet(legCreditRating)) FixUtils.putFixTag( out, FixTags.LEGCREDITRATING_INT, legCreditRating, 0, Utils.lastIndexTrim(legCreditRating, (byte)0) );
		if (FixUtils.isSet(legInstrRegistry)) FixUtils.putFixTag( out, FixTags.LEGINSTRREGISTRY_INT, legInstrRegistry, 0, Utils.lastIndexTrim(legInstrRegistry, (byte)0) );
		if (FixUtils.isSet(legCountryOfIssue)) FixUtils.putFixTag( out, FixTags.LEGCOUNTRYOFISSUE_INT, legCountryOfIssue, 0, Utils.lastIndexTrim(legCountryOfIssue, (byte)0) );
		if (FixUtils.isSet(legStateOrProvinceOfIssue)) FixUtils.putFixTag( out, FixTags.LEGSTATEORPROVINCEOFISSUE_INT, legStateOrProvinceOfIssue, 0, Utils.lastIndexTrim(legStateOrProvinceOfIssue, (byte)0) );
		if (FixUtils.isSet(legLocaleOfIssue)) FixUtils.putFixTag( out, FixTags.LEGLOCALEOFISSUE_INT, legLocaleOfIssue, 0, Utils.lastIndexTrim(legLocaleOfIssue, (byte)0) );
		if (FixUtils.isSet(legRedemptionDate)) FixUtils.putFixTag( out, FixTags.LEGREDEMPTIONDATE_INT, legRedemptionDate);
		if (FixUtils.isSet(legStrikePrice)) FixUtils.putFixFloatTag( out, FixTags.LEGSTRIKEPRICE_INT, legStrikePrice);
		if (FixUtils.isSet(legStrikeCurrency)) FixUtils.putFixTag( out, FixTags.LEGSTRIKECURRENCY_INT, legStrikeCurrency, 0, Utils.lastIndexTrim(legStrikeCurrency, (byte)0) );
		if (FixUtils.isSet(legOptAttribute)) FixUtils.putFixTag( out, FixTags.LEGOPTATTRIBUTE_INT, legOptAttribute );
		if (FixUtils.isSet(legContractMultiplier)) FixUtils.putFixFloatTag( out, FixTags.LEGCONTRACTMULTIPLIER_INT, legContractMultiplier);
		if (FixUtils.isSet(legUnitOfMeasure)) FixUtils.putFixTag( out, FixTags.LEGUNITOFMEASURE_INT, legUnitOfMeasure, 0, Utils.lastIndexTrim(legUnitOfMeasure, (byte)0) );
		if (FixUtils.isSet(legTimeUnit)) FixUtils.putFixTag( out, FixTags.LEGTIMEUNIT_INT, legTimeUnit, 0, Utils.lastIndexTrim(legTimeUnit, (byte)0) );
		if (FixUtils.isSet(legExerciseStyle)) FixUtils.putFixTag( out, FixTags.LEGEXERCISESTYLE_INT, legExerciseStyle);
		if (FixUtils.isSet(legUnitOfMeasureQty)) FixUtils.putFixFloatTag( out, FixTags.LEGUNITOFMEASUREQTY_INT, legUnitOfMeasureQty);
		if (FixUtils.isSet(legPriceUnitOfMeasure)) FixUtils.putFixTag( out, FixTags.LEGPRICEUNITOFMEASURE_INT, legPriceUnitOfMeasure, 0, Utils.lastIndexTrim(legPriceUnitOfMeasure, (byte)0) );
		if (FixUtils.isSet(legPriceUnitOfMeasureQty)) FixUtils.putFixFloatTag( out, FixTags.LEGPRICEUNITOFMEASUREQTY_INT, legPriceUnitOfMeasureQty);
		if (FixUtils.isSet(legContractMultiplierUnit)) FixUtils.putFixTag( out, FixTags.LEGCONTRACTMULTIPLIERUNIT_INT, legContractMultiplierUnit);
		if (FixUtils.isSet(legFlowScheduleType)) FixUtils.putFixTag( out, FixTags.LEGFLOWSCHEDULETYPE_INT, legFlowScheduleType);
		if (FixUtils.isSet(legCouponRate)) FixUtils.putFixFloatTag( out, FixTags.LEGCOUPONRATE_INT, legCouponRate);
		if (FixUtils.isSet(legSecurityExchange)) FixUtils.putFixTag( out, FixTags.LEGSECURITYEXCHANGE_INT, legSecurityExchange, 0, Utils.lastIndexTrim(legSecurityExchange, (byte)0) );
		if (FixUtils.isSet(legIssuer)) FixUtils.putFixTag( out, FixTags.LEGISSUER_INT, legIssuer, 0, Utils.lastIndexTrim(legIssuer, (byte)0) );
		if (FixUtils.isSet(encodedLegIssuerLen)) FixUtils.putFixTag( out, FixTags.ENCODEDLEGISSUERLEN_INT, encodedLegIssuerLen);
		if (FixUtils.isSet(encodedLegIssuer)) FixUtils.putFixTag( out, FixTags.ENCODEDLEGISSUER_INT, encodedLegIssuer, 0, Utils.lastIndexTrim(encodedLegIssuer, (byte)0) );
		if (FixUtils.isSet(legSecurityDesc)) FixUtils.putFixTag( out, FixTags.LEGSECURITYDESC_INT, legSecurityDesc, 0, Utils.lastIndexTrim(legSecurityDesc, (byte)0) );
		if (FixUtils.isSet(encodedLegSecurityDescLen)) FixUtils.putFixTag( out, FixTags.ENCODEDLEGSECURITYDESCLEN_INT, encodedLegSecurityDescLen);
		if (FixUtils.isSet(encodedLegSecurityDesc)) FixUtils.putFixTag( out, FixTags.ENCODEDLEGSECURITYDESC_INT, encodedLegSecurityDesc, 0, Utils.lastIndexTrim(encodedLegSecurityDesc, (byte)0) );
		if (FixUtils.isSet(legRatioQty)) FixUtils.putFixFloatTag( out, FixTags.LEGRATIOQTY_INT, legRatioQty);
		if (FixUtils.isSet(legSide)) FixUtils.putFixTag( out, FixTags.LEGSIDE_INT, legSide );
		if (FixUtils.isSet(legCurrency)) FixUtils.putFixTag( out, FixTags.LEGCURRENCY_INT, legCurrency, 0, Utils.lastIndexTrim(legCurrency, (byte)0) );
		if (FixUtils.isSet(legPool)) FixUtils.putFixTag( out, FixTags.LEGPOOL_INT, legPool, 0, Utils.lastIndexTrim(legPool, (byte)0) );
		if (FixUtils.isSet(legDatedDate)) FixUtils.putFixTag( out, FixTags.LEGDATEDDATE_INT, legDatedDate);
		if (FixUtils.isSet(legContractSettlMonth)) FixUtils.putFixTag( out, FixTags.LEGCONTRACTSETTLMONTH_INT, legContractSettlMonth);
		if (FixUtils.isSet(legInterestAccrualDate)) FixUtils.putFixTag( out, FixTags.LEGINTERESTACCRUALDATE_INT, legInterestAccrualDate);
		if (FixUtils.isSet(legOptionRatio)) FixUtils.putFixFloatTag( out, FixTags.LEGOPTIONRATIO_INT, legOptionRatio);
		if (FixUtils.isSet(legPrice)) FixUtils.putFixFloatTag( out, FixTags.LEGPRICE_INT, legPrice);
		if (FixUtils.isSet(legPutOrCall)) FixUtils.putFixTag( out, FixTags.LEGPUTORCALL_INT, legPutOrCall);
	}
	/**
	 * If you use toString for any other purpose than administrative printout.
	 * You will end up in nifelheim!
	**/
	@Override
	public String toString() {
		char sep = '\n';
		if (Boolean.getBoolean("fix.useOneLiner")) sep = ( byte )0x01;

		String s = "";

			if (FixUtils.isSet(legSymbol)) s += "LegSymbol(600)=" + new String(legSymbol) + sep;
			if (FixUtils.isSet(legSymbolSfx)) s += "LegSymbolSfx(601)=" + new String(legSymbolSfx) + sep;
			if (FixUtils.isSet(legSecurityID)) s += "LegSecurityID(602)=" + new String(legSecurityID) + sep;
			if (FixUtils.isSet(legSecurityIDSource)) s += "LegSecurityIDSource(603)=" + new String(legSecurityIDSource) + sep;
			if (FixUtils.isSet(legSecAltIDGrp.noLegSecurityAltID)) s += legSecAltIDGrp.toString();
			if (FixUtils.isSet(legProduct)) s += "LegProduct(607)=" + String.valueOf(legProduct) + sep;
			if (FixUtils.isSet(legCFICode)) s += "LegCFICode(608)=" + new String(legCFICode) + sep;
			if (FixUtils.isSet(legSecurityType)) s += "LegSecurityType(609)=" + new String(legSecurityType) + sep;
			if (FixUtils.isSet(legSecuritySubType)) s += "LegSecuritySubType(764)=" + new String(legSecuritySubType) + sep;
			if (FixUtils.isSet(legMaturityMonthYear)) s += "LegMaturityMonthYear(610)=" + new String(legMaturityMonthYear) + sep;
			if (FixUtils.isSet(legMaturityDate)) s += "LegMaturityDate(611)=" + new String(legMaturityDate) + sep;
			if (FixUtils.isSet(legMaturityTime)) s += "LegMaturityTime(1212)=" + new String(legMaturityTime) + sep;
			if (FixUtils.isSet(legCouponPaymentDate)) s += "LegCouponPaymentDate(248)=" + new String(legCouponPaymentDate) + sep;
			if (FixUtils.isSet(legIssueDate)) s += "LegIssueDate(249)=" + new String(legIssueDate) + sep;
			if (FixUtils.isSet(legRepoCollateralSecurityType)) s += "LegRepoCollateralSecurityType(250)=" + String.valueOf(legRepoCollateralSecurityType) + sep;
			if (FixUtils.isSet(legRepurchaseTerm)) s += "LegRepurchaseTerm(251)=" + String.valueOf(legRepurchaseTerm) + sep;
			if (FixUtils.isSet(legRepurchaseRate)) s += "LegRepurchaseRate(252)=" + String.valueOf(legRepurchaseRate) + sep;
			if (FixUtils.isSet(legFactor)) s += "LegFactor(253)=" + String.valueOf(legFactor) + sep;
			if (FixUtils.isSet(legCreditRating)) s += "LegCreditRating(257)=" + new String(legCreditRating) + sep;
			if (FixUtils.isSet(legInstrRegistry)) s += "LegInstrRegistry(599)=" + new String(legInstrRegistry) + sep;
			if (FixUtils.isSet(legCountryOfIssue)) s += "LegCountryOfIssue(596)=" + new String(legCountryOfIssue) + sep;
			if (FixUtils.isSet(legStateOrProvinceOfIssue)) s += "LegStateOrProvinceOfIssue(597)=" + new String(legStateOrProvinceOfIssue) + sep;
			if (FixUtils.isSet(legLocaleOfIssue)) s += "LegLocaleOfIssue(598)=" + new String(legLocaleOfIssue) + sep;
			if (FixUtils.isSet(legRedemptionDate)) s += "LegRedemptionDate(254)=" + new String(legRedemptionDate) + sep;
			if (FixUtils.isSet(legStrikePrice)) s += "LegStrikePrice(612)=" + String.valueOf(legStrikePrice) + sep;
			if (FixUtils.isSet(legStrikeCurrency)) s += "LegStrikeCurrency(942)=" + new String(legStrikeCurrency) + sep;
			if (FixUtils.isSet(legOptAttribute)) s += "LegOptAttribute(613)=" + String.valueOf(legOptAttribute) + sep;
			if (FixUtils.isSet(legContractMultiplier)) s += "LegContractMultiplier(614)=" + String.valueOf(legContractMultiplier) + sep;
			if (FixUtils.isSet(legUnitOfMeasure)) s += "LegUnitOfMeasure(999)=" + new String(legUnitOfMeasure) + sep;
			if (FixUtils.isSet(legTimeUnit)) s += "LegTimeUnit(1001)=" + new String(legTimeUnit) + sep;
			if (FixUtils.isSet(legExerciseStyle)) s += "LegExerciseStyle(1420)=" + String.valueOf(legExerciseStyle) + sep;
			if (FixUtils.isSet(legUnitOfMeasureQty)) s += "LegUnitOfMeasureQty(1224)=" + String.valueOf(legUnitOfMeasureQty) + sep;
			if (FixUtils.isSet(legPriceUnitOfMeasure)) s += "LegPriceUnitOfMeasure(1421)=" + new String(legPriceUnitOfMeasure) + sep;
			if (FixUtils.isSet(legPriceUnitOfMeasureQty)) s += "LegPriceUnitOfMeasureQty(1422)=" + String.valueOf(legPriceUnitOfMeasureQty) + sep;
			if (FixUtils.isSet(legContractMultiplierUnit)) s += "LegContractMultiplierUnit(1436)=" + String.valueOf(legContractMultiplierUnit) + sep;
			if (FixUtils.isSet(legFlowScheduleType)) s += "LegFlowScheduleType(1440)=" + String.valueOf(legFlowScheduleType) + sep;
			if (FixUtils.isSet(legCouponRate)) s += "LegCouponRate(615)=" + String.valueOf(legCouponRate) + sep;
			if (FixUtils.isSet(legSecurityExchange)) s += "LegSecurityExchange(616)=" + new String(legSecurityExchange) + sep;
			if (FixUtils.isSet(legIssuer)) s += "LegIssuer(617)=" + new String(legIssuer) + sep;
			if (FixUtils.isSet(encodedLegIssuerLen)) s += "EncodedLegIssuerLen(618)=" + String.valueOf(encodedLegIssuerLen) + sep;
			if (FixUtils.isSet(encodedLegIssuer)) s += "EncodedLegIssuer(619)=" + new String(encodedLegIssuer) + sep;
			if (FixUtils.isSet(legSecurityDesc)) s += "LegSecurityDesc(620)=" + new String(legSecurityDesc) + sep;
			if (FixUtils.isSet(encodedLegSecurityDescLen)) s += "EncodedLegSecurityDescLen(621)=" + String.valueOf(encodedLegSecurityDescLen) + sep;
			if (FixUtils.isSet(encodedLegSecurityDesc)) s += "EncodedLegSecurityDesc(622)=" + new String(encodedLegSecurityDesc) + sep;
			if (FixUtils.isSet(legRatioQty)) s += "LegRatioQty(623)=" + String.valueOf(legRatioQty) + sep;
			if (FixUtils.isSet(legSide)) s += "LegSide(624)=" + String.valueOf(legSide) + sep;
			if (FixUtils.isSet(legCurrency)) s += "LegCurrency(556)=" + new String(legCurrency) + sep;
			if (FixUtils.isSet(legPool)) s += "LegPool(740)=" + new String(legPool) + sep;
			if (FixUtils.isSet(legDatedDate)) s += "LegDatedDate(739)=" + new String(legDatedDate) + sep;
			if (FixUtils.isSet(legContractSettlMonth)) s += "LegContractSettlMonth(955)=" + new String(legContractSettlMonth) + sep;
			if (FixUtils.isSet(legInterestAccrualDate)) s += "LegInterestAccrualDate(956)=" + new String(legInterestAccrualDate) + sep;
			if (FixUtils.isSet(legOptionRatio)) s += "LegOptionRatio(1017)=" + String.valueOf(legOptionRatio) + sep;
			if (FixUtils.isSet(legPrice)) s += "LegPrice(566)=" + String.valueOf(legPrice) + sep;
			if (FixUtils.isSet(legPutOrCall)) s += "LegPutOrCall(1358)=" + String.valueOf(legPutOrCall) + sep;
		return s;

	}

	@Override
	public boolean equals(Object o) {
		if (! ( o instanceof FixInstrumentLeg)) return false;

			FixInstrumentLeg msg = (FixInstrumentLeg) o;

		if (!Utils.equals( legSymbol, msg.legSymbol)) return false;

		if (!Utils.equals( legSymbolSfx, msg.legSymbolSfx)) return false;

		if (!Utils.equals( legSecurityID, msg.legSecurityID)) return false;

		if (!Utils.equals( legSecurityIDSource, msg.legSecurityIDSource)) return false;

		if (!legSecAltIDGrp.equals(msg.legSecAltIDGrp)) return false;

		if (!( legProduct==msg.legProduct)) return false;

		if (!Utils.equals( legCFICode, msg.legCFICode)) return false;

		if (!Utils.equals( legSecurityType, msg.legSecurityType)) return false;

		if (!Utils.equals( legSecuritySubType, msg.legSecuritySubType)) return false;

		if (!Utils.equals( legMaturityMonthYear, msg.legMaturityMonthYear)) return false;

		if (!( legRepoCollateralSecurityType==msg.legRepoCollateralSecurityType)) return false;

		if (!( legRepurchaseTerm==msg.legRepurchaseTerm)) return false;

		if (!( legRepurchaseRate==msg.legRepurchaseRate)) return false;

		if (!( legFactor==msg.legFactor)) return false;

		if (!Utils.equals( legCreditRating, msg.legCreditRating)) return false;

		if (!Utils.equals( legInstrRegistry, msg.legInstrRegistry)) return false;

		if (!Utils.equals( legCountryOfIssue, msg.legCountryOfIssue)) return false;

		if (!Utils.equals( legStateOrProvinceOfIssue, msg.legStateOrProvinceOfIssue)) return false;

		if (!Utils.equals( legLocaleOfIssue, msg.legLocaleOfIssue)) return false;

		if (!( legStrikePrice==msg.legStrikePrice)) return false;

		if (!Utils.equals( legStrikeCurrency, msg.legStrikeCurrency)) return false;

		if (!( legOptAttribute==msg.legOptAttribute)) return false;

		if (!( legContractMultiplier==msg.legContractMultiplier)) return false;

		if (!Utils.equals( legUnitOfMeasure, msg.legUnitOfMeasure)) return false;

		if (!Utils.equals( legTimeUnit, msg.legTimeUnit)) return false;

		if (!( legExerciseStyle==msg.legExerciseStyle)) return false;

		if (!( legUnitOfMeasureQty==msg.legUnitOfMeasureQty)) return false;

		if (!Utils.equals( legPriceUnitOfMeasure, msg.legPriceUnitOfMeasure)) return false;

		if (!( legPriceUnitOfMeasureQty==msg.legPriceUnitOfMeasureQty)) return false;

		if (!( legContractMultiplierUnit==msg.legContractMultiplierUnit)) return false;

		if (!( legFlowScheduleType==msg.legFlowScheduleType)) return false;

		if (!( legCouponRate==msg.legCouponRate)) return false;

		if (!Utils.equals( legSecurityExchange, msg.legSecurityExchange)) return false;

		if (!Utils.equals( legIssuer, msg.legIssuer)) return false;

		if (!( encodedLegIssuerLen==msg.encodedLegIssuerLen)) return false;

		if (!Utils.equals( encodedLegIssuer, msg.encodedLegIssuer)) return false;

		if (!Utils.equals( legSecurityDesc, msg.legSecurityDesc)) return false;

		if (!( encodedLegSecurityDescLen==msg.encodedLegSecurityDescLen)) return false;

		if (!Utils.equals( encodedLegSecurityDesc, msg.encodedLegSecurityDesc)) return false;

		if (!( legRatioQty==msg.legRatioQty)) return false;

		if (!( legSide==msg.legSide)) return false;

		if (!Utils.equals( legCurrency, msg.legCurrency)) return false;

		if (!Utils.equals( legPool, msg.legPool)) return false;

		if (!Utils.equals( legContractSettlMonth, msg.legContractSettlMonth)) return false;

		if (!( legOptionRatio==msg.legOptionRatio)) return false;

		if (!( legPrice==msg.legPrice)) return false;

		if (!( legPutOrCall==msg.legPutOrCall)) return false;

		return true;
	}
}
