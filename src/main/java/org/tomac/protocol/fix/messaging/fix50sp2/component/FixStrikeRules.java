package org.tomac.protocol.fix.messaging.fix50sp2.component;

// DO NOT EDIT!!!
// This file is generated by FixMessageGenerator.
// If you need additional functionality, put it in a helper class
// that does not live in this folder!!!  Any java file in this folder 
// will be deleted upon the next run of the FixMessageGenerator!

import java.nio.ByteBuffer;

import org.tomac.protocol.fix.FixUtils;
import org.tomac.protocol.fix.FixSessionException;
import org.tomac.protocol.fix.FixGarbledException;
import org.tomac.utils.Utils;
import org.tomac.protocol.fix.FixConstants;


import org.tomac.protocol.fix.messaging.fix50sp2.FixMessageInfo.*;
import org.tomac.protocol.fix.messaging.fix50sp2.FixTags;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixMaturityRules;

public class FixStrikeRules
{

	public int noStrikeRules;
	public StrikeRules[] group;

	public void getAll(int noStrikeRules, ByteBuffer buf) throws FixSessionException {
		this.noStrikeRules = noStrikeRules;

		if (noStrikeRules < 1) throw new FixSessionException("asdasd");
		// this will leak memory if we grow the group
		if (group.length < noStrikeRules) 
			group = new StrikeRules[noStrikeRules];

		for ( int i = 0; i < noStrikeRules; i++ ) 
			group[i].getAllGroup(buf);
	}

	public void clear() {
		for (int i = 0; i<noStrikeRules; i++)
			group[i].clear();
	}
	public void encode(ByteBuffer out) {
		for (int i = 0; i<noStrikeRules; i++)
			group[i].encode(out);
	}
	public boolean isSet() {
		for (int i = 0; i<noStrikeRules; i++)
			if (group[i].isSet()) return true;
		return false;
	}

	@Override
	public String toString() {
		String s = "";
		for (int i = 0; i<noStrikeRules; i++)
			s += group[i].toString();
		return s;
	}

public class StrikeRules implements FixComponent
{

	public byte[] strikeRuleID;
	public long startStrikePxRange = 0;
	public long endStrikePxRange = 0;
	public long strikeIncrement = 0;
	public long strikeExerciseStyle = 0;
	public FixMaturityRules maturityRules;

	public StrikeRules() {
		super();

		strikeRuleID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		maturityRules = new FixMaturityRules();
		this.clear();

	}

	@Override
	public void clear()
	{

		// clear out all the fields that aren't msgType

		Utils.fill( strikeRuleID, (byte)0 );
		startStrikePxRange = Long.MAX_VALUE;		
		endStrikePxRange = Long.MAX_VALUE;		
		strikeIncrement = Long.MAX_VALUE;		
		strikeExerciseStyle = Long.MAX_VALUE;		
		maturityRules.clear();
	}

	public void getAllGroup(ByteBuffer buf) throws FixSessionException
	{

		int startTagPosition = buf.position();

		int id = FixUtils.getTagId( buf );
		int lastTagPosition = buf.position();
			ByteBuffer value;

			value = buf;

			if(id == FixTags.STRIKERULEID_INT) {
				strikeRuleID = FixUtils.getTagStringValue(value, strikeRuleID);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.STARTSTRIKEPXRANGE_INT) {
				startStrikePxRange = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.ENDSTRIKEPXRANGE_INT) {
				endStrikePxRange = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.STRIKEINCREMENT_INT) {
				strikeIncrement = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.STRIKEEXERCISESTYLE_INT) {
				strikeExerciseStyle = FixUtils.getTagIntValue( value );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.MATURITYRULEID_INT) {
				maturityRules.getAll(FixTags.MATURITYRULEID_INT, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			id = checkRequiredTags();
			if (id > 0) throw new FixSessionException(buf, "Required tag missing: " + id );

			buf.position( lastTagPosition );
			return;

	}

	private int checkRequiredTags() {
		int tag = -1;

		return tag;

	}
	@Override
	public boolean isSet()
	{
		if (FixUtils.isSet(strikeRuleID)) return true;
		if (FixUtils.isSet(startStrikePxRange)) return true;
		if (FixUtils.isSet(endStrikePxRange)) return true;
		if (FixUtils.isSet(strikeIncrement)) return true;
		if (FixUtils.isSet(strikeExerciseStyle)) return true;
		if (FixUtils.isSet(maturityRules.maturityRuleID)) return true;
		return false;
	}
	@Override
	public void encode( ByteBuffer out )
	{
		if (FixUtils.isSet(strikeRuleID)) FixUtils.putFixTag( out, FixTags.STRIKERULEID_INT, strikeRuleID, 0, Utils.lastIndexTrim(strikeRuleID, (byte)0) );
		if (FixUtils.isSet(startStrikePxRange)) FixUtils.putFixFloatTag( out, FixTags.STARTSTRIKEPXRANGE_INT, startStrikePxRange);
		if (FixUtils.isSet(endStrikePxRange)) FixUtils.putFixFloatTag( out, FixTags.ENDSTRIKEPXRANGE_INT, endStrikePxRange);
		if (FixUtils.isSet(strikeIncrement)) FixUtils.putFixFloatTag( out, FixTags.STRIKEINCREMENT_INT, strikeIncrement);
		if (FixUtils.isSet(strikeExerciseStyle)) FixUtils.putFixTag( out, FixTags.STRIKEEXERCISESTYLE_INT, strikeExerciseStyle);
		if (FixUtils.isSet(maturityRules.maturityRuleID)) maturityRules.encode( out );
	}
	/**
	 * If you use toString for any other purpose than administrative printout.
	 * You will end up in nifelheim!
	**/
	@Override
	public String toString() {
		char sep = '\n';
		if (Boolean.getBoolean("fix.useOneLiner")) sep = ( byte )0x01;

		String s = "";

			if (FixUtils.isSet(strikeRuleID)) s += "StrikeRuleID(1223)=" + new String(strikeRuleID) + sep;
			if (FixUtils.isSet(startStrikePxRange)) s += "StartStrikePxRange(1202)=" + String.valueOf(startStrikePxRange) + sep;
			if (FixUtils.isSet(endStrikePxRange)) s += "EndStrikePxRange(1203)=" + String.valueOf(endStrikePxRange) + sep;
			if (FixUtils.isSet(strikeIncrement)) s += "StrikeIncrement(1204)=" + String.valueOf(strikeIncrement) + sep;
			if (FixUtils.isSet(strikeExerciseStyle)) s += "StrikeExerciseStyle(1304)=" + String.valueOf(strikeExerciseStyle) + sep;
			if (FixUtils.isSet(maturityRules.maturityRuleID)) s += maturityRules.toString();
		return s;

	}

	@Override
	public boolean equals(Object o) {
		if (! ( o instanceof StrikeRules)) return false;

			StrikeRules msg = (StrikeRules) o;

		if ( ! super.equals(msg) ) return false;

		if (!Utils.equals( strikeRuleID, msg.strikeRuleID)) return false;

		if (!( startStrikePxRange==msg.startStrikePxRange)) return false;

		if (!( endStrikePxRange==msg.endStrikePxRange)) return false;

		if (!( strikeIncrement==msg.strikeIncrement)) return false;

		if (!( strikeExerciseStyle==msg.strikeExerciseStyle)) return false;

		if (!maturityRules.equals(msg.maturityRules)) return false;

		return true;
	}
}
}
