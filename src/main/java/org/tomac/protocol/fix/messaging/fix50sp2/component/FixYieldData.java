package org.tomac.protocol.fix.messaging.fix50sp2.component;

// DO NOT EDIT!!!
// This file is generated by FixMessageGenerator.
// If you need additional functionality, put it in a helper class
// that does not live in this folder!!!  Any java file in this folder 
// will be deleted upon the next run of the FixMessageGenerator!

import java.nio.ByteBuffer;

import org.tomac.protocol.fix.FixUtils;
import org.tomac.protocol.fix.FixSessionException;
import org.tomac.protocol.fix.FixGarbledException;
import org.tomac.utils.Utils;
import org.tomac.protocol.fix.FixConstants;


import org.tomac.protocol.fix.messaging.fix50sp2.FixTags;
import org.tomac.protocol.fix.messaging.fix50sp2.FixMessageInfo.*;

public class FixYieldData implements FixComponent
{

	public byte[] yieldType;
	public long yield = 0;
	public byte[] yieldCalcDate;
	public byte[] yieldRedemptionDate;
	public long yieldRedemptionPrice = 0;
	public long yieldRedemptionPriceType = 0;

	public FixYieldData() {
		super();

		yieldType = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		yieldCalcDate = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		yieldRedemptionDate = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		this.clear();

	}

	@Override
	public void clear()
	{

		// clear out all the fields that aren't msgType

		Utils.fill( yieldType, (byte)0 );
		yield = Long.MAX_VALUE;		
		Utils.fill( yieldCalcDate, (byte)0 );
		Utils.fill( yieldRedemptionDate, (byte)0 );
		yieldRedemptionPrice = Long.MAX_VALUE;		
		yieldRedemptionPriceType = Long.MAX_VALUE;		
	}

	public void getAll(int id, ByteBuffer buf) throws FixSessionException
	{

		int startTagPosition = buf.position();

		int lastTagPosition = buf.position();
		do {
			ByteBuffer value;

			value = buf;

			switch( id ) {

			case FixTags.YIELDTYPE_INT:
				yieldType = FixUtils.getTagStringValue(value, yieldType);
				if (!YieldType.isValid(yieldType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + yieldType + ") for tag: " + id );
				break;

			case FixTags.YIELD_INT:
				yield = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.YIELDCALCDATE_INT:
				yieldCalcDate = FixUtils.getTagStringValue(value, yieldCalcDate);
				break;

			case FixTags.YIELDREDEMPTIONDATE_INT:
				yieldRedemptionDate = FixUtils.getTagStringValue(value, yieldRedemptionDate);
				break;

			case FixTags.YIELDREDEMPTIONPRICE_INT:
				yieldRedemptionPrice = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.YIELDREDEMPTIONPRICETYPE_INT:
				yieldRedemptionPriceType = FixUtils.getTagIntValue( value );
				break;

			// we will always endup with unknown tag, unread and return to upper layer in hierarchy
			default:
				id = checkRequiredTags();
				if (id > 0) throw new FixSessionException(buf, "Required tag missing: " + id );

				buf.position( lastTagPosition );
				return;

			}

			lastTagPosition = buf.position();

		} while ( ( id = FixUtils.getTagId( buf ) ) > 0 );

		buf.position(startTagPosition);

	}

	private int checkRequiredTags() {
		int tag = -1;

		return tag;

	}
	@Override
	public boolean isSet()
	{
		if (FixUtils.isSet(yieldType)) return true;
		if (FixUtils.isSet(yield)) return true;
		if (FixUtils.isSet(yieldCalcDate)) return true;
		if (FixUtils.isSet(yieldRedemptionDate)) return true;
		if (FixUtils.isSet(yieldRedemptionPrice)) return true;
		if (FixUtils.isSet(yieldRedemptionPriceType)) return true;
		return false;
	}
	@Override
	public void encode( ByteBuffer out )
	{
		if (FixUtils.isSet(yieldType)) FixUtils.putFixTag( out, FixTags.YIELDTYPE_INT, yieldType, 0, Utils.lastIndexTrim(yieldType, (byte)0) );
		if (FixUtils.isSet(yield)) FixUtils.putFixFloatTag( out, FixTags.YIELD_INT, yield);
		if (FixUtils.isSet(yieldCalcDate)) FixUtils.putFixTag( out, FixTags.YIELDCALCDATE_INT, yieldCalcDate);
		if (FixUtils.isSet(yieldRedemptionDate)) FixUtils.putFixTag( out, FixTags.YIELDREDEMPTIONDATE_INT, yieldRedemptionDate);
		if (FixUtils.isSet(yieldRedemptionPrice)) FixUtils.putFixFloatTag( out, FixTags.YIELDREDEMPTIONPRICE_INT, yieldRedemptionPrice);
		if (FixUtils.isSet(yieldRedemptionPriceType)) FixUtils.putFixTag( out, FixTags.YIELDREDEMPTIONPRICETYPE_INT, yieldRedemptionPriceType);
	}
	/**
	 * If you use toString for any other purpose than administrative printout.
	 * You will end up in nifelheim!
	**/
	@Override
	public String toString() {
		char sep = '\n';
		if (Boolean.getBoolean("fix.useOneLiner")) sep = ( byte )0x01;

		String s = "";

			if (FixUtils.isSet(yieldType)) s += "YieldType(235)=" + new String(yieldType) + sep;
			if (FixUtils.isSet(yield)) s += "Yield(236)=" + String.valueOf(yield) + sep;
			if (FixUtils.isSet(yieldCalcDate)) s += "YieldCalcDate(701)=" + new String(yieldCalcDate) + sep;
			if (FixUtils.isSet(yieldRedemptionDate)) s += "YieldRedemptionDate(696)=" + new String(yieldRedemptionDate) + sep;
			if (FixUtils.isSet(yieldRedemptionPrice)) s += "YieldRedemptionPrice(697)=" + String.valueOf(yieldRedemptionPrice) + sep;
			if (FixUtils.isSet(yieldRedemptionPriceType)) s += "YieldRedemptionPriceType(698)=" + String.valueOf(yieldRedemptionPriceType) + sep;
		return s;

	}

	@Override
	public boolean equals(Object o) {
		if (! ( o instanceof FixYieldData)) return false;

			FixYieldData msg = (FixYieldData) o;

		if ( ! super.equals(msg) ) return false;

		if (!Utils.equals( yieldType, msg.yieldType)) return false;

		if (!( yield==msg.yield)) return false;

		if (!( yieldRedemptionPrice==msg.yieldRedemptionPrice)) return false;

		if (!( yieldRedemptionPriceType==msg.yieldRedemptionPriceType)) return false;

		return true;
	}
}
