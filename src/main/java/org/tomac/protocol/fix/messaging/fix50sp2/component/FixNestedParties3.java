package org.tomac.protocol.fix.messaging.fix50sp2.component;

// DO NOT EDIT!!!
// This file is generated by FixMessageGenerator.
// If you need additional functionality, put it in a helper class
// that does not live in this folder!!!  Any java file in this folder 
// will be deleted upon the next run of the FixMessageGenerator!

import java.nio.ByteBuffer;

import org.tomac.protocol.fix.FixUtils;
import org.tomac.protocol.fix.FixSessionException;
import org.tomac.protocol.fix.FixGarbledException;
import org.tomac.utils.Utils;
import org.tomac.protocol.fix.FixConstants;


import org.tomac.protocol.fix.messaging.fix50sp2.FixMessageInfo.SessionRejectReason;
import org.tomac.protocol.fix.messaging.fix50sp2.FixMessageInfo;
import org.tomac.protocol.fix.messaging.fix50sp2.FixTags;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixNstdPtys3SubGrp;

public class FixNestedParties3
{

	public int noNested3PartyIDs;
	public NestedParties3[] group;

	public void getAll(int noNested3PartyIDs, ByteBuffer buf) throws FixSessionException, FixGarbledException {
		this.noNested3PartyIDs = noNested3PartyIDs;

		if (noNested3PartyIDs < 1) throw new FixSessionException(SessionRejectReason.INCORRECT_NUMINGROUP_COUNT_FOR_REPEATING_GROUP, ("Incorrect num in group count " + noNested3PartyIDs ).getBytes(), FixTags.NONESTED3PARTYIDS_INT, new byte[0]);
		// this will leak memory if we grow the group
		if (group == null || group.length < noNested3PartyIDs) {
			group = new NestedParties3[noNested3PartyIDs];

			for ( int i = 0; i < noNested3PartyIDs; i++ ) group[i] = new NestedParties3();
	}

		for ( int i = 0; i < noNested3PartyIDs; i++ ) 
			group[i].getAllGroup(buf);
	}

	public void clear() {
		for (int i = 0; i<noNested3PartyIDs; i++)
			group[i].clear();
	}
	public void encode(ByteBuffer out) {
		for (int i = 0; i<noNested3PartyIDs; i++)
			group[i].encode(out);
	}
	public boolean isSet() {
		for (int i = 0; i<noNested3PartyIDs; i++)
			if (group[i].isSet()) return true;
		return false;
	}

	@Override
	public boolean equals(Object o) {
		if (! ( o instanceof FixNestedParties3)) return false;

		FixNestedParties3 msg = (FixNestedParties3) o;

		for (int i = 0; i<noNested3PartyIDs; i++)
			if (!group[i].equals(msg.group[i])) return false;
		return true;
	}

	@Override
	public String toString() {
		String s = "";
		for (int i = 0; i<noNested3PartyIDs; i++)
			s += group[i].toString();
		return s;
	}

public class NestedParties3 implements FixComponent
{

	public byte[] nested3PartyID;
	public byte nested3PartyIDSource = (byte)' ';
	public long nested3PartyRole = 0;
	public FixNstdPtys3SubGrp nstdPtys3SubGrp;

	public NestedParties3() {
		super();

		nested3PartyID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		nstdPtys3SubGrp = new FixNstdPtys3SubGrp();
		this.clear();

	}

	@Override
	public void clear()
	{

		// clear out all the fields that aren't msgType

		Utils.fill( nested3PartyID, (byte)0 );
		nested3PartyIDSource = Byte.MAX_VALUE;		
		nested3PartyRole = Long.MAX_VALUE;		
		nstdPtys3SubGrp.clear();
	}

	public void getAllGroup(ByteBuffer buf) throws FixSessionException, FixGarbledException
	{

		int startTagPosition = buf.position();

		int id = FixUtils.getTagId( buf );
		int lastTagPosition = buf.position();
			ByteBuffer value;

			value = buf;

			if(id == FixTags.NESTED3PARTYID_INT) {
				nested3PartyID = FixUtils.getTagStringValue(null ,id ,value, nested3PartyID);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.NESTED3PARTYIDSOURCE_INT) {
				nested3PartyIDSource = FixUtils.getTagCharValue(null ,id ,value );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.NESTED3PARTYROLE_INT) {
				nested3PartyRole = FixUtils.getTagIntValue(null ,id ,value );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.NONESTED3PARTYSUBIDS_INT) {
				int noNested3PartySubIDs;
				noNested3PartySubIDs = FixUtils.getTagIntValue(null ,id ,value );
				nstdPtys3SubGrp.getAll(noNested3PartySubIDs, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			id = checkRequiredTags();
				if (id > 0) throw new FixSessionException(SessionRejectReason.REQUIRED_TAG_MISSING, "Required tag missing".getBytes(), id, new byte[0] );

			buf.position( lastTagPosition );
			return;

	}

	private int checkRequiredTags() {
		int tag = -1;

		return tag;

	}
	@Override
	public boolean isSet()
	{
		if (FixUtils.isSet(nested3PartyID)) return true;
		if (FixUtils.isSet(nested3PartyIDSource)) return true;
		if (FixUtils.isSet(nested3PartyRole)) return true;
		if (FixUtils.isSet(nstdPtys3SubGrp.noNested3PartySubIDs)) return true;
		return false;
	}
	@Override
	public void encode( ByteBuffer out )
	{
		if (FixUtils.isSet(nested3PartyID)) FixUtils.putFixTag( out, FixTags.NESTED3PARTYID_INT, nested3PartyID, 0, Utils.lastIndexTrim(nested3PartyID, (byte)0) );
		if (FixUtils.isSet(nested3PartyIDSource)) FixUtils.putFixTag( out, FixTags.NESTED3PARTYIDSOURCE_INT, nested3PartyIDSource );
		if (FixUtils.isSet(nested3PartyRole)) FixUtils.putFixTag( out, FixTags.NESTED3PARTYROLE_INT, nested3PartyRole);
		if (FixUtils.isSet(nstdPtys3SubGrp.noNested3PartySubIDs)) nstdPtys3SubGrp.encode( out );
	}
	/**
	 * If you use toString for any other purpose than administrative printout.
	 * You will end up in nifelheim!
	**/
	@Override
	public String toString() {
		char sep = '\n';
		if (Boolean.getBoolean("fix.useOneLiner")) sep = ( byte )0x01;

		String s = "";

			if (FixUtils.isSet(nested3PartyID)) s += "Nested3PartyID(949)=" + new String(nested3PartyID) + sep;
			if (FixUtils.isSet(nested3PartyIDSource)) s += "Nested3PartyIDSource(950)=" + String.valueOf(nested3PartyIDSource) + sep;
			if (FixUtils.isSet(nested3PartyRole)) s += "Nested3PartyRole(951)=" + String.valueOf(nested3PartyRole) + sep;
			if (FixUtils.isSet(nstdPtys3SubGrp.noNested3PartySubIDs)) s += nstdPtys3SubGrp.toString();
		return s;

	}

	@Override
	public boolean equals(Object o) {
		if (! ( o instanceof NestedParties3)) return false;

			NestedParties3 msg = (NestedParties3) o;

		if (!Utils.equals( nested3PartyID, msg.nested3PartyID)) return false;

		if (!( nested3PartyIDSource==msg.nested3PartyIDSource)) return false;

		if (!( nested3PartyRole==msg.nested3PartyRole)) return false;

		if (!nstdPtys3SubGrp.equals(msg.nstdPtys3SubGrp)) return false;

		return true;
	}
}
}
