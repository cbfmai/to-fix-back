package org.tomac.protocol.fix.messaging.fix42nordic;

// DO NOT EDIT!!!
// This file is generated by FixMessageGenerator.
// If you need additional functionality, put it in a helper class
// that does not live in this folder!!!  Any java file in this folder 
// will be deleted upon the next run of the FixMessageGenerator!

import java.nio.ByteBuffer;
import org.tomac.protocol.fix.FixSessionException;
import org.tomac.protocol.fix.FixGarbledException;
public class FixMessageParser implements FixMessageInfo
{

	FixAcceptedCancelReplace fixAcceptedCancelReplace = new FixAcceptedCancelReplace();
	FixAcceptedCancel fixAcceptedCancel = new FixAcceptedCancel();
	FixApplicationReject fixApplicationReject = new FixApplicationReject();
	FixBreakNotification fixBreakNotification = new FixBreakNotification();
	FixBusinessReject fixBusinessReject = new FixBusinessReject();
	FixCancelNotification fixCancelNotification = new FixCancelNotification();
	FixEntryNotificationtoAllegedFirm fixEntryNotificationtoAllegedFirm = new FixEntryNotificationtoAllegedFirm();
	FixExecutionReportFill fixExecutionReportFill = new FixExecutionReportFill();
	FixExecutionRestatement fixExecutionRestatement = new FixExecutionRestatement();
	FixLockedinNotification fixLockedinNotification = new FixLockedinNotification();
	FixLockedinTradeBreak fixLockedinTradeBreak = new FixLockedinTradeBreak();
	FixOrderAcknowledgement fixOrderAcknowledgement = new FixOrderAcknowledgement();
	FixOrderReject fixOrderReject = new FixOrderReject();
	FixPendingCancel fixPendingCancel = new FixPendingCancel();
	FixTradeEntryNotificationtoEnteringFirm fixTradeEntryNotificationtoEnteringFirm = new FixTradeEntryNotificationtoEnteringFirm();
	FixTradeReportCancel fixTradeReportCancel = new FixTradeReportCancel();
	FixTradeReportEntry fixTradeReportEntry = new FixTradeReportEntry();
	FixHeartbeat fixHeartbeat = new FixHeartbeat();
	FixLogon fixLogon = new FixLogon();
	FixLogout fixLogout = new FixLogout();
	FixOrderSingle fixOrderSingle = new FixOrderSingle();
	FixOrderCancelReject fixOrderCancelReject = new FixOrderCancelReject();
	FixRejectedCancelReplace fixRejectedCancelReplace = new FixRejectedCancelReplace();
	FixOrderCancelReplaceRequest fixOrderCancelReplaceRequest = new FixOrderCancelReplaceRequest();
	FixOrderCancelRequest fixOrderCancelRequest = new FixOrderCancelRequest();
	FixReject fixReject = new FixReject();
	FixResendRequest fixResendRequest = new FixResendRequest();
	FixSequenceReset fixSequenceReset = new FixSequenceReset();
	FixTestRequest fixTestRequest = new FixTestRequest();

	public void parse( ByteBuffer buf, FixMessageListener l) throws FixSessionException, FixGarbledException {

		int msgTypeInt = FixMessage.crackMsgType(buf);

		switch (msgTypeInt) {

			case MsgTypes.ACCEPTEDCANCELREPLACE_INT:
				fixAcceptedCancelReplace.setBuffer( buf );
				l.onFixAcceptedCancelReplace(fixAcceptedCancelReplace);
				break;
			case MsgTypes.ACCEPTEDCANCEL_INT:
				fixAcceptedCancel.setBuffer( buf );
				l.onFixAcceptedCancel(fixAcceptedCancel);
				break;
			case MsgTypes.APPLICATIONREJECT_INT:
				fixApplicationReject.setBuffer( buf );
				l.onFixApplicationReject(fixApplicationReject);
				break;
			case MsgTypes.BREAKNOTIFICATION_INT:
				fixBreakNotification.setBuffer( buf );
				l.onFixBreakNotification(fixBreakNotification);
				break;
			case MsgTypes.BUSINESSREJECT_INT:
				fixBusinessReject.setBuffer( buf );
				l.onFixBusinessReject(fixBusinessReject);
				break;
			case MsgTypes.CANCELNOTIFICATION_INT:
				fixCancelNotification.setBuffer( buf );
				l.onFixCancelNotification(fixCancelNotification);
				break;
			case MsgTypes.ENTRYNOTIFICATIONTOALLEGEDFIRM_INT:
				fixEntryNotificationtoAllegedFirm.setBuffer( buf );
				l.onFixEntryNotificationtoAllegedFirm(fixEntryNotificationtoAllegedFirm);
				break;
			case MsgTypes.EXECUTIONREPORTFILL_INT:
				fixExecutionReportFill.setBuffer( buf );
				l.onFixExecutionReportFill(fixExecutionReportFill);
				break;
			case MsgTypes.EXECUTIONRESTATEMENT_INT:
				fixExecutionRestatement.setBuffer( buf );
				l.onFixExecutionRestatement(fixExecutionRestatement);
				break;
			case MsgTypes.LOCKEDINNOTIFICATION_INT:
				fixLockedinNotification.setBuffer( buf );
				l.onFixLockedinNotification(fixLockedinNotification);
				break;
			case MsgTypes.LOCKEDINTRADEBREAK_INT:
				fixLockedinTradeBreak.setBuffer( buf );
				l.onFixLockedinTradeBreak(fixLockedinTradeBreak);
				break;
			case MsgTypes.ORDERACKNOWLEDGEMENT_INT:
				fixOrderAcknowledgement.setBuffer( buf );
				l.onFixOrderAcknowledgement(fixOrderAcknowledgement);
				break;
			case MsgTypes.ORDERREJECT_INT:
				fixOrderReject.setBuffer( buf );
				l.onFixOrderReject(fixOrderReject);
				break;
			case MsgTypes.PENDINGCANCEL_INT:
				fixPendingCancel.setBuffer( buf );
				l.onFixPendingCancel(fixPendingCancel);
				break;
			case MsgTypes.TRADEENTRYNOTIFICATIONTOENTERINGFIRM_INT:
				fixTradeEntryNotificationtoEnteringFirm.setBuffer( buf );
				l.onFixTradeEntryNotificationtoEnteringFirm(fixTradeEntryNotificationtoEnteringFirm);
				break;
			case MsgTypes.TRADEREPORTCANCEL_INT:
				fixTradeReportCancel.setBuffer( buf );
				l.onFixTradeReportCancel(fixTradeReportCancel);
				break;
			case MsgTypes.TRADEREPORTENTRY_INT:
				fixTradeReportEntry.setBuffer( buf );
				l.onFixTradeReportEntry(fixTradeReportEntry);
				break;
			case MsgTypes.HEARTBEAT_INT:
				fixHeartbeat.setBuffer( buf );
				l.onFixHeartbeat(fixHeartbeat);
				break;
			case MsgTypes.LOGON_INT:
				fixLogon.setBuffer( buf );
				l.onFixLogon(fixLogon);
				break;
			case MsgTypes.LOGOUT_INT:
				fixLogout.setBuffer( buf );
				l.onFixLogout(fixLogout);
				break;
			case MsgTypes.ORDERSINGLE_INT:
				fixOrderSingle.setBuffer( buf );
				l.onFixOrderSingle(fixOrderSingle);
				break;
			case MsgTypes.ORDERCANCELREJECT_INT:
				fixOrderCancelReject.setBuffer( buf );
				l.onFixOrderCancelReject(fixOrderCancelReject);
				break;
			case MsgTypes.REJECTEDCANCELREPLACE_INT:
				fixRejectedCancelReplace.setBuffer( buf );
				l.onFixRejectedCancelReplace(fixRejectedCancelReplace);
				break;
			case MsgTypes.ORDERCANCELREPLACEREQUEST_INT:
				fixOrderCancelReplaceRequest.setBuffer( buf );
				l.onFixOrderCancelReplaceRequest(fixOrderCancelReplaceRequest);
				break;
			case MsgTypes.ORDERCANCELREQUEST_INT:
				fixOrderCancelRequest.setBuffer( buf );
				l.onFixOrderCancelRequest(fixOrderCancelRequest);
				break;
			case MsgTypes.REJECT_INT:
				fixReject.setBuffer( buf );
				l.onFixReject(fixReject);
				break;
			case MsgTypes.RESENDREQUEST_INT:
				fixResendRequest.setBuffer( buf );
				l.onFixResendRequest(fixResendRequest);
				break;
			case MsgTypes.SEQUENCERESET_INT:
				fixSequenceReset.setBuffer( buf );
				l.onFixSequenceReset(fixSequenceReset);
				break;
			case MsgTypes.TESTREQUEST_INT:
				fixTestRequest.setBuffer( buf );
				l.onFixTestRequest(fixTestRequest);
				break;

			default:
				l.onUnknownMessageType( buf, msgTypeInt );
				break;

			}

		}

}
