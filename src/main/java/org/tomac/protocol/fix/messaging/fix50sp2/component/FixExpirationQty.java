package org.tomac.protocol.fix.messaging.fix50sp2.component;

// DO NOT EDIT!!!
// This file is generated by FixMessageGenerator.
// If you need additional functionality, put it in a helper class
// that does not live in this folder!!!  Any java file in this folder 
// will be deleted upon the next run of the FixMessageGenerator!

import java.nio.ByteBuffer;

import org.tomac.protocol.fix.FixUtils;
import org.tomac.protocol.fix.FixSessionException;
import org.tomac.protocol.fix.FixGarbledException;
import org.tomac.utils.Utils;
import org.tomac.protocol.fix.FixConstants;


import org.tomac.protocol.fix.messaging.fix50sp2.FixMessageInfo.SessionRejectReason;
import org.tomac.protocol.fix.messaging.fix50sp2.FixMessageInfo;
import org.tomac.protocol.fix.messaging.fix50sp2.FixTags;

public class FixExpirationQty
{

	public int noExpiration;
	public ExpirationQty[] group;

	public void getAll(int noExpiration, ByteBuffer buf) throws FixSessionException {
		this.noExpiration = noExpiration;

		if (noExpiration < 1) throw new FixSessionException(SessionRejectReason.INCORRECT_NUMINGROUP_COUNT_FOR_REPEATING_GROUP, ("Incorrect num in group count " + noExpiration ).getBytes(), FixTags.NOEXPIRATION_INT, new byte[0]);
		// this will leak memory if we grow the group
		if (group == null || group.length < noExpiration) {
			group = new ExpirationQty[noExpiration];

			for ( int i = 0; i < noExpiration; i++ ) group[i] = new ExpirationQty();
	}

		for ( int i = 0; i < noExpiration; i++ ) 
			group[i].getAllGroup(buf);
	}

	public void clear() {
		for (int i = 0; i<noExpiration; i++)
			group[i].clear();
	}
	public void encode(ByteBuffer out) {
		for (int i = 0; i<noExpiration; i++)
			group[i].encode(out);
	}
	public boolean isSet() {
		for (int i = 0; i<noExpiration; i++)
			if (group[i].isSet()) return true;
		return false;
	}

	@Override
	public String toString() {
		String s = "";
		for (int i = 0; i<noExpiration; i++)
			s += group[i].toString();
		return s;
	}

public class ExpirationQty implements FixComponent
{

	public long expirationQtyType = 0;
	public long expQty = 0;

	public ExpirationQty() {
		super();

		this.clear();

	}

	@Override
	public void clear()
	{

		// clear out all the fields that aren't msgType

		expirationQtyType = Long.MAX_VALUE;		
		expQty = Long.MAX_VALUE;		
	}

	public void getAllGroup(ByteBuffer buf) throws FixSessionException
	{

		int startTagPosition = buf.position();

		int id = FixUtils.getTagId( buf );
		int lastTagPosition = buf.position();
			ByteBuffer value;

			value = buf;

			if(id == FixTags.EXPIRATIONQTYTYPE_INT) {
				expirationQtyType = FixUtils.getTagIntValue( value );
				if (!FixMessageInfo.ExpirationQtyType.isValid(expirationQtyType) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + expirationQtyType + ") for tag").getBytes(), id, new byte[0] );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.EXPQTY_INT) {
				expQty = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			id = checkRequiredTags();
				if (id > 0) throw new FixSessionException(SessionRejectReason.REQUIRED_TAG_MISSING, "Required tag missing".getBytes(), id, new byte[0] );

			buf.position( lastTagPosition );
			return;

	}

	private int checkRequiredTags() {
		int tag = -1;

		return tag;

	}
	@Override
	public boolean isSet()
	{
		if (FixUtils.isSet(expirationQtyType)) return true;
		if (FixUtils.isSet(expQty)) return true;
		return false;
	}
	@Override
	public void encode( ByteBuffer out )
	{
		if (FixUtils.isSet(expirationQtyType)) FixUtils.putFixTag( out, FixTags.EXPIRATIONQTYTYPE_INT, expirationQtyType);
		if (FixUtils.isSet(expQty)) FixUtils.putFixFloatTag( out, FixTags.EXPQTY_INT, expQty);
	}
	/**
	 * If you use toString for any other purpose than administrative printout.
	 * You will end up in nifelheim!
	**/
	@Override
	public String toString() {
		char sep = '\n';
		if (Boolean.getBoolean("fix.useOneLiner")) sep = ( byte )0x01;

		String s = "";

			if (FixUtils.isSet(expirationQtyType)) s += "ExpirationQtyType(982)=" + String.valueOf(expirationQtyType) + sep;
			if (FixUtils.isSet(expQty)) s += "ExpQty(983)=" + String.valueOf(expQty) + sep;
		return s;

	}

	@Override
	public boolean equals(Object o) {
		if (! ( o instanceof ExpirationQty)) return false;

			ExpirationQty msg = (ExpirationQty) o;

		if ( ! super.equals(msg) ) return false;

		if (!( expirationQtyType==msg.expirationQtyType)) return false;

		if (!( expQty==msg.expQty)) return false;

		return true;
	}
}
}
