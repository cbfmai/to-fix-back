package org.tomac.protocol.fix.messaging.fix50sp2.component;

// DO NOT EDIT!!!
// This file is generated by FixMessageGenerator.
// If you need additional functionality, put it in a helper class
// that does not live in this folder!!!  Any java file in this folder 
// will be deleted upon the next run of the FixMessageGenerator!

import java.nio.ByteBuffer;

import org.tomac.protocol.fix.FixUtils;
import org.tomac.protocol.fix.FixSessionException;
import org.tomac.protocol.fix.FixGarbledException;
import org.tomac.utils.Utils;
import org.tomac.protocol.fix.FixConstants;


import org.tomac.protocol.fix.messaging.fix50sp2.FixTags;
import org.tomac.protocol.fix.messaging.fix50sp2.FixMessageInfo.*;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixDlvyInstGrp;

public class FixSettlInstructionsData implements FixComponent
{

	public long settlDeliveryType = 0;
	public long standInstDbType = 0;
	public byte[] standInstDbName;
	public byte[] standInstDbID;
	public FixDlvyInstGrp dlvyInstGrp;

	public FixSettlInstructionsData() {
		super();

		standInstDbName = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		standInstDbID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		dlvyInstGrp = new FixDlvyInstGrp();
		this.clear();

	}

	@Override
	public void clear()
	{

		// clear out all the fields that aren't msgType

		settlDeliveryType = Long.MAX_VALUE;		
		standInstDbType = Long.MAX_VALUE;		
		Utils.fill( standInstDbName, (byte)0 );
		Utils.fill( standInstDbID, (byte)0 );
		dlvyInstGrp.clear();
	}

	public void getAll(int id, ByteBuffer buf) throws FixSessionException
	{

		int startTagPosition = buf.position();

		int lastTagPosition = buf.position();
		do {
			ByteBuffer value;

			value = buf;

			switch( id ) {

			case FixTags.SETTLDELIVERYTYPE_INT:
				settlDeliveryType = FixUtils.getTagIntValue( value );
				if (!SettlDeliveryType.isValid(settlDeliveryType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + settlDeliveryType + ") for tag: " + id );
				break;

			case FixTags.STANDINSTDBTYPE_INT:
				standInstDbType = FixUtils.getTagIntValue( value );
				if (!StandInstDbType.isValid(standInstDbType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + standInstDbType + ") for tag: " + id );
				break;

			case FixTags.STANDINSTDBNAME_INT:
				standInstDbName = FixUtils.getTagStringValue(value, standInstDbName);
				break;

			case FixTags.STANDINSTDBID_INT:
				standInstDbID = FixUtils.getTagStringValue(value, standInstDbID);
				break;

			case FixTags.NODLVYINST_INT:
				dlvyInstGrp.noDlvyInst = FixUtils.getTagIntValue( value );
				dlvyInstGrp.getAll(dlvyInstGrp.noDlvyInst, value );
				break;

			// we will always endup with unknown tag, unread and return to upper layer in hierarchy
			default:
				id = checkRequiredTags();
				if (id > 0) throw new FixSessionException(buf, "Required tag missing: " + id );

				buf.position( lastTagPosition );
				return;

			}

			lastTagPosition = buf.position();

		} while ( ( id = FixUtils.getTagId( buf ) ) > 0 );

		buf.position(startTagPosition);

	}

	private int checkRequiredTags() {
		int tag = -1;

		return tag;

	}
	@Override
	public boolean isSet()
	{
		if (FixUtils.isSet(settlDeliveryType)) return true;
		if (FixUtils.isSet(standInstDbType)) return true;
		if (FixUtils.isSet(standInstDbName)) return true;
		if (FixUtils.isSet(standInstDbID)) return true;
		if (FixUtils.isSet(dlvyInstGrp.noDlvyInst)) return true;
		return false;
	}
	@Override
	public void encode( ByteBuffer out )
	{
		if (FixUtils.isSet(settlDeliveryType)) FixUtils.putFixTag( out, FixTags.SETTLDELIVERYTYPE_INT, settlDeliveryType);
		if (FixUtils.isSet(standInstDbType)) FixUtils.putFixTag( out, FixTags.STANDINSTDBTYPE_INT, standInstDbType);
		if (FixUtils.isSet(standInstDbName)) FixUtils.putFixTag( out, FixTags.STANDINSTDBNAME_INT, standInstDbName, 0, Utils.lastIndexTrim(standInstDbName, (byte)0) );
		if (FixUtils.isSet(standInstDbID)) FixUtils.putFixTag( out, FixTags.STANDINSTDBID_INT, standInstDbID, 0, Utils.lastIndexTrim(standInstDbID, (byte)0) );
		if (FixUtils.isSet(dlvyInstGrp.noDlvyInst)) dlvyInstGrp.encode( out );
	}
	/**
	 * If you use toString for any other purpose than administrative printout.
	 * You will end up in nifelheim!
	**/
	@Override
	public String toString() {
		char sep = '\n';
		if (Boolean.getBoolean("fix.useOneLiner")) sep = ( byte )0x01;

		String s = "";

			if (FixUtils.isSet(settlDeliveryType)) s += "SettlDeliveryType(172)=" + String.valueOf(settlDeliveryType) + sep;
			if (FixUtils.isSet(standInstDbType)) s += "StandInstDbType(169)=" + String.valueOf(standInstDbType) + sep;
			if (FixUtils.isSet(standInstDbName)) s += "StandInstDbName(170)=" + new String(standInstDbName) + sep;
			if (FixUtils.isSet(standInstDbID)) s += "StandInstDbID(171)=" + new String(standInstDbID) + sep;
			if (FixUtils.isSet(dlvyInstGrp.noDlvyInst)) s += dlvyInstGrp.toString();
		return s;

	}

	@Override
	public boolean equals(Object o) {
		if (! ( o instanceof FixSettlInstructionsData)) return false;

			FixSettlInstructionsData msg = (FixSettlInstructionsData) o;

		if ( ! super.equals(msg) ) return false;

		if (!( settlDeliveryType==msg.settlDeliveryType)) return false;

		if (!( standInstDbType==msg.standInstDbType)) return false;

		if (!Utils.equals( standInstDbName, msg.standInstDbName)) return false;

		if (!Utils.equals( standInstDbID, msg.standInstDbID)) return false;

		if (!dlvyInstGrp.equals(msg.dlvyInstGrp)) return false;

		return true;
	}
}
