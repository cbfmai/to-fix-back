package org.tomac.protocol.fix.messaging.fix50sp2;

// DO NOT EDIT!!!
// This file is generated by FixMessageGenerator.
// If you need additional functionality, put it in a helper class
// that does not live in this folder!!!  Any java file in this folder 
// will be deleted upon the next run of the FixMessageGenerator!

import java.nio.ByteBuffer;

import org.tomac.protocol.fix.FixUtils;
import org.tomac.protocol.fix.FixSessionException;
import org.tomac.protocol.fix.FixGarbledException;
import org.tomac.utils.Utils;
import org.tomac.protocol.fix.FixConstants;


import org.tomac.protocol.fix.messaging.fix50sp2.component.FixHopGrp;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixApplicationSequenceControl;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixBaseTradingRules;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixOrdTypeRules;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixTimeInForceRules;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixExecInstRules;

public class FixMarketDefinitionUpdateReport extends FixMessage
{

	public FixApplicationSequenceControl applicationSequenceControl;
	public byte[] marketReportID;
	public byte[] marketReqID;
	public byte marketUpdateAction = (byte)' ';
	public byte[] marketID;
	public byte[] marketSegmentID;
	public byte[] marketSegmentDesc;
	public long encodedMktSegmDescLen = 0;
	public byte[] encodedMktSegmDesc;
	public byte[] parentMktSegmID;
	public byte[] currency;
	public FixBaseTradingRules baseTradingRules;
	public FixOrdTypeRules ordTypeRules;
	public FixTimeInForceRules timeInForceRules;
	public FixExecInstRules execInstRules;
	public byte[] transactTime;
	public byte[] text;
	public long encodedTextLen = 0;
	public byte[] encodedText;

	public FixMarketDefinitionUpdateReport() {
		super();

		applicationSequenceControl = new FixApplicationSequenceControl();
		marketReportID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		marketReqID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		marketID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		marketSegmentID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		marketSegmentDesc = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		encodedMktSegmDesc = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		parentMktSegmID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		currency = new byte[FixUtils.CURRENCY_LENGTH];
		baseTradingRules = new FixBaseTradingRules();
		ordTypeRules = new FixOrdTypeRules();
		timeInForceRules = new FixTimeInForceRules();
		execInstRules = new FixExecInstRules();
		transactTime = new byte[FixUtils.UTCTIMESTAMP_LENGTH];
		text = new byte[FixUtils.FIX_MAX_STRING_TEXT_LENGTH];
		encodedText = new byte[FixUtils.FIX_MAX_STRING_TEXT_LENGTH];
		this.clear();

		msgType = MsgTypes.MARKETDEFINITIONUPDATEREPORT_INT;

	}

	@Override
	public void clear()
	{

		// clear out all the fields that aren't msgType

		Utils.fill( marketReportID, (byte)0 );
		Utils.fill( marketReqID, (byte)0 );
		marketUpdateAction = Byte.MAX_VALUE;		
		Utils.fill( marketID, (byte)0 );
		Utils.fill( marketSegmentID, (byte)0 );
		Utils.fill( marketSegmentDesc, (byte)0 );
		encodedMktSegmDescLen = Long.MAX_VALUE;		
		Utils.fill( encodedMktSegmDesc, (byte)0 );
		Utils.fill( parentMktSegmID, (byte)0 );
		Utils.fill( currency, (byte)0 );
		Utils.fill( transactTime, (byte)0 );
		Utils.fill( text, (byte)0 );
		encodedTextLen = Long.MAX_VALUE;		
		Utils.fill( encodedText, (byte)0 );
		applicationSequenceControl.clear();
		baseTradingRules.clear();
		ordTypeRules.clear();
		timeInForceRules.clear();
		execInstRules.clear();
	}

	@Override
	public void getAll() throws FixSessionException, FixGarbledException
	{

		int startTagPosition = buf.position();

		super.getAll();

		// assumption message is full otherwise decode would return null
		// so negative id means that we are at the end of the message
		int id;
		int lastTagPosition = buf.position();
		while ( ( id = FixUtils.getTagId( buf ) ) > 0 )
		{
			ByteBuffer value;

			value = buf;

			switch( id ) {

			case FixTags.APPLID_INT:
				applicationSequenceControl.getAll(FixTags.APPLID_INT, value );
				break;

			case FixTags.MARKETREPORTID_INT:
				marketReportID = FixUtils.getTagStringValue(value, marketReportID);
				break;

			case FixTags.MARKETREQID_INT:
				marketReqID = FixUtils.getTagStringValue(value, marketReqID);
				break;

			case FixTags.MARKETUPDATEACTION_INT:
				marketUpdateAction = FixUtils.getTagCharValue( value );
				if (!MarketUpdateAction.isValid(marketUpdateAction) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + marketUpdateAction + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.MARKETID_INT:
				marketID = FixUtils.getTagStringValue(value, marketID);
				break;

			case FixTags.MARKETSEGMENTID_INT:
				marketSegmentID = FixUtils.getTagStringValue(value, marketSegmentID);
				break;

			case FixTags.MARKETSEGMENTDESC_INT:
				marketSegmentDesc = FixUtils.getTagStringValue(value, marketSegmentDesc);
				break;

			case FixTags.ENCODEDMKTSEGMDESCLEN_INT:
				encodedMktSegmDescLen = FixUtils.getTagIntValue( value );
				break;

			case FixTags.ENCODEDMKTSEGMDESC_INT:
				encodedMktSegmDesc = FixUtils.getTagStringValue(value, encodedMktSegmDesc);
				break;

			case FixTags.PARENTMKTSEGMID_INT:
				parentMktSegmID = FixUtils.getTagStringValue(value, parentMktSegmID);
				break;

			case FixTags.CURRENCY_INT:
				currency = FixUtils.getTagStringValue(value, currency);
				break;

			case FixTags.EXPIRATIONCYCLE_INT:
				baseTradingRules.getAll(FixTags.EXPIRATIONCYCLE_INT, value );
				break;

			case FixTags.NOORDTYPERULES_INT:
				ordTypeRules.noOrdTypeRules = FixUtils.getTagIntValue( value );
				ordTypeRules.getAll(ordTypeRules.noOrdTypeRules, value );
				break;

			case FixTags.NOTIMEINFORCERULES_INT:
				timeInForceRules.noTimeInForceRules = FixUtils.getTagIntValue( value );
				timeInForceRules.getAll(timeInForceRules.noTimeInForceRules, value );
				break;

			case FixTags.NOEXECINSTRULES_INT:
				execInstRules.noExecInstRules = FixUtils.getTagIntValue( value );
				execInstRules.getAll(execInstRules.noExecInstRules, value );
				break;

			case FixTags.TRANSACTTIME_INT:
				transactTime = FixUtils.getTagStringValue(value, transactTime);
				break;

			case FixTags.TEXT_INT:
				text = FixUtils.getTagStringValue(value, text);
				break;

			case FixTags.ENCODEDTEXTLEN_INT:
				encodedTextLen = FixUtils.getTagIntValue( value );
				break;

			case FixTags.ENCODEDTEXT_INT:
				encodedText = FixUtils.getTagStringValue(value, encodedText);
				break;

			// for a message always get the checksum
			case FixTags.CHECKSUM_INT:
				checkSum = FixUtils.getTagIntValue( value );

				id = checkRequiredTags();
				if (id > 0) throw new FixSessionException(SessionRejectReason.REQUIRED_TAG_MISSING, "Required tag missing".getBytes(), id, FixUtils.getMsgType(msgType) );

				return;

			default:
				throw new FixSessionException(SessionRejectReason.UNDEFINED_TAG, "Unknown tag".getBytes(), id, FixUtils.getMsgType(msgType) );

			}

			lastTagPosition = buf.position();

		}

		buf.position(startTagPosition);

	}

	private int checkRequiredTags() {
		int tag = -1;

		if (! FixUtils.isSet(senderCompID) ) return FixTags.SENDERCOMPID_INT;
		if (! FixUtils.isSet(targetCompID) ) return FixTags.TARGETCOMPID_INT;
		if (! FixUtils.isSet(msgSeqNum) ) return FixTags.MSGSEQNUM_INT;
		if (! FixUtils.isSet(sendingTime) ) return FixTags.SENDINGTIME_INT;
		if (! FixUtils.isSet(marketReportID) ) return FixTags.MARKETREPORTID_INT;
		if (! FixUtils.isSet(marketID) ) return FixTags.MARKETID_INT;
		if (! FixUtils.isSet(checkSum) ) return FixTags.CHECKSUM_INT;
		return tag;

	}
	@Override
	public void encode( ByteBuffer out )
	{
		// Encode message. Set msgSeqNum and sendingTime and optional resend flags, before encoding. 

		int msgStart = out.position();

		out.put( BEGINSTRING_VALUE_WITH_TAG );

		int msgLengthValueStart = out.position() + 2 /* 9= */;

		// placeholder
		FixUtils.putFixTag(out, FixTags.BODYLENGTH_INT, FixConstants.MAX_MESSAGE_SIZE );

		int msgTypeStart = out.position();

		FixUtils.putFixTag( out, FixTags.MSGTYPE_INT, MsgTypes.MARKETDEFINITIONUPDATEREPORT);

		// encode all fields including the header

		if (FixUtils.isSet(applVerID)) FixUtils.putFixTag( out, FixTags.APPLVERID_INT, applVerID, 0, Utils.lastIndexTrim(applVerID, (byte)0) );
		if (FixUtils.isSet(cstmApplVerID)) FixUtils.putFixTag( out, FixTags.CSTMAPPLVERID_INT, cstmApplVerID, 0, Utils.lastIndexTrim(cstmApplVerID, (byte)0) );
		if (FixUtils.isSet(applExtID)) FixUtils.putFixTag( out, FixTags.APPLEXTID_INT, applExtID);
		FixUtils.putFixTag( out, FixTags.SENDERCOMPID_INT, senderCompID, 0, Utils.lastIndexTrim(senderCompID, (byte)0) );
		FixUtils.putFixTag( out, FixTags.TARGETCOMPID_INT, targetCompID, 0, Utils.lastIndexTrim(targetCompID, (byte)0) );
		if (FixUtils.isSet(onBehalfOfCompID)) FixUtils.putFixTag( out, FixTags.ONBEHALFOFCOMPID_INT, onBehalfOfCompID, 0, Utils.lastIndexTrim(onBehalfOfCompID, (byte)0) );
		if (FixUtils.isSet(deliverToCompID)) FixUtils.putFixTag( out, FixTags.DELIVERTOCOMPID_INT, deliverToCompID, 0, Utils.lastIndexTrim(deliverToCompID, (byte)0) );
		if (FixUtils.isSet(secureDataLen)) FixUtils.putFixTag( out, FixTags.SECUREDATALEN_INT, secureDataLen);
		if (FixUtils.isSet(secureData)) FixUtils.putFixTag( out, FixTags.SECUREDATA_INT, secureData, 0, Utils.lastIndexTrim(secureData, (byte)0) );
		FixUtils.putFixTag( out, FixTags.MSGSEQNUM_INT, msgSeqNum);
		if (FixUtils.isSet(senderSubID)) FixUtils.putFixTag( out, FixTags.SENDERSUBID_INT, senderSubID, 0, Utils.lastIndexTrim(senderSubID, (byte)0) );
		if (FixUtils.isSet(senderLocationID)) FixUtils.putFixTag( out, FixTags.SENDERLOCATIONID_INT, senderLocationID, 0, Utils.lastIndexTrim(senderLocationID, (byte)0) );
		if (FixUtils.isSet(targetSubID)) FixUtils.putFixTag( out, FixTags.TARGETSUBID_INT, targetSubID, 0, Utils.lastIndexTrim(targetSubID, (byte)0) );
		if (FixUtils.isSet(targetLocationID)) FixUtils.putFixTag( out, FixTags.TARGETLOCATIONID_INT, targetLocationID, 0, Utils.lastIndexTrim(targetLocationID, (byte)0) );
		if (FixUtils.isSet(onBehalfOfSubID)) FixUtils.putFixTag( out, FixTags.ONBEHALFOFSUBID_INT, onBehalfOfSubID, 0, Utils.lastIndexTrim(onBehalfOfSubID, (byte)0) );
		if (FixUtils.isSet(onBehalfOfLocationID)) FixUtils.putFixTag( out, FixTags.ONBEHALFOFLOCATIONID_INT, onBehalfOfLocationID, 0, Utils.lastIndexTrim(onBehalfOfLocationID, (byte)0) );
		if (FixUtils.isSet(deliverToSubID)) FixUtils.putFixTag( out, FixTags.DELIVERTOSUBID_INT, deliverToSubID, 0, Utils.lastIndexTrim(deliverToSubID, (byte)0) );
		if (FixUtils.isSet(deliverToLocationID)) FixUtils.putFixTag( out, FixTags.DELIVERTOLOCATIONID_INT, deliverToLocationID, 0, Utils.lastIndexTrim(deliverToLocationID, (byte)0) );
		if (FixUtils.isSet(possDupFlag)) FixUtils.putFixTag( out, FixTags.POSSDUPFLAG_INT, possDupFlag?(byte)'Y':(byte)'N' );
		if (FixUtils.isSet(possResend)) FixUtils.putFixTag( out, FixTags.POSSRESEND_INT, possResend?(byte)'Y':(byte)'N' );
		FixUtils.putFixTag( out, FixTags.SENDINGTIME_INT, sendingTime);
		if (FixUtils.isSet(origSendingTime)) FixUtils.putFixTag( out, FixTags.ORIGSENDINGTIME_INT, origSendingTime);
		if (FixUtils.isSet(xmlDataLen)) FixUtils.putFixTag( out, FixTags.XMLDATALEN_INT, xmlDataLen);
		if (FixUtils.isSet(xmlData)) FixUtils.putFixTag( out, FixTags.XMLDATA_INT, xmlData, 0, Utils.lastIndexTrim(xmlData, (byte)0) );
		if (FixUtils.isSet(messageEncoding)) FixUtils.putFixTag( out, FixTags.MESSAGEENCODING_INT, messageEncoding, 0, Utils.lastIndexTrim(messageEncoding, (byte)0) );
		if (FixUtils.isSet(lastMsgSeqNumProcessed)) FixUtils.putFixTag( out, FixTags.LASTMSGSEQNUMPROCESSED_INT, lastMsgSeqNumProcessed);
		if ( FixUtils.isSet(hopGrp.noHops) )hopGrp.encode( out );

		if (FixUtils.isSet(applicationSequenceControl.applID)) applicationSequenceControl.encode( out );
		FixUtils.putFixTag( out, FixTags.MARKETREPORTID_INT, marketReportID, 0, Utils.lastIndexTrim(marketReportID, (byte)0) );
		if (FixUtils.isSet(marketReqID)) FixUtils.putFixTag( out, FixTags.MARKETREQID_INT, marketReqID, 0, Utils.lastIndexTrim(marketReqID, (byte)0) );
		if (FixUtils.isSet(marketUpdateAction)) FixUtils.putFixTag( out, FixTags.MARKETUPDATEACTION_INT, marketUpdateAction );
		FixUtils.putFixTag( out, FixTags.MARKETID_INT, marketID, 0, Utils.lastIndexTrim(marketID, (byte)0) );
		if (FixUtils.isSet(marketSegmentID)) FixUtils.putFixTag( out, FixTags.MARKETSEGMENTID_INT, marketSegmentID, 0, Utils.lastIndexTrim(marketSegmentID, (byte)0) );
		if (FixUtils.isSet(marketSegmentDesc)) FixUtils.putFixTag( out, FixTags.MARKETSEGMENTDESC_INT, marketSegmentDesc, 0, Utils.lastIndexTrim(marketSegmentDesc, (byte)0) );
		if (FixUtils.isSet(encodedMktSegmDescLen)) FixUtils.putFixTag( out, FixTags.ENCODEDMKTSEGMDESCLEN_INT, encodedMktSegmDescLen);
		if (FixUtils.isSet(encodedMktSegmDesc)) FixUtils.putFixTag( out, FixTags.ENCODEDMKTSEGMDESC_INT, encodedMktSegmDesc, 0, Utils.lastIndexTrim(encodedMktSegmDesc, (byte)0) );
		if (FixUtils.isSet(parentMktSegmID)) FixUtils.putFixTag( out, FixTags.PARENTMKTSEGMID_INT, parentMktSegmID, 0, Utils.lastIndexTrim(parentMktSegmID, (byte)0) );
		if (FixUtils.isSet(currency)) FixUtils.putFixTag( out, FixTags.CURRENCY_INT, currency, 0, Utils.lastIndexTrim(currency, (byte)0) );
		if (FixUtils.isSet(baseTradingRules.expirationCycle)) baseTradingRules.encode( out );
		if (FixUtils.isSet(ordTypeRules.noOrdTypeRules)) ordTypeRules.encode( out );
		if (FixUtils.isSet(timeInForceRules.noTimeInForceRules)) timeInForceRules.encode( out );
		if (FixUtils.isSet(execInstRules.noExecInstRules)) execInstRules.encode( out );
		if (FixUtils.isSet(transactTime)) FixUtils.putFixTag( out, FixTags.TRANSACTTIME_INT, transactTime);
		if (FixUtils.isSet(text)) FixUtils.putFixTag( out, FixTags.TEXT_INT, text, 0, Utils.lastIndexTrim(text, (byte)0) );
		if (FixUtils.isSet(encodedTextLen)) FixUtils.putFixTag( out, FixTags.ENCODEDTEXTLEN_INT, encodedTextLen);
		if (FixUtils.isSet(encodedText)) FixUtils.putFixTag( out, FixTags.ENCODEDTEXT_INT, encodedText, 0, Utils.lastIndexTrim(encodedText, (byte)0) );
		// the checksum at the end

		int checkSumStart = out.position();
		out.position( msgLengthValueStart );
		bodyLength = checkSumStart - msgTypeStart;
		Utils.longToNumeric( out, bodyLength, Utils.digits(FixConstants.MAX_MESSAGE_SIZE) );

		checkSum = FixUtils.computeChecksum( out, msgStart, checkSumStart );
		out.position( checkSumStart );
		FixUtils.putFixTag( out, FixTags.CHECKSUM_INT, checkSum );

		out.flip();

	}
	@Override		
	public void printBuffer(ByteBuffer out) {

		out.put(buf);

		out.flip();

	}

	/**
	 * If you use toString for any other purpose than administrative printout.
	 * You will end up in nifelheim!
	**/
	@Override
	public String toString() {
		char sep = '\n';
		if (Boolean.getBoolean("fix.useOneLiner")) sep = SOH;

		String s = "BeginString(8)=" + new String(BEGINSTRING_VALUE) + sep;
		s += "BodyLength(9)=" + bodyLength + sep;
		s += "MsgType(35)=" + new String(MsgTypes.MARKETDEFINITIONUPDATEREPORT) + sep;

		try {
			// print all fields including the header

			if (FixUtils.isSet(applVerID)) s += "ApplVerID(1128)=" + new String(applVerID) + sep;
			if (FixUtils.isSet(cstmApplVerID)) s += "CstmApplVerID(1129)=" + new String(cstmApplVerID) + sep;
			if (FixUtils.isSet(applExtID)) s += "ApplExtID(1156)=" + String.valueOf(applExtID) + sep;
			 s += "SenderCompID(49)=" + new String(senderCompID) + sep;
			 s += "TargetCompID(56)=" + new String(targetCompID) + sep;
			if (FixUtils.isSet(onBehalfOfCompID)) s += "OnBehalfOfCompID(115)=" + new String(onBehalfOfCompID) + sep;
			if (FixUtils.isSet(deliverToCompID)) s += "DeliverToCompID(128)=" + new String(deliverToCompID) + sep;
			if (FixUtils.isSet(secureDataLen)) s += "SecureDataLen(90)=" + String.valueOf(secureDataLen) + sep;
			if (FixUtils.isSet(secureData)) s += "SecureData(91)=" + new String(secureData) + sep;
			 s += "MsgSeqNum(34)=" + String.valueOf(msgSeqNum) + sep;
			if (FixUtils.isSet(senderSubID)) s += "SenderSubID(50)=" + new String(senderSubID) + sep;
			if (FixUtils.isSet(senderLocationID)) s += "SenderLocationID(142)=" + new String(senderLocationID) + sep;
			if (FixUtils.isSet(targetSubID)) s += "TargetSubID(57)=" + new String(targetSubID) + sep;
			if (FixUtils.isSet(targetLocationID)) s += "TargetLocationID(143)=" + new String(targetLocationID) + sep;
			if (FixUtils.isSet(onBehalfOfSubID)) s += "OnBehalfOfSubID(116)=" + new String(onBehalfOfSubID) + sep;
			if (FixUtils.isSet(onBehalfOfLocationID)) s += "OnBehalfOfLocationID(144)=" + new String(onBehalfOfLocationID) + sep;
			if (FixUtils.isSet(deliverToSubID)) s += "DeliverToSubID(129)=" + new String(deliverToSubID) + sep;
			if (FixUtils.isSet(deliverToLocationID)) s += "DeliverToLocationID(145)=" + new String(deliverToLocationID) + sep;
			if (FixUtils.isSet(possDupFlag)) s += "PossDupFlag(43)=" + String.valueOf(possDupFlag) + sep;
			if (FixUtils.isSet(possResend)) s += "PossResend(97)=" + String.valueOf(possResend) + sep;
			 s += "SendingTime(52)=" + new String(sendingTime) + sep;
			if (FixUtils.isSet(origSendingTime)) s += "OrigSendingTime(122)=" + new String(origSendingTime) + sep;
			if (FixUtils.isSet(xmlDataLen)) s += "XmlDataLen(212)=" + String.valueOf(xmlDataLen) + sep;
			if (FixUtils.isSet(xmlData)) s += "XmlData(213)=" + new String(xmlData) + sep;
			if (FixUtils.isSet(messageEncoding)) s += "MessageEncoding(347)=" + new String(messageEncoding) + sep;
			if (FixUtils.isSet(lastMsgSeqNumProcessed)) s += "LastMsgSeqNumProcessed(369)=" + String.valueOf(lastMsgSeqNumProcessed) + sep;
			if (FixUtils.isSet(hopGrp.noHops)) s += hopGrp.toString();

			if (FixUtils.isSet(applicationSequenceControl.applID)) s += applicationSequenceControl.toString();
			 s += "MarketReportID(1394)=" + new String(marketReportID) + sep;
			if (FixUtils.isSet(marketReqID)) s += "MarketReqID(1393)=" + new String(marketReqID) + sep;
			if (FixUtils.isSet(marketUpdateAction)) s += "MarketUpdateAction(1395)=" + String.valueOf(marketUpdateAction) + sep;
			 s += "MarketID(1301)=" + new String(marketID) + sep;
			if (FixUtils.isSet(marketSegmentID)) s += "MarketSegmentID(1300)=" + new String(marketSegmentID) + sep;
			if (FixUtils.isSet(marketSegmentDesc)) s += "MarketSegmentDesc(1396)=" + new String(marketSegmentDesc) + sep;
			if (FixUtils.isSet(encodedMktSegmDescLen)) s += "EncodedMktSegmDescLen(1397)=" + String.valueOf(encodedMktSegmDescLen) + sep;
			if (FixUtils.isSet(encodedMktSegmDesc)) s += "EncodedMktSegmDesc(1398)=" + new String(encodedMktSegmDesc) + sep;
			if (FixUtils.isSet(parentMktSegmID)) s += "ParentMktSegmID(1325)=" + new String(parentMktSegmID) + sep;
			if (FixUtils.isSet(currency)) s += "Currency(15)=" + new String(currency) + sep;
			if (FixUtils.isSet(baseTradingRules.expirationCycle)) s += baseTradingRules.toString();
			if (FixUtils.isSet(ordTypeRules.noOrdTypeRules)) s += ordTypeRules.toString();
			if (FixUtils.isSet(timeInForceRules.noTimeInForceRules)) s += timeInForceRules.toString();
			if (FixUtils.isSet(execInstRules.noExecInstRules)) s += execInstRules.toString();
			if (FixUtils.isSet(transactTime)) s += "TransactTime(60)=" + new String(transactTime) + sep;
			if (FixUtils.isSet(text)) s += "Text(58)=" + new String(text) + sep;
			if (FixUtils.isSet(encodedTextLen)) s += "EncodedTextLen(354)=" + String.valueOf(encodedTextLen) + sep;
			if (FixUtils.isSet(encodedText)) s += "EncodedText(355)=" + new String(encodedText) + sep;

			s += "checkSum(10)=" + String.valueOf(checkSum) + sep;

		} catch(Exception e) {  };

		return s;
	}

	@Override
	public boolean equals(Object o) {
		if (! ( o instanceof FixMarketDefinitionUpdateReport)) return false;

			FixMarketDefinitionUpdateReport msg = (FixMarketDefinitionUpdateReport) o;

		if ( ! super.equals(msg) ) return false;

		if (!applicationSequenceControl.equals(msg.applicationSequenceControl)) return false;

		if (!Utils.equals( marketReportID, msg.marketReportID)) return false;

		if (!Utils.equals( marketReqID, msg.marketReqID)) return false;

		if (!( marketUpdateAction==msg.marketUpdateAction)) return false;

		if (!Utils.equals( marketID, msg.marketID)) return false;

		if (!Utils.equals( marketSegmentID, msg.marketSegmentID)) return false;

		if (!Utils.equals( marketSegmentDesc, msg.marketSegmentDesc)) return false;

		if (!( encodedMktSegmDescLen==msg.encodedMktSegmDescLen)) return false;

		if (!Utils.equals( encodedMktSegmDesc, msg.encodedMktSegmDesc)) return false;

		if (!Utils.equals( parentMktSegmID, msg.parentMktSegmID)) return false;

		if (!Utils.equals( currency, msg.currency)) return false;

		if (!baseTradingRules.equals(msg.baseTradingRules)) return false;

		if (!ordTypeRules.equals(msg.ordTypeRules)) return false;

		if (!timeInForceRules.equals(msg.timeInForceRules)) return false;

		if (!execInstRules.equals(msg.execInstRules)) return false;

		if (!Utils.equals( text, msg.text)) return false;

		if (!( encodedTextLen==msg.encodedTextLen)) return false;

		if (!Utils.equals( encodedText, msg.encodedText)) return false;

		return true;
	}
}
