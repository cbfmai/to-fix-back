package org.tomac.protocol.fix.messaging.fix50sp2.component;

// DO NOT EDIT!!!
// This file is generated by FixMessageGenerator.
// If you need additional functionality, put it in a helper class
// that does not live in this folder!!!  Any java file in this folder 
// will be deleted upon the next run of the FixMessageGenerator!

import java.nio.ByteBuffer;

import org.tomac.protocol.fix.FixUtils;
import org.tomac.protocol.fix.FixSessionException;
import org.tomac.protocol.fix.FixGarbledException;
import org.tomac.utils.Utils;
import org.tomac.protocol.fix.FixConstants;


import org.tomac.protocol.fix.messaging.fix50sp2.FixMessageInfo.SessionRejectReason;
import org.tomac.protocol.fix.messaging.fix50sp2.FixMessageInfo;
import org.tomac.protocol.fix.messaging.fix50sp2.FixTags;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixContextPtysSubGrp;

public class FixContextParties
{

	public int noContextPartyIDs;
	public ContextParties[] group;

	public void getAll(int noContextPartyIDs, ByteBuffer buf) throws FixSessionException, FixGarbledException {
		this.noContextPartyIDs = noContextPartyIDs;

		if (noContextPartyIDs < 1) throw new FixSessionException(SessionRejectReason.INCORRECT_NUMINGROUP_COUNT_FOR_REPEATING_GROUP, ("Incorrect num in group count " + noContextPartyIDs ).getBytes(), FixTags.NOCONTEXTPARTYIDS_INT, new byte[0]);
		// this will leak memory if we grow the group
		if (group == null || group.length < noContextPartyIDs) {
			group = new ContextParties[noContextPartyIDs];

			for ( int i = 0; i < noContextPartyIDs; i++ ) group[i] = new ContextParties();
	}

		for ( int i = 0; i < noContextPartyIDs; i++ ) 
			group[i].getAllGroup(buf);
	}

	public void clear() {
		for (int i = 0; i<noContextPartyIDs; i++)
			group[i].clear();
	}
	public void encode(ByteBuffer out) {
		for (int i = 0; i<noContextPartyIDs; i++)
			group[i].encode(out);
	}
	public boolean isSet() {
		for (int i = 0; i<noContextPartyIDs; i++)
			if (group[i].isSet()) return true;
		return false;
	}

	@Override
	public boolean equals(Object o) {
		if (! ( o instanceof FixContextParties)) return false;

		FixContextParties msg = (FixContextParties) o;

		for (int i = 0; i<noContextPartyIDs; i++)
			if (!group[i].equals(msg.group[i])) return false;
		return true;
	}

	@Override
	public String toString() {
		String s = "";
		for (int i = 0; i<noContextPartyIDs; i++)
			s += group[i].toString();
		return s;
	}

public class ContextParties implements FixComponent
{

	public byte[] contextPartyID;
	public byte contextPartyIDSource = (byte)' ';
	public long contextPartyRole = 0;
	public FixContextPtysSubGrp contextPtysSubGrp;

	public ContextParties() {
		super();

		contextPartyID = new byte[FixUtils.FIX_MAX_STRING_TEXT_LENGTH];
		contextPtysSubGrp = new FixContextPtysSubGrp();
		this.clear();

	}

	@Override
	public void clear()
	{

		// clear out all the fields that aren't msgType

		Utils.fill( contextPartyID, (byte)0 );
		contextPartyIDSource = Byte.MAX_VALUE;		
		contextPartyRole = Long.MAX_VALUE;		
		contextPtysSubGrp.clear();
	}

	public void getAllGroup(ByteBuffer buf) throws FixSessionException, FixGarbledException
	{

		int startTagPosition = buf.position();

		int id = FixUtils.getTagId( buf );
		int lastTagPosition = buf.position();
			ByteBuffer value;

			value = buf;

			if(id == FixTags.CONTEXTPARTYID_INT) {
				contextPartyID = FixUtils.getTagStringValue(null ,id ,value, contextPartyID);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.CONTEXTPARTYIDSOURCE_INT) {
				contextPartyIDSource = FixUtils.getTagCharValue(null ,id ,value );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.CONTEXTPARTYROLE_INT) {
				contextPartyRole = FixUtils.getTagIntValue(null ,id ,value );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.NOCONTEXTPARTYSUBIDS_INT) {
				int noContextPartySubIDs;
				noContextPartySubIDs = FixUtils.getTagIntValue(null ,id ,value );
				contextPtysSubGrp.getAll(noContextPartySubIDs, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			id = checkRequiredTags();
				if (id > 0) throw new FixSessionException(SessionRejectReason.REQUIRED_TAG_MISSING, "Required tag missing".getBytes(), id, new byte[0] );

			buf.position( lastTagPosition );
			return;

	}

	private int checkRequiredTags() {
		int tag = -1;

		return tag;

	}
	@Override
	public boolean isSet()
	{
		if (FixUtils.isSet(contextPartyID)) return true;
		if (FixUtils.isSet(contextPartyIDSource)) return true;
		if (FixUtils.isSet(contextPartyRole)) return true;
		if (FixUtils.isSet(contextPtysSubGrp.noContextPartySubIDs)) return true;
		return false;
	}
	@Override
	public void encode( ByteBuffer out )
	{
		if (FixUtils.isSet(contextPartyID)) FixUtils.putFixTag( out, FixTags.CONTEXTPARTYID_INT, contextPartyID, 0, Utils.lastIndexTrim(contextPartyID, (byte)0) );
		if (FixUtils.isSet(contextPartyIDSource)) FixUtils.putFixTag( out, FixTags.CONTEXTPARTYIDSOURCE_INT, contextPartyIDSource );
		if (FixUtils.isSet(contextPartyRole)) FixUtils.putFixTag( out, FixTags.CONTEXTPARTYROLE_INT, contextPartyRole);
		if (FixUtils.isSet(contextPtysSubGrp.noContextPartySubIDs)) contextPtysSubGrp.encode( out );
	}
	/**
	 * If you use toString for any other purpose than administrative printout.
	 * You will end up in nifelheim!
	**/
	@Override
	public String toString() {
		char sep = '\n';
		if (Boolean.getBoolean("fix.useOneLiner")) sep = ( byte )0x01;

		String s = "";

			if (FixUtils.isSet(contextPartyID)) s += "ContextPartyID(1523)=" + new String(contextPartyID) + sep;
			if (FixUtils.isSet(contextPartyIDSource)) s += "ContextPartyIDSource(1524)=" + String.valueOf(contextPartyIDSource) + sep;
			if (FixUtils.isSet(contextPartyRole)) s += "ContextPartyRole(1525)=" + String.valueOf(contextPartyRole) + sep;
			if (FixUtils.isSet(contextPtysSubGrp.noContextPartySubIDs)) s += contextPtysSubGrp.toString();
		return s;

	}

	@Override
	public boolean equals(Object o) {
		if (! ( o instanceof ContextParties)) return false;

			ContextParties msg = (ContextParties) o;

		if (!Utils.equals( contextPartyID, msg.contextPartyID)) return false;

		if (!( contextPartyIDSource==msg.contextPartyIDSource)) return false;

		if (!( contextPartyRole==msg.contextPartyRole)) return false;

		if (!contextPtysSubGrp.equals(msg.contextPtysSubGrp)) return false;

		return true;
	}
}
}
