package org.tomac.protocol.fix.messaging.fix50sp2.component;

// DO NOT EDIT!!!
// This file is generated by FixMessageGenerator.
// If you need additional functionality, put it in a helper class
// that does not live in this folder!!!  Any java file in this folder 
// will be deleted upon the next run of the FixMessageGenerator!

import java.nio.ByteBuffer;

import org.tomac.protocol.fix.FixUtils;
import org.tomac.protocol.fix.FixSessionException;
import org.tomac.protocol.fix.FixGarbledException;
import org.tomac.utils.Utils;
import org.tomac.protocol.fix.FixConstants;


import org.tomac.protocol.fix.messaging.fix50sp2.FixTags;
import org.tomac.protocol.fix.messaging.fix50sp2.FixMessageInfo.*;

public class FixDisplayInstruction implements FixComponent
{

	public long displayQty = 0;
	public long secondaryDisplayQty = 0;
	public byte displayWhen = (byte)' ';
	public byte displayMethod = (byte)' ';
	public long displayLowQty = 0;
	public long displayHighQty = 0;
	public long displayMinIncr = 0;
	public long refreshQty = 0;

	public FixDisplayInstruction() {
		super();

		this.clear();

	}

	@Override
	public void clear()
	{

		// clear out all the fields that aren't msgType

		displayQty = Long.MAX_VALUE;		
		secondaryDisplayQty = Long.MAX_VALUE;		
		displayWhen = Byte.MAX_VALUE;		
		displayMethod = Byte.MAX_VALUE;		
		displayLowQty = Long.MAX_VALUE;		
		displayHighQty = Long.MAX_VALUE;		
		displayMinIncr = Long.MAX_VALUE;		
		refreshQty = Long.MAX_VALUE;		
	}

	public void getAll(int id, ByteBuffer buf) throws FixSessionException, FixGarbledException
	{

		int startTagPosition = buf.position();

		int lastTagPosition = buf.position();
		do {
			ByteBuffer value;

			value = buf;

			switch( id ) {

			case FixTags.DISPLAYQTY_INT:
				displayQty = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.SECONDARYDISPLAYQTY_INT:
				secondaryDisplayQty = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.DISPLAYWHEN_INT:
				displayWhen = FixUtils.getTagCharValue( value );
				if (!DisplayWhen.isValid(displayWhen) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + displayWhen + ") for tag").getBytes(), id, new byte[0] );
				break;

			case FixTags.DISPLAYMETHOD_INT:
				displayMethod = FixUtils.getTagCharValue( value );
				if (!DisplayMethod.isValid(displayMethod) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + displayMethod + ") for tag").getBytes(), id, new byte[0] );
				break;

			case FixTags.DISPLAYLOWQTY_INT:
				displayLowQty = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.DISPLAYHIGHQTY_INT:
				displayHighQty = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.DISPLAYMININCR_INT:
				displayMinIncr = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.REFRESHQTY_INT:
				refreshQty = FixUtils.getTagFloatValue(value);
				break;

			// we will always endup with unknown tag, unread and return to upper layer in hierarchy
			default:
				id = checkRequiredTags();
				if (id > 0) throw new FixSessionException(SessionRejectReason.REQUIRED_TAG_MISSING, "Required tag missing".getBytes(), id, new byte[0] );

				buf.position( lastTagPosition );
				return;

			}

			lastTagPosition = buf.position();

		} while ( ( id = FixUtils.getTagId( buf ) ) > 0 );

		buf.position(startTagPosition);

	}

	private int checkRequiredTags() {
		int tag = -1;

		return tag;

	}
	@Override
	public boolean isSet()
	{
		if (FixUtils.isSet(displayQty)) return true;
		if (FixUtils.isSet(secondaryDisplayQty)) return true;
		if (FixUtils.isSet(displayWhen)) return true;
		if (FixUtils.isSet(displayMethod)) return true;
		if (FixUtils.isSet(displayLowQty)) return true;
		if (FixUtils.isSet(displayHighQty)) return true;
		if (FixUtils.isSet(displayMinIncr)) return true;
		if (FixUtils.isSet(refreshQty)) return true;
		return false;
	}
	@Override
	public void encode( ByteBuffer out )
	{
		if (FixUtils.isSet(displayQty)) FixUtils.putFixFloatTag( out, FixTags.DISPLAYQTY_INT, displayQty);
		if (FixUtils.isSet(secondaryDisplayQty)) FixUtils.putFixFloatTag( out, FixTags.SECONDARYDISPLAYQTY_INT, secondaryDisplayQty);
		if (FixUtils.isSet(displayWhen)) FixUtils.putFixTag( out, FixTags.DISPLAYWHEN_INT, displayWhen );
		if (FixUtils.isSet(displayMethod)) FixUtils.putFixTag( out, FixTags.DISPLAYMETHOD_INT, displayMethod );
		if (FixUtils.isSet(displayLowQty)) FixUtils.putFixFloatTag( out, FixTags.DISPLAYLOWQTY_INT, displayLowQty);
		if (FixUtils.isSet(displayHighQty)) FixUtils.putFixFloatTag( out, FixTags.DISPLAYHIGHQTY_INT, displayHighQty);
		if (FixUtils.isSet(displayMinIncr)) FixUtils.putFixFloatTag( out, FixTags.DISPLAYMININCR_INT, displayMinIncr);
		if (FixUtils.isSet(refreshQty)) FixUtils.putFixFloatTag( out, FixTags.REFRESHQTY_INT, refreshQty);
	}
	/**
	 * If you use toString for any other purpose than administrative printout.
	 * You will end up in nifelheim!
	**/
	@Override
	public String toString() {
		char sep = '\n';
		if (Boolean.getBoolean("fix.useOneLiner")) sep = ( byte )0x01;

		String s = "";

			if (FixUtils.isSet(displayQty)) s += "DisplayQty(1138)=" + String.valueOf(displayQty) + sep;
			if (FixUtils.isSet(secondaryDisplayQty)) s += "SecondaryDisplayQty(1082)=" + String.valueOf(secondaryDisplayQty) + sep;
			if (FixUtils.isSet(displayWhen)) s += "DisplayWhen(1083)=" + String.valueOf(displayWhen) + sep;
			if (FixUtils.isSet(displayMethod)) s += "DisplayMethod(1084)=" + String.valueOf(displayMethod) + sep;
			if (FixUtils.isSet(displayLowQty)) s += "DisplayLowQty(1085)=" + String.valueOf(displayLowQty) + sep;
			if (FixUtils.isSet(displayHighQty)) s += "DisplayHighQty(1086)=" + String.valueOf(displayHighQty) + sep;
			if (FixUtils.isSet(displayMinIncr)) s += "DisplayMinIncr(1087)=" + String.valueOf(displayMinIncr) + sep;
			if (FixUtils.isSet(refreshQty)) s += "RefreshQty(1088)=" + String.valueOf(refreshQty) + sep;
		return s;

	}

	@Override
	public boolean equals(Object o) {
		if (! ( o instanceof FixDisplayInstruction)) return false;

			FixDisplayInstruction msg = (FixDisplayInstruction) o;

		if (!( displayQty==msg.displayQty)) return false;

		if (!( secondaryDisplayQty==msg.secondaryDisplayQty)) return false;

		if (!( displayWhen==msg.displayWhen)) return false;

		if (!( displayMethod==msg.displayMethod)) return false;

		if (!( displayLowQty==msg.displayLowQty)) return false;

		if (!( displayHighQty==msg.displayHighQty)) return false;

		if (!( displayMinIncr==msg.displayMinIncr)) return false;

		if (!( refreshQty==msg.refreshQty)) return false;

		return true;
	}
}
