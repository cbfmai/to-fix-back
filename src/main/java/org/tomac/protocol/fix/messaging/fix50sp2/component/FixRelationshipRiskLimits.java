package org.tomac.protocol.fix.messaging.fix50sp2.component;

// DO NOT EDIT!!!
// This file is generated by FixMessageGenerator.
// If you need additional functionality, put it in a helper class
// that does not live in this folder!!!  Any java file in this folder 
// will be deleted upon the next run of the FixMessageGenerator!

import java.nio.ByteBuffer;

import org.tomac.protocol.fix.FixUtils;
import org.tomac.protocol.fix.FixSessionException;
import org.tomac.protocol.fix.FixGarbledException;
import org.tomac.utils.Utils;
import org.tomac.protocol.fix.FixConstants;


import org.tomac.protocol.fix.messaging.fix50sp2.FixMessageInfo;
import org.tomac.protocol.fix.messaging.fix50sp2.FixTags;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixRelationshipRiskInstrumentScope;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixRelationshipRiskWarningLevels;

public class FixRelationshipRiskLimits
{

	public int noRelationshipRiskLimits;
	public RelationshipRiskLimits[] group;

	public void getAll(int noRelationshipRiskLimits, ByteBuffer buf) throws FixSessionException {
		this.noRelationshipRiskLimits = noRelationshipRiskLimits;

		if (noRelationshipRiskLimits < 1) throw new FixSessionException("asdasd");
		// this will leak memory if we grow the group
		if (group == null || group.length < noRelationshipRiskLimits) {
			group = new RelationshipRiskLimits[noRelationshipRiskLimits];

			for ( int i = 0; i < noRelationshipRiskLimits; i++ ) group[i] = new RelationshipRiskLimits();
	}

		for ( int i = 0; i < noRelationshipRiskLimits; i++ ) 
			group[i].getAllGroup(buf);
	}

	public void clear() {
		for (int i = 0; i<noRelationshipRiskLimits; i++)
			group[i].clear();
	}
	public void encode(ByteBuffer out) {
		for (int i = 0; i<noRelationshipRiskLimits; i++)
			group[i].encode(out);
	}
	public boolean isSet() {
		for (int i = 0; i<noRelationshipRiskLimits; i++)
			if (group[i].isSet()) return true;
		return false;
	}

	@Override
	public String toString() {
		String s = "";
		for (int i = 0; i<noRelationshipRiskLimits; i++)
			s += group[i].toString();
		return s;
	}

public class RelationshipRiskLimits implements FixComponent
{

	public long relationshipRiskLimitType = 0;
	public long relationshipRiskLimitAmount = 0;
	public byte[] relationshipRiskLimitCurrency;
	public byte[] relationshipRiskLimitPlatform;
	public FixRelationshipRiskInstrumentScope relationshipRiskInstrumentScope;
	public FixRelationshipRiskWarningLevels relationshipRiskWarningLevels;

	public RelationshipRiskLimits() {
		super();

		relationshipRiskLimitCurrency = new byte[FixUtils.CURRENCY_LENGTH];
		relationshipRiskLimitPlatform = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		relationshipRiskInstrumentScope = new FixRelationshipRiskInstrumentScope();
		relationshipRiskWarningLevels = new FixRelationshipRiskWarningLevels();
		this.clear();

	}

	@Override
	public void clear()
	{

		// clear out all the fields that aren't msgType

		relationshipRiskLimitType = Long.MAX_VALUE;		
		relationshipRiskLimitAmount = Long.MAX_VALUE;		
		Utils.fill( relationshipRiskLimitCurrency, (byte)0 );
		Utils.fill( relationshipRiskLimitPlatform, (byte)0 );
		relationshipRiskInstrumentScope.clear();
		relationshipRiskWarningLevels.clear();
	}

	public void getAllGroup(ByteBuffer buf) throws FixSessionException
	{

		int startTagPosition = buf.position();

		int id = FixUtils.getTagId( buf );
		int lastTagPosition = buf.position();
			ByteBuffer value;

			value = buf;

			if(id == FixTags.RELATIONSHIPRISKLIMITTYPE_INT) {
				relationshipRiskLimitType = FixUtils.getTagIntValue( value );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.RELATIONSHIPRISKLIMITAMOUNT_INT) {
				relationshipRiskLimitAmount = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.RELATIONSHIPRISKLIMITCURRENCY_INT) {
				relationshipRiskLimitCurrency = FixUtils.getTagStringValue(value, relationshipRiskLimitCurrency);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.RELATIONSHIPRISKLIMITPLATFORM_INT) {
				relationshipRiskLimitPlatform = FixUtils.getTagStringValue(value, relationshipRiskLimitPlatform);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.NORELATIONSHIPRISKINSTRUMENTS_INT) {
				relationshipRiskInstrumentScope.getAll(FixTags.NORELATIONSHIPRISKINSTRUMENTS_INT, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.NORELATIONSHIPRISKWARNINGLEVELS_INT) {
				relationshipRiskWarningLevels.getAll(FixTags.NORELATIONSHIPRISKWARNINGLEVELS_INT, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			id = checkRequiredTags();
			if (id > 0) throw new FixSessionException(buf, "Required tag missing: " + id );

			buf.position( lastTagPosition );
			return;

	}

	private int checkRequiredTags() {
		int tag = -1;

		return tag;

	}
	@Override
	public boolean isSet()
	{
		if (FixUtils.isSet(relationshipRiskLimitType)) return true;
		if (FixUtils.isSet(relationshipRiskLimitAmount)) return true;
		if (FixUtils.isSet(relationshipRiskLimitCurrency)) return true;
		if (FixUtils.isSet(relationshipRiskLimitPlatform)) return true;
		if (FixUtils.isSet(relationshipRiskInstrumentScope.noRelationshipRiskInstruments)) return true;
		if (FixUtils.isSet(relationshipRiskWarningLevels.noRelationshipRiskWarningLevels)) return true;
		return false;
	}
	@Override
	public void encode( ByteBuffer out )
	{
		if (FixUtils.isSet(relationshipRiskLimitType)) FixUtils.putFixTag( out, FixTags.RELATIONSHIPRISKLIMITTYPE_INT, relationshipRiskLimitType);
		if (FixUtils.isSet(relationshipRiskLimitAmount)) FixUtils.putFixTag( out, FixTags.RELATIONSHIPRISKLIMITAMOUNT_INT, relationshipRiskLimitAmount);
		if (FixUtils.isSet(relationshipRiskLimitCurrency)) FixUtils.putFixTag( out, FixTags.RELATIONSHIPRISKLIMITCURRENCY_INT, relationshipRiskLimitCurrency, 0, Utils.lastIndexTrim(relationshipRiskLimitCurrency, (byte)0) );
		if (FixUtils.isSet(relationshipRiskLimitPlatform)) FixUtils.putFixTag( out, FixTags.RELATIONSHIPRISKLIMITPLATFORM_INT, relationshipRiskLimitPlatform, 0, Utils.lastIndexTrim(relationshipRiskLimitPlatform, (byte)0) );
		if (FixUtils.isSet(relationshipRiskInstrumentScope.noRelationshipRiskInstruments)) relationshipRiskInstrumentScope.encode( out );
		if (FixUtils.isSet(relationshipRiskWarningLevels.noRelationshipRiskWarningLevels)) relationshipRiskWarningLevels.encode( out );
	}
	/**
	 * If you use toString for any other purpose than administrative printout.
	 * You will end up in nifelheim!
	**/
	@Override
	public String toString() {
		char sep = '\n';
		if (Boolean.getBoolean("fix.useOneLiner")) sep = ( byte )0x01;

		String s = "";

			if (FixUtils.isSet(relationshipRiskLimitType)) s += "RelationshipRiskLimitType(1583)=" + String.valueOf(relationshipRiskLimitType) + sep;
			if (FixUtils.isSet(relationshipRiskLimitAmount)) s += "RelationshipRiskLimitAmount(1584)=" + String.valueOf(relationshipRiskLimitAmount) + sep;
			if (FixUtils.isSet(relationshipRiskLimitCurrency)) s += "RelationshipRiskLimitCurrency(1585)=" + new String(relationshipRiskLimitCurrency) + sep;
			if (FixUtils.isSet(relationshipRiskLimitPlatform)) s += "RelationshipRiskLimitPlatform(1586)=" + new String(relationshipRiskLimitPlatform) + sep;
			if (FixUtils.isSet(relationshipRiskInstrumentScope.noRelationshipRiskInstruments)) s += relationshipRiskInstrumentScope.toString();
			if (FixUtils.isSet(relationshipRiskWarningLevels.noRelationshipRiskWarningLevels)) s += relationshipRiskWarningLevels.toString();
		return s;

	}

	@Override
	public boolean equals(Object o) {
		if (! ( o instanceof RelationshipRiskLimits)) return false;

			RelationshipRiskLimits msg = (RelationshipRiskLimits) o;

		if ( ! super.equals(msg) ) return false;

		if (!( relationshipRiskLimitType==msg.relationshipRiskLimitType)) return false;

		if (!( relationshipRiskLimitAmount==msg.relationshipRiskLimitAmount)) return false;

		if (!Utils.equals( relationshipRiskLimitCurrency, msg.relationshipRiskLimitCurrency)) return false;

		if (!Utils.equals( relationshipRiskLimitPlatform, msg.relationshipRiskLimitPlatform)) return false;

		if (!relationshipRiskInstrumentScope.equals(msg.relationshipRiskInstrumentScope)) return false;

		if (!relationshipRiskWarningLevels.equals(msg.relationshipRiskWarningLevels)) return false;

		return true;
	}
}
}
