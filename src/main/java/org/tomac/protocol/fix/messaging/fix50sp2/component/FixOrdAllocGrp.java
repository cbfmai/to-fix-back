package org.tomac.protocol.fix.messaging.fix50sp2.component;

// DO NOT EDIT!!!
// This file is generated by FixMessageGenerator.
// If you need additional functionality, put it in a helper class
// that does not live in this folder!!!  Any java file in this folder 
// will be deleted upon the next run of the FixMessageGenerator!

import java.nio.ByteBuffer;

import org.tomac.protocol.fix.FixUtils;
import org.tomac.protocol.fix.FixSessionException;
import org.tomac.protocol.fix.FixGarbledException;
import org.tomac.utils.Utils;
import org.tomac.protocol.fix.FixConstants;


import org.tomac.protocol.fix.messaging.fix50sp2.FixMessageInfo.SessionRejectReason;
import org.tomac.protocol.fix.messaging.fix50sp2.FixMessageInfo;
import org.tomac.protocol.fix.messaging.fix50sp2.FixTags;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixNestedParties2;

public class FixOrdAllocGrp
{

	public int noOrders;
	public OrdAllocGrp[] group;

	public void getAll(int noOrders, ByteBuffer buf) throws FixSessionException, FixGarbledException {
		this.noOrders = noOrders;

		if (noOrders < 1) throw new FixSessionException(SessionRejectReason.INCORRECT_NUMINGROUP_COUNT_FOR_REPEATING_GROUP, ("Incorrect num in group count " + noOrders ).getBytes(), FixTags.NOORDERS_INT, new byte[0]);
		// this will leak memory if we grow the group
		if (group == null || group.length < noOrders) {
			group = new OrdAllocGrp[noOrders];

			for ( int i = 0; i < noOrders; i++ ) group[i] = new OrdAllocGrp();
	}

		for ( int i = 0; i < noOrders; i++ ) 
			group[i].getAllGroup(buf);
	}

	public void clear() {
		for (int i = 0; i<noOrders; i++)
			group[i].clear();
	}
	public void encode(ByteBuffer out) {
		for (int i = 0; i<noOrders; i++)
			group[i].encode(out);
	}
	public boolean isSet() {
		for (int i = 0; i<noOrders; i++)
			if (group[i].isSet()) return true;
		return false;
	}

	@Override
	public String toString() {
		String s = "";
		for (int i = 0; i<noOrders; i++)
			s += group[i].toString();
		return s;
	}

public class OrdAllocGrp implements FixComponent
{

	public byte[] clOrdID;
	public byte[] orderID;
	public byte[] secondaryOrderID;
	public byte[] secondaryClOrdID;
	public byte[] listID;
	public FixNestedParties2 nestedParties2;
	public long orderQty = 0;
	public long orderAvgPx = 0;
	public long orderBookingQty = 0;

	public OrdAllocGrp() {
		super();

		clOrdID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		orderID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		secondaryOrderID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		secondaryClOrdID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		listID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		nestedParties2 = new FixNestedParties2();
		this.clear();

	}

	@Override
	public void clear()
	{

		// clear out all the fields that aren't msgType

		Utils.fill( clOrdID, (byte)0 );
		Utils.fill( orderID, (byte)0 );
		Utils.fill( secondaryOrderID, (byte)0 );
		Utils.fill( secondaryClOrdID, (byte)0 );
		Utils.fill( listID, (byte)0 );
		orderQty = Long.MAX_VALUE;		
		orderAvgPx = Long.MAX_VALUE;		
		orderBookingQty = Long.MAX_VALUE;		
		nestedParties2.clear();
	}

	public void getAllGroup(ByteBuffer buf) throws FixSessionException, FixGarbledException
	{

		int startTagPosition = buf.position();

		int id = FixUtils.getTagId( buf );
		int lastTagPosition = buf.position();
			ByteBuffer value;

			value = buf;

			if(id == FixTags.CLORDID_INT) {
				clOrdID = FixUtils.getTagStringValue(value, clOrdID);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.ORDERID_INT) {
				orderID = FixUtils.getTagStringValue(value, orderID);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.SECONDARYORDERID_INT) {
				secondaryOrderID = FixUtils.getTagStringValue(value, secondaryOrderID);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.SECONDARYCLORDID_INT) {
				secondaryClOrdID = FixUtils.getTagStringValue(value, secondaryClOrdID);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.LISTID_INT) {
				listID = FixUtils.getTagStringValue(value, listID);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.NONESTED2PARTYIDS_INT) {
				nestedParties2.getAll(FixTags.NONESTED2PARTYIDS_INT, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.ORDERQTY_INT) {
				orderQty = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.ORDERAVGPX_INT) {
				orderAvgPx = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.ORDERBOOKINGQTY_INT) {
				orderBookingQty = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			id = checkRequiredTags();
				if (id > 0) throw new FixSessionException(SessionRejectReason.REQUIRED_TAG_MISSING, "Required tag missing".getBytes(), id, new byte[0] );

			buf.position( lastTagPosition );
			return;

	}

	private int checkRequiredTags() {
		int tag = -1;

		return tag;

	}
	@Override
	public boolean isSet()
	{
		if (FixUtils.isSet(clOrdID)) return true;
		if (FixUtils.isSet(orderID)) return true;
		if (FixUtils.isSet(secondaryOrderID)) return true;
		if (FixUtils.isSet(secondaryClOrdID)) return true;
		if (FixUtils.isSet(listID)) return true;
		if (FixUtils.isSet(nestedParties2.noNested2PartyIDs)) return true;
		if (FixUtils.isSet(orderQty)) return true;
		if (FixUtils.isSet(orderAvgPx)) return true;
		if (FixUtils.isSet(orderBookingQty)) return true;
		return false;
	}
	@Override
	public void encode( ByteBuffer out )
	{
		if (FixUtils.isSet(clOrdID)) FixUtils.putFixTag( out, FixTags.CLORDID_INT, clOrdID, 0, Utils.lastIndexTrim(clOrdID, (byte)0) );
		if (FixUtils.isSet(orderID)) FixUtils.putFixTag( out, FixTags.ORDERID_INT, orderID, 0, Utils.lastIndexTrim(orderID, (byte)0) );
		if (FixUtils.isSet(secondaryOrderID)) FixUtils.putFixTag( out, FixTags.SECONDARYORDERID_INT, secondaryOrderID, 0, Utils.lastIndexTrim(secondaryOrderID, (byte)0) );
		if (FixUtils.isSet(secondaryClOrdID)) FixUtils.putFixTag( out, FixTags.SECONDARYCLORDID_INT, secondaryClOrdID, 0, Utils.lastIndexTrim(secondaryClOrdID, (byte)0) );
		if (FixUtils.isSet(listID)) FixUtils.putFixTag( out, FixTags.LISTID_INT, listID, 0, Utils.lastIndexTrim(listID, (byte)0) );
		if (FixUtils.isSet(nestedParties2.noNested2PartyIDs)) nestedParties2.encode( out );
		if (FixUtils.isSet(orderQty)) FixUtils.putFixFloatTag( out, FixTags.ORDERQTY_INT, orderQty);
		if (FixUtils.isSet(orderAvgPx)) FixUtils.putFixFloatTag( out, FixTags.ORDERAVGPX_INT, orderAvgPx);
		if (FixUtils.isSet(orderBookingQty)) FixUtils.putFixFloatTag( out, FixTags.ORDERBOOKINGQTY_INT, orderBookingQty);
	}
	/**
	 * If you use toString for any other purpose than administrative printout.
	 * You will end up in nifelheim!
	**/
	@Override
	public String toString() {
		char sep = '\n';
		if (Boolean.getBoolean("fix.useOneLiner")) sep = ( byte )0x01;

		String s = "";

			if (FixUtils.isSet(clOrdID)) s += "ClOrdID(11)=" + new String(clOrdID) + sep;
			if (FixUtils.isSet(orderID)) s += "OrderID(37)=" + new String(orderID) + sep;
			if (FixUtils.isSet(secondaryOrderID)) s += "SecondaryOrderID(198)=" + new String(secondaryOrderID) + sep;
			if (FixUtils.isSet(secondaryClOrdID)) s += "SecondaryClOrdID(526)=" + new String(secondaryClOrdID) + sep;
			if (FixUtils.isSet(listID)) s += "ListID(66)=" + new String(listID) + sep;
			if (FixUtils.isSet(nestedParties2.noNested2PartyIDs)) s += nestedParties2.toString();
			if (FixUtils.isSet(orderQty)) s += "OrderQty(38)=" + String.valueOf(orderQty) + sep;
			if (FixUtils.isSet(orderAvgPx)) s += "OrderAvgPx(799)=" + String.valueOf(orderAvgPx) + sep;
			if (FixUtils.isSet(orderBookingQty)) s += "OrderBookingQty(800)=" + String.valueOf(orderBookingQty) + sep;
		return s;

	}

	@Override
	public boolean equals(Object o) {
		if (! ( o instanceof OrdAllocGrp)) return false;

			OrdAllocGrp msg = (OrdAllocGrp) o;

		if ( ! super.equals(msg) ) return false;

		if (!Utils.equals( clOrdID, msg.clOrdID)) return false;

		if (!Utils.equals( orderID, msg.orderID)) return false;

		if (!Utils.equals( secondaryOrderID, msg.secondaryOrderID)) return false;

		if (!Utils.equals( secondaryClOrdID, msg.secondaryClOrdID)) return false;

		if (!Utils.equals( listID, msg.listID)) return false;

		if (!nestedParties2.equals(msg.nestedParties2)) return false;

		if (!( orderQty==msg.orderQty)) return false;

		if (!( orderAvgPx==msg.orderAvgPx)) return false;

		if (!( orderBookingQty==msg.orderBookingQty)) return false;

		return true;
	}
}
}
