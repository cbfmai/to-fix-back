package org.tomac.protocol.fix.messaging.fix50sp2.component;

// DO NOT EDIT!!!
// This file is generated by FixMessageGenerator.
// If you need additional functionality, put it in a helper class
// that does not live in this folder!!!  Any java file in this folder 
// will be deleted upon the next run of the FixMessageGenerator!

import java.nio.ByteBuffer;

import org.tomac.protocol.fix.FixUtils;
import org.tomac.protocol.fix.FixSessionException;
import org.tomac.protocol.fix.FixGarbledException;
import org.tomac.utils.Utils;
import org.tomac.protocol.fix.FixConstants;


import org.tomac.protocol.fix.messaging.fix50sp2.FixMessageInfo.SessionRejectReason;
import org.tomac.protocol.fix.messaging.fix50sp2.FixMessageInfo;
import org.tomac.protocol.fix.messaging.fix50sp2.FixTags;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixParties;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixClrInstGrp;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixCommissionData;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixContAmtGrp;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixStipulations;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixMiscFeesGrp;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixTrdAllocGrp;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixSideTrdRegTS;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixSettlDetails;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixTradeReportOrderDetail;

public class FixTrdCapRptSideGrp
{

	public int noSides;
	public TrdCapRptSideGrp[] group;

	public void getAll(int noSides, ByteBuffer buf) throws FixSessionException, FixGarbledException {
		this.noSides = noSides;

		if (noSides < 1) throw new FixSessionException(SessionRejectReason.INCORRECT_NUMINGROUP_COUNT_FOR_REPEATING_GROUP, ("Incorrect num in group count " + noSides ).getBytes(), FixTags.NOSIDES_INT, new byte[0]);
		// this will leak memory if we grow the group
		if (group == null || group.length < noSides) {
			group = new TrdCapRptSideGrp[noSides];

			for ( int i = 0; i < noSides; i++ ) group[i] = new TrdCapRptSideGrp();
	}

		for ( int i = 0; i < noSides; i++ ) 
			group[i].getAllGroup(buf);
	}

	public void clear() {
		for (int i = 0; i<noSides; i++)
			group[i].clear();
	}
	public void encode(ByteBuffer out) {
		for (int i = 0; i<noSides; i++)
			group[i].encode(out);
	}
	public boolean isSet() {
		for (int i = 0; i<noSides; i++)
			if (group[i].isSet()) return true;
		return false;
	}

	@Override
	public String toString() {
		String s = "";
		for (int i = 0; i<noSides; i++)
			s += group[i].toString();
		return s;
	}

public class TrdCapRptSideGrp implements FixComponent
{

	public byte side = (byte)' ';
	public byte[] sideExecID;
	public long orderDelay = 0;
	public long orderDelayUnit = 0;
	public long sideLastQty = 0;
	public byte[] sideTradeReportID;
	public byte[] sideFillStationCd;
	public byte[] sideReasonCd;
	public long rptSeq = 0;
	public long sideTrdSubTyp = 0;
	public long netGrossInd = 0;
	public byte[] sideCurrency;
	public byte[] sideSettlCurrency;
	public FixParties parties;
	public byte[] account;
	public long acctIDSource = 0;
	public long accountType = 0;
	public byte processCode = (byte)' ';
	public boolean oddLot = false;
	public FixClrInstGrp clrInstGrp;
	public byte[] tradeInputSource;
	public byte[] tradeInputDevice;
	public byte[] complianceID;
	public boolean solicitedFlag = false;
	public long custOrderCapacity = 0;
	public byte[] tradingSessionID;
	public byte[] tradingSessionSubID;
	public byte[] timeBracket;
	public FixCommissionData commissionData;
	public long numDaysInterest = 0;
	public byte[] exDate;
	public long accruedInterestRate = 0;
	public long accruedInterestAmt = 0;
	public long interestAtMaturity = 0;
	public long endAccruedInterestAmt = 0;
	public long startCash = 0;
	public long endCash = 0;
	public long concession = 0;
	public long totalTakedown = 0;
	public long netMoney = 0;
	public long settlCurrAmt = 0;
	public long settlCurrFxRate = 0;
	public byte settlCurrFxRateCalc = (byte)' ';
	public byte positionEffect = (byte)' ';
	public byte[] text;
	public long encodedTextLen = 0;
	public byte[] encodedText;
	public long sideMultiLegReportingType = 0;
	public FixContAmtGrp contAmtGrp;
	public FixStipulations stipulations;
	public FixMiscFeesGrp miscFeesGrp;
	public byte[] exchangeRule;
	public long tradeAllocIndicator = 0;
	public byte preallocMethod = (byte)' ';
	public byte[] allocID;
	public FixTrdAllocGrp trdAllocGrp;
	public long sideGrossTradeAmt = 0;
	public boolean aggressorIndicator = false;
	public byte[] exchangeSpecialInstructions;
	public FixSideTrdRegTS sideTrdRegTS;
	public FixSettlDetails settlDetails;
	public byte orderCategory = (byte)' ';
	public long sideLiquidityInd = 0;
	public FixTradeReportOrderDetail tradeReportOrderDetail;

	public TrdCapRptSideGrp() {
		super();

		sideExecID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		sideTradeReportID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		sideFillStationCd = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		sideReasonCd = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		sideCurrency = new byte[FixUtils.CURRENCY_LENGTH];
		sideSettlCurrency = new byte[FixUtils.CURRENCY_LENGTH];
		parties = new FixParties();
		account = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		clrInstGrp = new FixClrInstGrp();
		tradeInputSource = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		tradeInputDevice = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		complianceID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		tradingSessionID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		tradingSessionSubID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		timeBracket = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		commissionData = new FixCommissionData();
		exDate = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		text = new byte[FixUtils.FIX_MAX_STRING_TEXT_LENGTH];
		encodedText = new byte[FixUtils.FIX_MAX_STRING_TEXT_LENGTH];
		contAmtGrp = new FixContAmtGrp();
		stipulations = new FixStipulations();
		miscFeesGrp = new FixMiscFeesGrp();
		exchangeRule = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		allocID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		trdAllocGrp = new FixTrdAllocGrp();
		exchangeSpecialInstructions = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		sideTrdRegTS = new FixSideTrdRegTS();
		settlDetails = new FixSettlDetails();
		tradeReportOrderDetail = new FixTradeReportOrderDetail();
		this.clear();

	}

	@Override
	public void clear()
	{

		// clear out all the fields that aren't msgType

		side = Byte.MAX_VALUE;		
		Utils.fill( sideExecID, (byte)0 );
		orderDelay = Long.MAX_VALUE;		
		orderDelayUnit = Long.MAX_VALUE;		
		sideLastQty = Long.MAX_VALUE;		
		Utils.fill( sideTradeReportID, (byte)0 );
		Utils.fill( sideFillStationCd, (byte)0 );
		Utils.fill( sideReasonCd, (byte)0 );
		rptSeq = Long.MAX_VALUE;		
		sideTrdSubTyp = Long.MAX_VALUE;		
		netGrossInd = Long.MAX_VALUE;		
		Utils.fill( sideCurrency, (byte)0 );
		Utils.fill( sideSettlCurrency, (byte)0 );
		Utils.fill( account, (byte)0 );
		acctIDSource = Long.MAX_VALUE;		
		accountType = Long.MAX_VALUE;		
		processCode = Byte.MAX_VALUE;		
		oddLot = false;		
		Utils.fill( tradeInputSource, (byte)0 );
		Utils.fill( tradeInputDevice, (byte)0 );
		Utils.fill( complianceID, (byte)0 );
		solicitedFlag = false;		
		custOrderCapacity = Long.MAX_VALUE;		
		Utils.fill( tradingSessionID, (byte)0 );
		Utils.fill( tradingSessionSubID, (byte)0 );
		Utils.fill( timeBracket, (byte)0 );
		numDaysInterest = Long.MAX_VALUE;		
		Utils.fill( exDate, (byte)0 );
		accruedInterestRate = Long.MAX_VALUE;		
		accruedInterestAmt = Long.MAX_VALUE;		
		interestAtMaturity = Long.MAX_VALUE;		
		endAccruedInterestAmt = Long.MAX_VALUE;		
		startCash = Long.MAX_VALUE;		
		endCash = Long.MAX_VALUE;		
		concession = Long.MAX_VALUE;		
		totalTakedown = Long.MAX_VALUE;		
		netMoney = Long.MAX_VALUE;		
		settlCurrAmt = Long.MAX_VALUE;		
		settlCurrFxRate = Long.MAX_VALUE;		
		settlCurrFxRateCalc = Byte.MAX_VALUE;		
		positionEffect = Byte.MAX_VALUE;		
		Utils.fill( text, (byte)0 );
		encodedTextLen = Long.MAX_VALUE;		
		Utils.fill( encodedText, (byte)0 );
		sideMultiLegReportingType = Long.MAX_VALUE;		
		Utils.fill( exchangeRule, (byte)0 );
		tradeAllocIndicator = Long.MAX_VALUE;		
		preallocMethod = Byte.MAX_VALUE;		
		Utils.fill( allocID, (byte)0 );
		sideGrossTradeAmt = Long.MAX_VALUE;		
		aggressorIndicator = false;		
		Utils.fill( exchangeSpecialInstructions, (byte)0 );
		orderCategory = Byte.MAX_VALUE;		
		sideLiquidityInd = Long.MAX_VALUE;		
		parties.clear();
		clrInstGrp.clear();
		commissionData.clear();
		contAmtGrp.clear();
		stipulations.clear();
		miscFeesGrp.clear();
		trdAllocGrp.clear();
		sideTrdRegTS.clear();
		settlDetails.clear();
		tradeReportOrderDetail.clear();
	}

	public void getAllGroup(ByteBuffer buf) throws FixSessionException, FixGarbledException
	{

		int startTagPosition = buf.position();

		int id = FixUtils.getTagId( buf );
		int lastTagPosition = buf.position();
			ByteBuffer value;

			value = buf;

			if(id == FixTags.SIDE_INT) {
				side = FixUtils.getTagCharValue( value );
				if (!FixMessageInfo.Side.isValid(side) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + side + ") for tag").getBytes(), id, new byte[0] );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.SIDEEXECID_INT) {
				sideExecID = FixUtils.getTagStringValue(value, sideExecID);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.ORDERDELAY_INT) {
				orderDelay = FixUtils.getTagIntValue( value );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.ORDERDELAYUNIT_INT) {
				orderDelayUnit = FixUtils.getTagIntValue( value );
				if (!FixMessageInfo.OrderDelayUnit.isValid(orderDelayUnit) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + orderDelayUnit + ") for tag").getBytes(), id, new byte[0] );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.SIDELASTQTY_INT) {
				sideLastQty = FixUtils.getTagIntValue( value );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.SIDETRADEREPORTID_INT) {
				sideTradeReportID = FixUtils.getTagStringValue(value, sideTradeReportID);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.SIDEFILLSTATIONCD_INT) {
				sideFillStationCd = FixUtils.getTagStringValue(value, sideFillStationCd);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.SIDEREASONCD_INT) {
				sideReasonCd = FixUtils.getTagStringValue(value, sideReasonCd);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.RPTSEQ_INT) {
				rptSeq = FixUtils.getTagIntValue( value );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.SIDETRDSUBTYP_INT) {
				sideTrdSubTyp = FixUtils.getTagIntValue( value );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.NETGROSSIND_INT) {
				netGrossInd = FixUtils.getTagIntValue( value );
				if (!FixMessageInfo.NetGrossInd.isValid(netGrossInd) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + netGrossInd + ") for tag").getBytes(), id, new byte[0] );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.SIDECURRENCY_INT) {
				sideCurrency = FixUtils.getTagStringValue(value, sideCurrency);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.SIDESETTLCURRENCY_INT) {
				sideSettlCurrency = FixUtils.getTagStringValue(value, sideSettlCurrency);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.NOPARTYIDS_INT) {
				parties.getAll(FixTags.NOPARTYIDS_INT, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.ACCOUNT_INT) {
				account = FixUtils.getTagStringValue(value, account);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.ACCTIDSOURCE_INT) {
				acctIDSource = FixUtils.getTagIntValue( value );
				if (!FixMessageInfo.AcctIDSource.isValid(acctIDSource) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + acctIDSource + ") for tag").getBytes(), id, new byte[0] );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.ACCOUNTTYPE_INT) {
				accountType = FixUtils.getTagIntValue( value );
				if (!FixMessageInfo.AccountType.isValid(accountType) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + accountType + ") for tag").getBytes(), id, new byte[0] );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.PROCESSCODE_INT) {
				processCode = FixUtils.getTagCharValue( value );
				if (!FixMessageInfo.ProcessCode.isValid(processCode) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + processCode + ") for tag").getBytes(), id, new byte[0] );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.ODDLOT_INT) {
				oddLot = FixUtils.getTagBooleanValue( value );
				if (!FixMessageInfo.OddLot.isValid(oddLot) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + oddLot + ") for tag").getBytes(), id, new byte[0] );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.NOCLEARINGINSTRUCTIONS_INT) {
				clrInstGrp.getAll(FixTags.NOCLEARINGINSTRUCTIONS_INT, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.TRADEINPUTSOURCE_INT) {
				tradeInputSource = FixUtils.getTagStringValue(value, tradeInputSource);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.TRADEINPUTDEVICE_INT) {
				tradeInputDevice = FixUtils.getTagStringValue(value, tradeInputDevice);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.COMPLIANCEID_INT) {
				complianceID = FixUtils.getTagStringValue(value, complianceID);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.SOLICITEDFLAG_INT) {
				solicitedFlag = FixUtils.getTagBooleanValue( value );
				if (!FixMessageInfo.SolicitedFlag.isValid(solicitedFlag) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + solicitedFlag + ") for tag").getBytes(), id, new byte[0] );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.CUSTORDERCAPACITY_INT) {
				custOrderCapacity = FixUtils.getTagIntValue( value );
				if (!FixMessageInfo.CustOrderCapacity.isValid(custOrderCapacity) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + custOrderCapacity + ") for tag").getBytes(), id, new byte[0] );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.TRADINGSESSIONID_INT) {
				tradingSessionID = FixUtils.getTagStringValue(value, tradingSessionID);
				if (!FixMessageInfo.TradingSessionID.isValid(tradingSessionID) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + tradingSessionID + ") for tag").getBytes(), id, new byte[0] );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.TRADINGSESSIONSUBID_INT) {
				tradingSessionSubID = FixUtils.getTagStringValue(value, tradingSessionSubID);
				if (!FixMessageInfo.TradingSessionSubID.isValid(tradingSessionSubID) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + tradingSessionSubID + ") for tag").getBytes(), id, new byte[0] );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.TIMEBRACKET_INT) {
				timeBracket = FixUtils.getTagStringValue(value, timeBracket);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.COMMISSION_INT) {
				commissionData.getAll(FixTags.COMMISSION_INT, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.NUMDAYSINTEREST_INT) {
				numDaysInterest = FixUtils.getTagIntValue( value );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.EXDATE_INT) {
				exDate = FixUtils.getTagStringValue(value, exDate);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.ACCRUEDINTERESTRATE_INT) {
				accruedInterestRate = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.ACCRUEDINTERESTAMT_INT) {
				accruedInterestAmt = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.INTERESTATMATURITY_INT) {
				interestAtMaturity = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.ENDACCRUEDINTERESTAMT_INT) {
				endAccruedInterestAmt = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.STARTCASH_INT) {
				startCash = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.ENDCASH_INT) {
				endCash = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.CONCESSION_INT) {
				concession = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.TOTALTAKEDOWN_INT) {
				totalTakedown = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.NETMONEY_INT) {
				netMoney = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.SETTLCURRAMT_INT) {
				settlCurrAmt = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.SETTLCURRFXRATE_INT) {
				settlCurrFxRate = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.SETTLCURRFXRATECALC_INT) {
				settlCurrFxRateCalc = FixUtils.getTagCharValue( value );
				if (!FixMessageInfo.SettlCurrFxRateCalc.isValid(settlCurrFxRateCalc) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + settlCurrFxRateCalc + ") for tag").getBytes(), id, new byte[0] );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.POSITIONEFFECT_INT) {
				positionEffect = FixUtils.getTagCharValue( value );
				if (!FixMessageInfo.PositionEffect.isValid(positionEffect) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + positionEffect + ") for tag").getBytes(), id, new byte[0] );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.TEXT_INT) {
				text = FixUtils.getTagStringValue(value, text);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.ENCODEDTEXTLEN_INT) {
				encodedTextLen = FixUtils.getTagIntValue( value );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.ENCODEDTEXT_INT) {
				encodedText = FixUtils.getTagStringValue(value, encodedText);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.SIDEMULTILEGREPORTINGTYPE_INT) {
				sideMultiLegReportingType = FixUtils.getTagIntValue( value );
				if (!FixMessageInfo.SideMultiLegReportingType.isValid(sideMultiLegReportingType) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + sideMultiLegReportingType + ") for tag").getBytes(), id, new byte[0] );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.NOCONTAMTS_INT) {
				contAmtGrp.getAll(FixTags.NOCONTAMTS_INT, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.NOSTIPULATIONS_INT) {
				stipulations.getAll(FixTags.NOSTIPULATIONS_INT, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.NOMISCFEES_INT) {
				miscFeesGrp.getAll(FixTags.NOMISCFEES_INT, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.EXCHANGERULE_INT) {
				exchangeRule = FixUtils.getTagStringValue(value, exchangeRule);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.TRADEALLOCINDICATOR_INT) {
				tradeAllocIndicator = FixUtils.getTagIntValue( value );
				if (!FixMessageInfo.TradeAllocIndicator.isValid(tradeAllocIndicator) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + tradeAllocIndicator + ") for tag").getBytes(), id, new byte[0] );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.PREALLOCMETHOD_INT) {
				preallocMethod = FixUtils.getTagCharValue( value );
				if (!FixMessageInfo.PreallocMethod.isValid(preallocMethod) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + preallocMethod + ") for tag").getBytes(), id, new byte[0] );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.ALLOCID_INT) {
				allocID = FixUtils.getTagStringValue(value, allocID);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.NOALLOCS_INT) {
				trdAllocGrp.getAll(FixTags.NOALLOCS_INT, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.SIDEGROSSTRADEAMT_INT) {
				sideGrossTradeAmt = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.AGGRESSORINDICATOR_INT) {
				aggressorIndicator = FixUtils.getTagBooleanValue( value );
				if (!FixMessageInfo.AggressorIndicator.isValid(aggressorIndicator) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + aggressorIndicator + ") for tag").getBytes(), id, new byte[0] );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.EXCHANGESPECIALINSTRUCTIONS_INT) {
				exchangeSpecialInstructions = FixUtils.getTagStringValue(value, exchangeSpecialInstructions);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.NOSIDETRDREGTS_INT) {
				sideTrdRegTS.getAll(FixTags.NOSIDETRDREGTS_INT, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.NOSETTLDETAILS_INT) {
				settlDetails.getAll(FixTags.NOSETTLDETAILS_INT, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.ORDERCATEGORY_INT) {
				orderCategory = FixUtils.getTagCharValue( value );
				if (!FixMessageInfo.OrderCategory.isValid(orderCategory) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + orderCategory + ") for tag").getBytes(), id, new byte[0] );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.SIDELIQUIDITYIND_INT) {
				sideLiquidityInd = FixUtils.getTagIntValue( value );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.ORDERID_INT) {
				tradeReportOrderDetail.getAll(FixTags.ORDERID_INT, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			id = checkRequiredTags();
				if (id > 0) throw new FixSessionException(SessionRejectReason.REQUIRED_TAG_MISSING, "Required tag missing".getBytes(), id, new byte[0] );

			buf.position( lastTagPosition );
			return;

	}

	private int checkRequiredTags() {
		int tag = -1;

		if (! FixUtils.isSet(side) ) return FixTags.SIDE_INT;
		return tag;

	}
	@Override
	public boolean isSet()
	{
		if (FixUtils.isSet(sideExecID)) return true;
		if (FixUtils.isSet(orderDelay)) return true;
		if (FixUtils.isSet(orderDelayUnit)) return true;
		if (FixUtils.isSet(sideLastQty)) return true;
		if (FixUtils.isSet(sideTradeReportID)) return true;
		if (FixUtils.isSet(sideFillStationCd)) return true;
		if (FixUtils.isSet(sideReasonCd)) return true;
		if (FixUtils.isSet(rptSeq)) return true;
		if (FixUtils.isSet(sideTrdSubTyp)) return true;
		if (FixUtils.isSet(netGrossInd)) return true;
		if (FixUtils.isSet(sideCurrency)) return true;
		if (FixUtils.isSet(sideSettlCurrency)) return true;
		if (FixUtils.isSet(parties.noPartyIDs)) return true;
		if (FixUtils.isSet(account)) return true;
		if (FixUtils.isSet(acctIDSource)) return true;
		if (FixUtils.isSet(accountType)) return true;
		if (FixUtils.isSet(processCode)) return true;
		if (FixUtils.isSet(oddLot)) return true;
		if (FixUtils.isSet(clrInstGrp.noClearingInstructions)) return true;
		if (FixUtils.isSet(tradeInputSource)) return true;
		if (FixUtils.isSet(tradeInputDevice)) return true;
		if (FixUtils.isSet(complianceID)) return true;
		if (FixUtils.isSet(solicitedFlag)) return true;
		if (FixUtils.isSet(custOrderCapacity)) return true;
		if (FixUtils.isSet(tradingSessionID)) return true;
		if (FixUtils.isSet(tradingSessionSubID)) return true;
		if (FixUtils.isSet(timeBracket)) return true;
		if (FixUtils.isSet(commissionData.commission)) return true;
		if (FixUtils.isSet(numDaysInterest)) return true;
		if (FixUtils.isSet(exDate)) return true;
		if (FixUtils.isSet(accruedInterestRate)) return true;
		if (FixUtils.isSet(accruedInterestAmt)) return true;
		if (FixUtils.isSet(interestAtMaturity)) return true;
		if (FixUtils.isSet(endAccruedInterestAmt)) return true;
		if (FixUtils.isSet(startCash)) return true;
		if (FixUtils.isSet(endCash)) return true;
		if (FixUtils.isSet(concession)) return true;
		if (FixUtils.isSet(totalTakedown)) return true;
		if (FixUtils.isSet(netMoney)) return true;
		if (FixUtils.isSet(settlCurrAmt)) return true;
		if (FixUtils.isSet(settlCurrFxRate)) return true;
		if (FixUtils.isSet(settlCurrFxRateCalc)) return true;
		if (FixUtils.isSet(positionEffect)) return true;
		if (FixUtils.isSet(text)) return true;
		if (FixUtils.isSet(encodedTextLen)) return true;
		if (FixUtils.isSet(encodedText)) return true;
		if (FixUtils.isSet(sideMultiLegReportingType)) return true;
		if (FixUtils.isSet(contAmtGrp.noContAmts)) return true;
		if (FixUtils.isSet(stipulations.noStipulations)) return true;
		if (FixUtils.isSet(miscFeesGrp.noMiscFees)) return true;
		if (FixUtils.isSet(exchangeRule)) return true;
		if (FixUtils.isSet(tradeAllocIndicator)) return true;
		if (FixUtils.isSet(preallocMethod)) return true;
		if (FixUtils.isSet(allocID)) return true;
		if (FixUtils.isSet(trdAllocGrp.noAllocs)) return true;
		if (FixUtils.isSet(sideGrossTradeAmt)) return true;
		if (FixUtils.isSet(aggressorIndicator)) return true;
		if (FixUtils.isSet(exchangeSpecialInstructions)) return true;
		if (FixUtils.isSet(sideTrdRegTS.noSideTrdRegTS)) return true;
		if (FixUtils.isSet(settlDetails.noSettlDetails)) return true;
		if (FixUtils.isSet(orderCategory)) return true;
		if (FixUtils.isSet(sideLiquidityInd)) return true;
		if (FixUtils.isSet(tradeReportOrderDetail.orderID)) return true;
		return false;
	}
	@Override
	public void encode( ByteBuffer out )
	{
		FixUtils.putFixTag( out, FixTags.SIDE_INT, side );
		if (FixUtils.isSet(sideExecID)) FixUtils.putFixTag( out, FixTags.SIDEEXECID_INT, sideExecID, 0, Utils.lastIndexTrim(sideExecID, (byte)0) );
		if (FixUtils.isSet(orderDelay)) FixUtils.putFixTag( out, FixTags.ORDERDELAY_INT, orderDelay);
		if (FixUtils.isSet(orderDelayUnit)) FixUtils.putFixTag( out, FixTags.ORDERDELAYUNIT_INT, orderDelayUnit);
		if (FixUtils.isSet(sideLastQty)) FixUtils.putFixTag( out, FixTags.SIDELASTQTY_INT, sideLastQty);
		if (FixUtils.isSet(sideTradeReportID)) FixUtils.putFixTag( out, FixTags.SIDETRADEREPORTID_INT, sideTradeReportID, 0, Utils.lastIndexTrim(sideTradeReportID, (byte)0) );
		if (FixUtils.isSet(sideFillStationCd)) FixUtils.putFixTag( out, FixTags.SIDEFILLSTATIONCD_INT, sideFillStationCd, 0, Utils.lastIndexTrim(sideFillStationCd, (byte)0) );
		if (FixUtils.isSet(sideReasonCd)) FixUtils.putFixTag( out, FixTags.SIDEREASONCD_INT, sideReasonCd, 0, Utils.lastIndexTrim(sideReasonCd, (byte)0) );
		if (FixUtils.isSet(rptSeq)) FixUtils.putFixTag( out, FixTags.RPTSEQ_INT, rptSeq);
		if (FixUtils.isSet(sideTrdSubTyp)) FixUtils.putFixTag( out, FixTags.SIDETRDSUBTYP_INT, sideTrdSubTyp);
		if (FixUtils.isSet(netGrossInd)) FixUtils.putFixTag( out, FixTags.NETGROSSIND_INT, netGrossInd);
		if (FixUtils.isSet(sideCurrency)) FixUtils.putFixTag( out, FixTags.SIDECURRENCY_INT, sideCurrency, 0, Utils.lastIndexTrim(sideCurrency, (byte)0) );
		if (FixUtils.isSet(sideSettlCurrency)) FixUtils.putFixTag( out, FixTags.SIDESETTLCURRENCY_INT, sideSettlCurrency, 0, Utils.lastIndexTrim(sideSettlCurrency, (byte)0) );
		if (FixUtils.isSet(parties.noPartyIDs)) parties.encode( out );
		if (FixUtils.isSet(account)) FixUtils.putFixTag( out, FixTags.ACCOUNT_INT, account, 0, Utils.lastIndexTrim(account, (byte)0) );
		if (FixUtils.isSet(acctIDSource)) FixUtils.putFixTag( out, FixTags.ACCTIDSOURCE_INT, acctIDSource);
		if (FixUtils.isSet(accountType)) FixUtils.putFixTag( out, FixTags.ACCOUNTTYPE_INT, accountType);
		if (FixUtils.isSet(processCode)) FixUtils.putFixTag( out, FixTags.PROCESSCODE_INT, processCode );
		if (FixUtils.isSet(oddLot)) FixUtils.putFixTag( out, FixTags.ODDLOT_INT, oddLot?(byte)'Y':(byte)'N' );
		if (FixUtils.isSet(clrInstGrp.noClearingInstructions)) clrInstGrp.encode( out );
		if (FixUtils.isSet(tradeInputSource)) FixUtils.putFixTag( out, FixTags.TRADEINPUTSOURCE_INT, tradeInputSource, 0, Utils.lastIndexTrim(tradeInputSource, (byte)0) );
		if (FixUtils.isSet(tradeInputDevice)) FixUtils.putFixTag( out, FixTags.TRADEINPUTDEVICE_INT, tradeInputDevice, 0, Utils.lastIndexTrim(tradeInputDevice, (byte)0) );
		if (FixUtils.isSet(complianceID)) FixUtils.putFixTag( out, FixTags.COMPLIANCEID_INT, complianceID, 0, Utils.lastIndexTrim(complianceID, (byte)0) );
		if (FixUtils.isSet(solicitedFlag)) FixUtils.putFixTag( out, FixTags.SOLICITEDFLAG_INT, solicitedFlag?(byte)'Y':(byte)'N' );
		if (FixUtils.isSet(custOrderCapacity)) FixUtils.putFixTag( out, FixTags.CUSTORDERCAPACITY_INT, custOrderCapacity);
		if (FixUtils.isSet(tradingSessionID)) FixUtils.putFixTag( out, FixTags.TRADINGSESSIONID_INT, tradingSessionID, 0, Utils.lastIndexTrim(tradingSessionID, (byte)0) );
		if (FixUtils.isSet(tradingSessionSubID)) FixUtils.putFixTag( out, FixTags.TRADINGSESSIONSUBID_INT, tradingSessionSubID, 0, Utils.lastIndexTrim(tradingSessionSubID, (byte)0) );
		if (FixUtils.isSet(timeBracket)) FixUtils.putFixTag( out, FixTags.TIMEBRACKET_INT, timeBracket, 0, Utils.lastIndexTrim(timeBracket, (byte)0) );
		if (FixUtils.isSet(commissionData.commission)) commissionData.encode( out );
		if (FixUtils.isSet(numDaysInterest)) FixUtils.putFixTag( out, FixTags.NUMDAYSINTEREST_INT, numDaysInterest);
		if (FixUtils.isSet(exDate)) FixUtils.putFixTag( out, FixTags.EXDATE_INT, exDate);
		if (FixUtils.isSet(accruedInterestRate)) FixUtils.putFixFloatTag( out, FixTags.ACCRUEDINTERESTRATE_INT, accruedInterestRate);
		if (FixUtils.isSet(accruedInterestAmt)) FixUtils.putFixTag( out, FixTags.ACCRUEDINTERESTAMT_INT, accruedInterestAmt);
		if (FixUtils.isSet(interestAtMaturity)) FixUtils.putFixTag( out, FixTags.INTERESTATMATURITY_INT, interestAtMaturity);
		if (FixUtils.isSet(endAccruedInterestAmt)) FixUtils.putFixTag( out, FixTags.ENDACCRUEDINTERESTAMT_INT, endAccruedInterestAmt);
		if (FixUtils.isSet(startCash)) FixUtils.putFixTag( out, FixTags.STARTCASH_INT, startCash);
		if (FixUtils.isSet(endCash)) FixUtils.putFixTag( out, FixTags.ENDCASH_INT, endCash);
		if (FixUtils.isSet(concession)) FixUtils.putFixTag( out, FixTags.CONCESSION_INT, concession);
		if (FixUtils.isSet(totalTakedown)) FixUtils.putFixTag( out, FixTags.TOTALTAKEDOWN_INT, totalTakedown);
		if (FixUtils.isSet(netMoney)) FixUtils.putFixTag( out, FixTags.NETMONEY_INT, netMoney);
		if (FixUtils.isSet(settlCurrAmt)) FixUtils.putFixTag( out, FixTags.SETTLCURRAMT_INT, settlCurrAmt);
		if (FixUtils.isSet(settlCurrFxRate)) FixUtils.putFixFloatTag( out, FixTags.SETTLCURRFXRATE_INT, settlCurrFxRate);
		if (FixUtils.isSet(settlCurrFxRateCalc)) FixUtils.putFixTag( out, FixTags.SETTLCURRFXRATECALC_INT, settlCurrFxRateCalc );
		if (FixUtils.isSet(positionEffect)) FixUtils.putFixTag( out, FixTags.POSITIONEFFECT_INT, positionEffect );
		if (FixUtils.isSet(text)) FixUtils.putFixTag( out, FixTags.TEXT_INT, text, 0, Utils.lastIndexTrim(text, (byte)0) );
		if (FixUtils.isSet(encodedTextLen)) FixUtils.putFixTag( out, FixTags.ENCODEDTEXTLEN_INT, encodedTextLen);
		if (FixUtils.isSet(encodedText)) FixUtils.putFixTag( out, FixTags.ENCODEDTEXT_INT, encodedText, 0, Utils.lastIndexTrim(encodedText, (byte)0) );
		if (FixUtils.isSet(sideMultiLegReportingType)) FixUtils.putFixTag( out, FixTags.SIDEMULTILEGREPORTINGTYPE_INT, sideMultiLegReportingType);
		if (FixUtils.isSet(contAmtGrp.noContAmts)) contAmtGrp.encode( out );
		if (FixUtils.isSet(stipulations.noStipulations)) stipulations.encode( out );
		if (FixUtils.isSet(miscFeesGrp.noMiscFees)) miscFeesGrp.encode( out );
		if (FixUtils.isSet(exchangeRule)) FixUtils.putFixTag( out, FixTags.EXCHANGERULE_INT, exchangeRule, 0, Utils.lastIndexTrim(exchangeRule, (byte)0) );
		if (FixUtils.isSet(tradeAllocIndicator)) FixUtils.putFixTag( out, FixTags.TRADEALLOCINDICATOR_INT, tradeAllocIndicator);
		if (FixUtils.isSet(preallocMethod)) FixUtils.putFixTag( out, FixTags.PREALLOCMETHOD_INT, preallocMethod );
		if (FixUtils.isSet(allocID)) FixUtils.putFixTag( out, FixTags.ALLOCID_INT, allocID, 0, Utils.lastIndexTrim(allocID, (byte)0) );
		if (FixUtils.isSet(trdAllocGrp.noAllocs)) trdAllocGrp.encode( out );
		if (FixUtils.isSet(sideGrossTradeAmt)) FixUtils.putFixTag( out, FixTags.SIDEGROSSTRADEAMT_INT, sideGrossTradeAmt);
		if (FixUtils.isSet(aggressorIndicator)) FixUtils.putFixTag( out, FixTags.AGGRESSORINDICATOR_INT, aggressorIndicator?(byte)'Y':(byte)'N' );
		if (FixUtils.isSet(exchangeSpecialInstructions)) FixUtils.putFixTag( out, FixTags.EXCHANGESPECIALINSTRUCTIONS_INT, exchangeSpecialInstructions, 0, Utils.lastIndexTrim(exchangeSpecialInstructions, (byte)0) );
		if (FixUtils.isSet(sideTrdRegTS.noSideTrdRegTS)) sideTrdRegTS.encode( out );
		if (FixUtils.isSet(settlDetails.noSettlDetails)) settlDetails.encode( out );
		if (FixUtils.isSet(orderCategory)) FixUtils.putFixTag( out, FixTags.ORDERCATEGORY_INT, orderCategory );
		if (FixUtils.isSet(sideLiquidityInd)) FixUtils.putFixTag( out, FixTags.SIDELIQUIDITYIND_INT, sideLiquidityInd);
		if (FixUtils.isSet(tradeReportOrderDetail.orderID)) tradeReportOrderDetail.encode( out );
	}
	/**
	 * If you use toString for any other purpose than administrative printout.
	 * You will end up in nifelheim!
	**/
	@Override
	public String toString() {
		char sep = '\n';
		if (Boolean.getBoolean("fix.useOneLiner")) sep = ( byte )0x01;

		String s = "";

			 s += "Side(54)=" + String.valueOf(side) + sep;
			if (FixUtils.isSet(sideExecID)) s += "SideExecID(1427)=" + new String(sideExecID) + sep;
			if (FixUtils.isSet(orderDelay)) s += "OrderDelay(1428)=" + String.valueOf(orderDelay) + sep;
			if (FixUtils.isSet(orderDelayUnit)) s += "OrderDelayUnit(1429)=" + String.valueOf(orderDelayUnit) + sep;
			if (FixUtils.isSet(sideLastQty)) s += "SideLastQty(1009)=" + String.valueOf(sideLastQty) + sep;
			if (FixUtils.isSet(sideTradeReportID)) s += "SideTradeReportID(1005)=" + new String(sideTradeReportID) + sep;
			if (FixUtils.isSet(sideFillStationCd)) s += "SideFillStationCd(1006)=" + new String(sideFillStationCd) + sep;
			if (FixUtils.isSet(sideReasonCd)) s += "SideReasonCd(1007)=" + new String(sideReasonCd) + sep;
			if (FixUtils.isSet(rptSeq)) s += "RptSeq(83)=" + String.valueOf(rptSeq) + sep;
			if (FixUtils.isSet(sideTrdSubTyp)) s += "SideTrdSubTyp(1008)=" + String.valueOf(sideTrdSubTyp) + sep;
			if (FixUtils.isSet(netGrossInd)) s += "NetGrossInd(430)=" + String.valueOf(netGrossInd) + sep;
			if (FixUtils.isSet(sideCurrency)) s += "SideCurrency(1154)=" + new String(sideCurrency) + sep;
			if (FixUtils.isSet(sideSettlCurrency)) s += "SideSettlCurrency(1155)=" + new String(sideSettlCurrency) + sep;
			if (FixUtils.isSet(parties.noPartyIDs)) s += parties.toString();
			if (FixUtils.isSet(account)) s += "Account(1)=" + new String(account) + sep;
			if (FixUtils.isSet(acctIDSource)) s += "AcctIDSource(660)=" + String.valueOf(acctIDSource) + sep;
			if (FixUtils.isSet(accountType)) s += "AccountType(581)=" + String.valueOf(accountType) + sep;
			if (FixUtils.isSet(processCode)) s += "ProcessCode(81)=" + String.valueOf(processCode) + sep;
			if (FixUtils.isSet(oddLot)) s += "OddLot(575)=" + String.valueOf(oddLot) + sep;
			if (FixUtils.isSet(clrInstGrp.noClearingInstructions)) s += clrInstGrp.toString();
			if (FixUtils.isSet(tradeInputSource)) s += "TradeInputSource(578)=" + new String(tradeInputSource) + sep;
			if (FixUtils.isSet(tradeInputDevice)) s += "TradeInputDevice(579)=" + new String(tradeInputDevice) + sep;
			if (FixUtils.isSet(complianceID)) s += "ComplianceID(376)=" + new String(complianceID) + sep;
			if (FixUtils.isSet(solicitedFlag)) s += "SolicitedFlag(377)=" + String.valueOf(solicitedFlag) + sep;
			if (FixUtils.isSet(custOrderCapacity)) s += "CustOrderCapacity(582)=" + String.valueOf(custOrderCapacity) + sep;
			if (FixUtils.isSet(tradingSessionID)) s += "TradingSessionID(336)=" + new String(tradingSessionID) + sep;
			if (FixUtils.isSet(tradingSessionSubID)) s += "TradingSessionSubID(625)=" + new String(tradingSessionSubID) + sep;
			if (FixUtils.isSet(timeBracket)) s += "TimeBracket(943)=" + new String(timeBracket) + sep;
			if (FixUtils.isSet(commissionData.commission)) s += commissionData.toString();
			if (FixUtils.isSet(numDaysInterest)) s += "NumDaysInterest(157)=" + String.valueOf(numDaysInterest) + sep;
			if (FixUtils.isSet(exDate)) s += "ExDate(230)=" + new String(exDate) + sep;
			if (FixUtils.isSet(accruedInterestRate)) s += "AccruedInterestRate(158)=" + String.valueOf(accruedInterestRate) + sep;
			if (FixUtils.isSet(accruedInterestAmt)) s += "AccruedInterestAmt(159)=" + String.valueOf(accruedInterestAmt) + sep;
			if (FixUtils.isSet(interestAtMaturity)) s += "InterestAtMaturity(738)=" + String.valueOf(interestAtMaturity) + sep;
			if (FixUtils.isSet(endAccruedInterestAmt)) s += "EndAccruedInterestAmt(920)=" + String.valueOf(endAccruedInterestAmt) + sep;
			if (FixUtils.isSet(startCash)) s += "StartCash(921)=" + String.valueOf(startCash) + sep;
			if (FixUtils.isSet(endCash)) s += "EndCash(922)=" + String.valueOf(endCash) + sep;
			if (FixUtils.isSet(concession)) s += "Concession(238)=" + String.valueOf(concession) + sep;
			if (FixUtils.isSet(totalTakedown)) s += "TotalTakedown(237)=" + String.valueOf(totalTakedown) + sep;
			if (FixUtils.isSet(netMoney)) s += "NetMoney(118)=" + String.valueOf(netMoney) + sep;
			if (FixUtils.isSet(settlCurrAmt)) s += "SettlCurrAmt(119)=" + String.valueOf(settlCurrAmt) + sep;
			if (FixUtils.isSet(settlCurrFxRate)) s += "SettlCurrFxRate(155)=" + String.valueOf(settlCurrFxRate) + sep;
			if (FixUtils.isSet(settlCurrFxRateCalc)) s += "SettlCurrFxRateCalc(156)=" + String.valueOf(settlCurrFxRateCalc) + sep;
			if (FixUtils.isSet(positionEffect)) s += "PositionEffect(77)=" + String.valueOf(positionEffect) + sep;
			if (FixUtils.isSet(text)) s += "Text(58)=" + new String(text) + sep;
			if (FixUtils.isSet(encodedTextLen)) s += "EncodedTextLen(354)=" + String.valueOf(encodedTextLen) + sep;
			if (FixUtils.isSet(encodedText)) s += "EncodedText(355)=" + new String(encodedText) + sep;
			if (FixUtils.isSet(sideMultiLegReportingType)) s += "SideMultiLegReportingType(752)=" + String.valueOf(sideMultiLegReportingType) + sep;
			if (FixUtils.isSet(contAmtGrp.noContAmts)) s += contAmtGrp.toString();
			if (FixUtils.isSet(stipulations.noStipulations)) s += stipulations.toString();
			if (FixUtils.isSet(miscFeesGrp.noMiscFees)) s += miscFeesGrp.toString();
			if (FixUtils.isSet(exchangeRule)) s += "ExchangeRule(825)=" + new String(exchangeRule) + sep;
			if (FixUtils.isSet(tradeAllocIndicator)) s += "TradeAllocIndicator(826)=" + String.valueOf(tradeAllocIndicator) + sep;
			if (FixUtils.isSet(preallocMethod)) s += "PreallocMethod(591)=" + String.valueOf(preallocMethod) + sep;
			if (FixUtils.isSet(allocID)) s += "AllocID(70)=" + new String(allocID) + sep;
			if (FixUtils.isSet(trdAllocGrp.noAllocs)) s += trdAllocGrp.toString();
			if (FixUtils.isSet(sideGrossTradeAmt)) s += "SideGrossTradeAmt(1072)=" + String.valueOf(sideGrossTradeAmt) + sep;
			if (FixUtils.isSet(aggressorIndicator)) s += "AggressorIndicator(1057)=" + String.valueOf(aggressorIndicator) + sep;
			if (FixUtils.isSet(exchangeSpecialInstructions)) s += "ExchangeSpecialInstructions(1139)=" + new String(exchangeSpecialInstructions) + sep;
			if (FixUtils.isSet(sideTrdRegTS.noSideTrdRegTS)) s += sideTrdRegTS.toString();
			if (FixUtils.isSet(settlDetails.noSettlDetails)) s += settlDetails.toString();
			if (FixUtils.isSet(orderCategory)) s += "OrderCategory(1115)=" + String.valueOf(orderCategory) + sep;
			if (FixUtils.isSet(sideLiquidityInd)) s += "SideLiquidityInd(1444)=" + String.valueOf(sideLiquidityInd) + sep;
			if (FixUtils.isSet(tradeReportOrderDetail.orderID)) s += tradeReportOrderDetail.toString();
		return s;

	}

	@Override
	public boolean equals(Object o) {
		if (! ( o instanceof TrdCapRptSideGrp)) return false;

			TrdCapRptSideGrp msg = (TrdCapRptSideGrp) o;

		if ( ! super.equals(msg) ) return false;

		if (!( side==msg.side)) return false;

		if (!Utils.equals( sideExecID, msg.sideExecID)) return false;

		if (!( orderDelay==msg.orderDelay)) return false;

		if (!( orderDelayUnit==msg.orderDelayUnit)) return false;

		if (!( sideLastQty==msg.sideLastQty)) return false;

		if (!Utils.equals( sideTradeReportID, msg.sideTradeReportID)) return false;

		if (!Utils.equals( sideFillStationCd, msg.sideFillStationCd)) return false;

		if (!Utils.equals( sideReasonCd, msg.sideReasonCd)) return false;

		if (!( rptSeq==msg.rptSeq)) return false;

		if (!( sideTrdSubTyp==msg.sideTrdSubTyp)) return false;

		if (!( netGrossInd==msg.netGrossInd)) return false;

		if (!Utils.equals( sideCurrency, msg.sideCurrency)) return false;

		if (!Utils.equals( sideSettlCurrency, msg.sideSettlCurrency)) return false;

		if (!parties.equals(msg.parties)) return false;

		if (!Utils.equals( account, msg.account)) return false;

		if (!( acctIDSource==msg.acctIDSource)) return false;

		if (!( accountType==msg.accountType)) return false;

		if (!( processCode==msg.processCode)) return false;

		if (!( oddLot==msg.oddLot)) return false;

		if (!clrInstGrp.equals(msg.clrInstGrp)) return false;

		if (!Utils.equals( tradeInputSource, msg.tradeInputSource)) return false;

		if (!Utils.equals( tradeInputDevice, msg.tradeInputDevice)) return false;

		if (!Utils.equals( complianceID, msg.complianceID)) return false;

		if (!( solicitedFlag==msg.solicitedFlag)) return false;

		if (!( custOrderCapacity==msg.custOrderCapacity)) return false;

		if (!Utils.equals( tradingSessionID, msg.tradingSessionID)) return false;

		if (!Utils.equals( tradingSessionSubID, msg.tradingSessionSubID)) return false;

		if (!Utils.equals( timeBracket, msg.timeBracket)) return false;

		if (!commissionData.equals(msg.commissionData)) return false;

		if (!( numDaysInterest==msg.numDaysInterest)) return false;

		if (!( accruedInterestRate==msg.accruedInterestRate)) return false;

		if (!( accruedInterestAmt==msg.accruedInterestAmt)) return false;

		if (!( interestAtMaturity==msg.interestAtMaturity)) return false;

		if (!( endAccruedInterestAmt==msg.endAccruedInterestAmt)) return false;

		if (!( startCash==msg.startCash)) return false;

		if (!( endCash==msg.endCash)) return false;

		if (!( concession==msg.concession)) return false;

		if (!( totalTakedown==msg.totalTakedown)) return false;

		if (!( netMoney==msg.netMoney)) return false;

		if (!( settlCurrAmt==msg.settlCurrAmt)) return false;

		if (!( settlCurrFxRate==msg.settlCurrFxRate)) return false;

		if (!( settlCurrFxRateCalc==msg.settlCurrFxRateCalc)) return false;

		if (!( positionEffect==msg.positionEffect)) return false;

		if (!Utils.equals( text, msg.text)) return false;

		if (!( encodedTextLen==msg.encodedTextLen)) return false;

		if (!Utils.equals( encodedText, msg.encodedText)) return false;

		if (!( sideMultiLegReportingType==msg.sideMultiLegReportingType)) return false;

		if (!contAmtGrp.equals(msg.contAmtGrp)) return false;

		if (!stipulations.equals(msg.stipulations)) return false;

		if (!miscFeesGrp.equals(msg.miscFeesGrp)) return false;

		if (!Utils.equals( exchangeRule, msg.exchangeRule)) return false;

		if (!( tradeAllocIndicator==msg.tradeAllocIndicator)) return false;

		if (!( preallocMethod==msg.preallocMethod)) return false;

		if (!Utils.equals( allocID, msg.allocID)) return false;

		if (!trdAllocGrp.equals(msg.trdAllocGrp)) return false;

		if (!( sideGrossTradeAmt==msg.sideGrossTradeAmt)) return false;

		if (!( aggressorIndicator==msg.aggressorIndicator)) return false;

		if (!Utils.equals( exchangeSpecialInstructions, msg.exchangeSpecialInstructions)) return false;

		if (!sideTrdRegTS.equals(msg.sideTrdRegTS)) return false;

		if (!settlDetails.equals(msg.settlDetails)) return false;

		if (!( orderCategory==msg.orderCategory)) return false;

		if (!( sideLiquidityInd==msg.sideLiquidityInd)) return false;

		if (!tradeReportOrderDetail.equals(msg.tradeReportOrderDetail)) return false;

		return true;
	}
}
}
