package org.tomac.protocol.fix.messaging.fix42nordic;

// DO NOT EDIT!!!
// This file is generated by FixMessageGenerator.
// If you need additional functionality, put it in a helper class
// that does not live in this folder!!!  Any java file in this folder 
// will be deleted upon the next run of the FixMessageGenerator!

import org.tomac.utils.Utils;

public interface FixMessageInfo
{

	public static final byte[] BEGINSTRING_VALUE = "FIX.4.2".getBytes();
	public static final byte[] BEGINSTRING_VALUE_WITH_TAG = "8=FIX.4.2".getBytes();
	public static final byte[] FLAVOUR = "Nordic INET".getBytes();
	public static final byte SOH = ( byte )0x01;
	public static final byte EQUALS = ( byte )'=';
	public static final byte DECIMAL = ( byte )'.';

	public static class MsgTypes
	{
		public static final byte[] UNKNOWN = "U0".getBytes();
		public static final byte[] ACCEPTEDCANCELREPLACE = "8".getBytes();
		public static final byte[] ACCEPTEDCANCEL = "8".getBytes();
		public static final byte[] APPLICATIONREJECT = "8".getBytes();
		public static final byte[] BREAKNOTIFICATION = "8".getBytes();
		public static final byte[] BUSINESSREJECT = "8".getBytes();
		public static final byte[] CANCELNOTIFICATION = "8".getBytes();
		public static final byte[] ENTRYNOTIFICATIONTOALLEGEDFIRM = "8".getBytes();
		public static final byte[] EXECUTIONREPORTFILL = "8".getBytes();
		public static final byte[] EXECUTIONRESTATEMENT = "8".getBytes();
		public static final byte[] LOCKEDINNOTIFICATION = "8".getBytes();
		public static final byte[] LOCKEDINTRADEBREAK = "8".getBytes();
		public static final byte[] ORDERACKNOWLEDGEMENT = "8".getBytes();
		public static final byte[] ORDERREJECT = "8".getBytes();
		public static final byte[] PENDINGCANCEL = "8".getBytes();
		public static final byte[] TRADEENTRYNOTIFICATIONTOENTERINGFIRM = "8".getBytes();
		public static final byte[] TRADEREPORTCANCEL = "8".getBytes();
		public static final byte[] TRADEREPORTENTRY = "8".getBytes();
		public static final byte[] HEARTBEAT = "0".getBytes();
		public static final byte[] LOGON = "A".getBytes();
		public static final byte[] LOGOUT = "5".getBytes();
		public static final byte[] ORDERSINGLE = "D".getBytes();
		public static final byte[] ORDERCANCELREJECT = "9".getBytes();
		public static final byte[] REJECTEDCANCELREPLACE = "9".getBytes();
		public static final byte[] ORDERCANCELREPLACEREQUEST = "G".getBytes();
		public static final byte[] ORDERCANCELREQUEST = "F".getBytes();
		public static final byte[] REJECT = "3".getBytes();
		public static final byte[] RESENDREQUEST = "2".getBytes();
		public static final byte[] SEQUENCERESET = "4".getBytes();
		public static final byte[] TESTREQUEST = "1".getBytes();

		public static final int UNKNOWN_INT = 21808;
		public static final int ACCEPTEDCANCELREPLACE_INT = 14389;
		public static final int ACCEPTEDCANCEL_INT = 14388;
		public static final int APPLICATIONREJECT_INT = 3686729;
		public static final int BREAKNOTIFICATION_INT = 3699767;
		public static final int BUSINESSREJECT_INT = 14409;
		public static final int CANCELNOTIFICATION_INT = 3699766;
		public static final int ENTRYNOTIFICATIONTOALLEGEDFIRM_INT = 3699761;
		public static final int EXECUTIONREPORTFILL_INT = 14385;
		public static final int EXECUTIONRESTATEMENT_INT = 14404;
		public static final int LOCKEDINNOTIFICATION_INT = 3699762;
		public static final int LOCKEDINTRADEBREAK_INT = 3691575;
		public static final int ORDERACKNOWLEDGEMENT_INT = 14384;
		public static final int ORDERREJECT_INT = 14392;
		public static final int PENDINGCANCEL_INT = 14390;
		public static final int TRADEENTRYNOTIFICATIONTOENTERINGFIRM_INT = 3699760;
		public static final int TRADEREPORTCANCEL_INT = 3691574;
		public static final int TRADEREPORTENTRY_INT = 3691568;
		public static final int HEARTBEAT_INT = 48;
		public static final int LOGON_INT = 65;
		public static final int LOGOUT_INT = 53;
		public static final int ORDERSINGLE_INT = 68;
		public static final int ORDERCANCELREJECT_INT = 14641;
		public static final int REJECTEDCANCELREPLACE_INT = 57;
		public static final int ORDERCANCELREPLACEREQUEST_INT = 71;
		public static final int ORDERCANCELREQUEST_INT = 70;
		public static final int REJECT_INT = 51;
		public static final int RESENDREQUEST_INT = 50;
		public static final int SEQUENCERESET_INT = 52;
		public static final int TESTREQUEST_INT = 49;
	}

	public static class ExecTransType {
		public static final byte FILL = '2';
		public static final byte PARTIALFILL = '1';
		public static final byte NEW = '0';
		public static final byte REJECTED = '8';
		public static final byte REJECT = 'I';
		public static boolean isValid(byte val) {
			if (( FILL==val)) return true;
			if (( PARTIALFILL==val)) return true;
			if (( NEW==val)) return true;
			if (( REJECTED==val)) return true;
			if (( REJECT==val)) return true;
			return false;
		}
	}

	public static class HandlInst {
		public static final byte AUTOMATED_EXECUTION_ORDER_PRIVATE_NO_BROKER_INTERVENTION = '1';
		public static boolean isValid(byte val) {
			if (( AUTOMATED_EXECUTION_ORDER_PRIVATE_NO_BROKER_INTERVENTION==val)) return true;
			return false;
		}
	}

	public static class TrdRptStatus {
		public static final byte[] UNANSWEREDA_ONESIDED_TRADE_REPORT_THAT_HAS_NOT_BEEN_LOCKEDIN = "98".getBytes();
		public static final byte[] A_TRADE_ENTERED_BY_ONE_PARTY_AS_A_TWOPARTY_LOCKEDIN_TRADE = "95".getBytes();
		public static final byte[] A_TRADE_LOCKEDIN_BY_THE_MATCHING_PROCESS = "92".getBytes();
		public static boolean isValid(byte[] val) {
			if (Utils.equals( UNANSWEREDA_ONESIDED_TRADE_REPORT_THAT_HAS_NOT_BEEN_LOCKEDIN, val)) return true;
			if (Utils.equals( A_TRADE_ENTERED_BY_ONE_PARTY_AS_A_TWOPARTY_LOCKEDIN_TRADE, val)) return true;
			if (Utils.equals( A_TRADE_LOCKEDIN_BY_THE_MATCHING_PROCESS, val)) return true;
			return false;
		}
	}

	public static class GapFillFlag {
		public static final boolean SEQUENCE_RESET_IGNORE_MSGSEQNUM = false;
		public static final boolean GAP_FILL_MESSAGE_MSGSEQNUM_FIELD_VALID = true;
		public static boolean isValid(boolean val) {
			if (( SEQUENCE_RESET_IGNORE_MSGSEQNUM==val)) return true;
			if (( GAP_FILL_MESSAGE_MSGSEQNUM_FIELD_VALID==val)) return true;
			return false;
		}
	}

	public static class TimeInForce {
		public static final byte IOC_IMMEDIATE_OR_CANCELFAK_FILL_AND_KILL___PARTIAL_EXECUTIONS_AR = '3';
		public static final byte GTC_GOOD_UNTIL_CANCELLED = '1';
		public static final byte DAY_DEFAULT = '0';
		public static final byte GTT_TIME_IS_SPECIFIED_IN_TAG_126_EXPIRETIME = '6';
		public static final byte FOK_FILL_OR_KILL_PARTIAL_EXECUTIONS_ARE_NOT_ALLOWED_UNLESS_THEY_ = '4';
		public static boolean isValid(byte val) {
			if (( IOC_IMMEDIATE_OR_CANCELFAK_FILL_AND_KILL___PARTIAL_EXECUTIONS_AR==val)) return true;
			if (( GTC_GOOD_UNTIL_CANCELLED==val)) return true;
			if (( DAY_DEFAULT==val)) return true;
			if (( GTT_TIME_IS_SPECIFIED_IN_TAG_126_EXPIRETIME==val)) return true;
			if (( FOK_FILL_OR_KILL_PARTIAL_EXECUTIONS_ARE_NOT_ALLOWED_UNLESS_THEY_==val)) return true;
			return false;
		}
	}

	public static class Side {
		public static final byte SELL = '2';
		public static final byte BUY = '1';
		public static final byte UNKNOWN = '7';
		public static final byte CROSS_YOU_WILL_USE_THIS_VALUE_WHEN_A_TRADE_WAS_DONE_INTERNALLY = '8';
		public static boolean isValid(byte val) {
			if (( SELL==val)) return true;
			if (( BUY==val)) return true;
			if (( UNKNOWN==val)) return true;
			if (( CROSS_YOU_WILL_USE_THIS_VALUE_WHEN_A_TRADE_WAS_DONE_INTERNALLY==val)) return true;
			return false;
		}
	}

	public static class ExecRestatementReason {
		public static final long GT_RENEWAL_THIS_WILL_IDENTIFY_THE_EXECUTION_RESTATEMENTS_THAT_AR = 1;
		public static final long MARKET_EXCHANGE_OPTION_THIS_SHOULD_BE_THE_VALUE_FOR_ALL_EXECUTIO = 8;
		public static boolean isValid(long val) {
			if (( GT_RENEWAL_THIS_WILL_IDENTIFY_THE_EXECUTION_RESTATEMENTS_THAT_AR==val)) return true;
			if (( MARKET_EXCHANGE_OPTION_THIS_SHOULD_BE_THE_VALUE_FOR_ALL_EXECUTIO==val)) return true;
			return false;
		}
	}

	public static class TradeType {
		public static final byte[] DERIVATIVE_RELATED_TRANSACTION = "49".getBytes();
		public static final byte[] NONSTANDARD_SETTLEMENT = "48".getBytes();
		public static final byte[] REGULAR_TRADE = "0".getBytes();
		public static final byte[] VOLUME_WEIGHTED_AVERAGE_TRADE = "51".getBytes();
		public static final byte[] EXCHANGE_GRANTED_TRADE = "52".getBytes();
		public static final byte[] OTC = "54".getBytes();
		public static final byte[] PREOPENING_TRADE = "99".getBytes();
		public static final byte[] PORTFOLIO_TRADE = "50".getBytes();
		public static boolean isValid(byte[] val) {
			if (Utils.equals( DERIVATIVE_RELATED_TRANSACTION, val)) return true;
			if (Utils.equals( NONSTANDARD_SETTLEMENT, val)) return true;
			if (Utils.equals( REGULAR_TRADE, val)) return true;
			if (Utils.equals( VOLUME_WEIGHTED_AVERAGE_TRADE, val)) return true;
			if (Utils.equals( EXCHANGE_GRANTED_TRADE, val)) return true;
			if (Utils.equals( OTC, val)) return true;
			if (Utils.equals( PREOPENING_TRADE, val)) return true;
			if (Utils.equals( PORTFOLIO_TRADE, val)) return true;
			return false;
		}
	}

	public static class SessionRejectReason {
		public static final long NON_DATA_VALUE_INCLUDES_FIELD_DELIMITER_SOH_CHARACTER = 17;
		public static final long INVALIDUNSUPPORTED_APPLICATION_VERSION = 18;
		public static final long REPEATING_GROUP_FIELDS_OUT_OF_ORDER = 15;
		public static final long INCORRECT_NUMINGROUP_COUNT_FOR_REPEATING_GROUP = 16;
		public static final long TAG_APPEARS_MORE_THAN_ONCE = 13;
		public static final long TAG_SPECIFIED_OUT_OF_REQUIRED_ORDER = 14;
		public static final long INVALID_MSGTYPE = 11;
		public static final long XML_VALIDATION_ERROR = 12;
		public static final long UNDEFINED_TAG = 3;
		public static final long TAG_NOT_DEFINED_FOR_THIS_MESSAGE_TYPE = 2;
		public static final long REQUIRED_TAG_MISSING = 1;
		public static final long SENDINGTIME_ACCURACY_PROBLEM = 10;
		public static final long INVALID_TAG_NUMBER = 0;
		public static final long DECRYPTION_PROBLEM = 7;
		public static final long INCORRECT_DATA_FORMAT_FOR_VALUE = 6;
		public static final long VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG = 5;
		public static final long TAG_SPECIFIED_WITHOUT_A_VALUE = 4;
		public static final long COMPID_PROBLEM = 9;
		public static final long SIGNATURE_PROBLEM = 8;
		public static final long OTHER = 99;
		public static boolean isValid(long val) {
			if (( NON_DATA_VALUE_INCLUDES_FIELD_DELIMITER_SOH_CHARACTER==val)) return true;
			if (( INVALIDUNSUPPORTED_APPLICATION_VERSION==val)) return true;
			if (( REPEATING_GROUP_FIELDS_OUT_OF_ORDER==val)) return true;
			if (( INCORRECT_NUMINGROUP_COUNT_FOR_REPEATING_GROUP==val)) return true;
			if (( TAG_APPEARS_MORE_THAN_ONCE==val)) return true;
			if (( TAG_SPECIFIED_OUT_OF_REQUIRED_ORDER==val)) return true;
			if (( INVALID_MSGTYPE==val)) return true;
			if (( XML_VALIDATION_ERROR==val)) return true;
			if (( UNDEFINED_TAG==val)) return true;
			if (( TAG_NOT_DEFINED_FOR_THIS_MESSAGE_TYPE==val)) return true;
			if (( REQUIRED_TAG_MISSING==val)) return true;
			if (( SENDINGTIME_ACCURACY_PROBLEM==val)) return true;
			if (( INVALID_TAG_NUMBER==val)) return true;
			if (( DECRYPTION_PROBLEM==val)) return true;
			if (( INCORRECT_DATA_FORMAT_FOR_VALUE==val)) return true;
			if (( VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG==val)) return true;
			if (( TAG_SPECIFIED_WITHOUT_A_VALUE==val)) return true;
			if (( COMPID_PROBLEM==val)) return true;
			if (( SIGNATURE_PROBLEM==val)) return true;
			if (( OTHER==val)) return true;
			return false;
		}
	}

	public static class ReversalIndicator {
		public static final byte[] NOT_A_REVERSAL_DEFAULT = "N".getBytes();
		public static final byte[] REVERSAL = "Y".getBytes();
		public static boolean isValid(byte[] val) {
			if (Utils.equals( NOT_A_REVERSAL_DEFAULT, val)) return true;
			if (Utils.equals( REVERSAL, val)) return true;
			return false;
		}
	}

	public static class OverrideFlag {
		public static final byte NO_OVERRIDE_DEFAULT = 'N';
		public static final byte OVERRIDE = 'Y';
		public static boolean isValid(byte val) {
			if (( NO_OVERRIDE_DEFAULT==val)) return true;
			if (( OVERRIDE==val)) return true;
			return false;
		}
	}

	public static class BreakIndicator {
		public static final byte SELLER_SUBMITTED_BREAK_REQUEST = 'S';
		public static final byte BUYER_SUBMITTED_BREAK_REQUEST = 'B';
		public static final byte TRADE_WAS_BROKEN_THROUGH_MARKET_CENTER = 'L';
		public static final byte TRADE_WAS_BROKEN_BY_BOTH_THE_BUYER_AND_SELLER = 'X';
		public static boolean isValid(byte val) {
			if (( SELLER_SUBMITTED_BREAK_REQUEST==val)) return true;
			if (( BUYER_SUBMITTED_BREAK_REQUEST==val)) return true;
			if (( TRADE_WAS_BROKEN_THROUGH_MARKET_CENTER==val)) return true;
			if (( TRADE_WAS_BROKEN_BY_BOTH_THE_BUYER_AND_SELLER==val)) return true;
			return false;
		}
	}

	public static class DisplayInst {
		public static final byte DISPLAY_OVERRIDE_POSTTRADE_ANONYMITY_FUTURE_USE = 'D';
		public static final byte NONDISPLAY_OVERRIDE_POSTTRADE_ANONYMITY_FUTURE_USE = 'R';
		public static final byte NONDISPLAY = 'N';
		public static final byte DISPLAY_ANONYMOUS_AS_PER_MARKET_RULES = 'Y';
		public static final byte IMBALANCE_ONLY_ONLY_VALID_IF_TAG_9355_IS_PRESENT = 'I';
		public static boolean isValid(byte val) {
			if (( DISPLAY_OVERRIDE_POSTTRADE_ANONYMITY_FUTURE_USE==val)) return true;
			if (( NONDISPLAY_OVERRIDE_POSTTRADE_ANONYMITY_FUTURE_USE==val)) return true;
			if (( NONDISPLAY==val)) return true;
			if (( DISPLAY_ANONYMOUS_AS_PER_MARKET_RULES==val)) return true;
			if (( IMBALANCE_ONLY_ONLY_VALID_IF_TAG_9355_IS_PRESENT==val)) return true;
			return false;
		}
	}

	public static class ProcessCode {
		public static final byte REGULAR_DEFAULT = '0';
		public static boolean isValid(byte val) {
			if (( REGULAR_DEFAULT==val)) return true;
			return false;
		}
	}

	public static class PriceType {
		public static final long DECIMAL_UNIT_PRICE = 98;
		public static final long PERCENTAGE = 1;
		public static final long YIELD = 9;
		public static final long CONTRACT_AMOUNT = 99;
		public static boolean isValid(long val) {
			if (( DECIMAL_UNIT_PRICE==val)) return true;
			if (( PERCENTAGE==val)) return true;
			if (( YIELD==val)) return true;
			if (( CONTRACT_AMOUNT==val)) return true;
			return false;
		}
	}

	public static class OrderCapacity {
		public static final byte[] AGENT_DEFAULT_IF_NOT_ENTERED = "A".getBytes();
		public static final byte[] PRINCIPAL = "P".getBytes();
		public static final byte[] RISKLESS = "R".getBytes();
		public static boolean isValid(byte[] val) {
			if (Utils.equals( AGENT_DEFAULT_IF_NOT_ENTERED, val)) return true;
			if (Utils.equals( PRINCIPAL, val)) return true;
			if (Utils.equals( RISKLESS, val)) return true;
			return false;
		}
	}

	public static class OrderRestrictions {
		public static final byte[] ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_THE_SECURITY_528P = "5".getBytes();
		public static final byte[] ISSUER_HOLDING_528A = "B".getBytes();
		public static final byte[] ISSUE_PRICE_STABILIZATION_528P = "C".getBytes();
		public static boolean isValid(byte[] val) {
			if (Utils.equals( ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_THE_SECURITY_528P, val)) return true;
			if (Utils.equals( ISSUER_HOLDING_528A, val)) return true;
			if (Utils.equals( ISSUE_PRICE_STABILIZATION_528P, val)) return true;
			return false;
		}
	}

	public static class LockedInStatus {
		public static final byte THE_LOCKEDIN_TRADE_IS_EFFECTIVELY_BROKEN_BECAUSE_BOTH_TRADING_PA = 'B';
		public static final byte THE_TRADE_IS_STILL_MATCHED_BECAUSE_ONLY_ONE_PARTY_TO_THE_TRADE_H = 'M';
		public static boolean isValid(byte val) {
			if (( THE_LOCKEDIN_TRADE_IS_EFFECTIVELY_BROKEN_BECAUSE_BOTH_TRADING_PA==val)) return true;
			if (( THE_TRADE_IS_STILL_MATCHED_BECAUSE_ONLY_ONE_PARTY_TO_THE_TRADE_H==val)) return true;
			return false;
		}
	}

	public static class DiscretionInst {
		public static final byte RELATED_TO_DISPLAYED_PRICE = '0';
		public static boolean isValid(byte val) {
			if (( RELATED_TO_DISPLAYED_PRICE==val)) return true;
			return false;
		}
	}

	public static class SecurityDesc {
		public static final byte[] SYSTEMATIC_INTERNALIZED_OTC = "S".getBytes();
		public static final byte[] REGULATED_MARKET = "R".getBytes();
		public static final byte[] OVER_THE_COUNTER_MARKET = "O".getBytes();
		public static boolean isValid(byte[] val) {
			if (Utils.equals( SYSTEMATIC_INTERNALIZED_OTC, val)) return true;
			if (Utils.equals( REGULATED_MARKET, val)) return true;
			if (Utils.equals( OVER_THE_COUNTER_MARKET, val)) return true;
			return false;
		}
	}

	public static class OrdStatus {
		public static final byte FILLED = '2';
		public static final byte PARTIAL_FILL = '1';
		public static final byte NEW = '0';
		public static final byte PENDING_CANCEL = '6';
		public static final byte REPLACED = '5';
		public static final byte CANCELLED = '4';
		public static final byte REJECTED = '8';
		public static boolean isValid(byte val) {
			if (( FILLED==val)) return true;
			if (( PARTIAL_FILL==val)) return true;
			if (( NEW==val)) return true;
			if (( PENDING_CANCEL==val)) return true;
			if (( REPLACED==val)) return true;
			if (( CANCELLED==val)) return true;
			if (( REJECTED==val)) return true;
			return false;
		}
	}

	public static class MsgType {
		public static final byte[] REJECT = "3".getBytes();
		public static final byte[] ORDER_SINGLE = "D".getBytes();
		public static final byte[] RESEND_REQUEST = "2".getBytes();
		public static final byte[] TEST_REQUEST = "1".getBytes();
		public static final byte[] ORDER_CANCEL_REQUEST = "F".getBytes();
		public static final byte[] ORDER_CANCELREPLACE_REQUEST = "G".getBytes();
		public static final byte[] HEARTBEAT = "0".getBytes();
		public static final byte[] LOGON = "A".getBytes();
		public static final byte[] LOGOUT = "5".getBytes();
		public static final byte[] SEQUENCE_RESET = "4".getBytes();
		public static final byte[] ORDER_CANCEL_REJECT = "9".getBytes();
		public static final byte[] EXECUTION_REPORT = "8".getBytes();
		public static boolean isValid(byte[] val) {
			if (Utils.equals( REJECT, val)) return true;
			if (Utils.equals( ORDER_SINGLE, val)) return true;
			if (Utils.equals( RESEND_REQUEST, val)) return true;
			if (Utils.equals( TEST_REQUEST, val)) return true;
			if (Utils.equals( ORDER_CANCEL_REQUEST, val)) return true;
			if (Utils.equals( ORDER_CANCELREPLACE_REQUEST, val)) return true;
			if (Utils.equals( HEARTBEAT, val)) return true;
			if (Utils.equals( LOGON, val)) return true;
			if (Utils.equals( LOGOUT, val)) return true;
			if (Utils.equals( SEQUENCE_RESET, val)) return true;
			if (Utils.equals( ORDER_CANCEL_REJECT, val)) return true;
			if (Utils.equals( EXECUTION_REPORT, val)) return true;
			return false;
		}
	}

	public static class CxlRejResponseTo {
		public static final byte ORDER_CANCELREPLACE_REQUEST = '2';
		public static final byte ORDER_CANCEL_REQUEST = '1';
		public static boolean isValid(byte val) {
			if (( ORDER_CANCELREPLACE_REQUEST==val)) return true;
			if (( ORDER_CANCEL_REQUEST==val)) return true;
			return false;
		}
	}

	public static class PartyRole {
		public static final byte[] TRADE_REPORTING_FIRM = "7".getBytes();
		public static boolean isValid(byte[] val) {
			if (Utils.equals( TRADE_REPORTING_FIRM, val)) return true;
			return false;
		}
	}

	public static class ClearingInstruction {
		public static final byte[] NO_CLEAR_TWOPARTY_LOCKEDIN_TRADE = "98".getBytes();
		public static final byte[] NO_CLEAR = "97".getBytes();
		public static final byte[] CLEAR = "0".getBytes();
		public static final byte[] CLEAR_TWOPARTY_LOCKEDIN_TRADE = "11".getBytes();
		public static boolean isValid(byte[] val) {
			if (Utils.equals( NO_CLEAR_TWOPARTY_LOCKEDIN_TRADE, val)) return true;
			if (Utils.equals( NO_CLEAR, val)) return true;
			if (Utils.equals( CLEAR, val)) return true;
			if (Utils.equals( CLEAR_TWOPARTY_LOCKEDIN_TRADE, val)) return true;
			return false;
		}
	}

	public static class CxlRejReason {
		public static final long BROKER_OPTION = 2;
		public static final long UNKNOWN_ORDER_ORIGINAL_ORDER_UNACKNOWLEDGED = 1;
		public static final long TOO_LATE_TO_CANCEL_ORDER_ALREADY_CANCELLED_OR_IS_IN_PENDING_CANC = 0;
		public static boolean isValid(long val) {
			if (( BROKER_OPTION==val)) return true;
			if (( UNKNOWN_ORDER_ORIGINAL_ORDER_UNACKNOWLEDGED==val)) return true;
			if (( TOO_LATE_TO_CANCEL_ORDER_ALREADY_CANCELLED_OR_IS_IN_PENDING_CANC==val)) return true;
			return false;
		}
	}

	public static class OrdRejReason {
		public static final long ORDER_EXCEEDS_LIMIT = 3;
		public static final long EXCHANGE_CLOSED = 2;
		public static final long UNKNOWN_SYMBOL = 1;
		public static final long BROKER_OPTION = 0;
		public static final long DUPLICATE_OF_A_VERBALLY_COMMUNICATED_ORDER = 7;
		public static final long DUPLICATE_ORDER_EG_DUPE_CLORDID = 6;
		public static final long UNKNOWN_ORDER = 5;
		public static final long TOO_LATE_TO_ENTER = 4;
		public static final long STALE_ORDER = 8;
		public static boolean isValid(long val) {
			if (( ORDER_EXCEEDS_LIMIT==val)) return true;
			if (( EXCHANGE_CLOSED==val)) return true;
			if (( UNKNOWN_SYMBOL==val)) return true;
			if (( BROKER_OPTION==val)) return true;
			if (( DUPLICATE_OF_A_VERBALLY_COMMUNICATED_ORDER==val)) return true;
			if (( DUPLICATE_ORDER_EG_DUPE_CLORDID==val)) return true;
			if (( UNKNOWN_ORDER==val)) return true;
			if (( TOO_LATE_TO_ENTER==val)) return true;
			if (( STALE_ORDER==val)) return true;
			return false;
		}
	}

	public static class TradeReportType {
		public static final byte[] ACCEPT = "2".getBytes();
		public static final byte[] ALLEGED = "1".getBytes();
		public static final byte[] SUBMIT = "0".getBytes();
		public static final byte[] LOCKEDIN_TRADE_BREAK = "7".getBytes();
		public static final byte[] TRADE_REPORT_CANCEL = "6".getBytes();
		public static boolean isValid(byte[] val) {
			if (Utils.equals( ACCEPT, val)) return true;
			if (Utils.equals( ALLEGED, val)) return true;
			if (Utils.equals( SUBMIT, val)) return true;
			if (Utils.equals( LOCKEDIN_TRADE_BREAK, val)) return true;
			if (Utils.equals( TRADE_REPORT_CANCEL, val)) return true;
			return false;
		}
	}

	public static class PublishTrdIndicator {
		public static final byte[] NO_DISSEMINATION_FUTURE_USE = "N".getBytes();
		public static final byte[] DISSEMINATE_BY_RULES_DEFAULT = "Y".getBytes();
		public static boolean isValid(byte[] val) {
			if (Utils.equals( NO_DISSEMINATION_FUTURE_USE, val)) return true;
			if (Utils.equals( DISSEMINATE_BY_RULES_DEFAULT, val)) return true;
			return false;
		}
	}

	public static class InternalExternal {
		public static final byte EXTERNAL = 'E';
		public static final byte INTERNAL_DEFAULT = 'I';
		public static boolean isValid(byte val) {
			if (( EXTERNAL==val)) return true;
			if (( INTERNAL_DEFAULT==val)) return true;
			return false;
		}
	}

	public static class TradeReportRejectReason {
		public static final byte[] UNAUTHORIZED_TO_REPORT_TRADES = "3".getBytes();
		public static final byte[] UNKNOWN_INSTRUMENT = "2".getBytes();
		public static final byte[] INVALID_PARTY_INFORMATION = "1".getBytes();
		public static final byte[] INCORRECT_DATA_FORMAT_FOR_VALUE = "6".getBytes();
		public static final byte[] INVALID_TRADE_TYPE = "4".getBytes();
		public static final byte[] OTHER = "99".getBytes();
		public static boolean isValid(byte[] val) {
			if (Utils.equals( UNAUTHORIZED_TO_REPORT_TRADES, val)) return true;
			if (Utils.equals( UNKNOWN_INSTRUMENT, val)) return true;
			if (Utils.equals( INVALID_PARTY_INFORMATION, val)) return true;
			if (Utils.equals( INCORRECT_DATA_FORMAT_FOR_VALUE, val)) return true;
			if (Utils.equals( INVALID_TRADE_TYPE, val)) return true;
			if (Utils.equals( OTHER, val)) return true;
			return false;
		}
	}

	public static class DelayedDisseminationInst {
		public static final byte I1200_TOMORROW = '3';
		public static final byte I180_MINUTES = '2';
		public static final byte I60_MINUTES = '1';
		public static final byte UNTIL_END_OF_THIRD_TRADING_DAY = '7';
		public static final byte UNTIL_END_OF_SECOND_TRADING_DAY = '6';
		public static final byte UNTIL_END_OF_NEXT_TRADING_DAY = '5';
		public static final byte UNTIL_END_OF_TRADING_DAY = '4';
		public static boolean isValid(byte val) {
			if (( I1200_TOMORROW==val)) return true;
			if (( I180_MINUTES==val)) return true;
			if (( I60_MINUTES==val)) return true;
			if (( UNTIL_END_OF_THIRD_TRADING_DAY==val)) return true;
			if (( UNTIL_END_OF_SECOND_TRADING_DAY==val)) return true;
			if (( UNTIL_END_OF_NEXT_TRADING_DAY==val)) return true;
			if (( UNTIL_END_OF_TRADING_DAY==val)) return true;
			return false;
		}
	}

	public static class EncryptMethod {
		public static final long NONE__OTHER = 0;
		public static boolean isValid(long val) {
			if (( NONE__OTHER==val)) return true;
			return false;
		}
	}

	public static class ContraTradePA {
		public static final byte PRINCIPAL = 'P';
		public static final byte AGENT = 'A';
		public static final byte RISKLESS = 'R';
		public static boolean isValid(byte val) {
			if (( PRINCIPAL==val)) return true;
			if (( AGENT==val)) return true;
			if (( RISKLESS==val)) return true;
			return false;
		}
	}

	public static class PossResend {
		public static final boolean ORIGINAL_TRANSMISSION = false;
		public static final boolean POSSIBLE_RESEND = true;
		public static boolean isValid(boolean val) {
			if (( ORIGINAL_TRANSMISSION==val)) return true;
			if (( POSSIBLE_RESEND==val)) return true;
			return false;
		}
	}

	public static class ExecInst {
		public static final byte[] MARKET_PEG = "P".getBytes();
		public static final byte[] PRIMARY_PEG = "R".getBytes();
		public static final byte[] MIDPOINT_PEG = "M".getBytes();
		public static final byte[] NO_PEG = "N".getBytes();
		public static boolean isValid(byte[] val) {
			if (Utils.equals( MARKET_PEG, val)) return true;
			if (Utils.equals( PRIMARY_PEG, val)) return true;
			if (Utils.equals( MIDPOINT_PEG, val)) return true;
			if (Utils.equals( NO_PEG, val)) return true;
			return false;
		}
	}

	public static class ContraOrderRestrictions {
		public static final byte ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_THE_SECURITY_9862P = '5';
		public static final byte ISSUER_HOLDING_9862A = 'B';
		public static final byte ISSUE_PRICE_STABILIZATION_9862P = 'C';
		public static boolean isValid(byte val) {
			if (( ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_THE_SECURITY_9862P==val)) return true;
			if (( ISSUER_HOLDING_9862A==val)) return true;
			if (( ISSUE_PRICE_STABILIZATION_9862P==val)) return true;
			return false;
		}
	}

	public static class ExecType {
		public static final byte RESTATED = 'D';
		public static final byte FILLED = '2';
		public static final byte TRADE_REPORT = 'F';
		public static final byte PARTIAL_FILL = '1';
		public static final byte NEW = '0';
		public static final byte PENDING_CANCEL = '6';
		public static final byte REPLACED = '5';
		public static final byte CANCEL = '4';
		public static final byte REJECTED = '8';
		public static final byte STATUS = 'I';
		public static boolean isValid(byte val) {
			if (( RESTATED==val)) return true;
			if (( FILLED==val)) return true;
			if (( TRADE_REPORT==val)) return true;
			if (( PARTIAL_FILL==val)) return true;
			if (( NEW==val)) return true;
			if (( PENDING_CANCEL==val)) return true;
			if (( REPLACED==val)) return true;
			if (( CANCEL==val)) return true;
			if (( REJECTED==val)) return true;
			if (( STATUS==val)) return true;
			return false;
		}
	}

	public static class LockedIn {
		public static final byte MATCHED = 'M';
		public static boolean isValid(byte val) {
			if (( MATCHED==val)) return true;
			return false;
		}
	}

	public static class PossDupFlag {
		public static final boolean ORIGINAL_TRANSMISSION = false;
		public static final boolean POSSIBLE_DUPLICATE = true;
		public static boolean isValid(boolean val) {
			if (( ORIGINAL_TRANSMISSION==val)) return true;
			if (( POSSIBLE_DUPLICATE==val)) return true;
			return false;
		}
	}

	public static class OrdType {
		public static final byte LIMIT = '2';
		public static final byte MARKET = '1';
		public static final byte PEGGED = 'P';
		public static boolean isValid(byte val) {
			if (( LIMIT==val)) return true;
			if (( MARKET==val)) return true;
			if (( PEGGED==val)) return true;
			return false;
		}
	}

	public static class CrossTradeFlag {
		public static final byte CLOSING_CROSS = 'C';
		public static final byte OPENING_CROSS = 'O';
		public static final byte HALT_CROSS = 'H';
		public static boolean isValid(byte val) {
			if (( CLOSING_CROSS==val)) return true;
			if (( OPENING_CROSS==val)) return true;
			if (( HALT_CROSS==val)) return true;
			return false;
		}
	}

	public static class ResetSeqNumFlag {
		public static final boolean NO = false;
		public static final boolean YES_RESET_SEQUENCE_NUMBERS = true;
		public static boolean isValid(boolean val) {
			if (( NO==val)) return true;
			if (( YES_RESET_SEQUENCE_NUMBERS==val)) return true;
			return false;
		}
	}

	public static class ExecBroker {
		public static final byte[] ROUTE_TO_NASDAQ_OMX_EUROPE_THEN_POST_TO_NORDIC_BOOK = "NURO".getBytes();
		public static final byte[] ORDER_IS_NOT_ELIGIBLE_FOR_ROUTING_DEFAULT = "BOOK".getBytes();
		public static final byte[] ROUTE_TO_ALL_ACCESSIBLE_MARKETS_THEN_POST_TO_THE_NORDIC_BOOK = "SCAN".getBytes();
		public static boolean isValid(byte[] val) {
			if (Utils.equals( ROUTE_TO_NASDAQ_OMX_EUROPE_THEN_POST_TO_NORDIC_BOOK, val)) return true;
			if (Utils.equals( ORDER_IS_NOT_ELIGIBLE_FOR_ROUTING_DEFAULT, val)) return true;
			if (Utils.equals( ROUTE_TO_ALL_ACCESSIBLE_MARKETS_THEN_POST_TO_THE_NORDIC_BOOK, val)) return true;
			return false;
		}
	}

	public static class LiquidityFlag {
		public static final byte BATS = '3';
		public static final byte TURQUIOSE = '2';
		public static final byte EXECUTION_CANCEL = 'E';
		public static final byte CHIX = '1';
		public static final byte NORDIC_ADDED_LIQUIDITY = 'A';
		public static final byte EXECUTED_IN_ONE_OF_THE_AUCTIONS = 'C';
		public static final byte NORDIC_REMOVED_LIQUIDITY = 'R';
		public static final byte NURO_REMOVED_LIQUIDITY = 'N';
		public static final byte INTERNALIZED_DURING_ONE_OF_THE_AUCTIONS = 'Y';
		public static final byte INTERNALIZED_DURING_THE_CONTINUOUS_MARKET = 'X';
		public static boolean isValid(byte val) {
			if (( BATS==val)) return true;
			if (( TURQUIOSE==val)) return true;
			if (( EXECUTION_CANCEL==val)) return true;
			if (( CHIX==val)) return true;
			if (( NORDIC_ADDED_LIQUIDITY==val)) return true;
			if (( EXECUTED_IN_ONE_OF_THE_AUCTIONS==val)) return true;
			if (( NORDIC_REMOVED_LIQUIDITY==val)) return true;
			if (( NURO_REMOVED_LIQUIDITY==val)) return true;
			if (( INTERNALIZED_DURING_ONE_OF_THE_AUCTIONS==val)) return true;
			if (( INTERNALIZED_DURING_THE_CONTINUOUS_MARKET==val)) return true;
			return false;
		}
	}

}
