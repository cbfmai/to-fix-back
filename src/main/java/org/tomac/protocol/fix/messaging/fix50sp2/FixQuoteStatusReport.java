package org.tomac.protocol.fix.messaging.fix50sp2;

// DO NOT EDIT!!!
// This file is generated by FixMessageGenerator.
// If you need additional functionality, put it in a helper class
// that does not live in this folder!!!  Any java file in this folder 
// will be deleted upon the next run of the FixMessageGenerator!

import java.nio.ByteBuffer;

import org.tomac.protocol.fix.FixUtils;
import org.tomac.protocol.fix.FixSessionException;
import org.tomac.protocol.fix.FixGarbledException;
import org.tomac.utils.Utils;
import org.tomac.protocol.fix.FixConstants;


import org.tomac.protocol.fix.messaging.fix50sp2.component.FixHopGrp;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixParties;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixTargetParties;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixInstrument;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixFinancingDetails;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixUndInstrmtGrp;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixOrderQtyData;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixStipulations;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixLegQuotStatGrp;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixQuotQualGrp;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixSpreadOrBenchmarkCurveData;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixYieldData;

public class FixQuoteStatusReport extends FixMessage
{

	public byte[] quoteStatusReqID;
	public byte[] quoteReqID;
	public byte[] quoteID;
	public byte[] quoteMsgID;
	public byte[] quoteRespID;
	public long quoteType = 0;
	public long quoteCancelType = 0;
	public FixParties parties;
	public FixTargetParties targetParties;
	public byte[] tradingSessionID;
	public byte[] tradingSessionSubID;
	public FixInstrument instrument;
	public FixFinancingDetails financingDetails;
	public FixUndInstrmtGrp undInstrmtGrp;
	public byte side = (byte)' ';
	public FixOrderQtyData orderQtyData;
	public byte[] settlType;
	public byte[] settlDate;
	public byte[] settlDate2;
	public long orderQty2 = 0;
	public byte[] currency;
	public FixStipulations stipulations;
	public byte[] account;
	public long acctIDSource = 0;
	public long accountType = 0;
	public FixLegQuotStatGrp legQuotStatGrp;
	public FixQuotQualGrp quotQualGrp;
	public byte[] expireTime;
	public long price = 0;
	public long priceType = 0;
	public FixSpreadOrBenchmarkCurveData spreadOrBenchmarkCurveData;
	public FixYieldData yieldData;
	public long bidPx = 0;
	public long offerPx = 0;
	public long mktBidPx = 0;
	public long mktOfferPx = 0;
	public long minBidSize = 0;
	public long bidSize = 0;
	public long minOfferSize = 0;
	public long offerSize = 0;
	public long minQty = 0;
	public byte[] validUntilTime;
	public long bidSpotRate = 0;
	public long offerSpotRate = 0;
	public long bidForwardPoints = 0;
	public long offerForwardPoints = 0;
	public long midPx = 0;
	public long bidYield = 0;
	public long midYield = 0;
	public long offerYield = 0;
	public byte[] transactTime;
	public byte ordType = (byte)' ';
	public long bidForwardPoints2 = 0;
	public long offerForwardPoints2 = 0;
	public long settlCurrBidFxRate = 0;
	public long settlCurrOfferFxRate = 0;
	public byte settlCurrFxRateCalc = (byte)' ';
	public byte commType = (byte)' ';
	public long commission = 0;
	public long custOrderCapacity = 0;
	public byte[] exDestination;
	public byte exDestinationIDSource = (byte)' ';
	public long bookingType = 0;
	public byte orderCapacity = (byte)' ';
	public byte[] orderRestrictions;
	public long quoteStatus = 0;
	public long quoteRejectReason = 0;
	public byte[] text;
	public long encodedTextLen = 0;
	public byte[] encodedText;

	public FixQuoteStatusReport() {
		super();

		quoteStatusReqID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		quoteReqID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		quoteID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		quoteMsgID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		quoteRespID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		parties = new FixParties();
		targetParties = new FixTargetParties();
		tradingSessionID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		tradingSessionSubID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		instrument = new FixInstrument();
		financingDetails = new FixFinancingDetails();
		undInstrmtGrp = new FixUndInstrmtGrp();
		orderQtyData = new FixOrderQtyData();
		settlType = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		settlDate = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		settlDate2 = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		currency = new byte[FixUtils.CURRENCY_LENGTH];
		stipulations = new FixStipulations();
		account = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		legQuotStatGrp = new FixLegQuotStatGrp();
		quotQualGrp = new FixQuotQualGrp();
		expireTime = new byte[FixUtils.UTCTIMESTAMP_LENGTH];
		spreadOrBenchmarkCurveData = new FixSpreadOrBenchmarkCurveData();
		yieldData = new FixYieldData();
		validUntilTime = new byte[FixUtils.UTCTIMESTAMP_LENGTH];
		transactTime = new byte[FixUtils.UTCTIMESTAMP_LENGTH];
		exDestination = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		orderRestrictions = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		text = new byte[FixUtils.FIX_MAX_STRING_TEXT_LENGTH];
		encodedText = new byte[FixUtils.FIX_MAX_STRING_TEXT_LENGTH];
		this.clear();

		msgType = MsgTypes.QUOTESTATUSREPORT_INT;

	}

	@Override
	public void clear()
	{

		// clear out all the fields that aren't msgType

		Utils.fill( quoteStatusReqID, (byte)0 );
		Utils.fill( quoteReqID, (byte)0 );
		Utils.fill( quoteID, (byte)0 );
		Utils.fill( quoteMsgID, (byte)0 );
		Utils.fill( quoteRespID, (byte)0 );
		quoteType = Long.MAX_VALUE;		
		quoteCancelType = Long.MAX_VALUE;		
		Utils.fill( tradingSessionID, (byte)0 );
		Utils.fill( tradingSessionSubID, (byte)0 );
		side = Byte.MAX_VALUE;		
		Utils.fill( settlType, (byte)0 );
		Utils.fill( settlDate, (byte)0 );
		Utils.fill( settlDate2, (byte)0 );
		orderQty2 = Long.MAX_VALUE;		
		Utils.fill( currency, (byte)0 );
		Utils.fill( account, (byte)0 );
		acctIDSource = Long.MAX_VALUE;		
		accountType = Long.MAX_VALUE;		
		Utils.fill( expireTime, (byte)0 );
		price = Long.MAX_VALUE;		
		priceType = Long.MAX_VALUE;		
		bidPx = Long.MAX_VALUE;		
		offerPx = Long.MAX_VALUE;		
		mktBidPx = Long.MAX_VALUE;		
		mktOfferPx = Long.MAX_VALUE;		
		minBidSize = Long.MAX_VALUE;		
		bidSize = Long.MAX_VALUE;		
		minOfferSize = Long.MAX_VALUE;		
		offerSize = Long.MAX_VALUE;		
		minQty = Long.MAX_VALUE;		
		Utils.fill( validUntilTime, (byte)0 );
		bidSpotRate = Long.MAX_VALUE;		
		offerSpotRate = Long.MAX_VALUE;		
		bidForwardPoints = Long.MAX_VALUE;		
		offerForwardPoints = Long.MAX_VALUE;		
		midPx = Long.MAX_VALUE;		
		bidYield = Long.MAX_VALUE;		
		midYield = Long.MAX_VALUE;		
		offerYield = Long.MAX_VALUE;		
		Utils.fill( transactTime, (byte)0 );
		ordType = Byte.MAX_VALUE;		
		bidForwardPoints2 = Long.MAX_VALUE;		
		offerForwardPoints2 = Long.MAX_VALUE;		
		settlCurrBidFxRate = Long.MAX_VALUE;		
		settlCurrOfferFxRate = Long.MAX_VALUE;		
		settlCurrFxRateCalc = Byte.MAX_VALUE;		
		commType = Byte.MAX_VALUE;		
		commission = Long.MAX_VALUE;		
		custOrderCapacity = Long.MAX_VALUE;		
		Utils.fill( exDestination, (byte)0 );
		exDestinationIDSource = Byte.MAX_VALUE;		
		bookingType = Long.MAX_VALUE;		
		orderCapacity = Byte.MAX_VALUE;		
		Utils.fill( orderRestrictions, (byte)0 );
		quoteStatus = Long.MAX_VALUE;		
		quoteRejectReason = Long.MAX_VALUE;		
		Utils.fill( text, (byte)0 );
		encodedTextLen = Long.MAX_VALUE;		
		Utils.fill( encodedText, (byte)0 );
		parties.clear();
		targetParties.clear();
		instrument.clear();
		financingDetails.clear();
		undInstrmtGrp.clear();
		orderQtyData.clear();
		stipulations.clear();
		legQuotStatGrp.clear();
		quotQualGrp.clear();
		spreadOrBenchmarkCurveData.clear();
		yieldData.clear();
	}

	@Override
	public void getAll() throws FixSessionException, FixGarbledException
	{

		int startTagPosition = buf.position();

		super.getAll();

		// assumption message is full otherwise decode would return null
		// so negative id means that we are at the end of the message
		int id;
		int lastTagPosition = buf.position();
		while ( ( id = FixUtils.getTagId( buf ) ) >= 0 )
		{
			ByteBuffer value;

			value = buf;

			switch( id ) {

			case FixTags.QUOTESTATUSREQID_INT:
				quoteStatusReqID = FixUtils.getTagStringValue(MsgTypes.QUOTESTATUSREPORT ,id ,value, quoteStatusReqID);
				break;

			case FixTags.QUOTEREQID_INT:
				quoteReqID = FixUtils.getTagStringValue(MsgTypes.QUOTESTATUSREPORT ,id ,value, quoteReqID);
				break;

			case FixTags.QUOTEID_INT:
				quoteID = FixUtils.getTagStringValue(MsgTypes.QUOTESTATUSREPORT ,id ,value, quoteID);
				break;

			case FixTags.QUOTEMSGID_INT:
				quoteMsgID = FixUtils.getTagStringValue(MsgTypes.QUOTESTATUSREPORT ,id ,value, quoteMsgID);
				break;

			case FixTags.QUOTERESPID_INT:
				quoteRespID = FixUtils.getTagStringValue(MsgTypes.QUOTESTATUSREPORT ,id ,value, quoteRespID);
				break;

			case FixTags.QUOTETYPE_INT:
				quoteType = FixUtils.getTagIntValue(MsgTypes.QUOTESTATUSREPORT ,id ,value );
				if (!QuoteType.isValid(quoteType) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + quoteType + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.QUOTECANCELTYPE_INT:
				quoteCancelType = FixUtils.getTagIntValue(MsgTypes.QUOTESTATUSREPORT ,id ,value );
				if (!QuoteCancelType.isValid(quoteCancelType) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + quoteCancelType + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.NOPARTYIDS_INT:
				parties.noPartyIDs = FixUtils.getTagIntValue( MsgTypes.QUOTESTATUSREPORT ,FixTags.NOPARTYIDS_INT ,value );
				parties.getAll(parties.noPartyIDs, value );
				break;

			case FixTags.NOTARGETPARTYIDS_INT:
				targetParties.noTargetPartyIDs = FixUtils.getTagIntValue( MsgTypes.QUOTESTATUSREPORT ,FixTags.NOTARGETPARTYIDS_INT ,value );
				targetParties.getAll(targetParties.noTargetPartyIDs, value );
				break;

			case FixTags.TRADINGSESSIONID_INT:
				tradingSessionID = FixUtils.getTagStringValue(MsgTypes.QUOTESTATUSREPORT ,id ,value, tradingSessionID);
				if (!TradingSessionID.isValid(tradingSessionID) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + tradingSessionID + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.TRADINGSESSIONSUBID_INT:
				tradingSessionSubID = FixUtils.getTagStringValue(MsgTypes.QUOTESTATUSREPORT ,id ,value, tradingSessionSubID);
				if (!TradingSessionSubID.isValid(tradingSessionSubID) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + tradingSessionSubID + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.SYMBOL_INT:
				instrument.getAll(FixTags.SYMBOL_INT, value );
				break;

			case FixTags.AGREEMENTDESC_INT:
				financingDetails.getAll(FixTags.AGREEMENTDESC_INT, value );
				break;

			case FixTags.NOUNDERLYINGS_INT:
				undInstrmtGrp.noUnderlyings = FixUtils.getTagIntValue( MsgTypes.QUOTESTATUSREPORT ,FixTags.NOUNDERLYINGS_INT ,value );
				undInstrmtGrp.getAll(undInstrmtGrp.noUnderlyings, value );
				break;

			case FixTags.SIDE_INT:
				side = FixUtils.getTagCharValue(MsgTypes.QUOTESTATUSREPORT ,id ,value );
				if (!Side.isValid(side) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + side + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.ORDERQTY_INT:
				orderQtyData.getAll(FixTags.ORDERQTY_INT, value );
				break;

			case FixTags.SETTLTYPE_INT:
				settlType = FixUtils.getTagStringValue(MsgTypes.QUOTESTATUSREPORT ,id ,value, settlType);
				if (!SettlType.isValid(settlType) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + settlType + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.SETTLDATE_INT:
				settlDate = FixUtils.getTagStringValue(MsgTypes.QUOTESTATUSREPORT ,id ,value, settlDate);
				break;

			case FixTags.SETTLDATE2_INT:
				settlDate2 = FixUtils.getTagStringValue(MsgTypes.QUOTESTATUSREPORT ,id ,value, settlDate2);
				break;

			case FixTags.ORDERQTY2_INT:
				orderQty2 = FixUtils.getTagFloatValue(MsgTypes.QUOTESTATUSREPORT ,id ,value);
				break;

			case FixTags.CURRENCY_INT:
				currency = FixUtils.getTagStringValue(MsgTypes.QUOTESTATUSREPORT ,id ,value, currency);
				break;

			case FixTags.NOSTIPULATIONS_INT:
				stipulations.noStipulations = FixUtils.getTagIntValue( MsgTypes.QUOTESTATUSREPORT ,FixTags.NOSTIPULATIONS_INT ,value );
				stipulations.getAll(stipulations.noStipulations, value );
				break;

			case FixTags.ACCOUNT_INT:
				account = FixUtils.getTagStringValue(MsgTypes.QUOTESTATUSREPORT ,id ,value, account);
				break;

			case FixTags.ACCTIDSOURCE_INT:
				acctIDSource = FixUtils.getTagIntValue(MsgTypes.QUOTESTATUSREPORT ,id ,value );
				if (!AcctIDSource.isValid(acctIDSource) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + acctIDSource + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.ACCOUNTTYPE_INT:
				accountType = FixUtils.getTagIntValue(MsgTypes.QUOTESTATUSREPORT ,id ,value );
				if (!AccountType.isValid(accountType) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + accountType + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.NOLEGS_INT:
				legQuotStatGrp.noLegs = FixUtils.getTagIntValue( MsgTypes.QUOTESTATUSREPORT ,FixTags.NOLEGS_INT ,value );
				legQuotStatGrp.getAll(legQuotStatGrp.noLegs, value );
				break;

			case FixTags.NOQUOTEQUALIFIERS_INT:
				quotQualGrp.noQuoteQualifiers = FixUtils.getTagIntValue( MsgTypes.QUOTESTATUSREPORT ,FixTags.NOQUOTEQUALIFIERS_INT ,value );
				quotQualGrp.getAll(quotQualGrp.noQuoteQualifiers, value );
				break;

			case FixTags.EXPIRETIME_INT:
				expireTime = FixUtils.getTagStringValue(MsgTypes.QUOTESTATUSREPORT ,id ,value, expireTime);
				break;

			case FixTags.PRICE_INT:
				price = FixUtils.getTagFloatValue(MsgTypes.QUOTESTATUSREPORT ,id ,value);
				break;

			case FixTags.PRICETYPE_INT:
				priceType = FixUtils.getTagIntValue(MsgTypes.QUOTESTATUSREPORT ,id ,value );
				if (!PriceType.isValid(priceType) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + priceType + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.SPREAD_INT:
				spreadOrBenchmarkCurveData.getAll(FixTags.SPREAD_INT, value );
				break;

			case FixTags.YIELDTYPE_INT:
				yieldData.getAll(FixTags.YIELDTYPE_INT, value );
				break;

			case FixTags.BIDPX_INT:
				bidPx = FixUtils.getTagFloatValue(MsgTypes.QUOTESTATUSREPORT ,id ,value);
				break;

			case FixTags.OFFERPX_INT:
				offerPx = FixUtils.getTagFloatValue(MsgTypes.QUOTESTATUSREPORT ,id ,value);
				break;

			case FixTags.MKTBIDPX_INT:
				mktBidPx = FixUtils.getTagFloatValue(MsgTypes.QUOTESTATUSREPORT ,id ,value);
				break;

			case FixTags.MKTOFFERPX_INT:
				mktOfferPx = FixUtils.getTagFloatValue(MsgTypes.QUOTESTATUSREPORT ,id ,value);
				break;

			case FixTags.MINBIDSIZE_INT:
				minBidSize = FixUtils.getTagFloatValue(MsgTypes.QUOTESTATUSREPORT ,id ,value);
				break;

			case FixTags.BIDSIZE_INT:
				bidSize = FixUtils.getTagFloatValue(MsgTypes.QUOTESTATUSREPORT ,id ,value);
				break;

			case FixTags.MINOFFERSIZE_INT:
				minOfferSize = FixUtils.getTagFloatValue(MsgTypes.QUOTESTATUSREPORT ,id ,value);
				break;

			case FixTags.OFFERSIZE_INT:
				offerSize = FixUtils.getTagFloatValue(MsgTypes.QUOTESTATUSREPORT ,id ,value);
				break;

			case FixTags.MINQTY_INT:
				minQty = FixUtils.getTagFloatValue(MsgTypes.QUOTESTATUSREPORT ,id ,value);
				break;

			case FixTags.VALIDUNTILTIME_INT:
				validUntilTime = FixUtils.getTagStringValue(MsgTypes.QUOTESTATUSREPORT ,id ,value, validUntilTime);
				break;

			case FixTags.BIDSPOTRATE_INT:
				bidSpotRate = FixUtils.getTagFloatValue(MsgTypes.QUOTESTATUSREPORT ,id ,value);
				break;

			case FixTags.OFFERSPOTRATE_INT:
				offerSpotRate = FixUtils.getTagFloatValue(MsgTypes.QUOTESTATUSREPORT ,id ,value);
				break;

			case FixTags.BIDFORWARDPOINTS_INT:
				bidForwardPoints = FixUtils.getTagFloatValue(MsgTypes.QUOTESTATUSREPORT ,id ,value);
				break;

			case FixTags.OFFERFORWARDPOINTS_INT:
				offerForwardPoints = FixUtils.getTagFloatValue(MsgTypes.QUOTESTATUSREPORT ,id ,value);
				break;

			case FixTags.MIDPX_INT:
				midPx = FixUtils.getTagFloatValue(MsgTypes.QUOTESTATUSREPORT ,id ,value);
				break;

			case FixTags.BIDYIELD_INT:
				bidYield = FixUtils.getTagFloatValue(MsgTypes.QUOTESTATUSREPORT ,id ,value);
				break;

			case FixTags.MIDYIELD_INT:
				midYield = FixUtils.getTagFloatValue(MsgTypes.QUOTESTATUSREPORT ,id ,value);
				break;

			case FixTags.OFFERYIELD_INT:
				offerYield = FixUtils.getTagFloatValue(MsgTypes.QUOTESTATUSREPORT ,id ,value);
				break;

			case FixTags.TRANSACTTIME_INT:
				transactTime = FixUtils.getTagStringValue(MsgTypes.QUOTESTATUSREPORT ,id ,value, transactTime);
				break;

			case FixTags.ORDTYPE_INT:
				ordType = FixUtils.getTagCharValue(MsgTypes.QUOTESTATUSREPORT ,id ,value );
				if (!OrdType.isValid(ordType) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + ordType + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.BIDFORWARDPOINTS2_INT:
				bidForwardPoints2 = FixUtils.getTagFloatValue(MsgTypes.QUOTESTATUSREPORT ,id ,value);
				break;

			case FixTags.OFFERFORWARDPOINTS2_INT:
				offerForwardPoints2 = FixUtils.getTagFloatValue(MsgTypes.QUOTESTATUSREPORT ,id ,value);
				break;

			case FixTags.SETTLCURRBIDFXRATE_INT:
				settlCurrBidFxRate = FixUtils.getTagFloatValue(MsgTypes.QUOTESTATUSREPORT ,id ,value);
				break;

			case FixTags.SETTLCURROFFERFXRATE_INT:
				settlCurrOfferFxRate = FixUtils.getTagFloatValue(MsgTypes.QUOTESTATUSREPORT ,id ,value);
				break;

			case FixTags.SETTLCURRFXRATECALC_INT:
				settlCurrFxRateCalc = FixUtils.getTagCharValue(MsgTypes.QUOTESTATUSREPORT ,id ,value );
				if (!SettlCurrFxRateCalc.isValid(settlCurrFxRateCalc) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + settlCurrFxRateCalc + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.COMMTYPE_INT:
				commType = FixUtils.getTagCharValue(MsgTypes.QUOTESTATUSREPORT ,id ,value );
				if (!CommType.isValid(commType) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + commType + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.COMMISSION_INT:
				commission = FixUtils.getTagFloatValue(MsgTypes.QUOTESTATUSREPORT ,id ,value);
				break;

			case FixTags.CUSTORDERCAPACITY_INT:
				custOrderCapacity = FixUtils.getTagIntValue(MsgTypes.QUOTESTATUSREPORT ,id ,value );
				if (!CustOrderCapacity.isValid(custOrderCapacity) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + custOrderCapacity + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.EXDESTINATION_INT:
				exDestination = FixUtils.getTagStringValue(MsgTypes.QUOTESTATUSREPORT ,id ,value, exDestination);
				break;

			case FixTags.EXDESTINATIONIDSOURCE_INT:
				exDestinationIDSource = FixUtils.getTagCharValue(MsgTypes.QUOTESTATUSREPORT ,id ,value );
				if (!ExDestinationIDSource.isValid(exDestinationIDSource) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + exDestinationIDSource + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.BOOKINGTYPE_INT:
				bookingType = FixUtils.getTagIntValue(MsgTypes.QUOTESTATUSREPORT ,id ,value );
				if (!BookingType.isValid(bookingType) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + bookingType + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.ORDERCAPACITY_INT:
				orderCapacity = FixUtils.getTagCharValue(MsgTypes.QUOTESTATUSREPORT ,id ,value );
				if (!OrderCapacity.isValid(orderCapacity) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + orderCapacity + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.ORDERRESTRICTIONS_INT:
				orderRestrictions = FixUtils.getTagStringValue(MsgTypes.QUOTESTATUSREPORT ,id ,value, orderRestrictions);
				if (!OrderRestrictions.isValid(orderRestrictions) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + orderRestrictions + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.QUOTESTATUS_INT:
				quoteStatus = FixUtils.getTagIntValue(MsgTypes.QUOTESTATUSREPORT ,id ,value );
				if (!QuoteStatus.isValid(quoteStatus) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + quoteStatus + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.QUOTEREJECTREASON_INT:
				quoteRejectReason = FixUtils.getTagIntValue(MsgTypes.QUOTESTATUSREPORT ,id ,value );
				if (!QuoteRejectReason.isValid(quoteRejectReason) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + quoteRejectReason + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.TEXT_INT:
				text = FixUtils.getTagStringValue(MsgTypes.QUOTESTATUSREPORT ,id ,value, text);
				break;

			case FixTags.ENCODEDTEXTLEN_INT:
				encodedTextLen = FixUtils.getTagIntValue(MsgTypes.QUOTESTATUSREPORT ,id ,value );
				break;

			case FixTags.ENCODEDTEXT_INT:
				encodedText = FixUtils.getTagStringValue(MsgTypes.QUOTESTATUSREPORT ,id ,value, encodedText);
				break;

			// for a message always get the checksum
			case FixTags.CHECKSUM_INT:
				checkSum = FixUtils.getTagIntValue( MsgTypes.QUOTESTATUSREPORT ,FixTags.CHECKSUM_INT, value );

				id = checkRequiredTags();
				if (id > 0) throw new FixSessionException(SessionRejectReason.REQUIRED_TAG_MISSING, "Required tag missing".getBytes(), id, FixUtils.getMsgType(msgType) );

				return;

			default:
				throw new FixSessionException(SessionRejectReason.UNDEFINED_TAG, "Unknown tag".getBytes(), id, FixUtils.getMsgType(msgType) );

			}

			lastTagPosition = buf.position();

		}

		buf.position(startTagPosition);

	}

	private int checkRequiredTags() {
		int tag = -1;

		if (! FixUtils.isSet(senderCompID) ) return FixTags.SENDERCOMPID_INT;
		if (! FixUtils.isSet(targetCompID) ) return FixTags.TARGETCOMPID_INT;
		if (! FixUtils.isSet(msgSeqNum) ) return FixTags.MSGSEQNUM_INT;
		if (! FixUtils.isSet(sendingTime) ) return FixTags.SENDINGTIME_INT;
		if (! FixUtils.isSet(checkSum) ) return FixTags.CHECKSUM_INT;
		return tag;

	}
	@Override
	public void encode( ByteBuffer out )
	{
		// Encode message. Set msgSeqNum and sendingTime and optional resend flags, before encoding. 

		int msgStart = out.position();

		out.put( BEGINSTRING_VALUE_WITH_TAG );

		int msgLengthValueStart = out.position() + 2 /* 9= */;

		// placeholder
		FixUtils.putFixTag(out, FixTags.BODYLENGTH_INT, FixConstants.MAX_MESSAGE_SIZE );

		int msgTypeStart = out.position();

		FixUtils.putFixTag( out, FixTags.MSGTYPE_INT, MsgTypes.QUOTESTATUSREPORT);

		// encode all fields including the header

		if (FixUtils.isSet(applVerID)) FixUtils.putFixTag( out, FixTags.APPLVERID_INT, applVerID, 0, Utils.lastIndexTrim(applVerID, (byte)0) );
		if (FixUtils.isSet(cstmApplVerID)) FixUtils.putFixTag( out, FixTags.CSTMAPPLVERID_INT, cstmApplVerID, 0, Utils.lastIndexTrim(cstmApplVerID, (byte)0) );
		if (FixUtils.isSet(applExtID)) FixUtils.putFixTag( out, FixTags.APPLEXTID_INT, applExtID);
		FixUtils.putFixTag( out, FixTags.SENDERCOMPID_INT, senderCompID, 0, Utils.lastIndexTrim(senderCompID, (byte)0) );
		FixUtils.putFixTag( out, FixTags.TARGETCOMPID_INT, targetCompID, 0, Utils.lastIndexTrim(targetCompID, (byte)0) );
		if (FixUtils.isSet(onBehalfOfCompID)) FixUtils.putFixTag( out, FixTags.ONBEHALFOFCOMPID_INT, onBehalfOfCompID, 0, Utils.lastIndexTrim(onBehalfOfCompID, (byte)0) );
		if (FixUtils.isSet(deliverToCompID)) FixUtils.putFixTag( out, FixTags.DELIVERTOCOMPID_INT, deliverToCompID, 0, Utils.lastIndexTrim(deliverToCompID, (byte)0) );
		if (FixUtils.isSet(secureDataLen)) FixUtils.putFixTag( out, FixTags.SECUREDATALEN_INT, secureDataLen);
		if (FixUtils.isSet(secureData)) FixUtils.putFixTag( out, FixTags.SECUREDATA_INT, secureData, 0, Utils.lastIndexTrim(secureData, (byte)0) );
		FixUtils.putFixTag( out, FixTags.MSGSEQNUM_INT, msgSeqNum);
		if (FixUtils.isSet(senderSubID)) FixUtils.putFixTag( out, FixTags.SENDERSUBID_INT, senderSubID, 0, Utils.lastIndexTrim(senderSubID, (byte)0) );
		if (FixUtils.isSet(senderLocationID)) FixUtils.putFixTag( out, FixTags.SENDERLOCATIONID_INT, senderLocationID, 0, Utils.lastIndexTrim(senderLocationID, (byte)0) );
		if (FixUtils.isSet(targetSubID)) FixUtils.putFixTag( out, FixTags.TARGETSUBID_INT, targetSubID, 0, Utils.lastIndexTrim(targetSubID, (byte)0) );
		if (FixUtils.isSet(targetLocationID)) FixUtils.putFixTag( out, FixTags.TARGETLOCATIONID_INT, targetLocationID, 0, Utils.lastIndexTrim(targetLocationID, (byte)0) );
		if (FixUtils.isSet(onBehalfOfSubID)) FixUtils.putFixTag( out, FixTags.ONBEHALFOFSUBID_INT, onBehalfOfSubID, 0, Utils.lastIndexTrim(onBehalfOfSubID, (byte)0) );
		if (FixUtils.isSet(onBehalfOfLocationID)) FixUtils.putFixTag( out, FixTags.ONBEHALFOFLOCATIONID_INT, onBehalfOfLocationID, 0, Utils.lastIndexTrim(onBehalfOfLocationID, (byte)0) );
		if (FixUtils.isSet(deliverToSubID)) FixUtils.putFixTag( out, FixTags.DELIVERTOSUBID_INT, deliverToSubID, 0, Utils.lastIndexTrim(deliverToSubID, (byte)0) );
		if (FixUtils.isSet(deliverToLocationID)) FixUtils.putFixTag( out, FixTags.DELIVERTOLOCATIONID_INT, deliverToLocationID, 0, Utils.lastIndexTrim(deliverToLocationID, (byte)0) );
		if (FixUtils.isSet(possDupFlag)) FixUtils.putFixTag( out, FixTags.POSSDUPFLAG_INT, possDupFlag?(byte)'Y':(byte)'N' );
		if (FixUtils.isSet(possResend)) FixUtils.putFixTag( out, FixTags.POSSRESEND_INT, possResend?(byte)'Y':(byte)'N' );
		FixUtils.putFixTag( out, FixTags.SENDINGTIME_INT, sendingTime);
		if (FixUtils.isSet(origSendingTime)) FixUtils.putFixTag( out, FixTags.ORIGSENDINGTIME_INT, origSendingTime);
		if (FixUtils.isSet(xmlDataLen)) FixUtils.putFixTag( out, FixTags.XMLDATALEN_INT, xmlDataLen);
		if (FixUtils.isSet(xmlData)) FixUtils.putFixTag( out, FixTags.XMLDATA_INT, xmlData, 0, Utils.lastIndexTrim(xmlData, (byte)0) );
		if (FixUtils.isSet(messageEncoding)) FixUtils.putFixTag( out, FixTags.MESSAGEENCODING_INT, messageEncoding, 0, Utils.lastIndexTrim(messageEncoding, (byte)0) );
		if (FixUtils.isSet(lastMsgSeqNumProcessed)) FixUtils.putFixTag( out, FixTags.LASTMSGSEQNUMPROCESSED_INT, lastMsgSeqNumProcessed);
		if ( FixUtils.isSet(hopGrp.noHops) )hopGrp.encode( out );

		if (FixUtils.isSet(quoteStatusReqID)) FixUtils.putFixTag( out, FixTags.QUOTESTATUSREQID_INT, quoteStatusReqID, 0, Utils.lastIndexTrim(quoteStatusReqID, (byte)0) );
		if (FixUtils.isSet(quoteReqID)) FixUtils.putFixTag( out, FixTags.QUOTEREQID_INT, quoteReqID, 0, Utils.lastIndexTrim(quoteReqID, (byte)0) );
		if (FixUtils.isSet(quoteID)) FixUtils.putFixTag( out, FixTags.QUOTEID_INT, quoteID, 0, Utils.lastIndexTrim(quoteID, (byte)0) );
		if (FixUtils.isSet(quoteMsgID)) FixUtils.putFixTag( out, FixTags.QUOTEMSGID_INT, quoteMsgID, 0, Utils.lastIndexTrim(quoteMsgID, (byte)0) );
		if (FixUtils.isSet(quoteRespID)) FixUtils.putFixTag( out, FixTags.QUOTERESPID_INT, quoteRespID, 0, Utils.lastIndexTrim(quoteRespID, (byte)0) );
		if (FixUtils.isSet(quoteType)) FixUtils.putFixTag( out, FixTags.QUOTETYPE_INT, quoteType);
		if (FixUtils.isSet(quoteCancelType)) FixUtils.putFixTag( out, FixTags.QUOTECANCELTYPE_INT, quoteCancelType);
		if (FixUtils.isSet(parties.noPartyIDs)) parties.encode( out );
		if (FixUtils.isSet(targetParties.noTargetPartyIDs)) targetParties.encode( out );
		if (FixUtils.isSet(tradingSessionID)) FixUtils.putFixTag( out, FixTags.TRADINGSESSIONID_INT, tradingSessionID, 0, Utils.lastIndexTrim(tradingSessionID, (byte)0) );
		if (FixUtils.isSet(tradingSessionSubID)) FixUtils.putFixTag( out, FixTags.TRADINGSESSIONSUBID_INT, tradingSessionSubID, 0, Utils.lastIndexTrim(tradingSessionSubID, (byte)0) );
		if (FixUtils.isSet(instrument.symbol)) instrument.encode( out );
		if (FixUtils.isSet(financingDetails.agreementDesc)) financingDetails.encode( out );
		if (FixUtils.isSet(undInstrmtGrp.noUnderlyings)) undInstrmtGrp.encode( out );
		if (FixUtils.isSet(side)) FixUtils.putFixTag( out, FixTags.SIDE_INT, side );
		if (FixUtils.isSet(orderQtyData.orderQty)) orderQtyData.encode( out );
		if (FixUtils.isSet(settlType)) FixUtils.putFixTag( out, FixTags.SETTLTYPE_INT, settlType, 0, Utils.lastIndexTrim(settlType, (byte)0) );
		if (FixUtils.isSet(settlDate)) FixUtils.putFixTag( out, FixTags.SETTLDATE_INT, settlDate);
		if (FixUtils.isSet(settlDate2)) FixUtils.putFixTag( out, FixTags.SETTLDATE2_INT, settlDate2);
		if (FixUtils.isSet(orderQty2)) FixUtils.putFixFloatTag( out, FixTags.ORDERQTY2_INT, orderQty2);
		if (FixUtils.isSet(currency)) FixUtils.putFixTag( out, FixTags.CURRENCY_INT, currency, 0, Utils.lastIndexTrim(currency, (byte)0) );
		if (FixUtils.isSet(stipulations.noStipulations)) stipulations.encode( out );
		if (FixUtils.isSet(account)) FixUtils.putFixTag( out, FixTags.ACCOUNT_INT, account, 0, Utils.lastIndexTrim(account, (byte)0) );
		if (FixUtils.isSet(acctIDSource)) FixUtils.putFixTag( out, FixTags.ACCTIDSOURCE_INT, acctIDSource);
		if (FixUtils.isSet(accountType)) FixUtils.putFixTag( out, FixTags.ACCOUNTTYPE_INT, accountType);
		if (FixUtils.isSet(legQuotStatGrp.noLegs)) legQuotStatGrp.encode( out );
		if (FixUtils.isSet(quotQualGrp.noQuoteQualifiers)) quotQualGrp.encode( out );
		if (FixUtils.isSet(expireTime)) FixUtils.putFixTag( out, FixTags.EXPIRETIME_INT, expireTime);
		if (FixUtils.isSet(price)) FixUtils.putFixFloatTag( out, FixTags.PRICE_INT, price);
		if (FixUtils.isSet(priceType)) FixUtils.putFixTag( out, FixTags.PRICETYPE_INT, priceType);
		if (FixUtils.isSet(spreadOrBenchmarkCurveData.spread)) spreadOrBenchmarkCurveData.encode( out );
		if (FixUtils.isSet(yieldData.yieldType)) yieldData.encode( out );
		if (FixUtils.isSet(bidPx)) FixUtils.putFixFloatTag( out, FixTags.BIDPX_INT, bidPx);
		if (FixUtils.isSet(offerPx)) FixUtils.putFixFloatTag( out, FixTags.OFFERPX_INT, offerPx);
		if (FixUtils.isSet(mktBidPx)) FixUtils.putFixFloatTag( out, FixTags.MKTBIDPX_INT, mktBidPx);
		if (FixUtils.isSet(mktOfferPx)) FixUtils.putFixFloatTag( out, FixTags.MKTOFFERPX_INT, mktOfferPx);
		if (FixUtils.isSet(minBidSize)) FixUtils.putFixFloatTag( out, FixTags.MINBIDSIZE_INT, minBidSize);
		if (FixUtils.isSet(bidSize)) FixUtils.putFixFloatTag( out, FixTags.BIDSIZE_INT, bidSize);
		if (FixUtils.isSet(minOfferSize)) FixUtils.putFixFloatTag( out, FixTags.MINOFFERSIZE_INT, minOfferSize);
		if (FixUtils.isSet(offerSize)) FixUtils.putFixFloatTag( out, FixTags.OFFERSIZE_INT, offerSize);
		if (FixUtils.isSet(minQty)) FixUtils.putFixFloatTag( out, FixTags.MINQTY_INT, minQty);
		if (FixUtils.isSet(validUntilTime)) FixUtils.putFixTag( out, FixTags.VALIDUNTILTIME_INT, validUntilTime);
		if (FixUtils.isSet(bidSpotRate)) FixUtils.putFixFloatTag( out, FixTags.BIDSPOTRATE_INT, bidSpotRate);
		if (FixUtils.isSet(offerSpotRate)) FixUtils.putFixFloatTag( out, FixTags.OFFERSPOTRATE_INT, offerSpotRate);
		if (FixUtils.isSet(bidForwardPoints)) FixUtils.putFixFloatTag( out, FixTags.BIDFORWARDPOINTS_INT, bidForwardPoints);
		if (FixUtils.isSet(offerForwardPoints)) FixUtils.putFixFloatTag( out, FixTags.OFFERFORWARDPOINTS_INT, offerForwardPoints);
		if (FixUtils.isSet(midPx)) FixUtils.putFixFloatTag( out, FixTags.MIDPX_INT, midPx);
		if (FixUtils.isSet(bidYield)) FixUtils.putFixFloatTag( out, FixTags.BIDYIELD_INT, bidYield);
		if (FixUtils.isSet(midYield)) FixUtils.putFixFloatTag( out, FixTags.MIDYIELD_INT, midYield);
		if (FixUtils.isSet(offerYield)) FixUtils.putFixFloatTag( out, FixTags.OFFERYIELD_INT, offerYield);
		if (FixUtils.isSet(transactTime)) FixUtils.putFixTag( out, FixTags.TRANSACTTIME_INT, transactTime);
		if (FixUtils.isSet(ordType)) FixUtils.putFixTag( out, FixTags.ORDTYPE_INT, ordType );
		if (FixUtils.isSet(bidForwardPoints2)) FixUtils.putFixFloatTag( out, FixTags.BIDFORWARDPOINTS2_INT, bidForwardPoints2);
		if (FixUtils.isSet(offerForwardPoints2)) FixUtils.putFixFloatTag( out, FixTags.OFFERFORWARDPOINTS2_INT, offerForwardPoints2);
		if (FixUtils.isSet(settlCurrBidFxRate)) FixUtils.putFixFloatTag( out, FixTags.SETTLCURRBIDFXRATE_INT, settlCurrBidFxRate);
		if (FixUtils.isSet(settlCurrOfferFxRate)) FixUtils.putFixFloatTag( out, FixTags.SETTLCURROFFERFXRATE_INT, settlCurrOfferFxRate);
		if (FixUtils.isSet(settlCurrFxRateCalc)) FixUtils.putFixTag( out, FixTags.SETTLCURRFXRATECALC_INT, settlCurrFxRateCalc );
		if (FixUtils.isSet(commType)) FixUtils.putFixTag( out, FixTags.COMMTYPE_INT, commType );
		if (FixUtils.isSet(commission)) FixUtils.putFixTag( out, FixTags.COMMISSION_INT, commission);
		if (FixUtils.isSet(custOrderCapacity)) FixUtils.putFixTag( out, FixTags.CUSTORDERCAPACITY_INT, custOrderCapacity);
		if (FixUtils.isSet(exDestination)) FixUtils.putFixTag( out, FixTags.EXDESTINATION_INT, exDestination, 0, Utils.lastIndexTrim(exDestination, (byte)0) );
		if (FixUtils.isSet(exDestinationIDSource)) FixUtils.putFixTag( out, FixTags.EXDESTINATIONIDSOURCE_INT, exDestinationIDSource );
		if (FixUtils.isSet(bookingType)) FixUtils.putFixTag( out, FixTags.BOOKINGTYPE_INT, bookingType);
		if (FixUtils.isSet(orderCapacity)) FixUtils.putFixTag( out, FixTags.ORDERCAPACITY_INT, orderCapacity );
		if (FixUtils.isSet(orderRestrictions)) FixUtils.putFixTag( out, FixTags.ORDERRESTRICTIONS_INT, orderRestrictions, 0, Utils.lastIndexTrim(orderRestrictions, (byte)0) );
		if (FixUtils.isSet(quoteStatus)) FixUtils.putFixTag( out, FixTags.QUOTESTATUS_INT, quoteStatus);
		if (FixUtils.isSet(quoteRejectReason)) FixUtils.putFixTag( out, FixTags.QUOTEREJECTREASON_INT, quoteRejectReason);
		if (FixUtils.isSet(text)) FixUtils.putFixTag( out, FixTags.TEXT_INT, text, 0, Utils.lastIndexTrim(text, (byte)0) );
		if (FixUtils.isSet(encodedTextLen)) FixUtils.putFixTag( out, FixTags.ENCODEDTEXTLEN_INT, encodedTextLen);
		if (FixUtils.isSet(encodedText)) FixUtils.putFixTag( out, FixTags.ENCODEDTEXT_INT, encodedText, 0, Utils.lastIndexTrim(encodedText, (byte)0) );
		// the checksum at the end

		int checkSumStart = out.position();
		out.position( msgLengthValueStart );
		bodyLength = checkSumStart - msgTypeStart;
		Utils.longToNumeric( out, bodyLength, Utils.digits(FixConstants.MAX_MESSAGE_SIZE) );

		checkSum = FixUtils.computeChecksum( out, msgStart, checkSumStart );
		out.position( checkSumStart );
		FixUtils.putFixTag( out, FixTags.CHECKSUM_INT, checkSum );

		out.flip();

	}
	@Override		
	public void printBuffer(ByteBuffer out) {

		out.put(buf);

		out.flip();

	}

	/**
	 * If you use toString for any other purpose than administrative printout.
	 * You will end up in nifelheim!
	**/
	@Override
	public String toString() {
		char sep = '\n';
		if (Boolean.getBoolean("fix.useOneLiner")) sep = SOH;

		String s = "BeginString(8)=" + new String(BEGINSTRING_VALUE) + sep;
		s += "BodyLength(9)=" + bodyLength + sep;
		s += "MsgType(35)=" + new String(MsgTypes.QUOTESTATUSREPORT) + sep;

		try {
			// print all fields including the header

			if (FixUtils.isSet(applVerID)) s += "ApplVerID(1128)=" + new String(applVerID) + sep;
			if (FixUtils.isSet(cstmApplVerID)) s += "CstmApplVerID(1129)=" + new String(cstmApplVerID) + sep;
			if (FixUtils.isSet(applExtID)) s += "ApplExtID(1156)=" + String.valueOf(applExtID) + sep;
			 s += "SenderCompID(49)=" + new String(senderCompID) + sep;
			 s += "TargetCompID(56)=" + new String(targetCompID) + sep;
			if (FixUtils.isSet(onBehalfOfCompID)) s += "OnBehalfOfCompID(115)=" + new String(onBehalfOfCompID) + sep;
			if (FixUtils.isSet(deliverToCompID)) s += "DeliverToCompID(128)=" + new String(deliverToCompID) + sep;
			if (FixUtils.isSet(secureDataLen)) s += "SecureDataLen(90)=" + String.valueOf(secureDataLen) + sep;
			if (FixUtils.isSet(secureData)) s += "SecureData(91)=" + new String(secureData) + sep;
			 s += "MsgSeqNum(34)=" + String.valueOf(msgSeqNum) + sep;
			if (FixUtils.isSet(senderSubID)) s += "SenderSubID(50)=" + new String(senderSubID) + sep;
			if (FixUtils.isSet(senderLocationID)) s += "SenderLocationID(142)=" + new String(senderLocationID) + sep;
			if (FixUtils.isSet(targetSubID)) s += "TargetSubID(57)=" + new String(targetSubID) + sep;
			if (FixUtils.isSet(targetLocationID)) s += "TargetLocationID(143)=" + new String(targetLocationID) + sep;
			if (FixUtils.isSet(onBehalfOfSubID)) s += "OnBehalfOfSubID(116)=" + new String(onBehalfOfSubID) + sep;
			if (FixUtils.isSet(onBehalfOfLocationID)) s += "OnBehalfOfLocationID(144)=" + new String(onBehalfOfLocationID) + sep;
			if (FixUtils.isSet(deliverToSubID)) s += "DeliverToSubID(129)=" + new String(deliverToSubID) + sep;
			if (FixUtils.isSet(deliverToLocationID)) s += "DeliverToLocationID(145)=" + new String(deliverToLocationID) + sep;
			if (FixUtils.isSet(possDupFlag)) s += "PossDupFlag(43)=" + String.valueOf(possDupFlag) + sep;
			if (FixUtils.isSet(possResend)) s += "PossResend(97)=" + String.valueOf(possResend) + sep;
			 s += "SendingTime(52)=" + new String(sendingTime) + sep;
			if (FixUtils.isSet(origSendingTime)) s += "OrigSendingTime(122)=" + new String(origSendingTime) + sep;
			if (FixUtils.isSet(xmlDataLen)) s += "XmlDataLen(212)=" + String.valueOf(xmlDataLen) + sep;
			if (FixUtils.isSet(xmlData)) s += "XmlData(213)=" + new String(xmlData) + sep;
			if (FixUtils.isSet(messageEncoding)) s += "MessageEncoding(347)=" + new String(messageEncoding) + sep;
			if (FixUtils.isSet(lastMsgSeqNumProcessed)) s += "LastMsgSeqNumProcessed(369)=" + String.valueOf(lastMsgSeqNumProcessed) + sep;
			if (FixUtils.isSet(hopGrp.noHops)) s += hopGrp.toString();

			if (FixUtils.isSet(quoteStatusReqID)) s += "QuoteStatusReqID(649)=" + new String(quoteStatusReqID) + sep;
			if (FixUtils.isSet(quoteReqID)) s += "QuoteReqID(131)=" + new String(quoteReqID) + sep;
			if (FixUtils.isSet(quoteID)) s += "QuoteID(117)=" + new String(quoteID) + sep;
			if (FixUtils.isSet(quoteMsgID)) s += "QuoteMsgID(1166)=" + new String(quoteMsgID) + sep;
			if (FixUtils.isSet(quoteRespID)) s += "QuoteRespID(693)=" + new String(quoteRespID) + sep;
			if (FixUtils.isSet(quoteType)) s += "QuoteType(537)=" + String.valueOf(quoteType) + sep;
			if (FixUtils.isSet(quoteCancelType)) s += "QuoteCancelType(298)=" + String.valueOf(quoteCancelType) + sep;
			if (FixUtils.isSet(parties.noPartyIDs)) s += parties.toString();
			if (FixUtils.isSet(targetParties.noTargetPartyIDs)) s += targetParties.toString();
			if (FixUtils.isSet(tradingSessionID)) s += "TradingSessionID(336)=" + new String(tradingSessionID) + sep;
			if (FixUtils.isSet(tradingSessionSubID)) s += "TradingSessionSubID(625)=" + new String(tradingSessionSubID) + sep;
			if (FixUtils.isSet(instrument.symbol)) s += instrument.toString();
			if (FixUtils.isSet(financingDetails.agreementDesc)) s += financingDetails.toString();
			if (FixUtils.isSet(undInstrmtGrp.noUnderlyings)) s += undInstrmtGrp.toString();
			if (FixUtils.isSet(side)) s += "Side(54)=" + String.valueOf(side) + sep;
			if (FixUtils.isSet(orderQtyData.orderQty)) s += orderQtyData.toString();
			if (FixUtils.isSet(settlType)) s += "SettlType(63)=" + new String(settlType) + sep;
			if (FixUtils.isSet(settlDate)) s += "SettlDate(64)=" + new String(settlDate) + sep;
			if (FixUtils.isSet(settlDate2)) s += "SettlDate2(193)=" + new String(settlDate2) + sep;
			if (FixUtils.isSet(orderQty2)) s += "OrderQty2(192)=" + String.valueOf(orderQty2) + sep;
			if (FixUtils.isSet(currency)) s += "Currency(15)=" + new String(currency) + sep;
			if (FixUtils.isSet(stipulations.noStipulations)) s += stipulations.toString();
			if (FixUtils.isSet(account)) s += "Account(1)=" + new String(account) + sep;
			if (FixUtils.isSet(acctIDSource)) s += "AcctIDSource(660)=" + String.valueOf(acctIDSource) + sep;
			if (FixUtils.isSet(accountType)) s += "AccountType(581)=" + String.valueOf(accountType) + sep;
			if (FixUtils.isSet(legQuotStatGrp.noLegs)) s += legQuotStatGrp.toString();
			if (FixUtils.isSet(quotQualGrp.noQuoteQualifiers)) s += quotQualGrp.toString();
			if (FixUtils.isSet(expireTime)) s += "ExpireTime(126)=" + new String(expireTime) + sep;
			if (FixUtils.isSet(price)) s += "Price(44)=" + String.valueOf(price) + sep;
			if (FixUtils.isSet(priceType)) s += "PriceType(423)=" + String.valueOf(priceType) + sep;
			if (FixUtils.isSet(spreadOrBenchmarkCurveData.spread)) s += spreadOrBenchmarkCurveData.toString();
			if (FixUtils.isSet(yieldData.yieldType)) s += yieldData.toString();
			if (FixUtils.isSet(bidPx)) s += "BidPx(132)=" + String.valueOf(bidPx) + sep;
			if (FixUtils.isSet(offerPx)) s += "OfferPx(133)=" + String.valueOf(offerPx) + sep;
			if (FixUtils.isSet(mktBidPx)) s += "MktBidPx(645)=" + String.valueOf(mktBidPx) + sep;
			if (FixUtils.isSet(mktOfferPx)) s += "MktOfferPx(646)=" + String.valueOf(mktOfferPx) + sep;
			if (FixUtils.isSet(minBidSize)) s += "MinBidSize(647)=" + String.valueOf(minBidSize) + sep;
			if (FixUtils.isSet(bidSize)) s += "BidSize(134)=" + String.valueOf(bidSize) + sep;
			if (FixUtils.isSet(minOfferSize)) s += "MinOfferSize(648)=" + String.valueOf(minOfferSize) + sep;
			if (FixUtils.isSet(offerSize)) s += "OfferSize(135)=" + String.valueOf(offerSize) + sep;
			if (FixUtils.isSet(minQty)) s += "MinQty(110)=" + String.valueOf(minQty) + sep;
			if (FixUtils.isSet(validUntilTime)) s += "ValidUntilTime(62)=" + new String(validUntilTime) + sep;
			if (FixUtils.isSet(bidSpotRate)) s += "BidSpotRate(188)=" + String.valueOf(bidSpotRate) + sep;
			if (FixUtils.isSet(offerSpotRate)) s += "OfferSpotRate(190)=" + String.valueOf(offerSpotRate) + sep;
			if (FixUtils.isSet(bidForwardPoints)) s += "BidForwardPoints(189)=" + String.valueOf(bidForwardPoints) + sep;
			if (FixUtils.isSet(offerForwardPoints)) s += "OfferForwardPoints(191)=" + String.valueOf(offerForwardPoints) + sep;
			if (FixUtils.isSet(midPx)) s += "MidPx(631)=" + String.valueOf(midPx) + sep;
			if (FixUtils.isSet(bidYield)) s += "BidYield(632)=" + String.valueOf(bidYield) + sep;
			if (FixUtils.isSet(midYield)) s += "MidYield(633)=" + String.valueOf(midYield) + sep;
			if (FixUtils.isSet(offerYield)) s += "OfferYield(634)=" + String.valueOf(offerYield) + sep;
			if (FixUtils.isSet(transactTime)) s += "TransactTime(60)=" + new String(transactTime) + sep;
			if (FixUtils.isSet(ordType)) s += "OrdType(40)=" + String.valueOf(ordType) + sep;
			if (FixUtils.isSet(bidForwardPoints2)) s += "BidForwardPoints2(642)=" + String.valueOf(bidForwardPoints2) + sep;
			if (FixUtils.isSet(offerForwardPoints2)) s += "OfferForwardPoints2(643)=" + String.valueOf(offerForwardPoints2) + sep;
			if (FixUtils.isSet(settlCurrBidFxRate)) s += "SettlCurrBidFxRate(656)=" + String.valueOf(settlCurrBidFxRate) + sep;
			if (FixUtils.isSet(settlCurrOfferFxRate)) s += "SettlCurrOfferFxRate(657)=" + String.valueOf(settlCurrOfferFxRate) + sep;
			if (FixUtils.isSet(settlCurrFxRateCalc)) s += "SettlCurrFxRateCalc(156)=" + String.valueOf(settlCurrFxRateCalc) + sep;
			if (FixUtils.isSet(commType)) s += "CommType(13)=" + String.valueOf(commType) + sep;
			if (FixUtils.isSet(commission)) s += "Commission(12)=" + String.valueOf(commission) + sep;
			if (FixUtils.isSet(custOrderCapacity)) s += "CustOrderCapacity(582)=" + String.valueOf(custOrderCapacity) + sep;
			if (FixUtils.isSet(exDestination)) s += "ExDestination(100)=" + new String(exDestination) + sep;
			if (FixUtils.isSet(exDestinationIDSource)) s += "ExDestinationIDSource(1133)=" + String.valueOf(exDestinationIDSource) + sep;
			if (FixUtils.isSet(bookingType)) s += "BookingType(775)=" + String.valueOf(bookingType) + sep;
			if (FixUtils.isSet(orderCapacity)) s += "OrderCapacity(528)=" + String.valueOf(orderCapacity) + sep;
			if (FixUtils.isSet(orderRestrictions)) s += "OrderRestrictions(529)=" + new String(orderRestrictions) + sep;
			if (FixUtils.isSet(quoteStatus)) s += "QuoteStatus(297)=" + String.valueOf(quoteStatus) + sep;
			if (FixUtils.isSet(quoteRejectReason)) s += "QuoteRejectReason(300)=" + String.valueOf(quoteRejectReason) + sep;
			if (FixUtils.isSet(text)) s += "Text(58)=" + new String(text) + sep;
			if (FixUtils.isSet(encodedTextLen)) s += "EncodedTextLen(354)=" + String.valueOf(encodedTextLen) + sep;
			if (FixUtils.isSet(encodedText)) s += "EncodedText(355)=" + new String(encodedText) + sep;

			s += "checkSum(10)=" + String.valueOf(checkSum) + sep;

		} catch(Exception e) {  };

		return s;
	}

	@Override
	public boolean equals(Object o) {
		if (! ( o instanceof FixQuoteStatusReport)) return false;

			FixQuoteStatusReport msg = (FixQuoteStatusReport) o;

		if ( ! super.equals(msg) ) return false;

		if (!Utils.equals( quoteStatusReqID, msg.quoteStatusReqID)) return false;

		if (!Utils.equals( quoteReqID, msg.quoteReqID)) return false;

		if (!Utils.equals( quoteID, msg.quoteID)) return false;

		if (!Utils.equals( quoteMsgID, msg.quoteMsgID)) return false;

		if (!Utils.equals( quoteRespID, msg.quoteRespID)) return false;

		if (!( quoteType==msg.quoteType)) return false;

		if (!( quoteCancelType==msg.quoteCancelType)) return false;

		if (!parties.equals(msg.parties)) return false;

		if (!targetParties.equals(msg.targetParties)) return false;

		if (!Utils.equals( tradingSessionID, msg.tradingSessionID)) return false;

		if (!Utils.equals( tradingSessionSubID, msg.tradingSessionSubID)) return false;

		if (!instrument.equals(msg.instrument)) return false;

		if (!financingDetails.equals(msg.financingDetails)) return false;

		if (!undInstrmtGrp.equals(msg.undInstrmtGrp)) return false;

		if (!( side==msg.side)) return false;

		if (!orderQtyData.equals(msg.orderQtyData)) return false;

		if (!Utils.equals( settlType, msg.settlType)) return false;

		if (!( orderQty2==msg.orderQty2)) return false;

		if (!Utils.equals( currency, msg.currency)) return false;

		if (!stipulations.equals(msg.stipulations)) return false;

		if (!Utils.equals( account, msg.account)) return false;

		if (!( acctIDSource==msg.acctIDSource)) return false;

		if (!( accountType==msg.accountType)) return false;

		if (!legQuotStatGrp.equals(msg.legQuotStatGrp)) return false;

		if (!quotQualGrp.equals(msg.quotQualGrp)) return false;

		if (!( price==msg.price)) return false;

		if (!( priceType==msg.priceType)) return false;

		if (!spreadOrBenchmarkCurveData.equals(msg.spreadOrBenchmarkCurveData)) return false;

		if (!yieldData.equals(msg.yieldData)) return false;

		if (!( bidPx==msg.bidPx)) return false;

		if (!( offerPx==msg.offerPx)) return false;

		if (!( mktBidPx==msg.mktBidPx)) return false;

		if (!( mktOfferPx==msg.mktOfferPx)) return false;

		if (!( minBidSize==msg.minBidSize)) return false;

		if (!( bidSize==msg.bidSize)) return false;

		if (!( minOfferSize==msg.minOfferSize)) return false;

		if (!( offerSize==msg.offerSize)) return false;

		if (!( minQty==msg.minQty)) return false;

		if (!( bidSpotRate==msg.bidSpotRate)) return false;

		if (!( offerSpotRate==msg.offerSpotRate)) return false;

		if (!( bidForwardPoints==msg.bidForwardPoints)) return false;

		if (!( offerForwardPoints==msg.offerForwardPoints)) return false;

		if (!( midPx==msg.midPx)) return false;

		if (!( bidYield==msg.bidYield)) return false;

		if (!( midYield==msg.midYield)) return false;

		if (!( offerYield==msg.offerYield)) return false;

		if (!( ordType==msg.ordType)) return false;

		if (!( bidForwardPoints2==msg.bidForwardPoints2)) return false;

		if (!( offerForwardPoints2==msg.offerForwardPoints2)) return false;

		if (!( settlCurrBidFxRate==msg.settlCurrBidFxRate)) return false;

		if (!( settlCurrOfferFxRate==msg.settlCurrOfferFxRate)) return false;

		if (!( settlCurrFxRateCalc==msg.settlCurrFxRateCalc)) return false;

		if (!( commType==msg.commType)) return false;

		if (!( commission==msg.commission)) return false;

		if (!( custOrderCapacity==msg.custOrderCapacity)) return false;

		if (!Utils.equals( exDestination, msg.exDestination)) return false;

		if (!( exDestinationIDSource==msg.exDestinationIDSource)) return false;

		if (!( bookingType==msg.bookingType)) return false;

		if (!( orderCapacity==msg.orderCapacity)) return false;

		if (!Utils.equals( orderRestrictions, msg.orderRestrictions)) return false;

		if (!( quoteStatus==msg.quoteStatus)) return false;

		if (!( quoteRejectReason==msg.quoteRejectReason)) return false;

		if (!Utils.equals( text, msg.text)) return false;

		if (!( encodedTextLen==msg.encodedTextLen)) return false;

		if (!Utils.equals( encodedText, msg.encodedText)) return false;

		return true;
	}
}
