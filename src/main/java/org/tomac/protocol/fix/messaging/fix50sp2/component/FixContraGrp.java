package org.tomac.protocol.fix.messaging.fix50sp2.component;

// DO NOT EDIT!!!
// This file is generated by FixMessageGenerator.
// If you need additional functionality, put it in a helper class
// that does not live in this folder!!!  Any java file in this folder 
// will be deleted upon the next run of the FixMessageGenerator!

import java.nio.ByteBuffer;

import org.tomac.protocol.fix.FixUtils;
import org.tomac.protocol.fix.FixSessionException;
import org.tomac.protocol.fix.FixGarbledException;
import org.tomac.utils.Utils;
import org.tomac.protocol.fix.FixConstants;


import org.tomac.protocol.fix.messaging.fix50sp2.FixMessageInfo.*;
import org.tomac.protocol.fix.messaging.fix50sp2.FixTags;

public class FixContraGrp
{

	public int noContraBrokers;
	public ContraGrp[] group;

	public void getAll(int noContraBrokers, ByteBuffer buf) throws FixSessionException {
		this.noContraBrokers = noContraBrokers;

		if (noContraBrokers < 1) throw new FixSessionException("asdasd");
		// this will leak memory if we grow the group
		if (group.length < noContraBrokers) 
			group = new ContraGrp[noContraBrokers];

		for ( int i = 0; i < noContraBrokers; i++ ) 
			group[i].getAllGroup(buf);
	}

	public void clear() {
		for (int i = 0; i<noContraBrokers; i++)
			group[i].clear();
	}
	public void encode(ByteBuffer out) {
		for (int i = 0; i<noContraBrokers; i++)
			group[i].encode(out);
	}
	public boolean isSet() {
		for (int i = 0; i<noContraBrokers; i++)
			if (group[i].isSet()) return true;
		return false;
	}

	@Override
	public String toString() {
		String s = "";
		for (int i = 0; i<noContraBrokers; i++)
			s += group[i].toString();
		return s;
	}

public class ContraGrp implements FixComponent
{

	public byte[] contraBroker;
	public byte[] contraTrader;
	public long contraTradeQty = 0;
	public byte[] contraTradeTime;
	public byte[] contraLegRefID;

	public ContraGrp() {
		super();

		contraBroker = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		contraTrader = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		contraTradeTime = new byte[FixUtils.UTCTIMESTAMP_LENGTH];
		contraLegRefID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		this.clear();

	}

	@Override
	public void clear()
	{

		// clear out all the fields that aren't msgType

		Utils.fill( contraBroker, (byte)0 );
		Utils.fill( contraTrader, (byte)0 );
		contraTradeQty = Long.MAX_VALUE;		
		Utils.fill( contraTradeTime, (byte)0 );
		Utils.fill( contraLegRefID, (byte)0 );
	}

	public void getAllGroup(ByteBuffer buf) throws FixSessionException
	{

		int startTagPosition = buf.position();

		int id = FixUtils.getTagId( buf );
		int lastTagPosition = buf.position();
			ByteBuffer value;

			value = buf;

			if(id == FixTags.CONTRABROKER_INT) {
				contraBroker = FixUtils.getTagStringValue(value, contraBroker);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.CONTRATRADER_INT) {
				contraTrader = FixUtils.getTagStringValue(value, contraTrader);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.CONTRATRADEQTY_INT) {
				contraTradeQty = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.CONTRATRADETIME_INT) {
				contraTradeTime = FixUtils.getTagStringValue(value, contraTradeTime);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.CONTRALEGREFID_INT) {
				contraLegRefID = FixUtils.getTagStringValue(value, contraLegRefID);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			id = checkRequiredTags();
			if (id > 0) throw new FixSessionException(buf, "Required tag missing: " + id );

			buf.position( lastTagPosition );
			return;

	}

	private int checkRequiredTags() {
		int tag = -1;

		return tag;

	}
	@Override
	public boolean isSet()
	{
		if (FixUtils.isSet(contraBroker)) return true;
		if (FixUtils.isSet(contraTrader)) return true;
		if (FixUtils.isSet(contraTradeQty)) return true;
		if (FixUtils.isSet(contraTradeTime)) return true;
		if (FixUtils.isSet(contraLegRefID)) return true;
		return false;
	}
	@Override
	public void encode( ByteBuffer out )
	{
		if (FixUtils.isSet(contraBroker)) FixUtils.putFixTag( out, FixTags.CONTRABROKER_INT, contraBroker, 0, Utils.lastIndexTrim(contraBroker, (byte)0) );
		if (FixUtils.isSet(contraTrader)) FixUtils.putFixTag( out, FixTags.CONTRATRADER_INT, contraTrader, 0, Utils.lastIndexTrim(contraTrader, (byte)0) );
		if (FixUtils.isSet(contraTradeQty)) FixUtils.putFixFloatTag( out, FixTags.CONTRATRADEQTY_INT, contraTradeQty);
		if (FixUtils.isSet(contraTradeTime)) FixUtils.putFixTag( out, FixTags.CONTRATRADETIME_INT, contraTradeTime);
		if (FixUtils.isSet(contraLegRefID)) FixUtils.putFixTag( out, FixTags.CONTRALEGREFID_INT, contraLegRefID, 0, Utils.lastIndexTrim(contraLegRefID, (byte)0) );
	}
	/**
	 * If you use toString for any other purpose than administrative printout.
	 * You will end up in nifelheim!
	**/
	@Override
	public String toString() {
		char sep = '\n';
		if (Boolean.getBoolean("fix.useOneLiner")) sep = ( byte )0x01;

		String s = "";

			if (FixUtils.isSet(contraBroker)) s += "ContraBroker(375)=" + new String(contraBroker) + sep;
			if (FixUtils.isSet(contraTrader)) s += "ContraTrader(337)=" + new String(contraTrader) + sep;
			if (FixUtils.isSet(contraTradeQty)) s += "ContraTradeQty(437)=" + String.valueOf(contraTradeQty) + sep;
			if (FixUtils.isSet(contraTradeTime)) s += "ContraTradeTime(438)=" + new String(contraTradeTime) + sep;
			if (FixUtils.isSet(contraLegRefID)) s += "ContraLegRefID(655)=" + new String(contraLegRefID) + sep;
		return s;

	}

	@Override
	public boolean equals(Object o) {
		if (! ( o instanceof ContraGrp)) return false;

			ContraGrp msg = (ContraGrp) o;

		if ( ! super.equals(msg) ) return false;

		if (!Utils.equals( contraBroker, msg.contraBroker)) return false;

		if (!Utils.equals( contraTrader, msg.contraTrader)) return false;

		if (!( contraTradeQty==msg.contraTradeQty)) return false;

		if (!Utils.equals( contraLegRefID, msg.contraLegRefID)) return false;

		return true;
	}
}
}
