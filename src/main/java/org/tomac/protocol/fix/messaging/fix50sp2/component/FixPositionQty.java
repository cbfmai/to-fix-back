package org.tomac.protocol.fix.messaging.fix50sp2.component;

// DO NOT EDIT!!!
// This file is generated by FixMessageGenerator.
// If you need additional functionality, put it in a helper class
// that does not live in this folder!!!  Any java file in this folder 
// will be deleted upon the next run of the FixMessageGenerator!

import java.nio.ByteBuffer;

import org.tomac.protocol.fix.FixUtils;
import org.tomac.protocol.fix.FixSessionException;
import org.tomac.protocol.fix.FixGarbledException;
import org.tomac.utils.Utils;
import org.tomac.protocol.fix.FixConstants;


import org.tomac.protocol.fix.messaging.fix50sp2.FixMessageInfo.*;
import org.tomac.protocol.fix.messaging.fix50sp2.FixTags;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixNestedParties;

public class FixPositionQty
{

	public int noPositions;
	public PositionQty[] group;

	public void getAll(int noPositions, ByteBuffer buf) throws FixSessionException {
		this.noPositions = noPositions;

		if (noPositions < 1) throw new FixSessionException("asdasd");
		// this will leak memory if we grow the group
		if (group.length < noPositions) 
			group = new PositionQty[noPositions];

		for ( int i = 0; i < noPositions; i++ ) 
			group[i].getAllGroup(buf);
	}

	public void clear() {
		for (int i = 0; i<noPositions; i++)
			group[i].clear();
	}
	public void encode(ByteBuffer out) {
		for (int i = 0; i<noPositions; i++)
			group[i].encode(out);
	}
	public boolean isSet() {
		for (int i = 0; i<noPositions; i++)
			if (group[i].isSet()) return true;
		return false;
	}

	@Override
	public String toString() {
		String s = "";
		for (int i = 0; i<noPositions; i++)
			s += group[i].toString();
		return s;
	}

public class PositionQty implements FixComponent
{

	public byte[] posType;
	public long longQty = 0;
	public long shortQty = 0;
	public long posQtyStatus = 0;
	public byte[] quantityDate;
	public FixNestedParties nestedParties;

	public PositionQty() {
		super();

		posType = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		quantityDate = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		nestedParties = new FixNestedParties();
		this.clear();

	}

	@Override
	public void clear()
	{

		// clear out all the fields that aren't msgType

		Utils.fill( posType, (byte)0 );
		longQty = Long.MAX_VALUE;		
		shortQty = Long.MAX_VALUE;		
		posQtyStatus = Long.MAX_VALUE;		
		Utils.fill( quantityDate, (byte)0 );
		nestedParties.clear();
	}

	public void getAllGroup(ByteBuffer buf) throws FixSessionException
	{

		int startTagPosition = buf.position();

		int id = FixUtils.getTagId( buf );
		int lastTagPosition = buf.position();
			ByteBuffer value;

			value = buf;

			if(id == FixTags.POSTYPE_INT) {
				posType = FixUtils.getTagStringValue(value, posType);
				if (!PosType.isValid(posType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + posType + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.LONGQTY_INT) {
				longQty = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.SHORTQTY_INT) {
				shortQty = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.POSQTYSTATUS_INT) {
				posQtyStatus = FixUtils.getTagIntValue( value );
				if (!PosQtyStatus.isValid(posQtyStatus) ) throw new FixSessionException(buf, "Invalid enumerated value(" + posQtyStatus + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.QUANTITYDATE_INT) {
				quantityDate = FixUtils.getTagStringValue(value, quantityDate);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.NONESTEDPARTYIDS_INT) {
				nestedParties.getAll(FixTags.NONESTEDPARTYIDS_INT, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			id = checkRequiredTags();
			if (id > 0) throw new FixSessionException(buf, "Required tag missing: " + id );

			buf.position( lastTagPosition );
			return;

	}

	private int checkRequiredTags() {
		int tag = -1;

		return tag;

	}
	@Override
	public boolean isSet()
	{
		if (FixUtils.isSet(posType)) return true;
		if (FixUtils.isSet(longQty)) return true;
		if (FixUtils.isSet(shortQty)) return true;
		if (FixUtils.isSet(posQtyStatus)) return true;
		if (FixUtils.isSet(quantityDate)) return true;
		if (FixUtils.isSet(nestedParties.noNestedPartyIDs)) return true;
		return false;
	}
	@Override
	public void encode( ByteBuffer out )
	{
		if (FixUtils.isSet(posType)) FixUtils.putFixTag( out, FixTags.POSTYPE_INT, posType, 0, Utils.lastIndexTrim(posType, (byte)0) );
		if (FixUtils.isSet(longQty)) FixUtils.putFixFloatTag( out, FixTags.LONGQTY_INT, longQty);
		if (FixUtils.isSet(shortQty)) FixUtils.putFixFloatTag( out, FixTags.SHORTQTY_INT, shortQty);
		if (FixUtils.isSet(posQtyStatus)) FixUtils.putFixTag( out, FixTags.POSQTYSTATUS_INT, posQtyStatus);
		if (FixUtils.isSet(quantityDate)) FixUtils.putFixTag( out, FixTags.QUANTITYDATE_INT, quantityDate);
		if (FixUtils.isSet(nestedParties.noNestedPartyIDs)) nestedParties.encode( out );
	}
	/**
	 * If you use toString for any other purpose than administrative printout.
	 * You will end up in nifelheim!
	**/
	@Override
	public String toString() {
		char sep = '\n';
		if (Boolean.getBoolean("fix.useOneLiner")) sep = ( byte )0x01;

		String s = "";

			if (FixUtils.isSet(posType)) s += "PosType(703)=" + new String(posType) + sep;
			if (FixUtils.isSet(longQty)) s += "LongQty(704)=" + String.valueOf(longQty) + sep;
			if (FixUtils.isSet(shortQty)) s += "ShortQty(705)=" + String.valueOf(shortQty) + sep;
			if (FixUtils.isSet(posQtyStatus)) s += "PosQtyStatus(706)=" + String.valueOf(posQtyStatus) + sep;
			if (FixUtils.isSet(quantityDate)) s += "QuantityDate(976)=" + new String(quantityDate) + sep;
			if (FixUtils.isSet(nestedParties.noNestedPartyIDs)) s += nestedParties.toString();
		return s;

	}

	@Override
	public boolean equals(Object o) {
		if (! ( o instanceof PositionQty)) return false;

			PositionQty msg = (PositionQty) o;

		if ( ! super.equals(msg) ) return false;

		if (!Utils.equals( posType, msg.posType)) return false;

		if (!( longQty==msg.longQty)) return false;

		if (!( shortQty==msg.shortQty)) return false;

		if (!( posQtyStatus==msg.posQtyStatus)) return false;

		if (!nestedParties.equals(msg.nestedParties)) return false;

		return true;
	}
}
}
