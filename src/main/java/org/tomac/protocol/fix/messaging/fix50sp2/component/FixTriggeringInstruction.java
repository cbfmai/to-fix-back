package org.tomac.protocol.fix.messaging.fix50sp2.component;

// DO NOT EDIT!!!
// This file is generated by FixMessageGenerator.
// If you need additional functionality, put it in a helper class
// that does not live in this folder!!!  Any java file in this folder 
// will be deleted upon the next run of the FixMessageGenerator!

import java.nio.ByteBuffer;

import org.tomac.protocol.fix.FixUtils;
import org.tomac.protocol.fix.FixSessionException;
import org.tomac.protocol.fix.FixGarbledException;
import org.tomac.utils.Utils;
import org.tomac.protocol.fix.FixConstants;


import org.tomac.protocol.fix.messaging.fix50sp2.FixTags;
import org.tomac.protocol.fix.messaging.fix50sp2.FixMessageInfo.*;

public class FixTriggeringInstruction implements FixComponent
{

	public byte triggerType = (byte)' ';
	public byte triggerAction = (byte)' ';
	public long triggerPrice = 0;
	public byte[] triggerSymbol;
	public byte[] triggerSecurityID;
	public byte[] triggerSecurityIDSource;
	public byte[] triggerSecurityDesc;
	public byte triggerPriceType = (byte)' ';
	public byte triggerPriceTypeScope = (byte)' ';
	public byte triggerPriceDirection = (byte)' ';
	public long triggerNewPrice = 0;
	public byte triggerOrderType = (byte)' ';
	public long triggerNewQty = 0;
	public byte[] triggerTradingSessionID;
	public byte[] triggerTradingSessionSubID;

	public FixTriggeringInstruction() {
		super();

		triggerSymbol = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		triggerSecurityID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		triggerSecurityIDSource = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		triggerSecurityDesc = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		triggerTradingSessionID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		triggerTradingSessionSubID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		this.clear();

	}

	@Override
	public void clear()
	{

		// clear out all the fields that aren't msgType

		triggerType = Byte.MAX_VALUE;		
		triggerAction = Byte.MAX_VALUE;		
		triggerPrice = Long.MAX_VALUE;		
		Utils.fill( triggerSymbol, (byte)0 );
		Utils.fill( triggerSecurityID, (byte)0 );
		Utils.fill( triggerSecurityIDSource, (byte)0 );
		Utils.fill( triggerSecurityDesc, (byte)0 );
		triggerPriceType = Byte.MAX_VALUE;		
		triggerPriceTypeScope = Byte.MAX_VALUE;		
		triggerPriceDirection = Byte.MAX_VALUE;		
		triggerNewPrice = Long.MAX_VALUE;		
		triggerOrderType = Byte.MAX_VALUE;		
		triggerNewQty = Long.MAX_VALUE;		
		Utils.fill( triggerTradingSessionID, (byte)0 );
		Utils.fill( triggerTradingSessionSubID, (byte)0 );
	}

	public void getAll(int id, ByteBuffer buf) throws FixSessionException
	{

		int startTagPosition = buf.position();

		int lastTagPosition = buf.position();
		do {
			ByteBuffer value;

			value = buf;

			switch( id ) {

			case FixTags.TRIGGERTYPE_INT:
				triggerType = FixUtils.getTagCharValue( value );
				if (!TriggerType.isValid(triggerType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + triggerType + ") for tag: " + id );
				break;

			case FixTags.TRIGGERACTION_INT:
				triggerAction = FixUtils.getTagCharValue( value );
				if (!TriggerAction.isValid(triggerAction) ) throw new FixSessionException(buf, "Invalid enumerated value(" + triggerAction + ") for tag: " + id );
				break;

			case FixTags.TRIGGERPRICE_INT:
				triggerPrice = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.TRIGGERSYMBOL_INT:
				triggerSymbol = FixUtils.getTagStringValue(value, triggerSymbol);
				break;

			case FixTags.TRIGGERSECURITYID_INT:
				triggerSecurityID = FixUtils.getTagStringValue(value, triggerSecurityID);
				break;

			case FixTags.TRIGGERSECURITYIDSOURCE_INT:
				triggerSecurityIDSource = FixUtils.getTagStringValue(value, triggerSecurityIDSource);
				break;

			case FixTags.TRIGGERSECURITYDESC_INT:
				triggerSecurityDesc = FixUtils.getTagStringValue(value, triggerSecurityDesc);
				break;

			case FixTags.TRIGGERPRICETYPE_INT:
				triggerPriceType = FixUtils.getTagCharValue( value );
				if (!TriggerPriceType.isValid(triggerPriceType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + triggerPriceType + ") for tag: " + id );
				break;

			case FixTags.TRIGGERPRICETYPESCOPE_INT:
				triggerPriceTypeScope = FixUtils.getTagCharValue( value );
				if (!TriggerPriceTypeScope.isValid(triggerPriceTypeScope) ) throw new FixSessionException(buf, "Invalid enumerated value(" + triggerPriceTypeScope + ") for tag: " + id );
				break;

			case FixTags.TRIGGERPRICEDIRECTION_INT:
				triggerPriceDirection = FixUtils.getTagCharValue( value );
				if (!TriggerPriceDirection.isValid(triggerPriceDirection) ) throw new FixSessionException(buf, "Invalid enumerated value(" + triggerPriceDirection + ") for tag: " + id );
				break;

			case FixTags.TRIGGERNEWPRICE_INT:
				triggerNewPrice = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.TRIGGERORDERTYPE_INT:
				triggerOrderType = FixUtils.getTagCharValue( value );
				if (!TriggerOrderType.isValid(triggerOrderType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + triggerOrderType + ") for tag: " + id );
				break;

			case FixTags.TRIGGERNEWQTY_INT:
				triggerNewQty = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.TRIGGERTRADINGSESSIONID_INT:
				triggerTradingSessionID = FixUtils.getTagStringValue(value, triggerTradingSessionID);
				break;

			case FixTags.TRIGGERTRADINGSESSIONSUBID_INT:
				triggerTradingSessionSubID = FixUtils.getTagStringValue(value, triggerTradingSessionSubID);
				break;

			// we will always endup with unknown tag, unread and return to upper layer in hierarchy
			default:
				id = checkRequiredTags();
				if (id > 0) throw new FixSessionException(buf, "Required tag missing: " + id );

				buf.position( lastTagPosition );
				return;

			}

			lastTagPosition = buf.position();

		} while ( ( id = FixUtils.getTagId( buf ) ) > 0 );

		buf.position(startTagPosition);

	}

	private int checkRequiredTags() {
		int tag = -1;

		return tag;

	}
	@Override
	public boolean isSet()
	{
		if (FixUtils.isSet(triggerType)) return true;
		if (FixUtils.isSet(triggerAction)) return true;
		if (FixUtils.isSet(triggerPrice)) return true;
		if (FixUtils.isSet(triggerSymbol)) return true;
		if (FixUtils.isSet(triggerSecurityID)) return true;
		if (FixUtils.isSet(triggerSecurityIDSource)) return true;
		if (FixUtils.isSet(triggerSecurityDesc)) return true;
		if (FixUtils.isSet(triggerPriceType)) return true;
		if (FixUtils.isSet(triggerPriceTypeScope)) return true;
		if (FixUtils.isSet(triggerPriceDirection)) return true;
		if (FixUtils.isSet(triggerNewPrice)) return true;
		if (FixUtils.isSet(triggerOrderType)) return true;
		if (FixUtils.isSet(triggerNewQty)) return true;
		if (FixUtils.isSet(triggerTradingSessionID)) return true;
		if (FixUtils.isSet(triggerTradingSessionSubID)) return true;
		return false;
	}
	@Override
	public void encode( ByteBuffer out )
	{
		if (FixUtils.isSet(triggerType)) FixUtils.putFixTag( out, FixTags.TRIGGERTYPE_INT, triggerType );
		if (FixUtils.isSet(triggerAction)) FixUtils.putFixTag( out, FixTags.TRIGGERACTION_INT, triggerAction );
		if (FixUtils.isSet(triggerPrice)) FixUtils.putFixFloatTag( out, FixTags.TRIGGERPRICE_INT, triggerPrice);
		if (FixUtils.isSet(triggerSymbol)) FixUtils.putFixTag( out, FixTags.TRIGGERSYMBOL_INT, triggerSymbol, 0, Utils.lastIndexTrim(triggerSymbol, (byte)0) );
		if (FixUtils.isSet(triggerSecurityID)) FixUtils.putFixTag( out, FixTags.TRIGGERSECURITYID_INT, triggerSecurityID, 0, Utils.lastIndexTrim(triggerSecurityID, (byte)0) );
		if (FixUtils.isSet(triggerSecurityIDSource)) FixUtils.putFixTag( out, FixTags.TRIGGERSECURITYIDSOURCE_INT, triggerSecurityIDSource, 0, Utils.lastIndexTrim(triggerSecurityIDSource, (byte)0) );
		if (FixUtils.isSet(triggerSecurityDesc)) FixUtils.putFixTag( out, FixTags.TRIGGERSECURITYDESC_INT, triggerSecurityDesc, 0, Utils.lastIndexTrim(triggerSecurityDesc, (byte)0) );
		if (FixUtils.isSet(triggerPriceType)) FixUtils.putFixTag( out, FixTags.TRIGGERPRICETYPE_INT, triggerPriceType );
		if (FixUtils.isSet(triggerPriceTypeScope)) FixUtils.putFixTag( out, FixTags.TRIGGERPRICETYPESCOPE_INT, triggerPriceTypeScope );
		if (FixUtils.isSet(triggerPriceDirection)) FixUtils.putFixTag( out, FixTags.TRIGGERPRICEDIRECTION_INT, triggerPriceDirection );
		if (FixUtils.isSet(triggerNewPrice)) FixUtils.putFixFloatTag( out, FixTags.TRIGGERNEWPRICE_INT, triggerNewPrice);
		if (FixUtils.isSet(triggerOrderType)) FixUtils.putFixTag( out, FixTags.TRIGGERORDERTYPE_INT, triggerOrderType );
		if (FixUtils.isSet(triggerNewQty)) FixUtils.putFixFloatTag( out, FixTags.TRIGGERNEWQTY_INT, triggerNewQty);
		if (FixUtils.isSet(triggerTradingSessionID)) FixUtils.putFixTag( out, FixTags.TRIGGERTRADINGSESSIONID_INT, triggerTradingSessionID, 0, Utils.lastIndexTrim(triggerTradingSessionID, (byte)0) );
		if (FixUtils.isSet(triggerTradingSessionSubID)) FixUtils.putFixTag( out, FixTags.TRIGGERTRADINGSESSIONSUBID_INT, triggerTradingSessionSubID, 0, Utils.lastIndexTrim(triggerTradingSessionSubID, (byte)0) );
	}
	/**
	 * If you use toString for any other purpose than administrative printout.
	 * You will end up in nifelheim!
	**/
	@Override
	public String toString() {
		char sep = '\n';
		if (Boolean.getBoolean("fix.useOneLiner")) sep = ( byte )0x01;

		String s = "";

			if (FixUtils.isSet(triggerType)) s += "TriggerType(1100)=" + String.valueOf(triggerType) + sep;
			if (FixUtils.isSet(triggerAction)) s += "TriggerAction(1101)=" + String.valueOf(triggerAction) + sep;
			if (FixUtils.isSet(triggerPrice)) s += "TriggerPrice(1102)=" + String.valueOf(triggerPrice) + sep;
			if (FixUtils.isSet(triggerSymbol)) s += "TriggerSymbol(1103)=" + new String(triggerSymbol) + sep;
			if (FixUtils.isSet(triggerSecurityID)) s += "TriggerSecurityID(1104)=" + new String(triggerSecurityID) + sep;
			if (FixUtils.isSet(triggerSecurityIDSource)) s += "TriggerSecurityIDSource(1105)=" + new String(triggerSecurityIDSource) + sep;
			if (FixUtils.isSet(triggerSecurityDesc)) s += "TriggerSecurityDesc(1106)=" + new String(triggerSecurityDesc) + sep;
			if (FixUtils.isSet(triggerPriceType)) s += "TriggerPriceType(1107)=" + String.valueOf(triggerPriceType) + sep;
			if (FixUtils.isSet(triggerPriceTypeScope)) s += "TriggerPriceTypeScope(1108)=" + String.valueOf(triggerPriceTypeScope) + sep;
			if (FixUtils.isSet(triggerPriceDirection)) s += "TriggerPriceDirection(1109)=" + String.valueOf(triggerPriceDirection) + sep;
			if (FixUtils.isSet(triggerNewPrice)) s += "TriggerNewPrice(1110)=" + String.valueOf(triggerNewPrice) + sep;
			if (FixUtils.isSet(triggerOrderType)) s += "TriggerOrderType(1111)=" + String.valueOf(triggerOrderType) + sep;
			if (FixUtils.isSet(triggerNewQty)) s += "TriggerNewQty(1112)=" + String.valueOf(triggerNewQty) + sep;
			if (FixUtils.isSet(triggerTradingSessionID)) s += "TriggerTradingSessionID(1113)=" + new String(triggerTradingSessionID) + sep;
			if (FixUtils.isSet(triggerTradingSessionSubID)) s += "TriggerTradingSessionSubID(1114)=" + new String(triggerTradingSessionSubID) + sep;
		return s;

	}

	@Override
	public boolean equals(Object o) {
		if (! ( o instanceof FixTriggeringInstruction)) return false;

			FixTriggeringInstruction msg = (FixTriggeringInstruction) o;

		if ( ! super.equals(msg) ) return false;

		if (!( triggerType==msg.triggerType)) return false;

		if (!( triggerAction==msg.triggerAction)) return false;

		if (!( triggerPrice==msg.triggerPrice)) return false;

		if (!Utils.equals( triggerSymbol, msg.triggerSymbol)) return false;

		if (!Utils.equals( triggerSecurityID, msg.triggerSecurityID)) return false;

		if (!Utils.equals( triggerSecurityIDSource, msg.triggerSecurityIDSource)) return false;

		if (!Utils.equals( triggerSecurityDesc, msg.triggerSecurityDesc)) return false;

		if (!( triggerPriceType==msg.triggerPriceType)) return false;

		if (!( triggerPriceTypeScope==msg.triggerPriceTypeScope)) return false;

		if (!( triggerPriceDirection==msg.triggerPriceDirection)) return false;

		if (!( triggerNewPrice==msg.triggerNewPrice)) return false;

		if (!( triggerOrderType==msg.triggerOrderType)) return false;

		if (!( triggerNewQty==msg.triggerNewQty)) return false;

		if (!Utils.equals( triggerTradingSessionID, msg.triggerTradingSessionID)) return false;

		if (!Utils.equals( triggerTradingSessionSubID, msg.triggerTradingSessionSubID)) return false;

		return true;
	}
}
