package org.tomac.protocol.fix.messaging.fix50sp2.component;

// DO NOT EDIT!!!
// This file is generated by FixMessageGenerator.
// If you need additional functionality, put it in a helper class
// that does not live in this folder!!!  Any java file in this folder 
// will be deleted upon the next run of the FixMessageGenerator!

import java.nio.ByteBuffer;

import org.tomac.protocol.fix.FixUtils;
import org.tomac.protocol.fix.FixSessionException;
import org.tomac.protocol.fix.FixGarbledException;
import org.tomac.utils.Utils;
import org.tomac.protocol.fix.FixConstants;


import org.tomac.protocol.fix.messaging.fix50sp2.FixTags;
import org.tomac.protocol.fix.messaging.fix50sp2.FixMessageInfo.*;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixBaseTradingRules;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixTradingSessionRulesGrp;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixNestedInstrumentAttribute;

public class FixSecurityTradingRules implements FixComponent
{

	public FixBaseTradingRules baseTradingRules;
	public FixTradingSessionRulesGrp tradingSessionRulesGrp;
	public FixNestedInstrumentAttribute nestedInstrumentAttribute;

	public FixSecurityTradingRules() {
		super();

		baseTradingRules = new FixBaseTradingRules();
		tradingSessionRulesGrp = new FixTradingSessionRulesGrp();
		nestedInstrumentAttribute = new FixNestedInstrumentAttribute();
		this.clear();

	}

	@Override
	public void clear()
	{

		// clear out all the fields that aren't msgType

		baseTradingRules.clear();
		tradingSessionRulesGrp.clear();
		nestedInstrumentAttribute.clear();
	}

	public void getAll(int id, ByteBuffer buf) throws FixSessionException, FixGarbledException
	{

		int startTagPosition = buf.position();

		int lastTagPosition = buf.position();
		do {
			ByteBuffer value;

			value = buf;

			switch( id ) {

			case FixTags.EXPIRATIONCYCLE_INT:
				baseTradingRules.getAll( FixTags.EXPIRATIONCYCLE_INT, value );
				break;

			case FixTags.NOTRADINGSESSIONRULES_INT:
				tradingSessionRulesGrp.noTradingSessionRules = FixUtils.getTagIntValue( value );
				tradingSessionRulesGrp.getAll(tradingSessionRulesGrp.noTradingSessionRules, value );
				break;

			case FixTags.NONESTEDINSTRATTRIB_INT:
				nestedInstrumentAttribute.noNestedInstrAttrib = FixUtils.getTagIntValue( value );
				nestedInstrumentAttribute.getAll(nestedInstrumentAttribute.noNestedInstrAttrib, value );
				break;

			// we will always endup with unknown tag, unread and return to upper layer in hierarchy
			default:
				id = checkRequiredTags();
				if (id > 0) throw new FixSessionException(SessionRejectReason.REQUIRED_TAG_MISSING, "Required tag missing".getBytes(), id, new byte[0] );

				buf.position( lastTagPosition );
				return;

			}

			lastTagPosition = buf.position();

		} while ( ( id = FixUtils.getTagId( buf ) ) > 0 );

		buf.position(startTagPosition);

	}

	private int checkRequiredTags() {
		int tag = -1;

		return tag;

	}
	@Override
	public boolean isSet()
	{
		if (FixUtils.isSet(baseTradingRules.expirationCycle)) return true;
		if (FixUtils.isSet(tradingSessionRulesGrp.noTradingSessionRules)) return true;
		if (FixUtils.isSet(nestedInstrumentAttribute.noNestedInstrAttrib)) return true;
		return false;
	}
	@Override
	public void encode( ByteBuffer out )
	{
		if (FixUtils.isSet(baseTradingRules.expirationCycle)) baseTradingRules.encode( out );
		if (FixUtils.isSet(tradingSessionRulesGrp.noTradingSessionRules)) tradingSessionRulesGrp.encode( out );
		if (FixUtils.isSet(nestedInstrumentAttribute.noNestedInstrAttrib)) nestedInstrumentAttribute.encode( out );
	}
	/**
	 * If you use toString for any other purpose than administrative printout.
	 * You will end up in nifelheim!
	**/
	@Override
	public String toString() {
		char sep = '\n';
		if (Boolean.getBoolean("fix.useOneLiner")) sep = ( byte )0x01;

		String s = "";

			if (FixUtils.isSet(baseTradingRules.expirationCycle)) s += baseTradingRules.toString();
			if (FixUtils.isSet(tradingSessionRulesGrp.noTradingSessionRules)) s += tradingSessionRulesGrp.toString();
			if (FixUtils.isSet(nestedInstrumentAttribute.noNestedInstrAttrib)) s += nestedInstrumentAttribute.toString();
		return s;

	}

	@Override
	public boolean equals(Object o) {
		if (! ( o instanceof FixSecurityTradingRules)) return false;

			FixSecurityTradingRules msg = (FixSecurityTradingRules) o;

		if ( ! super.equals(msg) ) return false;

		if (!baseTradingRules.equals(msg.baseTradingRules)) return false;

		if (!tradingSessionRulesGrp.equals(msg.tradingSessionRulesGrp)) return false;

		if (!nestedInstrumentAttribute.equals(msg.nestedInstrumentAttribute)) return false;

		return true;
	}
}
