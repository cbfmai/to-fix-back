package org.tomac.protocol.fix.messaging.fix50sp2;

// DO NOT EDIT!!!
// This file is generated by FixMessageGenerator.
// If you need additional functionality, put it in a helper class
// that does not live in this folder!!!  Any java file in this folder 
// will be deleted upon the next run of the FixMessageGenerator!

import java.nio.ByteBuffer;

import org.tomac.protocol.fix.FixUtils;
import org.tomac.protocol.fix.FixSessionException;
import org.tomac.protocol.fix.FixGarbledException;
import org.tomac.utils.Utils;
import org.tomac.protocol.fix.FixConstants;


import org.tomac.protocol.fix.messaging.fix50sp2.component.FixHopGrp;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixParties;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixOrdAllocGrp;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixTrdRegTimestamps;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixInstrument;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixInstrumentExtension;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixFinancingDetails;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixUndInstrmtGrp;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixInstrmtLegGrp;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixYieldData;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixCpctyConfGrp;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixSpreadOrBenchmarkCurveData;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixSettlInstructionsData;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixCommissionData;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixStipulations;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixMiscFeesGrp;

public class FixConfirmation extends FixMessage
{

	public byte[] confirmID;
	public byte[] confirmRefID;
	public byte[] confirmReqID;
	public long confirmTransType = 0;
	public long confirmType = 0;
	public boolean copyMsgIndicator = false;
	public boolean legalConfirm = false;
	public long confirmStatus = 0;
	public FixParties parties;
	public FixOrdAllocGrp ordAllocGrp;
	public byte[] allocID;
	public byte[] secondaryAllocID;
	public byte[] individualAllocID;
	public byte[] transactTime;
	public byte[] tradeDate;
	public FixTrdRegTimestamps trdRegTimestamps;
	public FixInstrument instrument;
	public FixInstrumentExtension instrumentExtension;
	public FixFinancingDetails financingDetails;
	public FixUndInstrmtGrp undInstrmtGrp;
	public FixInstrmtLegGrp instrmtLegGrp;
	public FixYieldData yieldData;
	public long allocQty = 0;
	public long qtyType = 0;
	public byte side = (byte)' ';
	public byte[] currency;
	public byte[] lastMkt;
	public FixCpctyConfGrp cpctyConfGrp;
	public byte[] allocAccount;
	public long allocAcctIDSource = 0;
	public long allocAccountType = 0;
	public long avgPx = 0;
	public long avgPxPrecision = 0;
	public long priceType = 0;
	public long avgParPx = 0;
	public FixSpreadOrBenchmarkCurveData spreadOrBenchmarkCurveData;
	public long reportedPx = 0;
	public byte[] text;
	public long encodedTextLen = 0;
	public byte[] encodedText;
	public byte processCode = (byte)' ';
	public long grossTradeAmt = 0;
	public long numDaysInterest = 0;
	public byte[] exDate;
	public long accruedInterestRate = 0;
	public long accruedInterestAmt = 0;
	public long interestAtMaturity = 0;
	public long endAccruedInterestAmt = 0;
	public long startCash = 0;
	public long endCash = 0;
	public long concession = 0;
	public long totalTakedown = 0;
	public long netMoney = 0;
	public long maturityNetMoney = 0;
	public long settlCurrAmt = 0;
	public byte[] settlCurrency;
	public long settlCurrFxRate = 0;
	public byte settlCurrFxRateCalc = (byte)' ';
	public byte[] settlType;
	public byte[] settlDate;
	public FixSettlInstructionsData settlInstructionsData;
	public FixCommissionData commissionData;
	public long sharedCommission = 0;
	public FixStipulations stipulations;
	public FixMiscFeesGrp miscFeesGrp;

	public FixConfirmation() {
		super();

		confirmID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		confirmRefID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		confirmReqID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		parties = new FixParties();
		ordAllocGrp = new FixOrdAllocGrp();
		allocID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		secondaryAllocID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		individualAllocID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		transactTime = new byte[FixUtils.UTCTIMESTAMP_LENGTH];
		tradeDate = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		trdRegTimestamps = new FixTrdRegTimestamps();
		instrument = new FixInstrument();
		instrumentExtension = new FixInstrumentExtension();
		financingDetails = new FixFinancingDetails();
		undInstrmtGrp = new FixUndInstrmtGrp();
		instrmtLegGrp = new FixInstrmtLegGrp();
		yieldData = new FixYieldData();
		currency = new byte[FixUtils.CURRENCY_LENGTH];
		lastMkt = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		cpctyConfGrp = new FixCpctyConfGrp();
		allocAccount = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		spreadOrBenchmarkCurveData = new FixSpreadOrBenchmarkCurveData();
		text = new byte[FixUtils.FIX_MAX_STRING_TEXT_LENGTH];
		encodedText = new byte[FixUtils.FIX_MAX_STRING_TEXT_LENGTH];
		exDate = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		settlCurrency = new byte[FixUtils.CURRENCY_LENGTH];
		settlType = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		settlDate = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		settlInstructionsData = new FixSettlInstructionsData();
		commissionData = new FixCommissionData();
		stipulations = new FixStipulations();
		miscFeesGrp = new FixMiscFeesGrp();
		this.clear();

		msgType = MsgTypes.CONFIRMATION_INT;

	}

	@Override
	public void clear()
	{

		// clear out all the fields that aren't msgType

		Utils.fill( confirmID, (byte)0 );
		Utils.fill( confirmRefID, (byte)0 );
		Utils.fill( confirmReqID, (byte)0 );
		confirmTransType = Long.MAX_VALUE;		
		confirmType = Long.MAX_VALUE;		
		copyMsgIndicator = false;		
		legalConfirm = false;		
		confirmStatus = Long.MAX_VALUE;		
		Utils.fill( allocID, (byte)0 );
		Utils.fill( secondaryAllocID, (byte)0 );
		Utils.fill( individualAllocID, (byte)0 );
		Utils.fill( transactTime, (byte)0 );
		Utils.fill( tradeDate, (byte)0 );
		allocQty = Long.MAX_VALUE;		
		qtyType = Long.MAX_VALUE;		
		side = Byte.MAX_VALUE;		
		Utils.fill( currency, (byte)0 );
		Utils.fill( lastMkt, (byte)0 );
		Utils.fill( allocAccount, (byte)0 );
		allocAcctIDSource = Long.MAX_VALUE;		
		allocAccountType = Long.MAX_VALUE;		
		avgPx = Long.MAX_VALUE;		
		avgPxPrecision = Long.MAX_VALUE;		
		priceType = Long.MAX_VALUE;		
		avgParPx = Long.MAX_VALUE;		
		reportedPx = Long.MAX_VALUE;		
		Utils.fill( text, (byte)0 );
		encodedTextLen = Long.MAX_VALUE;		
		Utils.fill( encodedText, (byte)0 );
		processCode = Byte.MAX_VALUE;		
		grossTradeAmt = Long.MAX_VALUE;		
		numDaysInterest = Long.MAX_VALUE;		
		Utils.fill( exDate, (byte)0 );
		accruedInterestRate = Long.MAX_VALUE;		
		accruedInterestAmt = Long.MAX_VALUE;		
		interestAtMaturity = Long.MAX_VALUE;		
		endAccruedInterestAmt = Long.MAX_VALUE;		
		startCash = Long.MAX_VALUE;		
		endCash = Long.MAX_VALUE;		
		concession = Long.MAX_VALUE;		
		totalTakedown = Long.MAX_VALUE;		
		netMoney = Long.MAX_VALUE;		
		maturityNetMoney = Long.MAX_VALUE;		
		settlCurrAmt = Long.MAX_VALUE;		
		Utils.fill( settlCurrency, (byte)0 );
		settlCurrFxRate = Long.MAX_VALUE;		
		settlCurrFxRateCalc = Byte.MAX_VALUE;		
		Utils.fill( settlType, (byte)0 );
		Utils.fill( settlDate, (byte)0 );
		sharedCommission = Long.MAX_VALUE;		
		parties.clear();
		ordAllocGrp.clear();
		trdRegTimestamps.clear();
		instrument.clear();
		instrumentExtension.clear();
		financingDetails.clear();
		undInstrmtGrp.clear();
		instrmtLegGrp.clear();
		yieldData.clear();
		cpctyConfGrp.clear();
		spreadOrBenchmarkCurveData.clear();
		settlInstructionsData.clear();
		commissionData.clear();
		stipulations.clear();
		miscFeesGrp.clear();
	}

	@Override
	public void getAll() throws FixSessionException, FixGarbledException
	{

		int startTagPosition = buf.position();

		super.getAll();

		// assumption message is full otherwise decode would return null
		// so negative id means that we are at the end of the message
		int id;
		int lastTagPosition = buf.position();
		while ( ( id = FixUtils.getTagId( buf ) ) > 0 )
		{
			ByteBuffer value;

			value = buf;

			switch( id ) {

			case FixTags.CONFIRMID_INT:
				confirmID = FixUtils.getTagStringValue(value, confirmID);
				break;

			case FixTags.CONFIRMREFID_INT:
				confirmRefID = FixUtils.getTagStringValue(value, confirmRefID);
				break;

			case FixTags.CONFIRMREQID_INT:
				confirmReqID = FixUtils.getTagStringValue(value, confirmReqID);
				break;

			case FixTags.CONFIRMTRANSTYPE_INT:
				confirmTransType = FixUtils.getTagIntValue( value );
				if (!ConfirmTransType.isValid(confirmTransType) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + confirmTransType + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.CONFIRMTYPE_INT:
				confirmType = FixUtils.getTagIntValue( value );
				if (!ConfirmType.isValid(confirmType) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + confirmType + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.COPYMSGINDICATOR_INT:
				copyMsgIndicator = FixUtils.getTagBooleanValue( value );
				break;

			case FixTags.LEGALCONFIRM_INT:
				legalConfirm = FixUtils.getTagBooleanValue( value );
				if (!LegalConfirm.isValid(legalConfirm) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + legalConfirm + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.CONFIRMSTATUS_INT:
				confirmStatus = FixUtils.getTagIntValue( value );
				if (!ConfirmStatus.isValid(confirmStatus) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + confirmStatus + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.NOPARTYIDS_INT:
				parties.noPartyIDs = FixUtils.getTagIntValue( value );
				parties.getAll(parties.noPartyIDs, value );
				break;

			case FixTags.NOORDERS_INT:
				ordAllocGrp.noOrders = FixUtils.getTagIntValue( value );
				ordAllocGrp.getAll(ordAllocGrp.noOrders, value );
				break;

			case FixTags.ALLOCID_INT:
				allocID = FixUtils.getTagStringValue(value, allocID);
				break;

			case FixTags.SECONDARYALLOCID_INT:
				secondaryAllocID = FixUtils.getTagStringValue(value, secondaryAllocID);
				break;

			case FixTags.INDIVIDUALALLOCID_INT:
				individualAllocID = FixUtils.getTagStringValue(value, individualAllocID);
				break;

			case FixTags.TRANSACTTIME_INT:
				transactTime = FixUtils.getTagStringValue(value, transactTime);
				break;

			case FixTags.TRADEDATE_INT:
				tradeDate = FixUtils.getTagStringValue(value, tradeDate);
				break;

			case FixTags.NOTRDREGTIMESTAMPS_INT:
				trdRegTimestamps.noTrdRegTimestamps = FixUtils.getTagIntValue( value );
				trdRegTimestamps.getAll(trdRegTimestamps.noTrdRegTimestamps, value );
				break;

			case FixTags.SYMBOL_INT:
				instrument.getAll(FixTags.SYMBOL_INT, value );
				break;

			case FixTags.DELIVERYFORM_INT:
				instrumentExtension.getAll(FixTags.DELIVERYFORM_INT, value );
				break;

			case FixTags.AGREEMENTDESC_INT:
				financingDetails.getAll(FixTags.AGREEMENTDESC_INT, value );
				break;

			case FixTags.NOUNDERLYINGS_INT:
				undInstrmtGrp.noUnderlyings = FixUtils.getTagIntValue( value );
				undInstrmtGrp.getAll(undInstrmtGrp.noUnderlyings, value );
				break;

			case FixTags.NOLEGS_INT:
				instrmtLegGrp.noLegs = FixUtils.getTagIntValue( value );
				instrmtLegGrp.getAll(instrmtLegGrp.noLegs, value );
				break;

			case FixTags.YIELDTYPE_INT:
				yieldData.getAll(FixTags.YIELDTYPE_INT, value );
				break;

			case FixTags.ALLOCQTY_INT:
				allocQty = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.QTYTYPE_INT:
				qtyType = FixUtils.getTagIntValue( value );
				if (!QtyType.isValid(qtyType) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + qtyType + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.SIDE_INT:
				side = FixUtils.getTagCharValue( value );
				if (!Side.isValid(side) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + side + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.CURRENCY_INT:
				currency = FixUtils.getTagStringValue(value, currency);
				break;

			case FixTags.LASTMKT_INT:
				lastMkt = FixUtils.getTagStringValue(value, lastMkt);
				break;

			case FixTags.NOCAPACITIES_INT:
				cpctyConfGrp.noCapacities = FixUtils.getTagIntValue( value );
				cpctyConfGrp.getAll(cpctyConfGrp.noCapacities, value );
				break;

			case FixTags.ALLOCACCOUNT_INT:
				allocAccount = FixUtils.getTagStringValue(value, allocAccount);
				break;

			case FixTags.ALLOCACCTIDSOURCE_INT:
				allocAcctIDSource = FixUtils.getTagIntValue( value );
				break;

			case FixTags.ALLOCACCOUNTTYPE_INT:
				allocAccountType = FixUtils.getTagIntValue( value );
				if (!AllocAccountType.isValid(allocAccountType) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + allocAccountType + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.AVGPX_INT:
				avgPx = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.AVGPXPRECISION_INT:
				avgPxPrecision = FixUtils.getTagIntValue( value );
				break;

			case FixTags.PRICETYPE_INT:
				priceType = FixUtils.getTagIntValue( value );
				if (!PriceType.isValid(priceType) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + priceType + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.AVGPARPX_INT:
				avgParPx = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.SPREAD_INT:
				spreadOrBenchmarkCurveData.getAll(FixTags.SPREAD_INT, value );
				break;

			case FixTags.REPORTEDPX_INT:
				reportedPx = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.TEXT_INT:
				text = FixUtils.getTagStringValue(value, text);
				break;

			case FixTags.ENCODEDTEXTLEN_INT:
				encodedTextLen = FixUtils.getTagIntValue( value );
				break;

			case FixTags.ENCODEDTEXT_INT:
				encodedText = FixUtils.getTagStringValue(value, encodedText);
				break;

			case FixTags.PROCESSCODE_INT:
				processCode = FixUtils.getTagCharValue( value );
				if (!ProcessCode.isValid(processCode) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + processCode + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.GROSSTRADEAMT_INT:
				grossTradeAmt = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.NUMDAYSINTEREST_INT:
				numDaysInterest = FixUtils.getTagIntValue( value );
				break;

			case FixTags.EXDATE_INT:
				exDate = FixUtils.getTagStringValue(value, exDate);
				break;

			case FixTags.ACCRUEDINTERESTRATE_INT:
				accruedInterestRate = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.ACCRUEDINTERESTAMT_INT:
				accruedInterestAmt = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.INTERESTATMATURITY_INT:
				interestAtMaturity = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.ENDACCRUEDINTERESTAMT_INT:
				endAccruedInterestAmt = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.STARTCASH_INT:
				startCash = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.ENDCASH_INT:
				endCash = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.CONCESSION_INT:
				concession = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.TOTALTAKEDOWN_INT:
				totalTakedown = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.NETMONEY_INT:
				netMoney = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.MATURITYNETMONEY_INT:
				maturityNetMoney = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.SETTLCURRAMT_INT:
				settlCurrAmt = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.SETTLCURRENCY_INT:
				settlCurrency = FixUtils.getTagStringValue(value, settlCurrency);
				break;

			case FixTags.SETTLCURRFXRATE_INT:
				settlCurrFxRate = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.SETTLCURRFXRATECALC_INT:
				settlCurrFxRateCalc = FixUtils.getTagCharValue( value );
				if (!SettlCurrFxRateCalc.isValid(settlCurrFxRateCalc) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + settlCurrFxRateCalc + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.SETTLTYPE_INT:
				settlType = FixUtils.getTagStringValue(value, settlType);
				if (!SettlType.isValid(settlType) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + settlType + ") for tag").getBytes(), id, FixUtils.getMsgType(msgType) );
				break;

			case FixTags.SETTLDATE_INT:
				settlDate = FixUtils.getTagStringValue(value, settlDate);
				break;

			case FixTags.SETTLDELIVERYTYPE_INT:
				settlInstructionsData.getAll(FixTags.SETTLDELIVERYTYPE_INT, value );
				break;

			case FixTags.COMMISSION_INT:
				commissionData.getAll(FixTags.COMMISSION_INT, value );
				break;

			case FixTags.SHAREDCOMMISSION_INT:
				sharedCommission = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.NOSTIPULATIONS_INT:
				stipulations.noStipulations = FixUtils.getTagIntValue( value );
				stipulations.getAll(stipulations.noStipulations, value );
				break;

			case FixTags.NOMISCFEES_INT:
				miscFeesGrp.noMiscFees = FixUtils.getTagIntValue( value );
				miscFeesGrp.getAll(miscFeesGrp.noMiscFees, value );
				break;

			// for a message always get the checksum
			case FixTags.CHECKSUM_INT:
				checkSum = FixUtils.getTagIntValue( value );

				id = checkRequiredTags();
				if (id > 0) throw new FixSessionException(SessionRejectReason.REQUIRED_TAG_MISSING, "Required tag missing".getBytes(), id, FixUtils.getMsgType(msgType) );

				return;

			default:
				throw new FixSessionException(SessionRejectReason.UNDEFINED_TAG, "Unknown tag".getBytes(), id, FixUtils.getMsgType(msgType) );

			}

			lastTagPosition = buf.position();

		}

		buf.position(startTagPosition);

	}

	private int checkRequiredTags() {
		int tag = -1;

		if (! FixUtils.isSet(senderCompID) ) return FixTags.SENDERCOMPID_INT;
		if (! FixUtils.isSet(targetCompID) ) return FixTags.TARGETCOMPID_INT;
		if (! FixUtils.isSet(msgSeqNum) ) return FixTags.MSGSEQNUM_INT;
		if (! FixUtils.isSet(sendingTime) ) return FixTags.SENDINGTIME_INT;
		if (! FixUtils.isSet(confirmID) ) return FixTags.CONFIRMID_INT;
		if (! FixUtils.isSet(confirmTransType) ) return FixTags.CONFIRMTRANSTYPE_INT;
		if (! FixUtils.isSet(confirmType) ) return FixTags.CONFIRMTYPE_INT;
		if (! FixUtils.isSet(confirmStatus) ) return FixTags.CONFIRMSTATUS_INT;
		if (! FixUtils.isSet(transactTime) ) return FixTags.TRANSACTTIME_INT;
		if (! FixUtils.isSet(tradeDate) ) return FixTags.TRADEDATE_INT;
		if (! FixUtils.isSet(allocQty) ) return FixTags.ALLOCQTY_INT;
		if (! FixUtils.isSet(side) ) return FixTags.SIDE_INT;
		if (! FixUtils.isSet(allocAccount) ) return FixTags.ALLOCACCOUNT_INT;
		if (! FixUtils.isSet(avgPx) ) return FixTags.AVGPX_INT;
		if (! FixUtils.isSet(grossTradeAmt) ) return FixTags.GROSSTRADEAMT_INT;
		if (! FixUtils.isSet(netMoney) ) return FixTags.NETMONEY_INT;
		if (! instrument.isSet() ) return FixTags.SYMBOL_INT;
		if (! cpctyConfGrp.isSet() ) return FixTags.NOCAPACITIES_INT;
		if (! FixUtils.isSet(checkSum) ) return FixTags.CHECKSUM_INT;
		return tag;

	}
	@Override
	public void encode( ByteBuffer out )
	{
		// Encode message. Set msgSeqNum and sendingTime and optional resend flags, before encoding. 

		int msgStart = out.position();

		out.put( BEGINSTRING_VALUE_WITH_TAG );

		int msgLengthValueStart = out.position() + 2 /* 9= */;

		// placeholder
		FixUtils.putFixTag(out, FixTags.BODYLENGTH_INT, FixConstants.MAX_MESSAGE_SIZE );

		int msgTypeStart = out.position();

		FixUtils.putFixTag( out, FixTags.MSGTYPE_INT, MsgTypes.CONFIRMATION);

		// encode all fields including the header

		if (FixUtils.isSet(applVerID)) FixUtils.putFixTag( out, FixTags.APPLVERID_INT, applVerID, 0, Utils.lastIndexTrim(applVerID, (byte)0) );
		if (FixUtils.isSet(cstmApplVerID)) FixUtils.putFixTag( out, FixTags.CSTMAPPLVERID_INT, cstmApplVerID, 0, Utils.lastIndexTrim(cstmApplVerID, (byte)0) );
		if (FixUtils.isSet(applExtID)) FixUtils.putFixTag( out, FixTags.APPLEXTID_INT, applExtID);
		FixUtils.putFixTag( out, FixTags.SENDERCOMPID_INT, senderCompID, 0, Utils.lastIndexTrim(senderCompID, (byte)0) );
		FixUtils.putFixTag( out, FixTags.TARGETCOMPID_INT, targetCompID, 0, Utils.lastIndexTrim(targetCompID, (byte)0) );
		if (FixUtils.isSet(onBehalfOfCompID)) FixUtils.putFixTag( out, FixTags.ONBEHALFOFCOMPID_INT, onBehalfOfCompID, 0, Utils.lastIndexTrim(onBehalfOfCompID, (byte)0) );
		if (FixUtils.isSet(deliverToCompID)) FixUtils.putFixTag( out, FixTags.DELIVERTOCOMPID_INT, deliverToCompID, 0, Utils.lastIndexTrim(deliverToCompID, (byte)0) );
		if (FixUtils.isSet(secureDataLen)) FixUtils.putFixTag( out, FixTags.SECUREDATALEN_INT, secureDataLen);
		if (FixUtils.isSet(secureData)) FixUtils.putFixTag( out, FixTags.SECUREDATA_INT, secureData, 0, Utils.lastIndexTrim(secureData, (byte)0) );
		FixUtils.putFixTag( out, FixTags.MSGSEQNUM_INT, msgSeqNum);
		if (FixUtils.isSet(senderSubID)) FixUtils.putFixTag( out, FixTags.SENDERSUBID_INT, senderSubID, 0, Utils.lastIndexTrim(senderSubID, (byte)0) );
		if (FixUtils.isSet(senderLocationID)) FixUtils.putFixTag( out, FixTags.SENDERLOCATIONID_INT, senderLocationID, 0, Utils.lastIndexTrim(senderLocationID, (byte)0) );
		if (FixUtils.isSet(targetSubID)) FixUtils.putFixTag( out, FixTags.TARGETSUBID_INT, targetSubID, 0, Utils.lastIndexTrim(targetSubID, (byte)0) );
		if (FixUtils.isSet(targetLocationID)) FixUtils.putFixTag( out, FixTags.TARGETLOCATIONID_INT, targetLocationID, 0, Utils.lastIndexTrim(targetLocationID, (byte)0) );
		if (FixUtils.isSet(onBehalfOfSubID)) FixUtils.putFixTag( out, FixTags.ONBEHALFOFSUBID_INT, onBehalfOfSubID, 0, Utils.lastIndexTrim(onBehalfOfSubID, (byte)0) );
		if (FixUtils.isSet(onBehalfOfLocationID)) FixUtils.putFixTag( out, FixTags.ONBEHALFOFLOCATIONID_INT, onBehalfOfLocationID, 0, Utils.lastIndexTrim(onBehalfOfLocationID, (byte)0) );
		if (FixUtils.isSet(deliverToSubID)) FixUtils.putFixTag( out, FixTags.DELIVERTOSUBID_INT, deliverToSubID, 0, Utils.lastIndexTrim(deliverToSubID, (byte)0) );
		if (FixUtils.isSet(deliverToLocationID)) FixUtils.putFixTag( out, FixTags.DELIVERTOLOCATIONID_INT, deliverToLocationID, 0, Utils.lastIndexTrim(deliverToLocationID, (byte)0) );
		if (FixUtils.isSet(possDupFlag)) FixUtils.putFixTag( out, FixTags.POSSDUPFLAG_INT, possDupFlag?(byte)'Y':(byte)'N' );
		if (FixUtils.isSet(possResend)) FixUtils.putFixTag( out, FixTags.POSSRESEND_INT, possResend?(byte)'Y':(byte)'N' );
		FixUtils.putFixTag( out, FixTags.SENDINGTIME_INT, sendingTime);
		if (FixUtils.isSet(origSendingTime)) FixUtils.putFixTag( out, FixTags.ORIGSENDINGTIME_INT, origSendingTime);
		if (FixUtils.isSet(xmlDataLen)) FixUtils.putFixTag( out, FixTags.XMLDATALEN_INT, xmlDataLen);
		if (FixUtils.isSet(xmlData)) FixUtils.putFixTag( out, FixTags.XMLDATA_INT, xmlData, 0, Utils.lastIndexTrim(xmlData, (byte)0) );
		if (FixUtils.isSet(messageEncoding)) FixUtils.putFixTag( out, FixTags.MESSAGEENCODING_INT, messageEncoding, 0, Utils.lastIndexTrim(messageEncoding, (byte)0) );
		if (FixUtils.isSet(lastMsgSeqNumProcessed)) FixUtils.putFixTag( out, FixTags.LASTMSGSEQNUMPROCESSED_INT, lastMsgSeqNumProcessed);
		if ( FixUtils.isSet(hopGrp.noHops) )hopGrp.encode( out );

		FixUtils.putFixTag( out, FixTags.CONFIRMID_INT, confirmID, 0, Utils.lastIndexTrim(confirmID, (byte)0) );
		if (FixUtils.isSet(confirmRefID)) FixUtils.putFixTag( out, FixTags.CONFIRMREFID_INT, confirmRefID, 0, Utils.lastIndexTrim(confirmRefID, (byte)0) );
		if (FixUtils.isSet(confirmReqID)) FixUtils.putFixTag( out, FixTags.CONFIRMREQID_INT, confirmReqID, 0, Utils.lastIndexTrim(confirmReqID, (byte)0) );
		FixUtils.putFixTag( out, FixTags.CONFIRMTRANSTYPE_INT, confirmTransType);
		FixUtils.putFixTag( out, FixTags.CONFIRMTYPE_INT, confirmType);
		if (FixUtils.isSet(copyMsgIndicator)) FixUtils.putFixTag( out, FixTags.COPYMSGINDICATOR_INT, copyMsgIndicator?(byte)'Y':(byte)'N' );
		if (FixUtils.isSet(legalConfirm)) FixUtils.putFixTag( out, FixTags.LEGALCONFIRM_INT, legalConfirm?(byte)'Y':(byte)'N' );
		FixUtils.putFixTag( out, FixTags.CONFIRMSTATUS_INT, confirmStatus);
		if (FixUtils.isSet(parties.noPartyIDs)) parties.encode( out );
		if (FixUtils.isSet(ordAllocGrp.noOrders)) ordAllocGrp.encode( out );
		if (FixUtils.isSet(allocID)) FixUtils.putFixTag( out, FixTags.ALLOCID_INT, allocID, 0, Utils.lastIndexTrim(allocID, (byte)0) );
		if (FixUtils.isSet(secondaryAllocID)) FixUtils.putFixTag( out, FixTags.SECONDARYALLOCID_INT, secondaryAllocID, 0, Utils.lastIndexTrim(secondaryAllocID, (byte)0) );
		if (FixUtils.isSet(individualAllocID)) FixUtils.putFixTag( out, FixTags.INDIVIDUALALLOCID_INT, individualAllocID, 0, Utils.lastIndexTrim(individualAllocID, (byte)0) );
		FixUtils.putFixTag( out, FixTags.TRANSACTTIME_INT, transactTime);
		FixUtils.putFixTag( out, FixTags.TRADEDATE_INT, tradeDate);
		if (FixUtils.isSet(trdRegTimestamps.noTrdRegTimestamps)) trdRegTimestamps.encode( out );
		if (FixUtils.isSet(instrument.symbol)) instrument.encode( out );
		if (FixUtils.isSet(instrumentExtension.deliveryForm)) instrumentExtension.encode( out );
		if (FixUtils.isSet(financingDetails.agreementDesc)) financingDetails.encode( out );
		if (FixUtils.isSet(undInstrmtGrp.noUnderlyings)) undInstrmtGrp.encode( out );
		if (FixUtils.isSet(instrmtLegGrp.noLegs)) instrmtLegGrp.encode( out );
		if (FixUtils.isSet(yieldData.yieldType)) yieldData.encode( out );
		FixUtils.putFixFloatTag( out, FixTags.ALLOCQTY_INT, allocQty);
		if (FixUtils.isSet(qtyType)) FixUtils.putFixTag( out, FixTags.QTYTYPE_INT, qtyType);
		FixUtils.putFixTag( out, FixTags.SIDE_INT, side );
		if (FixUtils.isSet(currency)) FixUtils.putFixTag( out, FixTags.CURRENCY_INT, currency, 0, Utils.lastIndexTrim(currency, (byte)0) );
		if (FixUtils.isSet(lastMkt)) FixUtils.putFixTag( out, FixTags.LASTMKT_INT, lastMkt, 0, Utils.lastIndexTrim(lastMkt, (byte)0) );
		if (FixUtils.isSet(cpctyConfGrp.noCapacities)) cpctyConfGrp.encode( out );
		FixUtils.putFixTag( out, FixTags.ALLOCACCOUNT_INT, allocAccount, 0, Utils.lastIndexTrim(allocAccount, (byte)0) );
		if (FixUtils.isSet(allocAcctIDSource)) FixUtils.putFixTag( out, FixTags.ALLOCACCTIDSOURCE_INT, allocAcctIDSource);
		if (FixUtils.isSet(allocAccountType)) FixUtils.putFixTag( out, FixTags.ALLOCACCOUNTTYPE_INT, allocAccountType);
		FixUtils.putFixFloatTag( out, FixTags.AVGPX_INT, avgPx);
		if (FixUtils.isSet(avgPxPrecision)) FixUtils.putFixTag( out, FixTags.AVGPXPRECISION_INT, avgPxPrecision);
		if (FixUtils.isSet(priceType)) FixUtils.putFixTag( out, FixTags.PRICETYPE_INT, priceType);
		if (FixUtils.isSet(avgParPx)) FixUtils.putFixFloatTag( out, FixTags.AVGPARPX_INT, avgParPx);
		if (FixUtils.isSet(spreadOrBenchmarkCurveData.spread)) spreadOrBenchmarkCurveData.encode( out );
		if (FixUtils.isSet(reportedPx)) FixUtils.putFixFloatTag( out, FixTags.REPORTEDPX_INT, reportedPx);
		if (FixUtils.isSet(text)) FixUtils.putFixTag( out, FixTags.TEXT_INT, text, 0, Utils.lastIndexTrim(text, (byte)0) );
		if (FixUtils.isSet(encodedTextLen)) FixUtils.putFixTag( out, FixTags.ENCODEDTEXTLEN_INT, encodedTextLen);
		if (FixUtils.isSet(encodedText)) FixUtils.putFixTag( out, FixTags.ENCODEDTEXT_INT, encodedText, 0, Utils.lastIndexTrim(encodedText, (byte)0) );
		if (FixUtils.isSet(processCode)) FixUtils.putFixTag( out, FixTags.PROCESSCODE_INT, processCode );
		FixUtils.putFixTag( out, FixTags.GROSSTRADEAMT_INT, grossTradeAmt);
		if (FixUtils.isSet(numDaysInterest)) FixUtils.putFixTag( out, FixTags.NUMDAYSINTEREST_INT, numDaysInterest);
		if (FixUtils.isSet(exDate)) FixUtils.putFixTag( out, FixTags.EXDATE_INT, exDate);
		if (FixUtils.isSet(accruedInterestRate)) FixUtils.putFixFloatTag( out, FixTags.ACCRUEDINTERESTRATE_INT, accruedInterestRate);
		if (FixUtils.isSet(accruedInterestAmt)) FixUtils.putFixTag( out, FixTags.ACCRUEDINTERESTAMT_INT, accruedInterestAmt);
		if (FixUtils.isSet(interestAtMaturity)) FixUtils.putFixTag( out, FixTags.INTERESTATMATURITY_INT, interestAtMaturity);
		if (FixUtils.isSet(endAccruedInterestAmt)) FixUtils.putFixTag( out, FixTags.ENDACCRUEDINTERESTAMT_INT, endAccruedInterestAmt);
		if (FixUtils.isSet(startCash)) FixUtils.putFixTag( out, FixTags.STARTCASH_INT, startCash);
		if (FixUtils.isSet(endCash)) FixUtils.putFixTag( out, FixTags.ENDCASH_INT, endCash);
		if (FixUtils.isSet(concession)) FixUtils.putFixTag( out, FixTags.CONCESSION_INT, concession);
		if (FixUtils.isSet(totalTakedown)) FixUtils.putFixTag( out, FixTags.TOTALTAKEDOWN_INT, totalTakedown);
		FixUtils.putFixTag( out, FixTags.NETMONEY_INT, netMoney);
		if (FixUtils.isSet(maturityNetMoney)) FixUtils.putFixTag( out, FixTags.MATURITYNETMONEY_INT, maturityNetMoney);
		if (FixUtils.isSet(settlCurrAmt)) FixUtils.putFixTag( out, FixTags.SETTLCURRAMT_INT, settlCurrAmt);
		if (FixUtils.isSet(settlCurrency)) FixUtils.putFixTag( out, FixTags.SETTLCURRENCY_INT, settlCurrency, 0, Utils.lastIndexTrim(settlCurrency, (byte)0) );
		if (FixUtils.isSet(settlCurrFxRate)) FixUtils.putFixFloatTag( out, FixTags.SETTLCURRFXRATE_INT, settlCurrFxRate);
		if (FixUtils.isSet(settlCurrFxRateCalc)) FixUtils.putFixTag( out, FixTags.SETTLCURRFXRATECALC_INT, settlCurrFxRateCalc );
		if (FixUtils.isSet(settlType)) FixUtils.putFixTag( out, FixTags.SETTLTYPE_INT, settlType, 0, Utils.lastIndexTrim(settlType, (byte)0) );
		if (FixUtils.isSet(settlDate)) FixUtils.putFixTag( out, FixTags.SETTLDATE_INT, settlDate);
		if (FixUtils.isSet(settlInstructionsData.settlDeliveryType)) settlInstructionsData.encode( out );
		if (FixUtils.isSet(commissionData.commission)) commissionData.encode( out );
		if (FixUtils.isSet(sharedCommission)) FixUtils.putFixTag( out, FixTags.SHAREDCOMMISSION_INT, sharedCommission);
		if (FixUtils.isSet(stipulations.noStipulations)) stipulations.encode( out );
		if (FixUtils.isSet(miscFeesGrp.noMiscFees)) miscFeesGrp.encode( out );
		// the checksum at the end

		int checkSumStart = out.position();
		out.position( msgLengthValueStart );
		bodyLength = checkSumStart - msgTypeStart;
		Utils.longToNumeric( out, bodyLength, Utils.digits(FixConstants.MAX_MESSAGE_SIZE) );

		checkSum = FixUtils.computeChecksum( out, msgStart, checkSumStart );
		out.position( checkSumStart );
		FixUtils.putFixTag( out, FixTags.CHECKSUM_INT, checkSum );

		out.flip();

	}
	@Override		
	public void printBuffer(ByteBuffer out) {

		out.put(buf);

		out.flip();

	}

	/**
	 * If you use toString for any other purpose than administrative printout.
	 * You will end up in nifelheim!
	**/
	@Override
	public String toString() {
		char sep = '\n';
		if (Boolean.getBoolean("fix.useOneLiner")) sep = SOH;

		String s = "BeginString(8)=" + new String(BEGINSTRING_VALUE) + sep;
		s += "BodyLength(9)=" + bodyLength + sep;
		s += "MsgType(35)=" + new String(MsgTypes.CONFIRMATION) + sep;

		try {
			// print all fields including the header

			if (FixUtils.isSet(applVerID)) s += "ApplVerID(1128)=" + new String(applVerID) + sep;
			if (FixUtils.isSet(cstmApplVerID)) s += "CstmApplVerID(1129)=" + new String(cstmApplVerID) + sep;
			if (FixUtils.isSet(applExtID)) s += "ApplExtID(1156)=" + String.valueOf(applExtID) + sep;
			 s += "SenderCompID(49)=" + new String(senderCompID) + sep;
			 s += "TargetCompID(56)=" + new String(targetCompID) + sep;
			if (FixUtils.isSet(onBehalfOfCompID)) s += "OnBehalfOfCompID(115)=" + new String(onBehalfOfCompID) + sep;
			if (FixUtils.isSet(deliverToCompID)) s += "DeliverToCompID(128)=" + new String(deliverToCompID) + sep;
			if (FixUtils.isSet(secureDataLen)) s += "SecureDataLen(90)=" + String.valueOf(secureDataLen) + sep;
			if (FixUtils.isSet(secureData)) s += "SecureData(91)=" + new String(secureData) + sep;
			 s += "MsgSeqNum(34)=" + String.valueOf(msgSeqNum) + sep;
			if (FixUtils.isSet(senderSubID)) s += "SenderSubID(50)=" + new String(senderSubID) + sep;
			if (FixUtils.isSet(senderLocationID)) s += "SenderLocationID(142)=" + new String(senderLocationID) + sep;
			if (FixUtils.isSet(targetSubID)) s += "TargetSubID(57)=" + new String(targetSubID) + sep;
			if (FixUtils.isSet(targetLocationID)) s += "TargetLocationID(143)=" + new String(targetLocationID) + sep;
			if (FixUtils.isSet(onBehalfOfSubID)) s += "OnBehalfOfSubID(116)=" + new String(onBehalfOfSubID) + sep;
			if (FixUtils.isSet(onBehalfOfLocationID)) s += "OnBehalfOfLocationID(144)=" + new String(onBehalfOfLocationID) + sep;
			if (FixUtils.isSet(deliverToSubID)) s += "DeliverToSubID(129)=" + new String(deliverToSubID) + sep;
			if (FixUtils.isSet(deliverToLocationID)) s += "DeliverToLocationID(145)=" + new String(deliverToLocationID) + sep;
			if (FixUtils.isSet(possDupFlag)) s += "PossDupFlag(43)=" + String.valueOf(possDupFlag) + sep;
			if (FixUtils.isSet(possResend)) s += "PossResend(97)=" + String.valueOf(possResend) + sep;
			 s += "SendingTime(52)=" + new String(sendingTime) + sep;
			if (FixUtils.isSet(origSendingTime)) s += "OrigSendingTime(122)=" + new String(origSendingTime) + sep;
			if (FixUtils.isSet(xmlDataLen)) s += "XmlDataLen(212)=" + String.valueOf(xmlDataLen) + sep;
			if (FixUtils.isSet(xmlData)) s += "XmlData(213)=" + new String(xmlData) + sep;
			if (FixUtils.isSet(messageEncoding)) s += "MessageEncoding(347)=" + new String(messageEncoding) + sep;
			if (FixUtils.isSet(lastMsgSeqNumProcessed)) s += "LastMsgSeqNumProcessed(369)=" + String.valueOf(lastMsgSeqNumProcessed) + sep;
			if (FixUtils.isSet(hopGrp.noHops)) s += hopGrp.toString();

			 s += "ConfirmID(664)=" + new String(confirmID) + sep;
			if (FixUtils.isSet(confirmRefID)) s += "ConfirmRefID(772)=" + new String(confirmRefID) + sep;
			if (FixUtils.isSet(confirmReqID)) s += "ConfirmReqID(859)=" + new String(confirmReqID) + sep;
			 s += "ConfirmTransType(666)=" + String.valueOf(confirmTransType) + sep;
			 s += "ConfirmType(773)=" + String.valueOf(confirmType) + sep;
			if (FixUtils.isSet(copyMsgIndicator)) s += "CopyMsgIndicator(797)=" + String.valueOf(copyMsgIndicator) + sep;
			if (FixUtils.isSet(legalConfirm)) s += "LegalConfirm(650)=" + String.valueOf(legalConfirm) + sep;
			 s += "ConfirmStatus(665)=" + String.valueOf(confirmStatus) + sep;
			if (FixUtils.isSet(parties.noPartyIDs)) s += parties.toString();
			if (FixUtils.isSet(ordAllocGrp.noOrders)) s += ordAllocGrp.toString();
			if (FixUtils.isSet(allocID)) s += "AllocID(70)=" + new String(allocID) + sep;
			if (FixUtils.isSet(secondaryAllocID)) s += "SecondaryAllocID(793)=" + new String(secondaryAllocID) + sep;
			if (FixUtils.isSet(individualAllocID)) s += "IndividualAllocID(467)=" + new String(individualAllocID) + sep;
			 s += "TransactTime(60)=" + new String(transactTime) + sep;
			 s += "TradeDate(75)=" + new String(tradeDate) + sep;
			if (FixUtils.isSet(trdRegTimestamps.noTrdRegTimestamps)) s += trdRegTimestamps.toString();
			if (FixUtils.isSet(instrument.symbol)) s += instrument.toString();
			if (FixUtils.isSet(instrumentExtension.deliveryForm)) s += instrumentExtension.toString();
			if (FixUtils.isSet(financingDetails.agreementDesc)) s += financingDetails.toString();
			if (FixUtils.isSet(undInstrmtGrp.noUnderlyings)) s += undInstrmtGrp.toString();
			if (FixUtils.isSet(instrmtLegGrp.noLegs)) s += instrmtLegGrp.toString();
			if (FixUtils.isSet(yieldData.yieldType)) s += yieldData.toString();
			 s += "AllocQty(80)=" + String.valueOf(allocQty) + sep;
			if (FixUtils.isSet(qtyType)) s += "QtyType(854)=" + String.valueOf(qtyType) + sep;
			 s += "Side(54)=" + String.valueOf(side) + sep;
			if (FixUtils.isSet(currency)) s += "Currency(15)=" + new String(currency) + sep;
			if (FixUtils.isSet(lastMkt)) s += "LastMkt(30)=" + new String(lastMkt) + sep;
			if (FixUtils.isSet(cpctyConfGrp.noCapacities)) s += cpctyConfGrp.toString();
			 s += "AllocAccount(79)=" + new String(allocAccount) + sep;
			if (FixUtils.isSet(allocAcctIDSource)) s += "AllocAcctIDSource(661)=" + String.valueOf(allocAcctIDSource) + sep;
			if (FixUtils.isSet(allocAccountType)) s += "AllocAccountType(798)=" + String.valueOf(allocAccountType) + sep;
			 s += "AvgPx(6)=" + String.valueOf(avgPx) + sep;
			if (FixUtils.isSet(avgPxPrecision)) s += "AvgPxPrecision(74)=" + String.valueOf(avgPxPrecision) + sep;
			if (FixUtils.isSet(priceType)) s += "PriceType(423)=" + String.valueOf(priceType) + sep;
			if (FixUtils.isSet(avgParPx)) s += "AvgParPx(860)=" + String.valueOf(avgParPx) + sep;
			if (FixUtils.isSet(spreadOrBenchmarkCurveData.spread)) s += spreadOrBenchmarkCurveData.toString();
			if (FixUtils.isSet(reportedPx)) s += "ReportedPx(861)=" + String.valueOf(reportedPx) + sep;
			if (FixUtils.isSet(text)) s += "Text(58)=" + new String(text) + sep;
			if (FixUtils.isSet(encodedTextLen)) s += "EncodedTextLen(354)=" + String.valueOf(encodedTextLen) + sep;
			if (FixUtils.isSet(encodedText)) s += "EncodedText(355)=" + new String(encodedText) + sep;
			if (FixUtils.isSet(processCode)) s += "ProcessCode(81)=" + String.valueOf(processCode) + sep;
			 s += "GrossTradeAmt(381)=" + String.valueOf(grossTradeAmt) + sep;
			if (FixUtils.isSet(numDaysInterest)) s += "NumDaysInterest(157)=" + String.valueOf(numDaysInterest) + sep;
			if (FixUtils.isSet(exDate)) s += "ExDate(230)=" + new String(exDate) + sep;
			if (FixUtils.isSet(accruedInterestRate)) s += "AccruedInterestRate(158)=" + String.valueOf(accruedInterestRate) + sep;
			if (FixUtils.isSet(accruedInterestAmt)) s += "AccruedInterestAmt(159)=" + String.valueOf(accruedInterestAmt) + sep;
			if (FixUtils.isSet(interestAtMaturity)) s += "InterestAtMaturity(738)=" + String.valueOf(interestAtMaturity) + sep;
			if (FixUtils.isSet(endAccruedInterestAmt)) s += "EndAccruedInterestAmt(920)=" + String.valueOf(endAccruedInterestAmt) + sep;
			if (FixUtils.isSet(startCash)) s += "StartCash(921)=" + String.valueOf(startCash) + sep;
			if (FixUtils.isSet(endCash)) s += "EndCash(922)=" + String.valueOf(endCash) + sep;
			if (FixUtils.isSet(concession)) s += "Concession(238)=" + String.valueOf(concession) + sep;
			if (FixUtils.isSet(totalTakedown)) s += "TotalTakedown(237)=" + String.valueOf(totalTakedown) + sep;
			 s += "NetMoney(118)=" + String.valueOf(netMoney) + sep;
			if (FixUtils.isSet(maturityNetMoney)) s += "MaturityNetMoney(890)=" + String.valueOf(maturityNetMoney) + sep;
			if (FixUtils.isSet(settlCurrAmt)) s += "SettlCurrAmt(119)=" + String.valueOf(settlCurrAmt) + sep;
			if (FixUtils.isSet(settlCurrency)) s += "SettlCurrency(120)=" + new String(settlCurrency) + sep;
			if (FixUtils.isSet(settlCurrFxRate)) s += "SettlCurrFxRate(155)=" + String.valueOf(settlCurrFxRate) + sep;
			if (FixUtils.isSet(settlCurrFxRateCalc)) s += "SettlCurrFxRateCalc(156)=" + String.valueOf(settlCurrFxRateCalc) + sep;
			if (FixUtils.isSet(settlType)) s += "SettlType(63)=" + new String(settlType) + sep;
			if (FixUtils.isSet(settlDate)) s += "SettlDate(64)=" + new String(settlDate) + sep;
			if (FixUtils.isSet(settlInstructionsData.settlDeliveryType)) s += settlInstructionsData.toString();
			if (FixUtils.isSet(commissionData.commission)) s += commissionData.toString();
			if (FixUtils.isSet(sharedCommission)) s += "SharedCommission(858)=" + String.valueOf(sharedCommission) + sep;
			if (FixUtils.isSet(stipulations.noStipulations)) s += stipulations.toString();
			if (FixUtils.isSet(miscFeesGrp.noMiscFees)) s += miscFeesGrp.toString();

			s += "checkSum(10)=" + String.valueOf(checkSum) + sep;

		} catch(Exception e) {  };

		return s;
	}

	@Override
	public boolean equals(Object o) {
		if (! ( o instanceof FixConfirmation)) return false;

			FixConfirmation msg = (FixConfirmation) o;

		if ( ! super.equals(msg) ) return false;

		if (!Utils.equals( confirmID, msg.confirmID)) return false;

		if (!Utils.equals( confirmRefID, msg.confirmRefID)) return false;

		if (!Utils.equals( confirmReqID, msg.confirmReqID)) return false;

		if (!( confirmTransType==msg.confirmTransType)) return false;

		if (!( confirmType==msg.confirmType)) return false;

		if (!( copyMsgIndicator==msg.copyMsgIndicator)) return false;

		if (!( legalConfirm==msg.legalConfirm)) return false;

		if (!( confirmStatus==msg.confirmStatus)) return false;

		if (!parties.equals(msg.parties)) return false;

		if (!ordAllocGrp.equals(msg.ordAllocGrp)) return false;

		if (!Utils.equals( allocID, msg.allocID)) return false;

		if (!Utils.equals( secondaryAllocID, msg.secondaryAllocID)) return false;

		if (!Utils.equals( individualAllocID, msg.individualAllocID)) return false;

		if (!trdRegTimestamps.equals(msg.trdRegTimestamps)) return false;

		if (!instrument.equals(msg.instrument)) return false;

		if (!instrumentExtension.equals(msg.instrumentExtension)) return false;

		if (!financingDetails.equals(msg.financingDetails)) return false;

		if (!undInstrmtGrp.equals(msg.undInstrmtGrp)) return false;

		if (!instrmtLegGrp.equals(msg.instrmtLegGrp)) return false;

		if (!yieldData.equals(msg.yieldData)) return false;

		if (!( allocQty==msg.allocQty)) return false;

		if (!( qtyType==msg.qtyType)) return false;

		if (!( side==msg.side)) return false;

		if (!Utils.equals( currency, msg.currency)) return false;

		if (!Utils.equals( lastMkt, msg.lastMkt)) return false;

		if (!cpctyConfGrp.equals(msg.cpctyConfGrp)) return false;

		if (!Utils.equals( allocAccount, msg.allocAccount)) return false;

		if (!( allocAcctIDSource==msg.allocAcctIDSource)) return false;

		if (!( allocAccountType==msg.allocAccountType)) return false;

		if (!( avgPx==msg.avgPx)) return false;

		if (!( avgPxPrecision==msg.avgPxPrecision)) return false;

		if (!( priceType==msg.priceType)) return false;

		if (!( avgParPx==msg.avgParPx)) return false;

		if (!spreadOrBenchmarkCurveData.equals(msg.spreadOrBenchmarkCurveData)) return false;

		if (!( reportedPx==msg.reportedPx)) return false;

		if (!Utils.equals( text, msg.text)) return false;

		if (!( encodedTextLen==msg.encodedTextLen)) return false;

		if (!Utils.equals( encodedText, msg.encodedText)) return false;

		if (!( processCode==msg.processCode)) return false;

		if (!( grossTradeAmt==msg.grossTradeAmt)) return false;

		if (!( numDaysInterest==msg.numDaysInterest)) return false;

		if (!( accruedInterestRate==msg.accruedInterestRate)) return false;

		if (!( accruedInterestAmt==msg.accruedInterestAmt)) return false;

		if (!( interestAtMaturity==msg.interestAtMaturity)) return false;

		if (!( endAccruedInterestAmt==msg.endAccruedInterestAmt)) return false;

		if (!( startCash==msg.startCash)) return false;

		if (!( endCash==msg.endCash)) return false;

		if (!( concession==msg.concession)) return false;

		if (!( totalTakedown==msg.totalTakedown)) return false;

		if (!( netMoney==msg.netMoney)) return false;

		if (!( maturityNetMoney==msg.maturityNetMoney)) return false;

		if (!( settlCurrAmt==msg.settlCurrAmt)) return false;

		if (!Utils.equals( settlCurrency, msg.settlCurrency)) return false;

		if (!( settlCurrFxRate==msg.settlCurrFxRate)) return false;

		if (!( settlCurrFxRateCalc==msg.settlCurrFxRateCalc)) return false;

		if (!Utils.equals( settlType, msg.settlType)) return false;

		if (!settlInstructionsData.equals(msg.settlInstructionsData)) return false;

		if (!commissionData.equals(msg.commissionData)) return false;

		if (!( sharedCommission==msg.sharedCommission)) return false;

		if (!stipulations.equals(msg.stipulations)) return false;

		if (!miscFeesGrp.equals(msg.miscFeesGrp)) return false;

		return true;
	}
}
