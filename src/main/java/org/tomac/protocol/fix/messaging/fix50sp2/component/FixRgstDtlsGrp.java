package org.tomac.protocol.fix.messaging.fix50sp2.component;

// DO NOT EDIT!!!
// This file is generated by FixMessageGenerator.
// If you need additional functionality, put it in a helper class
// that does not live in this folder!!!  Any java file in this folder 
// will be deleted upon the next run of the FixMessageGenerator!

import java.nio.ByteBuffer;

import org.tomac.protocol.fix.FixUtils;
import org.tomac.protocol.fix.FixSessionException;
import org.tomac.protocol.fix.FixGarbledException;
import org.tomac.utils.Utils;
import org.tomac.protocol.fix.FixConstants;


import org.tomac.protocol.fix.messaging.fix50sp2.FixMessageInfo.*;
import org.tomac.protocol.fix.messaging.fix50sp2.FixTags;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixNestedParties;

public class FixRgstDtlsGrp
{

	public int noRegistDtls;
	public RgstDtlsGrp[] group;

	public void getAll(int noRegistDtls, ByteBuffer buf) throws FixSessionException {
		this.noRegistDtls = noRegistDtls;

		if (noRegistDtls < 1) throw new FixSessionException("asdasd");
		// this will leak memory if we grow the group
		if (group.length < noRegistDtls) 
			group = new RgstDtlsGrp[noRegistDtls];

		for ( int i = 0; i < noRegistDtls; i++ ) 
			group[i].getAllGroup(buf);
	}

	public void clear() {
		for (int i = 0; i<noRegistDtls; i++)
			group[i].clear();
	}
	public void encode(ByteBuffer out) {
		for (int i = 0; i<noRegistDtls; i++)
			group[i].encode(out);
	}
	public boolean isSet() {
		for (int i = 0; i<noRegistDtls; i++)
			if (group[i].isSet()) return true;
		return false;
	}

	@Override
	public String toString() {
		String s = "";
		for (int i = 0; i<noRegistDtls; i++)
			s += group[i].toString();
		return s;
	}

public class RgstDtlsGrp implements FixComponent
{

	public byte[] registDtls;
	public byte[] registEmail;
	public byte[] mailingDtls;
	public byte[] mailingInst;
	public FixNestedParties nestedParties;
	public long ownerType = 0;
	public byte[] dateOfBirth;
	public byte[] investorCountryOfResidence;

	public RgstDtlsGrp() {
		super();

		registDtls = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		registEmail = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		mailingDtls = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		mailingInst = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		nestedParties = new FixNestedParties();
		dateOfBirth = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		investorCountryOfResidence = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		this.clear();

	}

	@Override
	public void clear()
	{

		// clear out all the fields that aren't msgType

		Utils.fill( registDtls, (byte)0 );
		Utils.fill( registEmail, (byte)0 );
		Utils.fill( mailingDtls, (byte)0 );
		Utils.fill( mailingInst, (byte)0 );
		ownerType = Long.MAX_VALUE;		
		Utils.fill( dateOfBirth, (byte)0 );
		Utils.fill( investorCountryOfResidence, (byte)0 );
		nestedParties.clear();
	}

	public void getAllGroup(ByteBuffer buf) throws FixSessionException
	{

		int startTagPosition = buf.position();

		int id = FixUtils.getTagId( buf );
		int lastTagPosition = buf.position();
			ByteBuffer value;

			value = buf;

			if(id == FixTags.REGISTDTLS_INT) {
				registDtls = FixUtils.getTagStringValue(value, registDtls);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.REGISTEMAIL_INT) {
				registEmail = FixUtils.getTagStringValue(value, registEmail);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.MAILINGDTLS_INT) {
				mailingDtls = FixUtils.getTagStringValue(value, mailingDtls);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.MAILINGINST_INT) {
				mailingInst = FixUtils.getTagStringValue(value, mailingInst);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.NONESTEDPARTYIDS_INT) {
				nestedParties.getAll(FixTags.NONESTEDPARTYIDS_INT, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.OWNERTYPE_INT) {
				ownerType = FixUtils.getTagIntValue( value );
				if (!OwnerType.isValid(ownerType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + ownerType + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.DATEOFBIRTH_INT) {
				dateOfBirth = FixUtils.getTagStringValue(value, dateOfBirth);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.INVESTORCOUNTRYOFRESIDENCE_INT) {
				investorCountryOfResidence = FixUtils.getTagStringValue(value, investorCountryOfResidence);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			id = checkRequiredTags();
			if (id > 0) throw new FixSessionException(buf, "Required tag missing: " + id );

			buf.position( lastTagPosition );
			return;

	}

	private int checkRequiredTags() {
		int tag = -1;

		return tag;

	}
	@Override
	public boolean isSet()
	{
		if (FixUtils.isSet(registDtls)) return true;
		if (FixUtils.isSet(registEmail)) return true;
		if (FixUtils.isSet(mailingDtls)) return true;
		if (FixUtils.isSet(mailingInst)) return true;
		if (FixUtils.isSet(nestedParties.noNestedPartyIDs)) return true;
		if (FixUtils.isSet(ownerType)) return true;
		if (FixUtils.isSet(dateOfBirth)) return true;
		if (FixUtils.isSet(investorCountryOfResidence)) return true;
		return false;
	}
	@Override
	public void encode( ByteBuffer out )
	{
		if (FixUtils.isSet(registDtls)) FixUtils.putFixTag( out, FixTags.REGISTDTLS_INT, registDtls, 0, Utils.lastIndexTrim(registDtls, (byte)0) );
		if (FixUtils.isSet(registEmail)) FixUtils.putFixTag( out, FixTags.REGISTEMAIL_INT, registEmail, 0, Utils.lastIndexTrim(registEmail, (byte)0) );
		if (FixUtils.isSet(mailingDtls)) FixUtils.putFixTag( out, FixTags.MAILINGDTLS_INT, mailingDtls, 0, Utils.lastIndexTrim(mailingDtls, (byte)0) );
		if (FixUtils.isSet(mailingInst)) FixUtils.putFixTag( out, FixTags.MAILINGINST_INT, mailingInst, 0, Utils.lastIndexTrim(mailingInst, (byte)0) );
		if (FixUtils.isSet(nestedParties.noNestedPartyIDs)) nestedParties.encode( out );
		if (FixUtils.isSet(ownerType)) FixUtils.putFixTag( out, FixTags.OWNERTYPE_INT, ownerType);
		if (FixUtils.isSet(dateOfBirth)) FixUtils.putFixTag( out, FixTags.DATEOFBIRTH_INT, dateOfBirth);
		if (FixUtils.isSet(investorCountryOfResidence)) FixUtils.putFixTag( out, FixTags.INVESTORCOUNTRYOFRESIDENCE_INT, investorCountryOfResidence, 0, Utils.lastIndexTrim(investorCountryOfResidence, (byte)0) );
	}
	/**
	 * If you use toString for any other purpose than administrative printout.
	 * You will end up in nifelheim!
	**/
	@Override
	public String toString() {
		char sep = '\n';
		if (Boolean.getBoolean("fix.useOneLiner")) sep = ( byte )0x01;

		String s = "";

			if (FixUtils.isSet(registDtls)) s += "RegistDtls(509)=" + new String(registDtls) + sep;
			if (FixUtils.isSet(registEmail)) s += "RegistEmail(511)=" + new String(registEmail) + sep;
			if (FixUtils.isSet(mailingDtls)) s += "MailingDtls(474)=" + new String(mailingDtls) + sep;
			if (FixUtils.isSet(mailingInst)) s += "MailingInst(482)=" + new String(mailingInst) + sep;
			if (FixUtils.isSet(nestedParties.noNestedPartyIDs)) s += nestedParties.toString();
			if (FixUtils.isSet(ownerType)) s += "OwnerType(522)=" + String.valueOf(ownerType) + sep;
			if (FixUtils.isSet(dateOfBirth)) s += "DateOfBirth(486)=" + new String(dateOfBirth) + sep;
			if (FixUtils.isSet(investorCountryOfResidence)) s += "InvestorCountryOfResidence(475)=" + new String(investorCountryOfResidence) + sep;
		return s;

	}

	@Override
	public boolean equals(Object o) {
		if (! ( o instanceof RgstDtlsGrp)) return false;

			RgstDtlsGrp msg = (RgstDtlsGrp) o;

		if ( ! super.equals(msg) ) return false;

		if (!Utils.equals( registDtls, msg.registDtls)) return false;

		if (!Utils.equals( registEmail, msg.registEmail)) return false;

		if (!Utils.equals( mailingDtls, msg.mailingDtls)) return false;

		if (!Utils.equals( mailingInst, msg.mailingInst)) return false;

		if (!nestedParties.equals(msg.nestedParties)) return false;

		if (!( ownerType==msg.ownerType)) return false;

		if (!Utils.equals( investorCountryOfResidence, msg.investorCountryOfResidence)) return false;

		return true;
	}
}
}
