package org.tomac.protocol.fix.messaging.fix50sp2.component;

// DO NOT EDIT!!!
// This file is generated by FixMessageGenerator.
// If you need additional functionality, put it in a helper class
// that does not live in this folder!!!  Any java file in this folder 
// will be deleted upon the next run of the FixMessageGenerator!

import java.nio.ByteBuffer;

import org.tomac.protocol.fix.FixUtils;
import org.tomac.protocol.fix.FixSessionException;
import org.tomac.protocol.fix.FixGarbledException;
import org.tomac.utils.Utils;
import org.tomac.protocol.fix.FixConstants;


import org.tomac.protocol.fix.messaging.fix50sp2.FixMessageInfo.SessionRejectReason;
import org.tomac.protocol.fix.messaging.fix50sp2.FixMessageInfo;
import org.tomac.protocol.fix.messaging.fix50sp2.FixTags;

public class FixTargetParties
{

	public int noTargetPartyIDs;
	public TargetParties[] group;

	public void getAll(int noTargetPartyIDs, ByteBuffer buf) throws FixSessionException {
		this.noTargetPartyIDs = noTargetPartyIDs;

		if (noTargetPartyIDs < 1) throw new FixSessionException(SessionRejectReason.INCORRECT_NUMINGROUP_COUNT_FOR_REPEATING_GROUP, ("Incorrect num in group count " + noTargetPartyIDs ).getBytes(), FixTags.NOTARGETPARTYIDS_INT, new byte[0]);
		// this will leak memory if we grow the group
		if (group == null || group.length < noTargetPartyIDs) {
			group = new TargetParties[noTargetPartyIDs];

			for ( int i = 0; i < noTargetPartyIDs; i++ ) group[i] = new TargetParties();
	}

		for ( int i = 0; i < noTargetPartyIDs; i++ ) 
			group[i].getAllGroup(buf);
	}

	public void clear() {
		for (int i = 0; i<noTargetPartyIDs; i++)
			group[i].clear();
	}
	public void encode(ByteBuffer out) {
		for (int i = 0; i<noTargetPartyIDs; i++)
			group[i].encode(out);
	}
	public boolean isSet() {
		for (int i = 0; i<noTargetPartyIDs; i++)
			if (group[i].isSet()) return true;
		return false;
	}

	@Override
	public String toString() {
		String s = "";
		for (int i = 0; i<noTargetPartyIDs; i++)
			s += group[i].toString();
		return s;
	}

public class TargetParties implements FixComponent
{

	public byte[] targetPartyID;
	public byte targetPartyIDSource = (byte)' ';
	public long targetPartyRole = 0;

	public TargetParties() {
		super();

		targetPartyID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		this.clear();

	}

	@Override
	public void clear()
	{

		// clear out all the fields that aren't msgType

		Utils.fill( targetPartyID, (byte)0 );
		targetPartyIDSource = Byte.MAX_VALUE;		
		targetPartyRole = Long.MAX_VALUE;		
	}

	public void getAllGroup(ByteBuffer buf) throws FixSessionException
	{

		int startTagPosition = buf.position();

		int id = FixUtils.getTagId( buf );
		int lastTagPosition = buf.position();
			ByteBuffer value;

			value = buf;

			if(id == FixTags.TARGETPARTYID_INT) {
				targetPartyID = FixUtils.getTagStringValue(value, targetPartyID);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.TARGETPARTYIDSOURCE_INT) {
				targetPartyIDSource = FixUtils.getTagCharValue( value );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.TARGETPARTYROLE_INT) {
				targetPartyRole = FixUtils.getTagIntValue( value );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			id = checkRequiredTags();
				if (id > 0) throw new FixSessionException(SessionRejectReason.REQUIRED_TAG_MISSING, "Required tag missing".getBytes(), id, new byte[0] );

			buf.position( lastTagPosition );
			return;

	}

	private int checkRequiredTags() {
		int tag = -1;

		return tag;

	}
	@Override
	public boolean isSet()
	{
		if (FixUtils.isSet(targetPartyID)) return true;
		if (FixUtils.isSet(targetPartyIDSource)) return true;
		if (FixUtils.isSet(targetPartyRole)) return true;
		return false;
	}
	@Override
	public void encode( ByteBuffer out )
	{
		if (FixUtils.isSet(targetPartyID)) FixUtils.putFixTag( out, FixTags.TARGETPARTYID_INT, targetPartyID, 0, Utils.lastIndexTrim(targetPartyID, (byte)0) );
		if (FixUtils.isSet(targetPartyIDSource)) FixUtils.putFixTag( out, FixTags.TARGETPARTYIDSOURCE_INT, targetPartyIDSource );
		if (FixUtils.isSet(targetPartyRole)) FixUtils.putFixTag( out, FixTags.TARGETPARTYROLE_INT, targetPartyRole);
	}
	/**
	 * If you use toString for any other purpose than administrative printout.
	 * You will end up in nifelheim!
	**/
	@Override
	public String toString() {
		char sep = '\n';
		if (Boolean.getBoolean("fix.useOneLiner")) sep = ( byte )0x01;

		String s = "";

			if (FixUtils.isSet(targetPartyID)) s += "TargetPartyID(1462)=" + new String(targetPartyID) + sep;
			if (FixUtils.isSet(targetPartyIDSource)) s += "TargetPartyIDSource(1463)=" + String.valueOf(targetPartyIDSource) + sep;
			if (FixUtils.isSet(targetPartyRole)) s += "TargetPartyRole(1464)=" + String.valueOf(targetPartyRole) + sep;
		return s;

	}

	@Override
	public boolean equals(Object o) {
		if (! ( o instanceof TargetParties)) return false;

			TargetParties msg = (TargetParties) o;

		if ( ! super.equals(msg) ) return false;

		if (!Utils.equals( targetPartyID, msg.targetPartyID)) return false;

		if (!( targetPartyIDSource==msg.targetPartyIDSource)) return false;

		if (!( targetPartyRole==msg.targetPartyRole)) return false;

		return true;
	}
}
}
