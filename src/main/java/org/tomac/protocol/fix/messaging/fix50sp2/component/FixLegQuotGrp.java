package org.tomac.protocol.fix.messaging.fix50sp2.component;

// DO NOT EDIT!!!
// This file is generated by FixMessageGenerator.
// If you need additional functionality, put it in a helper class
// that does not live in this folder!!!  Any java file in this folder 
// will be deleted upon the next run of the FixMessageGenerator!

import java.nio.ByteBuffer;

import org.tomac.protocol.fix.FixUtils;
import org.tomac.protocol.fix.FixSessionException;
import org.tomac.protocol.fix.FixGarbledException;
import org.tomac.utils.Utils;
import org.tomac.protocol.fix.FixConstants;


import org.tomac.protocol.fix.messaging.fix50sp2.FixMessageInfo.SessionRejectReason;
import org.tomac.protocol.fix.messaging.fix50sp2.FixMessageInfo;
import org.tomac.protocol.fix.messaging.fix50sp2.FixTags;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixInstrumentLeg;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixLegStipulations;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixNestedParties;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixLegBenchmarkCurveData;

public class FixLegQuotGrp
{

	public int noLegs;
	public LegQuotGrp[] group;

	public void getAll(int noLegs, ByteBuffer buf) throws FixSessionException, FixGarbledException {
		this.noLegs = noLegs;

		if (noLegs < 1) throw new FixSessionException(SessionRejectReason.INCORRECT_NUMINGROUP_COUNT_FOR_REPEATING_GROUP, ("Incorrect num in group count " + noLegs ).getBytes(), FixTags.NOLEGS_INT, new byte[0]);
		// this will leak memory if we grow the group
		if (group == null || group.length < noLegs) {
			group = new LegQuotGrp[noLegs];

			for ( int i = 0; i < noLegs; i++ ) group[i] = new LegQuotGrp();
	}

		for ( int i = 0; i < noLegs; i++ ) 
			group[i].getAllGroup(buf);
	}

	public void clear() {
		for (int i = 0; i<noLegs; i++)
			group[i].clear();
	}
	public void encode(ByteBuffer out) {
		for (int i = 0; i<noLegs; i++)
			group[i].encode(out);
	}
	public boolean isSet() {
		for (int i = 0; i<noLegs; i++)
			if (group[i].isSet()) return true;
		return false;
	}

	@Override
	public boolean equals(Object o) {
		if (! ( o instanceof FixLegQuotGrp)) return false;

		FixLegQuotGrp msg = (FixLegQuotGrp) o;

		for (int i = 0; i<noLegs; i++)
			if (!group[i].equals(msg.group[i])) return false;
		return true;
	}

	@Override
	public String toString() {
		String s = "";
		for (int i = 0; i<noLegs; i++)
			s += group[i].toString();
		return s;
	}

public class LegQuotGrp implements FixComponent
{

	public FixInstrumentLeg instrumentLeg;
	public long legQty = 0;
	public long legOrderQty = 0;
	public long legSwapType = 0;
	public byte legSettlType = (byte)' ';
	public byte[] legSettlDate;
	public FixLegStipulations legStipulations;
	public FixNestedParties nestedParties;
	public long legPriceType = 0;
	public long legBidPx = 0;
	public long legOfferPx = 0;
	public byte[] legRefID;
	public long legBidForwardPoints = 0;
	public long legOfferForwardPoints = 0;
	public FixLegBenchmarkCurveData legBenchmarkCurveData;

	public LegQuotGrp() {
		super();

		instrumentLeg = new FixInstrumentLeg();
		legSettlDate = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		legStipulations = new FixLegStipulations();
		nestedParties = new FixNestedParties();
		legRefID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		legBenchmarkCurveData = new FixLegBenchmarkCurveData();
		this.clear();

	}

	@Override
	public void clear()
	{

		// clear out all the fields that aren't msgType

		legQty = Long.MAX_VALUE;		
		legOrderQty = Long.MAX_VALUE;		
		legSwapType = Long.MAX_VALUE;		
		legSettlType = Byte.MAX_VALUE;		
		Utils.fill( legSettlDate, (byte)0 );
		legPriceType = Long.MAX_VALUE;		
		legBidPx = Long.MAX_VALUE;		
		legOfferPx = Long.MAX_VALUE;		
		Utils.fill( legRefID, (byte)0 );
		legBidForwardPoints = Long.MAX_VALUE;		
		legOfferForwardPoints = Long.MAX_VALUE;		
		instrumentLeg.clear();
		legStipulations.clear();
		nestedParties.clear();
		legBenchmarkCurveData.clear();
	}

	public void getAllGroup(ByteBuffer buf) throws FixSessionException, FixGarbledException
	{

		int startTagPosition = buf.position();

		int id = FixUtils.getTagId( buf );
		int lastTagPosition = buf.position();
			ByteBuffer value;

			value = buf;

			if(id == FixTags.LEGSYMBOL_INT) {
				instrumentLeg.getAll(FixTags.LEGSYMBOL_INT, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.LEGQTY_INT) {
				legQty = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.LEGORDERQTY_INT) {
				legOrderQty = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.LEGSWAPTYPE_INT) {
				legSwapType = FixUtils.getTagIntValue( value );
				if (!FixMessageInfo.LegSwapType.isValid(legSwapType) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + legSwapType + ") for tag").getBytes(), id, new byte[0] );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.LEGSETTLTYPE_INT) {
				legSettlType = FixUtils.getTagCharValue( value );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.LEGSETTLDATE_INT) {
				legSettlDate = FixUtils.getTagStringValue(value, legSettlDate);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.NOLEGSTIPULATIONS_INT) {
				int noLegStipulations;
				noLegStipulations = FixUtils.getTagIntValue( value );
				legStipulations.getAll(noLegStipulations, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.NONESTEDPARTYIDS_INT) {
				int noNestedPartyIDs;
				noNestedPartyIDs = FixUtils.getTagIntValue( value );
				nestedParties.getAll(noNestedPartyIDs, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.LEGPRICETYPE_INT) {
				legPriceType = FixUtils.getTagIntValue( value );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.LEGBIDPX_INT) {
				legBidPx = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.LEGOFFERPX_INT) {
				legOfferPx = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.LEGREFID_INT) {
				legRefID = FixUtils.getTagStringValue(value, legRefID);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.LEGBIDFORWARDPOINTS_INT) {
				legBidForwardPoints = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.LEGOFFERFORWARDPOINTS_INT) {
				legOfferForwardPoints = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.LEGBENCHMARKCURVECURRENCY_INT) {
				legBenchmarkCurveData.getAll(FixTags.LEGBENCHMARKCURVECURRENCY_INT, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			id = checkRequiredTags();
				if (id > 0) throw new FixSessionException(SessionRejectReason.REQUIRED_TAG_MISSING, "Required tag missing".getBytes(), id, new byte[0] );

			buf.position( lastTagPosition );
			return;

	}

	private int checkRequiredTags() {
		int tag = -1;

		return tag;

	}
	@Override
	public boolean isSet()
	{
		if (FixUtils.isSet(instrumentLeg.legSymbol)) return true;
		if (FixUtils.isSet(legQty)) return true;
		if (FixUtils.isSet(legOrderQty)) return true;
		if (FixUtils.isSet(legSwapType)) return true;
		if (FixUtils.isSet(legSettlType)) return true;
		if (FixUtils.isSet(legSettlDate)) return true;
		if (FixUtils.isSet(legStipulations.noLegStipulations)) return true;
		if (FixUtils.isSet(nestedParties.noNestedPartyIDs)) return true;
		if (FixUtils.isSet(legPriceType)) return true;
		if (FixUtils.isSet(legBidPx)) return true;
		if (FixUtils.isSet(legOfferPx)) return true;
		if (FixUtils.isSet(legRefID)) return true;
		if (FixUtils.isSet(legBidForwardPoints)) return true;
		if (FixUtils.isSet(legOfferForwardPoints)) return true;
		if (FixUtils.isSet(legBenchmarkCurveData.legBenchmarkCurveCurrency)) return true;
		return false;
	}
	@Override
	public void encode( ByteBuffer out )
	{
		if (FixUtils.isSet(instrumentLeg.legSymbol)) instrumentLeg.encode( out );
		if (FixUtils.isSet(legQty)) FixUtils.putFixFloatTag( out, FixTags.LEGQTY_INT, legQty);
		if (FixUtils.isSet(legOrderQty)) FixUtils.putFixFloatTag( out, FixTags.LEGORDERQTY_INT, legOrderQty);
		if (FixUtils.isSet(legSwapType)) FixUtils.putFixTag( out, FixTags.LEGSWAPTYPE_INT, legSwapType);
		if (FixUtils.isSet(legSettlType)) FixUtils.putFixTag( out, FixTags.LEGSETTLTYPE_INT, legSettlType );
		if (FixUtils.isSet(legSettlDate)) FixUtils.putFixTag( out, FixTags.LEGSETTLDATE_INT, legSettlDate);
		if (FixUtils.isSet(legStipulations.noLegStipulations)) legStipulations.encode( out );
		if (FixUtils.isSet(nestedParties.noNestedPartyIDs)) nestedParties.encode( out );
		if (FixUtils.isSet(legPriceType)) FixUtils.putFixTag( out, FixTags.LEGPRICETYPE_INT, legPriceType);
		if (FixUtils.isSet(legBidPx)) FixUtils.putFixFloatTag( out, FixTags.LEGBIDPX_INT, legBidPx);
		if (FixUtils.isSet(legOfferPx)) FixUtils.putFixFloatTag( out, FixTags.LEGOFFERPX_INT, legOfferPx);
		if (FixUtils.isSet(legRefID)) FixUtils.putFixTag( out, FixTags.LEGREFID_INT, legRefID, 0, Utils.lastIndexTrim(legRefID, (byte)0) );
		if (FixUtils.isSet(legBidForwardPoints)) FixUtils.putFixFloatTag( out, FixTags.LEGBIDFORWARDPOINTS_INT, legBidForwardPoints);
		if (FixUtils.isSet(legOfferForwardPoints)) FixUtils.putFixFloatTag( out, FixTags.LEGOFFERFORWARDPOINTS_INT, legOfferForwardPoints);
		if (FixUtils.isSet(legBenchmarkCurveData.legBenchmarkCurveCurrency)) legBenchmarkCurveData.encode( out );
	}
	/**
	 * If you use toString for any other purpose than administrative printout.
	 * You will end up in nifelheim!
	**/
	@Override
	public String toString() {
		char sep = '\n';
		if (Boolean.getBoolean("fix.useOneLiner")) sep = ( byte )0x01;

		String s = "";

			if (FixUtils.isSet(instrumentLeg.legSymbol)) s += instrumentLeg.toString();
			if (FixUtils.isSet(legQty)) s += "LegQty(687)=" + String.valueOf(legQty) + sep;
			if (FixUtils.isSet(legOrderQty)) s += "LegOrderQty(685)=" + String.valueOf(legOrderQty) + sep;
			if (FixUtils.isSet(legSwapType)) s += "LegSwapType(690)=" + String.valueOf(legSwapType) + sep;
			if (FixUtils.isSet(legSettlType)) s += "LegSettlType(587)=" + String.valueOf(legSettlType) + sep;
			if (FixUtils.isSet(legSettlDate)) s += "LegSettlDate(588)=" + new String(legSettlDate) + sep;
			if (FixUtils.isSet(legStipulations.noLegStipulations)) s += legStipulations.toString();
			if (FixUtils.isSet(nestedParties.noNestedPartyIDs)) s += nestedParties.toString();
			if (FixUtils.isSet(legPriceType)) s += "LegPriceType(686)=" + String.valueOf(legPriceType) + sep;
			if (FixUtils.isSet(legBidPx)) s += "LegBidPx(681)=" + String.valueOf(legBidPx) + sep;
			if (FixUtils.isSet(legOfferPx)) s += "LegOfferPx(684)=" + String.valueOf(legOfferPx) + sep;
			if (FixUtils.isSet(legRefID)) s += "LegRefID(654)=" + new String(legRefID) + sep;
			if (FixUtils.isSet(legBidForwardPoints)) s += "LegBidForwardPoints(1067)=" + String.valueOf(legBidForwardPoints) + sep;
			if (FixUtils.isSet(legOfferForwardPoints)) s += "LegOfferForwardPoints(1068)=" + String.valueOf(legOfferForwardPoints) + sep;
			if (FixUtils.isSet(legBenchmarkCurveData.legBenchmarkCurveCurrency)) s += legBenchmarkCurveData.toString();
		return s;

	}

	@Override
	public boolean equals(Object o) {
		if (! ( o instanceof LegQuotGrp)) return false;

			LegQuotGrp msg = (LegQuotGrp) o;

		if (!instrumentLeg.equals(msg.instrumentLeg)) return false;

		if (!( legQty==msg.legQty)) return false;

		if (!( legOrderQty==msg.legOrderQty)) return false;

		if (!( legSwapType==msg.legSwapType)) return false;

		if (!( legSettlType==msg.legSettlType)) return false;

		if (!legStipulations.equals(msg.legStipulations)) return false;

		if (!nestedParties.equals(msg.nestedParties)) return false;

		if (!( legPriceType==msg.legPriceType)) return false;

		if (!( legBidPx==msg.legBidPx)) return false;

		if (!( legOfferPx==msg.legOfferPx)) return false;

		if (!Utils.equals( legRefID, msg.legRefID)) return false;

		if (!( legBidForwardPoints==msg.legBidForwardPoints)) return false;

		if (!( legOfferForwardPoints==msg.legOfferForwardPoints)) return false;

		if (!legBenchmarkCurveData.equals(msg.legBenchmarkCurveData)) return false;

		return true;
	}
}
}
