package org.tomac.protocol.fix.messaging.fix50sp2.component;

// DO NOT EDIT!!!
// This file is generated by FixMessageGenerator.
// If you need additional functionality, put it in a helper class
// that does not live in this folder!!!  Any java file in this folder 
// will be deleted upon the next run of the FixMessageGenerator!

import java.nio.ByteBuffer;

import org.tomac.protocol.fix.FixUtils;
import org.tomac.protocol.fix.FixSessionException;
import org.tomac.protocol.fix.FixGarbledException;
import org.tomac.utils.Utils;
import org.tomac.protocol.fix.FixConstants;


import org.tomac.protocol.fix.messaging.fix50sp2.FixTags;
import org.tomac.protocol.fix.messaging.fix50sp2.FixMessageInfo.*;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixDerivativeSecurityAltIDGrp;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixDerivativeSecurityXML;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixDerivativeEventsGrp;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixDerivativeInstrumentParties;

public class FixDerivativeInstrument implements FixComponent
{

	public byte[] derivativeSymbol;
	public byte[] derivativeSymbolSfx;
	public byte[] derivativeSecurityID;
	public byte[] derivativeSecurityIDSource;
	public long derivativeProduct = 0;
	public byte[] derivativeProductComplex;
	public boolean derivFlexProductEligibilityIndicator = false;
	public byte[] derivativeSecurityGroup;
	public byte[] derivativeCFICode;
	public FixDerivativeSecurityAltIDGrp derivativeSecurityAltIDGrp;
	public byte[] derivativeSecurityType;
	public byte[] derivativeSecuritySubType;
	public byte[] derivativeMaturityMonthYear;
	public byte[] derivativeMaturityDate;
	public byte[] derivativeMaturityTime;
	public byte[] derivativeSettleOnOpenFlag;
	public byte derivativeInstrmtAssignmentMethod = (byte)' ';
	public byte[] derivativeSecurityStatus;
	public byte[] derivativeIssueDate;
	public byte[] derivativeInstrRegistry;
	public byte[] derivativeCountryOfIssue;
	public byte[] derivativeStateOrProvinceOfIssue;
	public long derivativeStrikePrice = 0;
	public byte[] derivativeLocaleOfIssue;
	public byte[] derivativeStrikeCurrency;
	public long derivativeStrikeMultiplier = 0;
	public long derivativeStrikeValue = 0;
	public byte derivativeOptAttribute = (byte)' ';
	public long derivativeContractMultiplier = 0;
	public long derivativeMinPriceIncrement = 0;
	public long derivativeMinPriceIncrementAmount = 0;
	public long derivativeContractMultiplierUnit = 0;
	public long derivativeFlowScheduleType = 0;
	public byte[] derivativeUnitOfMeasure;
	public long derivativeUnitOfMeasureQty = 0;
	public byte[] derivativePriceUnitOfMeasure;
	public long derivativePriceUnitOfMeasureQty = 0;
	public byte derivativeExerciseStyle = (byte)' ';
	public long derivativeOptPayAmount = 0;
	public byte[] derivativeTimeUnit;
	public byte[] derivativeSecurityExchange;
	public long derivativePositionLimit = 0;
	public long derivativeNTPositionLimit = 0;
	public byte derivativeSettlMethod = (byte)' ';
	public byte[] derivativePriceQuoteMethod;
	public byte[] derivativeValuationMethod;
	public long derivativeListMethod = 0;
	public long derivativeCapPrice = 0;
	public long derivativeFloorPrice = 0;
	public long derivativePutOrCall = 0;
	public byte[] derivativeIssuer;
	public long derivativeEncodedIssuerLen = 0;
	public byte[] derivativeEncodedIssuer;
	public byte[] derivativeSecurityDesc;
	public long derivativeEncodedSecurityDescLen = 0;
	public byte[] derivativeEncodedSecurityDesc;
	public byte[] derivativeContractSettlMonth;
	public FixDerivativeSecurityXML derivativeSecurityXML;
	public FixDerivativeEventsGrp derivativeEventsGrp;
	public FixDerivativeInstrumentParties derivativeInstrumentParties;

	public FixDerivativeInstrument() {
		super();

		derivativeSymbol = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		derivativeSymbolSfx = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		derivativeSecurityID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		derivativeSecurityIDSource = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		derivativeProductComplex = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		derivativeSecurityGroup = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		derivativeCFICode = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		derivativeSecurityAltIDGrp = new FixDerivativeSecurityAltIDGrp();
		derivativeSecurityType = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		derivativeSecuritySubType = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		derivativeMaturityMonthYear = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		derivativeMaturityDate = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		derivativeMaturityTime = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		derivativeSettleOnOpenFlag = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		derivativeSecurityStatus = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		derivativeIssueDate = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		derivativeInstrRegistry = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		derivativeCountryOfIssue = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		derivativeStateOrProvinceOfIssue = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		derivativeLocaleOfIssue = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		derivativeStrikeCurrency = new byte[FixUtils.CURRENCY_LENGTH];
		derivativeUnitOfMeasure = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		derivativePriceUnitOfMeasure = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		derivativeTimeUnit = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		derivativeSecurityExchange = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		derivativePriceQuoteMethod = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		derivativeValuationMethod = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		derivativeIssuer = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		derivativeEncodedIssuer = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		derivativeSecurityDesc = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		derivativeEncodedSecurityDesc = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		derivativeContractSettlMonth = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		derivativeSecurityXML = new FixDerivativeSecurityXML();
		derivativeEventsGrp = new FixDerivativeEventsGrp();
		derivativeInstrumentParties = new FixDerivativeInstrumentParties();
		this.clear();

	}

	@Override
	public void clear()
	{

		// clear out all the fields that aren't msgType

		Utils.fill( derivativeSymbol, (byte)0 );
		Utils.fill( derivativeSymbolSfx, (byte)0 );
		Utils.fill( derivativeSecurityID, (byte)0 );
		Utils.fill( derivativeSecurityIDSource, (byte)0 );
		derivativeProduct = Long.MAX_VALUE;		
		Utils.fill( derivativeProductComplex, (byte)0 );
		derivFlexProductEligibilityIndicator = false;		
		Utils.fill( derivativeSecurityGroup, (byte)0 );
		Utils.fill( derivativeCFICode, (byte)0 );
		Utils.fill( derivativeSecurityType, (byte)0 );
		Utils.fill( derivativeSecuritySubType, (byte)0 );
		Utils.fill( derivativeMaturityMonthYear, (byte)0 );
		Utils.fill( derivativeMaturityDate, (byte)0 );
		Utils.fill( derivativeMaturityTime, (byte)0 );
		Utils.fill( derivativeSettleOnOpenFlag, (byte)0 );
		derivativeInstrmtAssignmentMethod = Byte.MAX_VALUE;		
		Utils.fill( derivativeSecurityStatus, (byte)0 );
		Utils.fill( derivativeIssueDate, (byte)0 );
		Utils.fill( derivativeInstrRegistry, (byte)0 );
		Utils.fill( derivativeCountryOfIssue, (byte)0 );
		Utils.fill( derivativeStateOrProvinceOfIssue, (byte)0 );
		derivativeStrikePrice = Long.MAX_VALUE;		
		Utils.fill( derivativeLocaleOfIssue, (byte)0 );
		Utils.fill( derivativeStrikeCurrency, (byte)0 );
		derivativeStrikeMultiplier = Long.MAX_VALUE;		
		derivativeStrikeValue = Long.MAX_VALUE;		
		derivativeOptAttribute = Byte.MAX_VALUE;		
		derivativeContractMultiplier = Long.MAX_VALUE;		
		derivativeMinPriceIncrement = Long.MAX_VALUE;		
		derivativeMinPriceIncrementAmount = Long.MAX_VALUE;		
		derivativeContractMultiplierUnit = Long.MAX_VALUE;		
		derivativeFlowScheduleType = Long.MAX_VALUE;		
		Utils.fill( derivativeUnitOfMeasure, (byte)0 );
		derivativeUnitOfMeasureQty = Long.MAX_VALUE;		
		Utils.fill( derivativePriceUnitOfMeasure, (byte)0 );
		derivativePriceUnitOfMeasureQty = Long.MAX_VALUE;		
		derivativeExerciseStyle = Byte.MAX_VALUE;		
		derivativeOptPayAmount = Long.MAX_VALUE;		
		Utils.fill( derivativeTimeUnit, (byte)0 );
		Utils.fill( derivativeSecurityExchange, (byte)0 );
		derivativePositionLimit = Long.MAX_VALUE;		
		derivativeNTPositionLimit = Long.MAX_VALUE;		
		derivativeSettlMethod = Byte.MAX_VALUE;		
		Utils.fill( derivativePriceQuoteMethod, (byte)0 );
		Utils.fill( derivativeValuationMethod, (byte)0 );
		derivativeListMethod = Long.MAX_VALUE;		
		derivativeCapPrice = Long.MAX_VALUE;		
		derivativeFloorPrice = Long.MAX_VALUE;		
		derivativePutOrCall = Long.MAX_VALUE;		
		Utils.fill( derivativeIssuer, (byte)0 );
		derivativeEncodedIssuerLen = Long.MAX_VALUE;		
		Utils.fill( derivativeEncodedIssuer, (byte)0 );
		Utils.fill( derivativeSecurityDesc, (byte)0 );
		derivativeEncodedSecurityDescLen = Long.MAX_VALUE;		
		Utils.fill( derivativeEncodedSecurityDesc, (byte)0 );
		Utils.fill( derivativeContractSettlMonth, (byte)0 );
		derivativeSecurityAltIDGrp.clear();
		derivativeSecurityXML.clear();
		derivativeEventsGrp.clear();
		derivativeInstrumentParties.clear();
	}

	public void getAll(int id, ByteBuffer buf) throws FixSessionException, FixGarbledException
	{

		int startTagPosition = buf.position();

		int lastTagPosition = buf.position();
		do {
			ByteBuffer value;

			value = buf;

			switch( id ) {

			case FixTags.DERIVATIVESYMBOL_INT:
				derivativeSymbol = FixUtils.getTagStringValue(null ,id ,value, derivativeSymbol);
				break;

			case FixTags.DERIVATIVESYMBOLSFX_INT:
				derivativeSymbolSfx = FixUtils.getTagStringValue(null ,id ,value, derivativeSymbolSfx);
				break;

			case FixTags.DERIVATIVESECURITYID_INT:
				derivativeSecurityID = FixUtils.getTagStringValue(null ,id ,value, derivativeSecurityID);
				break;

			case FixTags.DERIVATIVESECURITYIDSOURCE_INT:
				derivativeSecurityIDSource = FixUtils.getTagStringValue(null ,id ,value, derivativeSecurityIDSource);
				break;

			case FixTags.DERIVATIVEPRODUCT_INT:
				derivativeProduct = FixUtils.getTagIntValue(null ,id ,value );
				break;

			case FixTags.DERIVATIVEPRODUCTCOMPLEX_INT:
				derivativeProductComplex = FixUtils.getTagStringValue(null ,id ,value, derivativeProductComplex);
				break;

			case FixTags.DERIVFLEXPRODUCTELIGIBILITYINDICATOR_INT:
				derivFlexProductEligibilityIndicator = FixUtils.getTagBooleanValue(null ,id ,value );
				break;

			case FixTags.DERIVATIVESECURITYGROUP_INT:
				derivativeSecurityGroup = FixUtils.getTagStringValue(null ,id ,value, derivativeSecurityGroup);
				break;

			case FixTags.DERIVATIVECFICODE_INT:
				derivativeCFICode = FixUtils.getTagStringValue(null ,id ,value, derivativeCFICode);
				break;

			case FixTags.NODERIVATIVESECURITYALTID_INT:
				derivativeSecurityAltIDGrp.noDerivativeSecurityAltID = FixUtils.getTagIntValue(null, FixTags.NODERIVATIVESECURITYALTID_INT, value );
				derivativeSecurityAltIDGrp.getAll(derivativeSecurityAltIDGrp.noDerivativeSecurityAltID, value );
				break;

			case FixTags.DERIVATIVESECURITYTYPE_INT:
				derivativeSecurityType = FixUtils.getTagStringValue(null ,id ,value, derivativeSecurityType);
				break;

			case FixTags.DERIVATIVESECURITYSUBTYPE_INT:
				derivativeSecuritySubType = FixUtils.getTagStringValue(null ,id ,value, derivativeSecuritySubType);
				break;

			case FixTags.DERIVATIVEMATURITYMONTHYEAR_INT:
				derivativeMaturityMonthYear = FixUtils.getTagStringValue(null ,id ,value, derivativeMaturityMonthYear);
				break;

			case FixTags.DERIVATIVEMATURITYDATE_INT:
				derivativeMaturityDate = FixUtils.getTagStringValue(null ,id ,value, derivativeMaturityDate);
				break;

			case FixTags.DERIVATIVEMATURITYTIME_INT:
				derivativeMaturityTime = FixUtils.getTagStringValue(null ,id ,value, derivativeMaturityTime);
				break;

			case FixTags.DERIVATIVESETTLEONOPENFLAG_INT:
				derivativeSettleOnOpenFlag = FixUtils.getTagStringValue(null ,id ,value, derivativeSettleOnOpenFlag);
				break;

			case FixTags.DERIVATIVEINSTRMTASSIGNMENTMETHOD_INT:
				derivativeInstrmtAssignmentMethod = FixUtils.getTagCharValue(null ,id ,value );
				break;

			case FixTags.DERIVATIVESECURITYSTATUS_INT:
				derivativeSecurityStatus = FixUtils.getTagStringValue(null ,id ,value, derivativeSecurityStatus);
				break;

			case FixTags.DERIVATIVEISSUEDATE_INT:
				derivativeIssueDate = FixUtils.getTagStringValue(null ,id ,value, derivativeIssueDate);
				break;

			case FixTags.DERIVATIVEINSTRREGISTRY_INT:
				derivativeInstrRegistry = FixUtils.getTagStringValue(null ,id ,value, derivativeInstrRegistry);
				break;

			case FixTags.DERIVATIVECOUNTRYOFISSUE_INT:
				derivativeCountryOfIssue = FixUtils.getTagStringValue(null ,id ,value, derivativeCountryOfIssue);
				break;

			case FixTags.DERIVATIVESTATEORPROVINCEOFISSUE_INT:
				derivativeStateOrProvinceOfIssue = FixUtils.getTagStringValue(null ,id ,value, derivativeStateOrProvinceOfIssue);
				break;

			case FixTags.DERIVATIVESTRIKEPRICE_INT:
				derivativeStrikePrice = FixUtils.getTagFloatValue(null ,id ,value);
				break;

			case FixTags.DERIVATIVELOCALEOFISSUE_INT:
				derivativeLocaleOfIssue = FixUtils.getTagStringValue(null ,id ,value, derivativeLocaleOfIssue);
				break;

			case FixTags.DERIVATIVESTRIKECURRENCY_INT:
				derivativeStrikeCurrency = FixUtils.getTagStringValue(null ,id ,value, derivativeStrikeCurrency);
				break;

			case FixTags.DERIVATIVESTRIKEMULTIPLIER_INT:
				derivativeStrikeMultiplier = FixUtils.getTagFloatValue(null ,id ,value);
				break;

			case FixTags.DERIVATIVESTRIKEVALUE_INT:
				derivativeStrikeValue = FixUtils.getTagFloatValue(null ,id ,value);
				break;

			case FixTags.DERIVATIVEOPTATTRIBUTE_INT:
				derivativeOptAttribute = FixUtils.getTagCharValue(null ,id ,value );
				break;

			case FixTags.DERIVATIVECONTRACTMULTIPLIER_INT:
				derivativeContractMultiplier = FixUtils.getTagFloatValue(null ,id ,value);
				break;

			case FixTags.DERIVATIVEMINPRICEINCREMENT_INT:
				derivativeMinPriceIncrement = FixUtils.getTagFloatValue(null ,id ,value);
				break;

			case FixTags.DERIVATIVEMINPRICEINCREMENTAMOUNT_INT:
				derivativeMinPriceIncrementAmount = FixUtils.getTagFloatValue(null ,id ,value);
				break;

			case FixTags.DERIVATIVECONTRACTMULTIPLIERUNIT_INT:
				derivativeContractMultiplierUnit = FixUtils.getTagIntValue(null ,id ,value );
				break;

			case FixTags.DERIVATIVEFLOWSCHEDULETYPE_INT:
				derivativeFlowScheduleType = FixUtils.getTagIntValue(null ,id ,value );
				break;

			case FixTags.DERIVATIVEUNITOFMEASURE_INT:
				derivativeUnitOfMeasure = FixUtils.getTagStringValue(null ,id ,value, derivativeUnitOfMeasure);
				break;

			case FixTags.DERIVATIVEUNITOFMEASUREQTY_INT:
				derivativeUnitOfMeasureQty = FixUtils.getTagFloatValue(null ,id ,value);
				break;

			case FixTags.DERIVATIVEPRICEUNITOFMEASURE_INT:
				derivativePriceUnitOfMeasure = FixUtils.getTagStringValue(null ,id ,value, derivativePriceUnitOfMeasure);
				break;

			case FixTags.DERIVATIVEPRICEUNITOFMEASUREQTY_INT:
				derivativePriceUnitOfMeasureQty = FixUtils.getTagFloatValue(null ,id ,value);
				break;

			case FixTags.DERIVATIVEEXERCISESTYLE_INT:
				derivativeExerciseStyle = FixUtils.getTagCharValue(null ,id ,value );
				break;

			case FixTags.DERIVATIVEOPTPAYAMOUNT_INT:
				derivativeOptPayAmount = FixUtils.getTagFloatValue(null ,id ,value);
				break;

			case FixTags.DERIVATIVETIMEUNIT_INT:
				derivativeTimeUnit = FixUtils.getTagStringValue(null ,id ,value, derivativeTimeUnit);
				break;

			case FixTags.DERIVATIVESECURITYEXCHANGE_INT:
				derivativeSecurityExchange = FixUtils.getTagStringValue(null ,id ,value, derivativeSecurityExchange);
				break;

			case FixTags.DERIVATIVEPOSITIONLIMIT_INT:
				derivativePositionLimit = FixUtils.getTagIntValue(null ,id ,value );
				break;

			case FixTags.DERIVATIVENTPOSITIONLIMIT_INT:
				derivativeNTPositionLimit = FixUtils.getTagIntValue(null ,id ,value );
				break;

			case FixTags.DERIVATIVESETTLMETHOD_INT:
				derivativeSettlMethod = FixUtils.getTagCharValue(null ,id ,value );
				break;

			case FixTags.DERIVATIVEPRICEQUOTEMETHOD_INT:
				derivativePriceQuoteMethod = FixUtils.getTagStringValue(null ,id ,value, derivativePriceQuoteMethod);
				break;

			case FixTags.DERIVATIVEVALUATIONMETHOD_INT:
				derivativeValuationMethod = FixUtils.getTagStringValue(null ,id ,value, derivativeValuationMethod);
				break;

			case FixTags.DERIVATIVELISTMETHOD_INT:
				derivativeListMethod = FixUtils.getTagIntValue(null ,id ,value );
				break;

			case FixTags.DERIVATIVECAPPRICE_INT:
				derivativeCapPrice = FixUtils.getTagFloatValue(null ,id ,value);
				break;

			case FixTags.DERIVATIVEFLOORPRICE_INT:
				derivativeFloorPrice = FixUtils.getTagFloatValue(null ,id ,value);
				break;

			case FixTags.DERIVATIVEPUTORCALL_INT:
				derivativePutOrCall = FixUtils.getTagIntValue(null ,id ,value );
				break;

			case FixTags.DERIVATIVEISSUER_INT:
				derivativeIssuer = FixUtils.getTagStringValue(null ,id ,value, derivativeIssuer);
				break;

			case FixTags.DERIVATIVEENCODEDISSUERLEN_INT:
				derivativeEncodedIssuerLen = FixUtils.getTagIntValue(null ,id ,value );
				break;

			case FixTags.DERIVATIVEENCODEDISSUER_INT:
				derivativeEncodedIssuer = FixUtils.getTagStringValue(null ,id ,value, derivativeEncodedIssuer);
				break;

			case FixTags.DERIVATIVESECURITYDESC_INT:
				derivativeSecurityDesc = FixUtils.getTagStringValue(null ,id ,value, derivativeSecurityDesc);
				break;

			case FixTags.DERIVATIVEENCODEDSECURITYDESCLEN_INT:
				derivativeEncodedSecurityDescLen = FixUtils.getTagIntValue(null ,id ,value );
				break;

			case FixTags.DERIVATIVEENCODEDSECURITYDESC_INT:
				derivativeEncodedSecurityDesc = FixUtils.getTagStringValue(null ,id ,value, derivativeEncodedSecurityDesc);
				break;

			case FixTags.DERIVATIVECONTRACTSETTLMONTH_INT:
				derivativeContractSettlMonth = FixUtils.getTagStringValue(null ,id ,value, derivativeContractSettlMonth);
				break;

			case FixTags.DERIVATIVESECURITYXMLLEN_INT:
				derivativeSecurityXML.getAll( FixTags.DERIVATIVESECURITYXMLLEN_INT, value );
				break;

			case FixTags.NODERIVATIVEEVENTS_INT:
				derivativeEventsGrp.noDerivativeEvents = FixUtils.getTagIntValue(null, FixTags.NODERIVATIVEEVENTS_INT, value );
				derivativeEventsGrp.getAll(derivativeEventsGrp.noDerivativeEvents, value );
				break;

			case FixTags.NODERIVATIVEINSTRUMENTPARTIES_INT:
				derivativeInstrumentParties.noDerivativeInstrumentParties = FixUtils.getTagIntValue(null, FixTags.NODERIVATIVEINSTRUMENTPARTIES_INT, value );
				derivativeInstrumentParties.getAll(derivativeInstrumentParties.noDerivativeInstrumentParties, value );
				break;

			// we will always endup with unknown tag, unread and return to upper layer in hierarchy
			default:
				id = checkRequiredTags();
				if (id > 0) throw new FixSessionException(SessionRejectReason.REQUIRED_TAG_MISSING, "Required tag missing".getBytes(), id, new byte[0] );

				buf.position( lastTagPosition );
				return;

			}

			lastTagPosition = buf.position();

		} while ( ( id = FixUtils.getTagId( buf ) ) >= 0 );

		buf.position(startTagPosition);

	}

	private int checkRequiredTags() {
		int tag = -1;

		return tag;

	}
	@Override
	public boolean isSet()
	{
		if (FixUtils.isSet(derivativeSymbol)) return true;
		if (FixUtils.isSet(derivativeSymbolSfx)) return true;
		if (FixUtils.isSet(derivativeSecurityID)) return true;
		if (FixUtils.isSet(derivativeSecurityIDSource)) return true;
		if (FixUtils.isSet(derivativeProduct)) return true;
		if (FixUtils.isSet(derivativeProductComplex)) return true;
		if (FixUtils.isSet(derivFlexProductEligibilityIndicator)) return true;
		if (FixUtils.isSet(derivativeSecurityGroup)) return true;
		if (FixUtils.isSet(derivativeCFICode)) return true;
		if (FixUtils.isSet(derivativeSecurityAltIDGrp.noDerivativeSecurityAltID)) return true;
		if (FixUtils.isSet(derivativeSecurityType)) return true;
		if (FixUtils.isSet(derivativeSecuritySubType)) return true;
		if (FixUtils.isSet(derivativeMaturityMonthYear)) return true;
		if (FixUtils.isSet(derivativeMaturityDate)) return true;
		if (FixUtils.isSet(derivativeMaturityTime)) return true;
		if (FixUtils.isSet(derivativeSettleOnOpenFlag)) return true;
		if (FixUtils.isSet(derivativeInstrmtAssignmentMethod)) return true;
		if (FixUtils.isSet(derivativeSecurityStatus)) return true;
		if (FixUtils.isSet(derivativeIssueDate)) return true;
		if (FixUtils.isSet(derivativeInstrRegistry)) return true;
		if (FixUtils.isSet(derivativeCountryOfIssue)) return true;
		if (FixUtils.isSet(derivativeStateOrProvinceOfIssue)) return true;
		if (FixUtils.isSet(derivativeStrikePrice)) return true;
		if (FixUtils.isSet(derivativeLocaleOfIssue)) return true;
		if (FixUtils.isSet(derivativeStrikeCurrency)) return true;
		if (FixUtils.isSet(derivativeStrikeMultiplier)) return true;
		if (FixUtils.isSet(derivativeStrikeValue)) return true;
		if (FixUtils.isSet(derivativeOptAttribute)) return true;
		if (FixUtils.isSet(derivativeContractMultiplier)) return true;
		if (FixUtils.isSet(derivativeMinPriceIncrement)) return true;
		if (FixUtils.isSet(derivativeMinPriceIncrementAmount)) return true;
		if (FixUtils.isSet(derivativeContractMultiplierUnit)) return true;
		if (FixUtils.isSet(derivativeFlowScheduleType)) return true;
		if (FixUtils.isSet(derivativeUnitOfMeasure)) return true;
		if (FixUtils.isSet(derivativeUnitOfMeasureQty)) return true;
		if (FixUtils.isSet(derivativePriceUnitOfMeasure)) return true;
		if (FixUtils.isSet(derivativePriceUnitOfMeasureQty)) return true;
		if (FixUtils.isSet(derivativeExerciseStyle)) return true;
		if (FixUtils.isSet(derivativeOptPayAmount)) return true;
		if (FixUtils.isSet(derivativeTimeUnit)) return true;
		if (FixUtils.isSet(derivativeSecurityExchange)) return true;
		if (FixUtils.isSet(derivativePositionLimit)) return true;
		if (FixUtils.isSet(derivativeNTPositionLimit)) return true;
		if (FixUtils.isSet(derivativeSettlMethod)) return true;
		if (FixUtils.isSet(derivativePriceQuoteMethod)) return true;
		if (FixUtils.isSet(derivativeValuationMethod)) return true;
		if (FixUtils.isSet(derivativeListMethod)) return true;
		if (FixUtils.isSet(derivativeCapPrice)) return true;
		if (FixUtils.isSet(derivativeFloorPrice)) return true;
		if (FixUtils.isSet(derivativePutOrCall)) return true;
		if (FixUtils.isSet(derivativeIssuer)) return true;
		if (FixUtils.isSet(derivativeEncodedIssuerLen)) return true;
		if (FixUtils.isSet(derivativeEncodedIssuer)) return true;
		if (FixUtils.isSet(derivativeSecurityDesc)) return true;
		if (FixUtils.isSet(derivativeEncodedSecurityDescLen)) return true;
		if (FixUtils.isSet(derivativeEncodedSecurityDesc)) return true;
		if (FixUtils.isSet(derivativeContractSettlMonth)) return true;
		if (FixUtils.isSet(derivativeSecurityXML.derivativeSecurityXMLLen)) return true;
		if (FixUtils.isSet(derivativeEventsGrp.noDerivativeEvents)) return true;
		if (FixUtils.isSet(derivativeInstrumentParties.noDerivativeInstrumentParties)) return true;
		return false;
	}
	@Override
	public void encode( ByteBuffer out )
	{
		if (FixUtils.isSet(derivativeSymbol)) FixUtils.putFixTag( out, FixTags.DERIVATIVESYMBOL_INT, derivativeSymbol, 0, Utils.lastIndexTrim(derivativeSymbol, (byte)0) );
		if (FixUtils.isSet(derivativeSymbolSfx)) FixUtils.putFixTag( out, FixTags.DERIVATIVESYMBOLSFX_INT, derivativeSymbolSfx, 0, Utils.lastIndexTrim(derivativeSymbolSfx, (byte)0) );
		if (FixUtils.isSet(derivativeSecurityID)) FixUtils.putFixTag( out, FixTags.DERIVATIVESECURITYID_INT, derivativeSecurityID, 0, Utils.lastIndexTrim(derivativeSecurityID, (byte)0) );
		if (FixUtils.isSet(derivativeSecurityIDSource)) FixUtils.putFixTag( out, FixTags.DERIVATIVESECURITYIDSOURCE_INT, derivativeSecurityIDSource, 0, Utils.lastIndexTrim(derivativeSecurityIDSource, (byte)0) );
		if (FixUtils.isSet(derivativeProduct)) FixUtils.putFixTag( out, FixTags.DERIVATIVEPRODUCT_INT, derivativeProduct);
		if (FixUtils.isSet(derivativeProductComplex)) FixUtils.putFixTag( out, FixTags.DERIVATIVEPRODUCTCOMPLEX_INT, derivativeProductComplex, 0, Utils.lastIndexTrim(derivativeProductComplex, (byte)0) );
		if (FixUtils.isSet(derivFlexProductEligibilityIndicator)) FixUtils.putFixTag( out, FixTags.DERIVFLEXPRODUCTELIGIBILITYINDICATOR_INT, derivFlexProductEligibilityIndicator?(byte)'Y':(byte)'N' );
		if (FixUtils.isSet(derivativeSecurityGroup)) FixUtils.putFixTag( out, FixTags.DERIVATIVESECURITYGROUP_INT, derivativeSecurityGroup, 0, Utils.lastIndexTrim(derivativeSecurityGroup, (byte)0) );
		if (FixUtils.isSet(derivativeCFICode)) FixUtils.putFixTag( out, FixTags.DERIVATIVECFICODE_INT, derivativeCFICode, 0, Utils.lastIndexTrim(derivativeCFICode, (byte)0) );
		if (FixUtils.isSet(derivativeSecurityAltIDGrp.noDerivativeSecurityAltID)) derivativeSecurityAltIDGrp.encode( out );
		if (FixUtils.isSet(derivativeSecurityType)) FixUtils.putFixTag( out, FixTags.DERIVATIVESECURITYTYPE_INT, derivativeSecurityType, 0, Utils.lastIndexTrim(derivativeSecurityType, (byte)0) );
		if (FixUtils.isSet(derivativeSecuritySubType)) FixUtils.putFixTag( out, FixTags.DERIVATIVESECURITYSUBTYPE_INT, derivativeSecuritySubType, 0, Utils.lastIndexTrim(derivativeSecuritySubType, (byte)0) );
		if (FixUtils.isSet(derivativeMaturityMonthYear)) FixUtils.putFixTag( out, FixTags.DERIVATIVEMATURITYMONTHYEAR_INT, derivativeMaturityMonthYear);
		if (FixUtils.isSet(derivativeMaturityDate)) FixUtils.putFixTag( out, FixTags.DERIVATIVEMATURITYDATE_INT, derivativeMaturityDate);
		if (FixUtils.isSet(derivativeMaturityTime)) FixUtils.putFixTag( out, FixTags.DERIVATIVEMATURITYTIME_INT, derivativeMaturityTime);
		if (FixUtils.isSet(derivativeSettleOnOpenFlag)) FixUtils.putFixTag( out, FixTags.DERIVATIVESETTLEONOPENFLAG_INT, derivativeSettleOnOpenFlag, 0, Utils.lastIndexTrim(derivativeSettleOnOpenFlag, (byte)0) );
		if (FixUtils.isSet(derivativeInstrmtAssignmentMethod)) FixUtils.putFixTag( out, FixTags.DERIVATIVEINSTRMTASSIGNMENTMETHOD_INT, derivativeInstrmtAssignmentMethod );
		if (FixUtils.isSet(derivativeSecurityStatus)) FixUtils.putFixTag( out, FixTags.DERIVATIVESECURITYSTATUS_INT, derivativeSecurityStatus, 0, Utils.lastIndexTrim(derivativeSecurityStatus, (byte)0) );
		if (FixUtils.isSet(derivativeIssueDate)) FixUtils.putFixTag( out, FixTags.DERIVATIVEISSUEDATE_INT, derivativeIssueDate);
		if (FixUtils.isSet(derivativeInstrRegistry)) FixUtils.putFixTag( out, FixTags.DERIVATIVEINSTRREGISTRY_INT, derivativeInstrRegistry, 0, Utils.lastIndexTrim(derivativeInstrRegistry, (byte)0) );
		if (FixUtils.isSet(derivativeCountryOfIssue)) FixUtils.putFixTag( out, FixTags.DERIVATIVECOUNTRYOFISSUE_INT, derivativeCountryOfIssue, 0, Utils.lastIndexTrim(derivativeCountryOfIssue, (byte)0) );
		if (FixUtils.isSet(derivativeStateOrProvinceOfIssue)) FixUtils.putFixTag( out, FixTags.DERIVATIVESTATEORPROVINCEOFISSUE_INT, derivativeStateOrProvinceOfIssue, 0, Utils.lastIndexTrim(derivativeStateOrProvinceOfIssue, (byte)0) );
		if (FixUtils.isSet(derivativeStrikePrice)) FixUtils.putFixFloatTag( out, FixTags.DERIVATIVESTRIKEPRICE_INT, derivativeStrikePrice);
		if (FixUtils.isSet(derivativeLocaleOfIssue)) FixUtils.putFixTag( out, FixTags.DERIVATIVELOCALEOFISSUE_INT, derivativeLocaleOfIssue, 0, Utils.lastIndexTrim(derivativeLocaleOfIssue, (byte)0) );
		if (FixUtils.isSet(derivativeStrikeCurrency)) FixUtils.putFixTag( out, FixTags.DERIVATIVESTRIKECURRENCY_INT, derivativeStrikeCurrency, 0, Utils.lastIndexTrim(derivativeStrikeCurrency, (byte)0) );
		if (FixUtils.isSet(derivativeStrikeMultiplier)) FixUtils.putFixFloatTag( out, FixTags.DERIVATIVESTRIKEMULTIPLIER_INT, derivativeStrikeMultiplier);
		if (FixUtils.isSet(derivativeStrikeValue)) FixUtils.putFixFloatTag( out, FixTags.DERIVATIVESTRIKEVALUE_INT, derivativeStrikeValue);
		if (FixUtils.isSet(derivativeOptAttribute)) FixUtils.putFixTag( out, FixTags.DERIVATIVEOPTATTRIBUTE_INT, derivativeOptAttribute );
		if (FixUtils.isSet(derivativeContractMultiplier)) FixUtils.putFixFloatTag( out, FixTags.DERIVATIVECONTRACTMULTIPLIER_INT, derivativeContractMultiplier);
		if (FixUtils.isSet(derivativeMinPriceIncrement)) FixUtils.putFixFloatTag( out, FixTags.DERIVATIVEMINPRICEINCREMENT_INT, derivativeMinPriceIncrement);
		if (FixUtils.isSet(derivativeMinPriceIncrementAmount)) FixUtils.putFixTag( out, FixTags.DERIVATIVEMINPRICEINCREMENTAMOUNT_INT, derivativeMinPriceIncrementAmount);
		if (FixUtils.isSet(derivativeContractMultiplierUnit)) FixUtils.putFixTag( out, FixTags.DERIVATIVECONTRACTMULTIPLIERUNIT_INT, derivativeContractMultiplierUnit);
		if (FixUtils.isSet(derivativeFlowScheduleType)) FixUtils.putFixTag( out, FixTags.DERIVATIVEFLOWSCHEDULETYPE_INT, derivativeFlowScheduleType);
		if (FixUtils.isSet(derivativeUnitOfMeasure)) FixUtils.putFixTag( out, FixTags.DERIVATIVEUNITOFMEASURE_INT, derivativeUnitOfMeasure, 0, Utils.lastIndexTrim(derivativeUnitOfMeasure, (byte)0) );
		if (FixUtils.isSet(derivativeUnitOfMeasureQty)) FixUtils.putFixFloatTag( out, FixTags.DERIVATIVEUNITOFMEASUREQTY_INT, derivativeUnitOfMeasureQty);
		if (FixUtils.isSet(derivativePriceUnitOfMeasure)) FixUtils.putFixTag( out, FixTags.DERIVATIVEPRICEUNITOFMEASURE_INT, derivativePriceUnitOfMeasure, 0, Utils.lastIndexTrim(derivativePriceUnitOfMeasure, (byte)0) );
		if (FixUtils.isSet(derivativePriceUnitOfMeasureQty)) FixUtils.putFixFloatTag( out, FixTags.DERIVATIVEPRICEUNITOFMEASUREQTY_INT, derivativePriceUnitOfMeasureQty);
		if (FixUtils.isSet(derivativeExerciseStyle)) FixUtils.putFixTag( out, FixTags.DERIVATIVEEXERCISESTYLE_INT, derivativeExerciseStyle );
		if (FixUtils.isSet(derivativeOptPayAmount)) FixUtils.putFixTag( out, FixTags.DERIVATIVEOPTPAYAMOUNT_INT, derivativeOptPayAmount);
		if (FixUtils.isSet(derivativeTimeUnit)) FixUtils.putFixTag( out, FixTags.DERIVATIVETIMEUNIT_INT, derivativeTimeUnit, 0, Utils.lastIndexTrim(derivativeTimeUnit, (byte)0) );
		if (FixUtils.isSet(derivativeSecurityExchange)) FixUtils.putFixTag( out, FixTags.DERIVATIVESECURITYEXCHANGE_INT, derivativeSecurityExchange, 0, Utils.lastIndexTrim(derivativeSecurityExchange, (byte)0) );
		if (FixUtils.isSet(derivativePositionLimit)) FixUtils.putFixTag( out, FixTags.DERIVATIVEPOSITIONLIMIT_INT, derivativePositionLimit);
		if (FixUtils.isSet(derivativeNTPositionLimit)) FixUtils.putFixTag( out, FixTags.DERIVATIVENTPOSITIONLIMIT_INT, derivativeNTPositionLimit);
		if (FixUtils.isSet(derivativeSettlMethod)) FixUtils.putFixTag( out, FixTags.DERIVATIVESETTLMETHOD_INT, derivativeSettlMethod );
		if (FixUtils.isSet(derivativePriceQuoteMethod)) FixUtils.putFixTag( out, FixTags.DERIVATIVEPRICEQUOTEMETHOD_INT, derivativePriceQuoteMethod, 0, Utils.lastIndexTrim(derivativePriceQuoteMethod, (byte)0) );
		if (FixUtils.isSet(derivativeValuationMethod)) FixUtils.putFixTag( out, FixTags.DERIVATIVEVALUATIONMETHOD_INT, derivativeValuationMethod, 0, Utils.lastIndexTrim(derivativeValuationMethod, (byte)0) );
		if (FixUtils.isSet(derivativeListMethod)) FixUtils.putFixTag( out, FixTags.DERIVATIVELISTMETHOD_INT, derivativeListMethod);
		if (FixUtils.isSet(derivativeCapPrice)) FixUtils.putFixFloatTag( out, FixTags.DERIVATIVECAPPRICE_INT, derivativeCapPrice);
		if (FixUtils.isSet(derivativeFloorPrice)) FixUtils.putFixFloatTag( out, FixTags.DERIVATIVEFLOORPRICE_INT, derivativeFloorPrice);
		if (FixUtils.isSet(derivativePutOrCall)) FixUtils.putFixTag( out, FixTags.DERIVATIVEPUTORCALL_INT, derivativePutOrCall);
		if (FixUtils.isSet(derivativeIssuer)) FixUtils.putFixTag( out, FixTags.DERIVATIVEISSUER_INT, derivativeIssuer, 0, Utils.lastIndexTrim(derivativeIssuer, (byte)0) );
		if (FixUtils.isSet(derivativeEncodedIssuerLen)) FixUtils.putFixTag( out, FixTags.DERIVATIVEENCODEDISSUERLEN_INT, derivativeEncodedIssuerLen);
		if (FixUtils.isSet(derivativeEncodedIssuer)) FixUtils.putFixTag( out, FixTags.DERIVATIVEENCODEDISSUER_INT, derivativeEncodedIssuer, 0, Utils.lastIndexTrim(derivativeEncodedIssuer, (byte)0) );
		if (FixUtils.isSet(derivativeSecurityDesc)) FixUtils.putFixTag( out, FixTags.DERIVATIVESECURITYDESC_INT, derivativeSecurityDesc, 0, Utils.lastIndexTrim(derivativeSecurityDesc, (byte)0) );
		if (FixUtils.isSet(derivativeEncodedSecurityDescLen)) FixUtils.putFixTag( out, FixTags.DERIVATIVEENCODEDSECURITYDESCLEN_INT, derivativeEncodedSecurityDescLen);
		if (FixUtils.isSet(derivativeEncodedSecurityDesc)) FixUtils.putFixTag( out, FixTags.DERIVATIVEENCODEDSECURITYDESC_INT, derivativeEncodedSecurityDesc, 0, Utils.lastIndexTrim(derivativeEncodedSecurityDesc, (byte)0) );
		if (FixUtils.isSet(derivativeContractSettlMonth)) FixUtils.putFixTag( out, FixTags.DERIVATIVECONTRACTSETTLMONTH_INT, derivativeContractSettlMonth);
		if (FixUtils.isSet(derivativeSecurityXML.derivativeSecurityXMLLen)) derivativeSecurityXML.encode( out );
		if (FixUtils.isSet(derivativeEventsGrp.noDerivativeEvents)) derivativeEventsGrp.encode( out );
		if (FixUtils.isSet(derivativeInstrumentParties.noDerivativeInstrumentParties)) derivativeInstrumentParties.encode( out );
	}
	/**
	 * If you use toString for any other purpose than administrative printout.
	 * You will end up in nifelheim!
	**/
	@Override
	public String toString() {
		char sep = '\n';
		if (Boolean.getBoolean("fix.useOneLiner")) sep = ( byte )0x01;

		String s = "";

			if (FixUtils.isSet(derivativeSymbol)) s += "DerivativeSymbol(1214)=" + new String(derivativeSymbol) + sep;
			if (FixUtils.isSet(derivativeSymbolSfx)) s += "DerivativeSymbolSfx(1215)=" + new String(derivativeSymbolSfx) + sep;
			if (FixUtils.isSet(derivativeSecurityID)) s += "DerivativeSecurityID(1216)=" + new String(derivativeSecurityID) + sep;
			if (FixUtils.isSet(derivativeSecurityIDSource)) s += "DerivativeSecurityIDSource(1217)=" + new String(derivativeSecurityIDSource) + sep;
			if (FixUtils.isSet(derivativeProduct)) s += "DerivativeProduct(1246)=" + String.valueOf(derivativeProduct) + sep;
			if (FixUtils.isSet(derivativeProductComplex)) s += "DerivativeProductComplex(1228)=" + new String(derivativeProductComplex) + sep;
			if (FixUtils.isSet(derivFlexProductEligibilityIndicator)) s += "DerivFlexProductEligibilityIndicator(1243)=" + String.valueOf(derivFlexProductEligibilityIndicator) + sep;
			if (FixUtils.isSet(derivativeSecurityGroup)) s += "DerivativeSecurityGroup(1247)=" + new String(derivativeSecurityGroup) + sep;
			if (FixUtils.isSet(derivativeCFICode)) s += "DerivativeCFICode(1248)=" + new String(derivativeCFICode) + sep;
			if (FixUtils.isSet(derivativeSecurityAltIDGrp.noDerivativeSecurityAltID)) s += derivativeSecurityAltIDGrp.toString();
			if (FixUtils.isSet(derivativeSecurityType)) s += "DerivativeSecurityType(1249)=" + new String(derivativeSecurityType) + sep;
			if (FixUtils.isSet(derivativeSecuritySubType)) s += "DerivativeSecuritySubType(1250)=" + new String(derivativeSecuritySubType) + sep;
			if (FixUtils.isSet(derivativeMaturityMonthYear)) s += "DerivativeMaturityMonthYear(1251)=" + new String(derivativeMaturityMonthYear) + sep;
			if (FixUtils.isSet(derivativeMaturityDate)) s += "DerivativeMaturityDate(1252)=" + new String(derivativeMaturityDate) + sep;
			if (FixUtils.isSet(derivativeMaturityTime)) s += "DerivativeMaturityTime(1253)=" + new String(derivativeMaturityTime) + sep;
			if (FixUtils.isSet(derivativeSettleOnOpenFlag)) s += "DerivativeSettleOnOpenFlag(1254)=" + new String(derivativeSettleOnOpenFlag) + sep;
			if (FixUtils.isSet(derivativeInstrmtAssignmentMethod)) s += "DerivativeInstrmtAssignmentMethod(1255)=" + String.valueOf(derivativeInstrmtAssignmentMethod) + sep;
			if (FixUtils.isSet(derivativeSecurityStatus)) s += "DerivativeSecurityStatus(1256)=" + new String(derivativeSecurityStatus) + sep;
			if (FixUtils.isSet(derivativeIssueDate)) s += "DerivativeIssueDate(1276)=" + new String(derivativeIssueDate) + sep;
			if (FixUtils.isSet(derivativeInstrRegistry)) s += "DerivativeInstrRegistry(1257)=" + new String(derivativeInstrRegistry) + sep;
			if (FixUtils.isSet(derivativeCountryOfIssue)) s += "DerivativeCountryOfIssue(1258)=" + new String(derivativeCountryOfIssue) + sep;
			if (FixUtils.isSet(derivativeStateOrProvinceOfIssue)) s += "DerivativeStateOrProvinceOfIssue(1259)=" + new String(derivativeStateOrProvinceOfIssue) + sep;
			if (FixUtils.isSet(derivativeStrikePrice)) s += "DerivativeStrikePrice(1261)=" + String.valueOf(derivativeStrikePrice) + sep;
			if (FixUtils.isSet(derivativeLocaleOfIssue)) s += "DerivativeLocaleOfIssue(1260)=" + new String(derivativeLocaleOfIssue) + sep;
			if (FixUtils.isSet(derivativeStrikeCurrency)) s += "DerivativeStrikeCurrency(1262)=" + new String(derivativeStrikeCurrency) + sep;
			if (FixUtils.isSet(derivativeStrikeMultiplier)) s += "DerivativeStrikeMultiplier(1263)=" + String.valueOf(derivativeStrikeMultiplier) + sep;
			if (FixUtils.isSet(derivativeStrikeValue)) s += "DerivativeStrikeValue(1264)=" + String.valueOf(derivativeStrikeValue) + sep;
			if (FixUtils.isSet(derivativeOptAttribute)) s += "DerivativeOptAttribute(1265)=" + String.valueOf(derivativeOptAttribute) + sep;
			if (FixUtils.isSet(derivativeContractMultiplier)) s += "DerivativeContractMultiplier(1266)=" + String.valueOf(derivativeContractMultiplier) + sep;
			if (FixUtils.isSet(derivativeMinPriceIncrement)) s += "DerivativeMinPriceIncrement(1267)=" + String.valueOf(derivativeMinPriceIncrement) + sep;
			if (FixUtils.isSet(derivativeMinPriceIncrementAmount)) s += "DerivativeMinPriceIncrementAmount(1268)=" + String.valueOf(derivativeMinPriceIncrementAmount) + sep;
			if (FixUtils.isSet(derivativeContractMultiplierUnit)) s += "DerivativeContractMultiplierUnit(1438)=" + String.valueOf(derivativeContractMultiplierUnit) + sep;
			if (FixUtils.isSet(derivativeFlowScheduleType)) s += "DerivativeFlowScheduleType(1442)=" + String.valueOf(derivativeFlowScheduleType) + sep;
			if (FixUtils.isSet(derivativeUnitOfMeasure)) s += "DerivativeUnitOfMeasure(1269)=" + new String(derivativeUnitOfMeasure) + sep;
			if (FixUtils.isSet(derivativeUnitOfMeasureQty)) s += "DerivativeUnitOfMeasureQty(1270)=" + String.valueOf(derivativeUnitOfMeasureQty) + sep;
			if (FixUtils.isSet(derivativePriceUnitOfMeasure)) s += "DerivativePriceUnitOfMeasure(1315)=" + new String(derivativePriceUnitOfMeasure) + sep;
			if (FixUtils.isSet(derivativePriceUnitOfMeasureQty)) s += "DerivativePriceUnitOfMeasureQty(1316)=" + String.valueOf(derivativePriceUnitOfMeasureQty) + sep;
			if (FixUtils.isSet(derivativeExerciseStyle)) s += "DerivativeExerciseStyle(1299)=" + String.valueOf(derivativeExerciseStyle) + sep;
			if (FixUtils.isSet(derivativeOptPayAmount)) s += "DerivativeOptPayAmount(1225)=" + String.valueOf(derivativeOptPayAmount) + sep;
			if (FixUtils.isSet(derivativeTimeUnit)) s += "DerivativeTimeUnit(1271)=" + new String(derivativeTimeUnit) + sep;
			if (FixUtils.isSet(derivativeSecurityExchange)) s += "DerivativeSecurityExchange(1272)=" + new String(derivativeSecurityExchange) + sep;
			if (FixUtils.isSet(derivativePositionLimit)) s += "DerivativePositionLimit(1273)=" + String.valueOf(derivativePositionLimit) + sep;
			if (FixUtils.isSet(derivativeNTPositionLimit)) s += "DerivativeNTPositionLimit(1274)=" + String.valueOf(derivativeNTPositionLimit) + sep;
			if (FixUtils.isSet(derivativeSettlMethod)) s += "DerivativeSettlMethod(1317)=" + String.valueOf(derivativeSettlMethod) + sep;
			if (FixUtils.isSet(derivativePriceQuoteMethod)) s += "DerivativePriceQuoteMethod(1318)=" + new String(derivativePriceQuoteMethod) + sep;
			if (FixUtils.isSet(derivativeValuationMethod)) s += "DerivativeValuationMethod(1319)=" + new String(derivativeValuationMethod) + sep;
			if (FixUtils.isSet(derivativeListMethod)) s += "DerivativeListMethod(1320)=" + String.valueOf(derivativeListMethod) + sep;
			if (FixUtils.isSet(derivativeCapPrice)) s += "DerivativeCapPrice(1321)=" + String.valueOf(derivativeCapPrice) + sep;
			if (FixUtils.isSet(derivativeFloorPrice)) s += "DerivativeFloorPrice(1322)=" + String.valueOf(derivativeFloorPrice) + sep;
			if (FixUtils.isSet(derivativePutOrCall)) s += "DerivativePutOrCall(1323)=" + String.valueOf(derivativePutOrCall) + sep;
			if (FixUtils.isSet(derivativeIssuer)) s += "DerivativeIssuer(1275)=" + new String(derivativeIssuer) + sep;
			if (FixUtils.isSet(derivativeEncodedIssuerLen)) s += "DerivativeEncodedIssuerLen(1277)=" + String.valueOf(derivativeEncodedIssuerLen) + sep;
			if (FixUtils.isSet(derivativeEncodedIssuer)) s += "DerivativeEncodedIssuer(1278)=" + new String(derivativeEncodedIssuer) + sep;
			if (FixUtils.isSet(derivativeSecurityDesc)) s += "DerivativeSecurityDesc(1279)=" + new String(derivativeSecurityDesc) + sep;
			if (FixUtils.isSet(derivativeEncodedSecurityDescLen)) s += "DerivativeEncodedSecurityDescLen(1280)=" + String.valueOf(derivativeEncodedSecurityDescLen) + sep;
			if (FixUtils.isSet(derivativeEncodedSecurityDesc)) s += "DerivativeEncodedSecurityDesc(1281)=" + new String(derivativeEncodedSecurityDesc) + sep;
			if (FixUtils.isSet(derivativeContractSettlMonth)) s += "DerivativeContractSettlMonth(1285)=" + new String(derivativeContractSettlMonth) + sep;
			if (FixUtils.isSet(derivativeSecurityXML.derivativeSecurityXMLLen)) s += derivativeSecurityXML.toString();
			if (FixUtils.isSet(derivativeEventsGrp.noDerivativeEvents)) s += derivativeEventsGrp.toString();
			if (FixUtils.isSet(derivativeInstrumentParties.noDerivativeInstrumentParties)) s += derivativeInstrumentParties.toString();
		return s;

	}

	@Override
	public boolean equals(Object o) {
		if (! ( o instanceof FixDerivativeInstrument)) return false;

			FixDerivativeInstrument msg = (FixDerivativeInstrument) o;

		if (!Utils.equals( derivativeSymbol, msg.derivativeSymbol)) return false;

		if (!Utils.equals( derivativeSymbolSfx, msg.derivativeSymbolSfx)) return false;

		if (!Utils.equals( derivativeSecurityID, msg.derivativeSecurityID)) return false;

		if (!Utils.equals( derivativeSecurityIDSource, msg.derivativeSecurityIDSource)) return false;

		if (!( derivativeProduct==msg.derivativeProduct)) return false;

		if (!Utils.equals( derivativeProductComplex, msg.derivativeProductComplex)) return false;

		if (!( derivFlexProductEligibilityIndicator==msg.derivFlexProductEligibilityIndicator)) return false;

		if (!Utils.equals( derivativeSecurityGroup, msg.derivativeSecurityGroup)) return false;

		if (!Utils.equals( derivativeCFICode, msg.derivativeCFICode)) return false;

		if (!derivativeSecurityAltIDGrp.equals(msg.derivativeSecurityAltIDGrp)) return false;

		if (!Utils.equals( derivativeSecurityType, msg.derivativeSecurityType)) return false;

		if (!Utils.equals( derivativeSecuritySubType, msg.derivativeSecuritySubType)) return false;

		if (!Utils.equals( derivativeMaturityMonthYear, msg.derivativeMaturityMonthYear)) return false;

		if (!Utils.equals( derivativeSettleOnOpenFlag, msg.derivativeSettleOnOpenFlag)) return false;

		if (!( derivativeInstrmtAssignmentMethod==msg.derivativeInstrmtAssignmentMethod)) return false;

		if (!Utils.equals( derivativeSecurityStatus, msg.derivativeSecurityStatus)) return false;

		if (!Utils.equals( derivativeInstrRegistry, msg.derivativeInstrRegistry)) return false;

		if (!Utils.equals( derivativeCountryOfIssue, msg.derivativeCountryOfIssue)) return false;

		if (!Utils.equals( derivativeStateOrProvinceOfIssue, msg.derivativeStateOrProvinceOfIssue)) return false;

		if (!( derivativeStrikePrice==msg.derivativeStrikePrice)) return false;

		if (!Utils.equals( derivativeLocaleOfIssue, msg.derivativeLocaleOfIssue)) return false;

		if (!Utils.equals( derivativeStrikeCurrency, msg.derivativeStrikeCurrency)) return false;

		if (!( derivativeStrikeMultiplier==msg.derivativeStrikeMultiplier)) return false;

		if (!( derivativeStrikeValue==msg.derivativeStrikeValue)) return false;

		if (!( derivativeOptAttribute==msg.derivativeOptAttribute)) return false;

		if (!( derivativeContractMultiplier==msg.derivativeContractMultiplier)) return false;

		if (!( derivativeMinPriceIncrement==msg.derivativeMinPriceIncrement)) return false;

		if (!( derivativeMinPriceIncrementAmount==msg.derivativeMinPriceIncrementAmount)) return false;

		if (!( derivativeContractMultiplierUnit==msg.derivativeContractMultiplierUnit)) return false;

		if (!( derivativeFlowScheduleType==msg.derivativeFlowScheduleType)) return false;

		if (!Utils.equals( derivativeUnitOfMeasure, msg.derivativeUnitOfMeasure)) return false;

		if (!( derivativeUnitOfMeasureQty==msg.derivativeUnitOfMeasureQty)) return false;

		if (!Utils.equals( derivativePriceUnitOfMeasure, msg.derivativePriceUnitOfMeasure)) return false;

		if (!( derivativePriceUnitOfMeasureQty==msg.derivativePriceUnitOfMeasureQty)) return false;

		if (!( derivativeExerciseStyle==msg.derivativeExerciseStyle)) return false;

		if (!( derivativeOptPayAmount==msg.derivativeOptPayAmount)) return false;

		if (!Utils.equals( derivativeTimeUnit, msg.derivativeTimeUnit)) return false;

		if (!Utils.equals( derivativeSecurityExchange, msg.derivativeSecurityExchange)) return false;

		if (!( derivativePositionLimit==msg.derivativePositionLimit)) return false;

		if (!( derivativeNTPositionLimit==msg.derivativeNTPositionLimit)) return false;

		if (!( derivativeSettlMethod==msg.derivativeSettlMethod)) return false;

		if (!Utils.equals( derivativePriceQuoteMethod, msg.derivativePriceQuoteMethod)) return false;

		if (!Utils.equals( derivativeValuationMethod, msg.derivativeValuationMethod)) return false;

		if (!( derivativeListMethod==msg.derivativeListMethod)) return false;

		if (!( derivativeCapPrice==msg.derivativeCapPrice)) return false;

		if (!( derivativeFloorPrice==msg.derivativeFloorPrice)) return false;

		if (!( derivativePutOrCall==msg.derivativePutOrCall)) return false;

		if (!Utils.equals( derivativeIssuer, msg.derivativeIssuer)) return false;

		if (!( derivativeEncodedIssuerLen==msg.derivativeEncodedIssuerLen)) return false;

		if (!Utils.equals( derivativeEncodedIssuer, msg.derivativeEncodedIssuer)) return false;

		if (!Utils.equals( derivativeSecurityDesc, msg.derivativeSecurityDesc)) return false;

		if (!( derivativeEncodedSecurityDescLen==msg.derivativeEncodedSecurityDescLen)) return false;

		if (!Utils.equals( derivativeEncodedSecurityDesc, msg.derivativeEncodedSecurityDesc)) return false;

		if (!Utils.equals( derivativeContractSettlMonth, msg.derivativeContractSettlMonth)) return false;

		if (!derivativeSecurityXML.equals(msg.derivativeSecurityXML)) return false;

		if (!derivativeEventsGrp.equals(msg.derivativeEventsGrp)) return false;

		if (!derivativeInstrumentParties.equals(msg.derivativeInstrumentParties)) return false;

		return true;
	}
}
