package org.tomac.protocol.fix.messaging.fix50sp2.component;

// DO NOT EDIT!!!
// This file is generated by FixMessageGenerator.
// If you need additional functionality, put it in a helper class
// that does not live in this folder!!!  Any java file in this folder 
// will be deleted upon the next run of the FixMessageGenerator!

import java.nio.ByteBuffer;

import org.tomac.protocol.fix.FixUtils;
import org.tomac.protocol.fix.FixSessionException;
import org.tomac.protocol.fix.FixGarbledException;
import org.tomac.utils.Utils;
import org.tomac.protocol.fix.FixConstants;


import org.tomac.protocol.fix.messaging.fix50sp2.FixTags;
import org.tomac.protocol.fix.messaging.fix50sp2.FixMessageInfo.*;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixUndSecAltIDGrp;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixUnderlyingStipulations;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixUndlyInstrumentParties;

public class FixUnderlyingInstrument implements FixComponent
{

	public byte[] underlyingSymbol;
	public byte[] underlyingSymbolSfx;
	public byte[] underlyingSecurityID;
	public byte[] underlyingSecurityIDSource;
	public FixUndSecAltIDGrp undSecAltIDGrp;
	public long underlyingProduct = 0;
	public byte[] underlyingCFICode;
	public byte[] underlyingSecurityType;
	public byte[] underlyingSecuritySubType;
	public byte[] underlyingMaturityMonthYear;
	public byte[] underlyingMaturityDate;
	public byte[] underlyingMaturityTime;
	public byte[] underlyingCouponPaymentDate;
	public byte[] underlyingRestructuringType;
	public byte[] underlyingSeniority;
	public long underlyingNotionalPercentageOutstanding = 0;
	public long underlyingOriginalNotionalPercentageOutstanding = 0;
	public long underlyingAttachmentPoint = 0;
	public long underlyingDetachmentPoint = 0;
	public byte[] underlyingIssueDate;
	public long underlyingRepoCollateralSecurityType = 0;
	public long underlyingRepurchaseTerm = 0;
	public long underlyingRepurchaseRate = 0;
	public long underlyingFactor = 0;
	public byte[] underlyingCreditRating;
	public byte[] underlyingInstrRegistry;
	public byte[] underlyingCountryOfIssue;
	public byte[] underlyingStateOrProvinceOfIssue;
	public byte[] underlyingLocaleOfIssue;
	public byte[] underlyingRedemptionDate;
	public long underlyingStrikePrice = 0;
	public byte[] underlyingStrikeCurrency;
	public byte underlyingOptAttribute = (byte)' ';
	public long underlyingContractMultiplier = 0;
	public byte[] underlyingUnitOfMeasure;
	public byte[] underlyingTimeUnit;
	public long underlyingExerciseStyle = 0;
	public long underlyingUnitOfMeasureQty = 0;
	public byte[] underlyingPriceUnitOfMeasure;
	public long underlyingPriceUnitOfMeasureQty = 0;
	public long underlyingContractMultiplierUnit = 0;
	public long underlyingFlowScheduleType = 0;
	public long underlyingCouponRate = 0;
	public byte[] underlyingSecurityExchange;
	public byte[] underlyingIssuer;
	public long encodedUnderlyingIssuerLen = 0;
	public byte[] encodedUnderlyingIssuer;
	public byte[] underlyingSecurityDesc;
	public long encodedUnderlyingSecurityDescLen = 0;
	public byte[] encodedUnderlyingSecurityDesc;
	public byte[] underlyingCPProgram;
	public byte[] underlyingCPRegType;
	public long underlyingAllocationPercent = 0;
	public byte[] underlyingCurrency;
	public long underlyingQty = 0;
	public long underlyingSettlementType = 0;
	public long underlyingCashAmount = 0;
	public byte[] underlyingCashType;
	public long underlyingPx = 0;
	public long underlyingDirtyPrice = 0;
	public long underlyingEndPrice = 0;
	public long underlyingStartValue = 0;
	public long underlyingCurrentValue = 0;
	public long underlyingEndValue = 0;
	public long underlyingAdjustedQuantity = 0;
	public long underlyingFXRate = 0;
	public byte underlyingFXRateCalc = (byte)' ';
	public FixUnderlyingStipulations underlyingStipulations;
	public long underlyingCapValue = 0;
	public byte[] underlyingSettlMethod;
	public long underlyingPutOrCall = 0;
	public FixUndlyInstrumentParties undlyInstrumentParties;

	public FixUnderlyingInstrument() {
		super();

		underlyingSymbol = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		underlyingSymbolSfx = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		underlyingSecurityID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		underlyingSecurityIDSource = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		undSecAltIDGrp = new FixUndSecAltIDGrp();
		underlyingCFICode = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		underlyingSecurityType = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		underlyingSecuritySubType = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		underlyingMaturityMonthYear = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		underlyingMaturityDate = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		underlyingMaturityTime = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		underlyingCouponPaymentDate = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		underlyingRestructuringType = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		underlyingSeniority = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		underlyingIssueDate = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		underlyingCreditRating = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		underlyingInstrRegistry = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		underlyingCountryOfIssue = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		underlyingStateOrProvinceOfIssue = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		underlyingLocaleOfIssue = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		underlyingRedemptionDate = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		underlyingStrikeCurrency = new byte[FixUtils.CURRENCY_LENGTH];
		underlyingUnitOfMeasure = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		underlyingTimeUnit = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		underlyingPriceUnitOfMeasure = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		underlyingSecurityExchange = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		underlyingIssuer = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		encodedUnderlyingIssuer = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		underlyingSecurityDesc = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		encodedUnderlyingSecurityDesc = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		underlyingCPProgram = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		underlyingCPRegType = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		underlyingCurrency = new byte[FixUtils.CURRENCY_LENGTH];
		underlyingCashType = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		underlyingStipulations = new FixUnderlyingStipulations();
		underlyingSettlMethod = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		undlyInstrumentParties = new FixUndlyInstrumentParties();
		this.clear();

	}

	@Override
	public void clear()
	{

		// clear out all the fields that aren't msgType

		Utils.fill( underlyingSymbol, (byte)0 );
		Utils.fill( underlyingSymbolSfx, (byte)0 );
		Utils.fill( underlyingSecurityID, (byte)0 );
		Utils.fill( underlyingSecurityIDSource, (byte)0 );
		underlyingProduct = Long.MAX_VALUE;		
		Utils.fill( underlyingCFICode, (byte)0 );
		Utils.fill( underlyingSecurityType, (byte)0 );
		Utils.fill( underlyingSecuritySubType, (byte)0 );
		Utils.fill( underlyingMaturityMonthYear, (byte)0 );
		Utils.fill( underlyingMaturityDate, (byte)0 );
		Utils.fill( underlyingMaturityTime, (byte)0 );
		Utils.fill( underlyingCouponPaymentDate, (byte)0 );
		Utils.fill( underlyingRestructuringType, (byte)0 );
		Utils.fill( underlyingSeniority, (byte)0 );
		underlyingNotionalPercentageOutstanding = Long.MAX_VALUE;		
		underlyingOriginalNotionalPercentageOutstanding = Long.MAX_VALUE;		
		underlyingAttachmentPoint = Long.MAX_VALUE;		
		underlyingDetachmentPoint = Long.MAX_VALUE;		
		Utils.fill( underlyingIssueDate, (byte)0 );
		underlyingRepoCollateralSecurityType = Long.MAX_VALUE;		
		underlyingRepurchaseTerm = Long.MAX_VALUE;		
		underlyingRepurchaseRate = Long.MAX_VALUE;		
		underlyingFactor = Long.MAX_VALUE;		
		Utils.fill( underlyingCreditRating, (byte)0 );
		Utils.fill( underlyingInstrRegistry, (byte)0 );
		Utils.fill( underlyingCountryOfIssue, (byte)0 );
		Utils.fill( underlyingStateOrProvinceOfIssue, (byte)0 );
		Utils.fill( underlyingLocaleOfIssue, (byte)0 );
		Utils.fill( underlyingRedemptionDate, (byte)0 );
		underlyingStrikePrice = Long.MAX_VALUE;		
		Utils.fill( underlyingStrikeCurrency, (byte)0 );
		underlyingOptAttribute = Byte.MAX_VALUE;		
		underlyingContractMultiplier = Long.MAX_VALUE;		
		Utils.fill( underlyingUnitOfMeasure, (byte)0 );
		Utils.fill( underlyingTimeUnit, (byte)0 );
		underlyingExerciseStyle = Long.MAX_VALUE;		
		underlyingUnitOfMeasureQty = Long.MAX_VALUE;		
		Utils.fill( underlyingPriceUnitOfMeasure, (byte)0 );
		underlyingPriceUnitOfMeasureQty = Long.MAX_VALUE;		
		underlyingContractMultiplierUnit = Long.MAX_VALUE;		
		underlyingFlowScheduleType = Long.MAX_VALUE;		
		underlyingCouponRate = Long.MAX_VALUE;		
		Utils.fill( underlyingSecurityExchange, (byte)0 );
		Utils.fill( underlyingIssuer, (byte)0 );
		encodedUnderlyingIssuerLen = Long.MAX_VALUE;		
		Utils.fill( encodedUnderlyingIssuer, (byte)0 );
		Utils.fill( underlyingSecurityDesc, (byte)0 );
		encodedUnderlyingSecurityDescLen = Long.MAX_VALUE;		
		Utils.fill( encodedUnderlyingSecurityDesc, (byte)0 );
		Utils.fill( underlyingCPProgram, (byte)0 );
		Utils.fill( underlyingCPRegType, (byte)0 );
		underlyingAllocationPercent = Long.MAX_VALUE;		
		Utils.fill( underlyingCurrency, (byte)0 );
		underlyingQty = Long.MAX_VALUE;		
		underlyingSettlementType = Long.MAX_VALUE;		
		underlyingCashAmount = Long.MAX_VALUE;		
		Utils.fill( underlyingCashType, (byte)0 );
		underlyingPx = Long.MAX_VALUE;		
		underlyingDirtyPrice = Long.MAX_VALUE;		
		underlyingEndPrice = Long.MAX_VALUE;		
		underlyingStartValue = Long.MAX_VALUE;		
		underlyingCurrentValue = Long.MAX_VALUE;		
		underlyingEndValue = Long.MAX_VALUE;		
		underlyingAdjustedQuantity = Long.MAX_VALUE;		
		underlyingFXRate = Long.MAX_VALUE;		
		underlyingFXRateCalc = Byte.MAX_VALUE;		
		underlyingCapValue = Long.MAX_VALUE;		
		Utils.fill( underlyingSettlMethod, (byte)0 );
		underlyingPutOrCall = Long.MAX_VALUE;		
		undSecAltIDGrp.clear();
		underlyingStipulations.clear();
		undlyInstrumentParties.clear();
	}

	public void getAll(int id, ByteBuffer buf) throws FixSessionException
	{

		int startTagPosition = buf.position();

		int lastTagPosition = buf.position();
		do {
			ByteBuffer value;

			value = buf;

			switch( id ) {

			case FixTags.UNDERLYINGSYMBOL_INT:
				underlyingSymbol = FixUtils.getTagStringValue(value, underlyingSymbol);
				break;

			case FixTags.UNDERLYINGSYMBOLSFX_INT:
				underlyingSymbolSfx = FixUtils.getTagStringValue(value, underlyingSymbolSfx);
				break;

			case FixTags.UNDERLYINGSECURITYID_INT:
				underlyingSecurityID = FixUtils.getTagStringValue(value, underlyingSecurityID);
				break;

			case FixTags.UNDERLYINGSECURITYIDSOURCE_INT:
				underlyingSecurityIDSource = FixUtils.getTagStringValue(value, underlyingSecurityIDSource);
				break;

			case FixTags.NOUNDERLYINGSECURITYALTID_INT:
				undSecAltIDGrp.noUnderlyingSecurityAltID = FixUtils.getTagIntValue( value );
				undSecAltIDGrp.getAll(undSecAltIDGrp.noUnderlyingSecurityAltID, value );
				break;

			case FixTags.UNDERLYINGPRODUCT_INT:
				underlyingProduct = FixUtils.getTagIntValue( value );
				break;

			case FixTags.UNDERLYINGCFICODE_INT:
				underlyingCFICode = FixUtils.getTagStringValue(value, underlyingCFICode);
				break;

			case FixTags.UNDERLYINGSECURITYTYPE_INT:
				underlyingSecurityType = FixUtils.getTagStringValue(value, underlyingSecurityType);
				break;

			case FixTags.UNDERLYINGSECURITYSUBTYPE_INT:
				underlyingSecuritySubType = FixUtils.getTagStringValue(value, underlyingSecuritySubType);
				break;

			case FixTags.UNDERLYINGMATURITYMONTHYEAR_INT:
				underlyingMaturityMonthYear = FixUtils.getTagStringValue(value, underlyingMaturityMonthYear);
				break;

			case FixTags.UNDERLYINGMATURITYDATE_INT:
				underlyingMaturityDate = FixUtils.getTagStringValue(value, underlyingMaturityDate);
				break;

			case FixTags.UNDERLYINGMATURITYTIME_INT:
				underlyingMaturityTime = FixUtils.getTagStringValue(value, underlyingMaturityTime);
				break;

			case FixTags.UNDERLYINGCOUPONPAYMENTDATE_INT:
				underlyingCouponPaymentDate = FixUtils.getTagStringValue(value, underlyingCouponPaymentDate);
				break;

			case FixTags.UNDERLYINGRESTRUCTURINGTYPE_INT:
				underlyingRestructuringType = FixUtils.getTagStringValue(value, underlyingRestructuringType);
				break;

			case FixTags.UNDERLYINGSENIORITY_INT:
				underlyingSeniority = FixUtils.getTagStringValue(value, underlyingSeniority);
				break;

			case FixTags.UNDERLYINGNOTIONALPERCENTAGEOUTSTANDING_INT:
				underlyingNotionalPercentageOutstanding = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.UNDERLYINGORIGINALNOTIONALPERCENTAGEOUTSTANDING_INT:
				underlyingOriginalNotionalPercentageOutstanding = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.UNDERLYINGATTACHMENTPOINT_INT:
				underlyingAttachmentPoint = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.UNDERLYINGDETACHMENTPOINT_INT:
				underlyingDetachmentPoint = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.UNDERLYINGISSUEDATE_INT:
				underlyingIssueDate = FixUtils.getTagStringValue(value, underlyingIssueDate);
				break;

			case FixTags.UNDERLYINGREPOCOLLATERALSECURITYTYPE_INT:
				underlyingRepoCollateralSecurityType = FixUtils.getTagIntValue( value );
				break;

			case FixTags.UNDERLYINGREPURCHASETERM_INT:
				underlyingRepurchaseTerm = FixUtils.getTagIntValue( value );
				break;

			case FixTags.UNDERLYINGREPURCHASERATE_INT:
				underlyingRepurchaseRate = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.UNDERLYINGFACTOR_INT:
				underlyingFactor = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.UNDERLYINGCREDITRATING_INT:
				underlyingCreditRating = FixUtils.getTagStringValue(value, underlyingCreditRating);
				break;

			case FixTags.UNDERLYINGINSTRREGISTRY_INT:
				underlyingInstrRegistry = FixUtils.getTagStringValue(value, underlyingInstrRegistry);
				break;

			case FixTags.UNDERLYINGCOUNTRYOFISSUE_INT:
				underlyingCountryOfIssue = FixUtils.getTagStringValue(value, underlyingCountryOfIssue);
				break;

			case FixTags.UNDERLYINGSTATEORPROVINCEOFISSUE_INT:
				underlyingStateOrProvinceOfIssue = FixUtils.getTagStringValue(value, underlyingStateOrProvinceOfIssue);
				break;

			case FixTags.UNDERLYINGLOCALEOFISSUE_INT:
				underlyingLocaleOfIssue = FixUtils.getTagStringValue(value, underlyingLocaleOfIssue);
				break;

			case FixTags.UNDERLYINGREDEMPTIONDATE_INT:
				underlyingRedemptionDate = FixUtils.getTagStringValue(value, underlyingRedemptionDate);
				break;

			case FixTags.UNDERLYINGSTRIKEPRICE_INT:
				underlyingStrikePrice = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.UNDERLYINGSTRIKECURRENCY_INT:
				underlyingStrikeCurrency = FixUtils.getTagStringValue(value, underlyingStrikeCurrency);
				break;

			case FixTags.UNDERLYINGOPTATTRIBUTE_INT:
				underlyingOptAttribute = FixUtils.getTagCharValue( value );
				break;

			case FixTags.UNDERLYINGCONTRACTMULTIPLIER_INT:
				underlyingContractMultiplier = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.UNDERLYINGUNITOFMEASURE_INT:
				underlyingUnitOfMeasure = FixUtils.getTagStringValue(value, underlyingUnitOfMeasure);
				break;

			case FixTags.UNDERLYINGTIMEUNIT_INT:
				underlyingTimeUnit = FixUtils.getTagStringValue(value, underlyingTimeUnit);
				break;

			case FixTags.UNDERLYINGEXERCISESTYLE_INT:
				underlyingExerciseStyle = FixUtils.getTagIntValue( value );
				break;

			case FixTags.UNDERLYINGUNITOFMEASUREQTY_INT:
				underlyingUnitOfMeasureQty = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.UNDERLYINGPRICEUNITOFMEASURE_INT:
				underlyingPriceUnitOfMeasure = FixUtils.getTagStringValue(value, underlyingPriceUnitOfMeasure);
				break;

			case FixTags.UNDERLYINGPRICEUNITOFMEASUREQTY_INT:
				underlyingPriceUnitOfMeasureQty = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.UNDERLYINGCONTRACTMULTIPLIERUNIT_INT:
				underlyingContractMultiplierUnit = FixUtils.getTagIntValue( value );
				break;

			case FixTags.UNDERLYINGFLOWSCHEDULETYPE_INT:
				underlyingFlowScheduleType = FixUtils.getTagIntValue( value );
				break;

			case FixTags.UNDERLYINGCOUPONRATE_INT:
				underlyingCouponRate = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.UNDERLYINGSECURITYEXCHANGE_INT:
				underlyingSecurityExchange = FixUtils.getTagStringValue(value, underlyingSecurityExchange);
				break;

			case FixTags.UNDERLYINGISSUER_INT:
				underlyingIssuer = FixUtils.getTagStringValue(value, underlyingIssuer);
				break;

			case FixTags.ENCODEDUNDERLYINGISSUERLEN_INT:
				encodedUnderlyingIssuerLen = FixUtils.getTagIntValue( value );
				break;

			case FixTags.ENCODEDUNDERLYINGISSUER_INT:
				encodedUnderlyingIssuer = FixUtils.getTagStringValue(value, encodedUnderlyingIssuer);
				break;

			case FixTags.UNDERLYINGSECURITYDESC_INT:
				underlyingSecurityDesc = FixUtils.getTagStringValue(value, underlyingSecurityDesc);
				break;

			case FixTags.ENCODEDUNDERLYINGSECURITYDESCLEN_INT:
				encodedUnderlyingSecurityDescLen = FixUtils.getTagIntValue( value );
				break;

			case FixTags.ENCODEDUNDERLYINGSECURITYDESC_INT:
				encodedUnderlyingSecurityDesc = FixUtils.getTagStringValue(value, encodedUnderlyingSecurityDesc);
				break;

			case FixTags.UNDERLYINGCPPROGRAM_INT:
				underlyingCPProgram = FixUtils.getTagStringValue(value, underlyingCPProgram);
				break;

			case FixTags.UNDERLYINGCPREGTYPE_INT:
				underlyingCPRegType = FixUtils.getTagStringValue(value, underlyingCPRegType);
				break;

			case FixTags.UNDERLYINGALLOCATIONPERCENT_INT:
				underlyingAllocationPercent = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.UNDERLYINGCURRENCY_INT:
				underlyingCurrency = FixUtils.getTagStringValue(value, underlyingCurrency);
				break;

			case FixTags.UNDERLYINGQTY_INT:
				underlyingQty = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.UNDERLYINGSETTLEMENTTYPE_INT:
				underlyingSettlementType = FixUtils.getTagIntValue( value );
				if (!UnderlyingSettlementType.isValid(underlyingSettlementType) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + underlyingSettlementType + ") for tag").getBytes(), id, new byte[0] );
				break;

			case FixTags.UNDERLYINGCASHAMOUNT_INT:
				underlyingCashAmount = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.UNDERLYINGCASHTYPE_INT:
				underlyingCashType = FixUtils.getTagStringValue(value, underlyingCashType);
				if (!UnderlyingCashType.isValid(underlyingCashType) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + underlyingCashType + ") for tag").getBytes(), id, new byte[0] );
				break;

			case FixTags.UNDERLYINGPX_INT:
				underlyingPx = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.UNDERLYINGDIRTYPRICE_INT:
				underlyingDirtyPrice = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.UNDERLYINGENDPRICE_INT:
				underlyingEndPrice = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.UNDERLYINGSTARTVALUE_INT:
				underlyingStartValue = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.UNDERLYINGCURRENTVALUE_INT:
				underlyingCurrentValue = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.UNDERLYINGENDVALUE_INT:
				underlyingEndValue = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.UNDERLYINGADJUSTEDQUANTITY_INT:
				underlyingAdjustedQuantity = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.UNDERLYINGFXRATE_INT:
				underlyingFXRate = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.UNDERLYINGFXRATECALC_INT:
				underlyingFXRateCalc = FixUtils.getTagCharValue( value );
				if (!UnderlyingFXRateCalc.isValid(underlyingFXRateCalc) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + underlyingFXRateCalc + ") for tag").getBytes(), id, new byte[0] );
				break;

			case FixTags.NOUNDERLYINGSTIPS_INT:
				underlyingStipulations.noUnderlyingStips = FixUtils.getTagIntValue( value );
				underlyingStipulations.getAll(underlyingStipulations.noUnderlyingStips, value );
				break;

			case FixTags.UNDERLYINGCAPVALUE_INT:
				underlyingCapValue = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.UNDERLYINGSETTLMETHOD_INT:
				underlyingSettlMethod = FixUtils.getTagStringValue(value, underlyingSettlMethod);
				break;

			case FixTags.UNDERLYINGPUTORCALL_INT:
				underlyingPutOrCall = FixUtils.getTagIntValue( value );
				break;

			case FixTags.NOUNDLYINSTRUMENTPARTIES_INT:
				undlyInstrumentParties.noUndlyInstrumentParties = FixUtils.getTagIntValue( value );
				undlyInstrumentParties.getAll(undlyInstrumentParties.noUndlyInstrumentParties, value );
				break;

			// we will always endup with unknown tag, unread and return to upper layer in hierarchy
			default:
				id = checkRequiredTags();
				if (id > 0) throw new FixSessionException(SessionRejectReason.REQUIRED_TAG_MISSING, "Required tag missing".getBytes(), id, new byte[0] );

				buf.position( lastTagPosition );
				return;

			}

			lastTagPosition = buf.position();

		} while ( ( id = FixUtils.getTagId( buf ) ) > 0 );

		buf.position(startTagPosition);

	}

	private int checkRequiredTags() {
		int tag = -1;

		return tag;

	}
	@Override
	public boolean isSet()
	{
		if (FixUtils.isSet(underlyingSymbol)) return true;
		if (FixUtils.isSet(underlyingSymbolSfx)) return true;
		if (FixUtils.isSet(underlyingSecurityID)) return true;
		if (FixUtils.isSet(underlyingSecurityIDSource)) return true;
		if (FixUtils.isSet(undSecAltIDGrp.noUnderlyingSecurityAltID)) return true;
		if (FixUtils.isSet(underlyingProduct)) return true;
		if (FixUtils.isSet(underlyingCFICode)) return true;
		if (FixUtils.isSet(underlyingSecurityType)) return true;
		if (FixUtils.isSet(underlyingSecuritySubType)) return true;
		if (FixUtils.isSet(underlyingMaturityMonthYear)) return true;
		if (FixUtils.isSet(underlyingMaturityDate)) return true;
		if (FixUtils.isSet(underlyingMaturityTime)) return true;
		if (FixUtils.isSet(underlyingCouponPaymentDate)) return true;
		if (FixUtils.isSet(underlyingRestructuringType)) return true;
		if (FixUtils.isSet(underlyingSeniority)) return true;
		if (FixUtils.isSet(underlyingNotionalPercentageOutstanding)) return true;
		if (FixUtils.isSet(underlyingOriginalNotionalPercentageOutstanding)) return true;
		if (FixUtils.isSet(underlyingAttachmentPoint)) return true;
		if (FixUtils.isSet(underlyingDetachmentPoint)) return true;
		if (FixUtils.isSet(underlyingIssueDate)) return true;
		if (FixUtils.isSet(underlyingRepoCollateralSecurityType)) return true;
		if (FixUtils.isSet(underlyingRepurchaseTerm)) return true;
		if (FixUtils.isSet(underlyingRepurchaseRate)) return true;
		if (FixUtils.isSet(underlyingFactor)) return true;
		if (FixUtils.isSet(underlyingCreditRating)) return true;
		if (FixUtils.isSet(underlyingInstrRegistry)) return true;
		if (FixUtils.isSet(underlyingCountryOfIssue)) return true;
		if (FixUtils.isSet(underlyingStateOrProvinceOfIssue)) return true;
		if (FixUtils.isSet(underlyingLocaleOfIssue)) return true;
		if (FixUtils.isSet(underlyingRedemptionDate)) return true;
		if (FixUtils.isSet(underlyingStrikePrice)) return true;
		if (FixUtils.isSet(underlyingStrikeCurrency)) return true;
		if (FixUtils.isSet(underlyingOptAttribute)) return true;
		if (FixUtils.isSet(underlyingContractMultiplier)) return true;
		if (FixUtils.isSet(underlyingUnitOfMeasure)) return true;
		if (FixUtils.isSet(underlyingTimeUnit)) return true;
		if (FixUtils.isSet(underlyingExerciseStyle)) return true;
		if (FixUtils.isSet(underlyingUnitOfMeasureQty)) return true;
		if (FixUtils.isSet(underlyingPriceUnitOfMeasure)) return true;
		if (FixUtils.isSet(underlyingPriceUnitOfMeasureQty)) return true;
		if (FixUtils.isSet(underlyingContractMultiplierUnit)) return true;
		if (FixUtils.isSet(underlyingFlowScheduleType)) return true;
		if (FixUtils.isSet(underlyingCouponRate)) return true;
		if (FixUtils.isSet(underlyingSecurityExchange)) return true;
		if (FixUtils.isSet(underlyingIssuer)) return true;
		if (FixUtils.isSet(encodedUnderlyingIssuerLen)) return true;
		if (FixUtils.isSet(encodedUnderlyingIssuer)) return true;
		if (FixUtils.isSet(underlyingSecurityDesc)) return true;
		if (FixUtils.isSet(encodedUnderlyingSecurityDescLen)) return true;
		if (FixUtils.isSet(encodedUnderlyingSecurityDesc)) return true;
		if (FixUtils.isSet(underlyingCPProgram)) return true;
		if (FixUtils.isSet(underlyingCPRegType)) return true;
		if (FixUtils.isSet(underlyingAllocationPercent)) return true;
		if (FixUtils.isSet(underlyingCurrency)) return true;
		if (FixUtils.isSet(underlyingQty)) return true;
		if (FixUtils.isSet(underlyingSettlementType)) return true;
		if (FixUtils.isSet(underlyingCashAmount)) return true;
		if (FixUtils.isSet(underlyingCashType)) return true;
		if (FixUtils.isSet(underlyingPx)) return true;
		if (FixUtils.isSet(underlyingDirtyPrice)) return true;
		if (FixUtils.isSet(underlyingEndPrice)) return true;
		if (FixUtils.isSet(underlyingStartValue)) return true;
		if (FixUtils.isSet(underlyingCurrentValue)) return true;
		if (FixUtils.isSet(underlyingEndValue)) return true;
		if (FixUtils.isSet(underlyingAdjustedQuantity)) return true;
		if (FixUtils.isSet(underlyingFXRate)) return true;
		if (FixUtils.isSet(underlyingFXRateCalc)) return true;
		if (FixUtils.isSet(underlyingStipulations.noUnderlyingStips)) return true;
		if (FixUtils.isSet(underlyingCapValue)) return true;
		if (FixUtils.isSet(underlyingSettlMethod)) return true;
		if (FixUtils.isSet(underlyingPutOrCall)) return true;
		if (FixUtils.isSet(undlyInstrumentParties.noUndlyInstrumentParties)) return true;
		return false;
	}
	@Override
	public void encode( ByteBuffer out )
	{
		if (FixUtils.isSet(underlyingSymbol)) FixUtils.putFixTag( out, FixTags.UNDERLYINGSYMBOL_INT, underlyingSymbol, 0, Utils.lastIndexTrim(underlyingSymbol, (byte)0) );
		if (FixUtils.isSet(underlyingSymbolSfx)) FixUtils.putFixTag( out, FixTags.UNDERLYINGSYMBOLSFX_INT, underlyingSymbolSfx, 0, Utils.lastIndexTrim(underlyingSymbolSfx, (byte)0) );
		if (FixUtils.isSet(underlyingSecurityID)) FixUtils.putFixTag( out, FixTags.UNDERLYINGSECURITYID_INT, underlyingSecurityID, 0, Utils.lastIndexTrim(underlyingSecurityID, (byte)0) );
		if (FixUtils.isSet(underlyingSecurityIDSource)) FixUtils.putFixTag( out, FixTags.UNDERLYINGSECURITYIDSOURCE_INT, underlyingSecurityIDSource, 0, Utils.lastIndexTrim(underlyingSecurityIDSource, (byte)0) );
		if (FixUtils.isSet(undSecAltIDGrp.noUnderlyingSecurityAltID)) undSecAltIDGrp.encode( out );
		if (FixUtils.isSet(underlyingProduct)) FixUtils.putFixTag( out, FixTags.UNDERLYINGPRODUCT_INT, underlyingProduct);
		if (FixUtils.isSet(underlyingCFICode)) FixUtils.putFixTag( out, FixTags.UNDERLYINGCFICODE_INT, underlyingCFICode, 0, Utils.lastIndexTrim(underlyingCFICode, (byte)0) );
		if (FixUtils.isSet(underlyingSecurityType)) FixUtils.putFixTag( out, FixTags.UNDERLYINGSECURITYTYPE_INT, underlyingSecurityType, 0, Utils.lastIndexTrim(underlyingSecurityType, (byte)0) );
		if (FixUtils.isSet(underlyingSecuritySubType)) FixUtils.putFixTag( out, FixTags.UNDERLYINGSECURITYSUBTYPE_INT, underlyingSecuritySubType, 0, Utils.lastIndexTrim(underlyingSecuritySubType, (byte)0) );
		if (FixUtils.isSet(underlyingMaturityMonthYear)) FixUtils.putFixTag( out, FixTags.UNDERLYINGMATURITYMONTHYEAR_INT, underlyingMaturityMonthYear);
		if (FixUtils.isSet(underlyingMaturityDate)) FixUtils.putFixTag( out, FixTags.UNDERLYINGMATURITYDATE_INT, underlyingMaturityDate);
		if (FixUtils.isSet(underlyingMaturityTime)) FixUtils.putFixTag( out, FixTags.UNDERLYINGMATURITYTIME_INT, underlyingMaturityTime);
		if (FixUtils.isSet(underlyingCouponPaymentDate)) FixUtils.putFixTag( out, FixTags.UNDERLYINGCOUPONPAYMENTDATE_INT, underlyingCouponPaymentDate);
		if (FixUtils.isSet(underlyingRestructuringType)) FixUtils.putFixTag( out, FixTags.UNDERLYINGRESTRUCTURINGTYPE_INT, underlyingRestructuringType, 0, Utils.lastIndexTrim(underlyingRestructuringType, (byte)0) );
		if (FixUtils.isSet(underlyingSeniority)) FixUtils.putFixTag( out, FixTags.UNDERLYINGSENIORITY_INT, underlyingSeniority, 0, Utils.lastIndexTrim(underlyingSeniority, (byte)0) );
		if (FixUtils.isSet(underlyingNotionalPercentageOutstanding)) FixUtils.putFixFloatTag( out, FixTags.UNDERLYINGNOTIONALPERCENTAGEOUTSTANDING_INT, underlyingNotionalPercentageOutstanding);
		if (FixUtils.isSet(underlyingOriginalNotionalPercentageOutstanding)) FixUtils.putFixFloatTag( out, FixTags.UNDERLYINGORIGINALNOTIONALPERCENTAGEOUTSTANDING_INT, underlyingOriginalNotionalPercentageOutstanding);
		if (FixUtils.isSet(underlyingAttachmentPoint)) FixUtils.putFixFloatTag( out, FixTags.UNDERLYINGATTACHMENTPOINT_INT, underlyingAttachmentPoint);
		if (FixUtils.isSet(underlyingDetachmentPoint)) FixUtils.putFixFloatTag( out, FixTags.UNDERLYINGDETACHMENTPOINT_INT, underlyingDetachmentPoint);
		if (FixUtils.isSet(underlyingIssueDate)) FixUtils.putFixTag( out, FixTags.UNDERLYINGISSUEDATE_INT, underlyingIssueDate);
		if (FixUtils.isSet(underlyingRepoCollateralSecurityType)) FixUtils.putFixTag( out, FixTags.UNDERLYINGREPOCOLLATERALSECURITYTYPE_INT, underlyingRepoCollateralSecurityType);
		if (FixUtils.isSet(underlyingRepurchaseTerm)) FixUtils.putFixTag( out, FixTags.UNDERLYINGREPURCHASETERM_INT, underlyingRepurchaseTerm);
		if (FixUtils.isSet(underlyingRepurchaseRate)) FixUtils.putFixFloatTag( out, FixTags.UNDERLYINGREPURCHASERATE_INT, underlyingRepurchaseRate);
		if (FixUtils.isSet(underlyingFactor)) FixUtils.putFixFloatTag( out, FixTags.UNDERLYINGFACTOR_INT, underlyingFactor);
		if (FixUtils.isSet(underlyingCreditRating)) FixUtils.putFixTag( out, FixTags.UNDERLYINGCREDITRATING_INT, underlyingCreditRating, 0, Utils.lastIndexTrim(underlyingCreditRating, (byte)0) );
		if (FixUtils.isSet(underlyingInstrRegistry)) FixUtils.putFixTag( out, FixTags.UNDERLYINGINSTRREGISTRY_INT, underlyingInstrRegistry, 0, Utils.lastIndexTrim(underlyingInstrRegistry, (byte)0) );
		if (FixUtils.isSet(underlyingCountryOfIssue)) FixUtils.putFixTag( out, FixTags.UNDERLYINGCOUNTRYOFISSUE_INT, underlyingCountryOfIssue, 0, Utils.lastIndexTrim(underlyingCountryOfIssue, (byte)0) );
		if (FixUtils.isSet(underlyingStateOrProvinceOfIssue)) FixUtils.putFixTag( out, FixTags.UNDERLYINGSTATEORPROVINCEOFISSUE_INT, underlyingStateOrProvinceOfIssue, 0, Utils.lastIndexTrim(underlyingStateOrProvinceOfIssue, (byte)0) );
		if (FixUtils.isSet(underlyingLocaleOfIssue)) FixUtils.putFixTag( out, FixTags.UNDERLYINGLOCALEOFISSUE_INT, underlyingLocaleOfIssue, 0, Utils.lastIndexTrim(underlyingLocaleOfIssue, (byte)0) );
		if (FixUtils.isSet(underlyingRedemptionDate)) FixUtils.putFixTag( out, FixTags.UNDERLYINGREDEMPTIONDATE_INT, underlyingRedemptionDate);
		if (FixUtils.isSet(underlyingStrikePrice)) FixUtils.putFixFloatTag( out, FixTags.UNDERLYINGSTRIKEPRICE_INT, underlyingStrikePrice);
		if (FixUtils.isSet(underlyingStrikeCurrency)) FixUtils.putFixTag( out, FixTags.UNDERLYINGSTRIKECURRENCY_INT, underlyingStrikeCurrency, 0, Utils.lastIndexTrim(underlyingStrikeCurrency, (byte)0) );
		if (FixUtils.isSet(underlyingOptAttribute)) FixUtils.putFixTag( out, FixTags.UNDERLYINGOPTATTRIBUTE_INT, underlyingOptAttribute );
		if (FixUtils.isSet(underlyingContractMultiplier)) FixUtils.putFixFloatTag( out, FixTags.UNDERLYINGCONTRACTMULTIPLIER_INT, underlyingContractMultiplier);
		if (FixUtils.isSet(underlyingUnitOfMeasure)) FixUtils.putFixTag( out, FixTags.UNDERLYINGUNITOFMEASURE_INT, underlyingUnitOfMeasure, 0, Utils.lastIndexTrim(underlyingUnitOfMeasure, (byte)0) );
		if (FixUtils.isSet(underlyingTimeUnit)) FixUtils.putFixTag( out, FixTags.UNDERLYINGTIMEUNIT_INT, underlyingTimeUnit, 0, Utils.lastIndexTrim(underlyingTimeUnit, (byte)0) );
		if (FixUtils.isSet(underlyingExerciseStyle)) FixUtils.putFixTag( out, FixTags.UNDERLYINGEXERCISESTYLE_INT, underlyingExerciseStyle);
		if (FixUtils.isSet(underlyingUnitOfMeasureQty)) FixUtils.putFixFloatTag( out, FixTags.UNDERLYINGUNITOFMEASUREQTY_INT, underlyingUnitOfMeasureQty);
		if (FixUtils.isSet(underlyingPriceUnitOfMeasure)) FixUtils.putFixTag( out, FixTags.UNDERLYINGPRICEUNITOFMEASURE_INT, underlyingPriceUnitOfMeasure, 0, Utils.lastIndexTrim(underlyingPriceUnitOfMeasure, (byte)0) );
		if (FixUtils.isSet(underlyingPriceUnitOfMeasureQty)) FixUtils.putFixFloatTag( out, FixTags.UNDERLYINGPRICEUNITOFMEASUREQTY_INT, underlyingPriceUnitOfMeasureQty);
		if (FixUtils.isSet(underlyingContractMultiplierUnit)) FixUtils.putFixTag( out, FixTags.UNDERLYINGCONTRACTMULTIPLIERUNIT_INT, underlyingContractMultiplierUnit);
		if (FixUtils.isSet(underlyingFlowScheduleType)) FixUtils.putFixTag( out, FixTags.UNDERLYINGFLOWSCHEDULETYPE_INT, underlyingFlowScheduleType);
		if (FixUtils.isSet(underlyingCouponRate)) FixUtils.putFixFloatTag( out, FixTags.UNDERLYINGCOUPONRATE_INT, underlyingCouponRate);
		if (FixUtils.isSet(underlyingSecurityExchange)) FixUtils.putFixTag( out, FixTags.UNDERLYINGSECURITYEXCHANGE_INT, underlyingSecurityExchange, 0, Utils.lastIndexTrim(underlyingSecurityExchange, (byte)0) );
		if (FixUtils.isSet(underlyingIssuer)) FixUtils.putFixTag( out, FixTags.UNDERLYINGISSUER_INT, underlyingIssuer, 0, Utils.lastIndexTrim(underlyingIssuer, (byte)0) );
		if (FixUtils.isSet(encodedUnderlyingIssuerLen)) FixUtils.putFixTag( out, FixTags.ENCODEDUNDERLYINGISSUERLEN_INT, encodedUnderlyingIssuerLen);
		if (FixUtils.isSet(encodedUnderlyingIssuer)) FixUtils.putFixTag( out, FixTags.ENCODEDUNDERLYINGISSUER_INT, encodedUnderlyingIssuer, 0, Utils.lastIndexTrim(encodedUnderlyingIssuer, (byte)0) );
		if (FixUtils.isSet(underlyingSecurityDesc)) FixUtils.putFixTag( out, FixTags.UNDERLYINGSECURITYDESC_INT, underlyingSecurityDesc, 0, Utils.lastIndexTrim(underlyingSecurityDesc, (byte)0) );
		if (FixUtils.isSet(encodedUnderlyingSecurityDescLen)) FixUtils.putFixTag( out, FixTags.ENCODEDUNDERLYINGSECURITYDESCLEN_INT, encodedUnderlyingSecurityDescLen);
		if (FixUtils.isSet(encodedUnderlyingSecurityDesc)) FixUtils.putFixTag( out, FixTags.ENCODEDUNDERLYINGSECURITYDESC_INT, encodedUnderlyingSecurityDesc, 0, Utils.lastIndexTrim(encodedUnderlyingSecurityDesc, (byte)0) );
		if (FixUtils.isSet(underlyingCPProgram)) FixUtils.putFixTag( out, FixTags.UNDERLYINGCPPROGRAM_INT, underlyingCPProgram, 0, Utils.lastIndexTrim(underlyingCPProgram, (byte)0) );
		if (FixUtils.isSet(underlyingCPRegType)) FixUtils.putFixTag( out, FixTags.UNDERLYINGCPREGTYPE_INT, underlyingCPRegType, 0, Utils.lastIndexTrim(underlyingCPRegType, (byte)0) );
		if (FixUtils.isSet(underlyingAllocationPercent)) FixUtils.putFixFloatTag( out, FixTags.UNDERLYINGALLOCATIONPERCENT_INT, underlyingAllocationPercent);
		if (FixUtils.isSet(underlyingCurrency)) FixUtils.putFixTag( out, FixTags.UNDERLYINGCURRENCY_INT, underlyingCurrency, 0, Utils.lastIndexTrim(underlyingCurrency, (byte)0) );
		if (FixUtils.isSet(underlyingQty)) FixUtils.putFixFloatTag( out, FixTags.UNDERLYINGQTY_INT, underlyingQty);
		if (FixUtils.isSet(underlyingSettlementType)) FixUtils.putFixTag( out, FixTags.UNDERLYINGSETTLEMENTTYPE_INT, underlyingSettlementType);
		if (FixUtils.isSet(underlyingCashAmount)) FixUtils.putFixTag( out, FixTags.UNDERLYINGCASHAMOUNT_INT, underlyingCashAmount);
		if (FixUtils.isSet(underlyingCashType)) FixUtils.putFixTag( out, FixTags.UNDERLYINGCASHTYPE_INT, underlyingCashType, 0, Utils.lastIndexTrim(underlyingCashType, (byte)0) );
		if (FixUtils.isSet(underlyingPx)) FixUtils.putFixFloatTag( out, FixTags.UNDERLYINGPX_INT, underlyingPx);
		if (FixUtils.isSet(underlyingDirtyPrice)) FixUtils.putFixFloatTag( out, FixTags.UNDERLYINGDIRTYPRICE_INT, underlyingDirtyPrice);
		if (FixUtils.isSet(underlyingEndPrice)) FixUtils.putFixFloatTag( out, FixTags.UNDERLYINGENDPRICE_INT, underlyingEndPrice);
		if (FixUtils.isSet(underlyingStartValue)) FixUtils.putFixTag( out, FixTags.UNDERLYINGSTARTVALUE_INT, underlyingStartValue);
		if (FixUtils.isSet(underlyingCurrentValue)) FixUtils.putFixTag( out, FixTags.UNDERLYINGCURRENTVALUE_INT, underlyingCurrentValue);
		if (FixUtils.isSet(underlyingEndValue)) FixUtils.putFixTag( out, FixTags.UNDERLYINGENDVALUE_INT, underlyingEndValue);
		if (FixUtils.isSet(underlyingAdjustedQuantity)) FixUtils.putFixFloatTag( out, FixTags.UNDERLYINGADJUSTEDQUANTITY_INT, underlyingAdjustedQuantity);
		if (FixUtils.isSet(underlyingFXRate)) FixUtils.putFixFloatTag( out, FixTags.UNDERLYINGFXRATE_INT, underlyingFXRate);
		if (FixUtils.isSet(underlyingFXRateCalc)) FixUtils.putFixTag( out, FixTags.UNDERLYINGFXRATECALC_INT, underlyingFXRateCalc );
		if (FixUtils.isSet(underlyingStipulations.noUnderlyingStips)) underlyingStipulations.encode( out );
		if (FixUtils.isSet(underlyingCapValue)) FixUtils.putFixTag( out, FixTags.UNDERLYINGCAPVALUE_INT, underlyingCapValue);
		if (FixUtils.isSet(underlyingSettlMethod)) FixUtils.putFixTag( out, FixTags.UNDERLYINGSETTLMETHOD_INT, underlyingSettlMethod, 0, Utils.lastIndexTrim(underlyingSettlMethod, (byte)0) );
		if (FixUtils.isSet(underlyingPutOrCall)) FixUtils.putFixTag( out, FixTags.UNDERLYINGPUTORCALL_INT, underlyingPutOrCall);
		if (FixUtils.isSet(undlyInstrumentParties.noUndlyInstrumentParties)) undlyInstrumentParties.encode( out );
	}
	/**
	 * If you use toString for any other purpose than administrative printout.
	 * You will end up in nifelheim!
	**/
	@Override
	public String toString() {
		char sep = '\n';
		if (Boolean.getBoolean("fix.useOneLiner")) sep = ( byte )0x01;

		String s = "";

			if (FixUtils.isSet(underlyingSymbol)) s += "UnderlyingSymbol(311)=" + new String(underlyingSymbol) + sep;
			if (FixUtils.isSet(underlyingSymbolSfx)) s += "UnderlyingSymbolSfx(312)=" + new String(underlyingSymbolSfx) + sep;
			if (FixUtils.isSet(underlyingSecurityID)) s += "UnderlyingSecurityID(309)=" + new String(underlyingSecurityID) + sep;
			if (FixUtils.isSet(underlyingSecurityIDSource)) s += "UnderlyingSecurityIDSource(305)=" + new String(underlyingSecurityIDSource) + sep;
			if (FixUtils.isSet(undSecAltIDGrp.noUnderlyingSecurityAltID)) s += undSecAltIDGrp.toString();
			if (FixUtils.isSet(underlyingProduct)) s += "UnderlyingProduct(462)=" + String.valueOf(underlyingProduct) + sep;
			if (FixUtils.isSet(underlyingCFICode)) s += "UnderlyingCFICode(463)=" + new String(underlyingCFICode) + sep;
			if (FixUtils.isSet(underlyingSecurityType)) s += "UnderlyingSecurityType(310)=" + new String(underlyingSecurityType) + sep;
			if (FixUtils.isSet(underlyingSecuritySubType)) s += "UnderlyingSecuritySubType(763)=" + new String(underlyingSecuritySubType) + sep;
			if (FixUtils.isSet(underlyingMaturityMonthYear)) s += "UnderlyingMaturityMonthYear(313)=" + new String(underlyingMaturityMonthYear) + sep;
			if (FixUtils.isSet(underlyingMaturityDate)) s += "UnderlyingMaturityDate(542)=" + new String(underlyingMaturityDate) + sep;
			if (FixUtils.isSet(underlyingMaturityTime)) s += "UnderlyingMaturityTime(1213)=" + new String(underlyingMaturityTime) + sep;
			if (FixUtils.isSet(underlyingCouponPaymentDate)) s += "UnderlyingCouponPaymentDate(241)=" + new String(underlyingCouponPaymentDate) + sep;
			if (FixUtils.isSet(underlyingRestructuringType)) s += "UnderlyingRestructuringType(1453)=" + new String(underlyingRestructuringType) + sep;
			if (FixUtils.isSet(underlyingSeniority)) s += "UnderlyingSeniority(1454)=" + new String(underlyingSeniority) + sep;
			if (FixUtils.isSet(underlyingNotionalPercentageOutstanding)) s += "UnderlyingNotionalPercentageOutstanding(1455)=" + String.valueOf(underlyingNotionalPercentageOutstanding) + sep;
			if (FixUtils.isSet(underlyingOriginalNotionalPercentageOutstanding)) s += "UnderlyingOriginalNotionalPercentageOutstanding(1456)=" + String.valueOf(underlyingOriginalNotionalPercentageOutstanding) + sep;
			if (FixUtils.isSet(underlyingAttachmentPoint)) s += "UnderlyingAttachmentPoint(1459)=" + String.valueOf(underlyingAttachmentPoint) + sep;
			if (FixUtils.isSet(underlyingDetachmentPoint)) s += "UnderlyingDetachmentPoint(1460)=" + String.valueOf(underlyingDetachmentPoint) + sep;
			if (FixUtils.isSet(underlyingIssueDate)) s += "UnderlyingIssueDate(242)=" + new String(underlyingIssueDate) + sep;
			if (FixUtils.isSet(underlyingRepoCollateralSecurityType)) s += "UnderlyingRepoCollateralSecurityType(243)=" + String.valueOf(underlyingRepoCollateralSecurityType) + sep;
			if (FixUtils.isSet(underlyingRepurchaseTerm)) s += "UnderlyingRepurchaseTerm(244)=" + String.valueOf(underlyingRepurchaseTerm) + sep;
			if (FixUtils.isSet(underlyingRepurchaseRate)) s += "UnderlyingRepurchaseRate(245)=" + String.valueOf(underlyingRepurchaseRate) + sep;
			if (FixUtils.isSet(underlyingFactor)) s += "UnderlyingFactor(246)=" + String.valueOf(underlyingFactor) + sep;
			if (FixUtils.isSet(underlyingCreditRating)) s += "UnderlyingCreditRating(256)=" + new String(underlyingCreditRating) + sep;
			if (FixUtils.isSet(underlyingInstrRegistry)) s += "UnderlyingInstrRegistry(595)=" + new String(underlyingInstrRegistry) + sep;
			if (FixUtils.isSet(underlyingCountryOfIssue)) s += "UnderlyingCountryOfIssue(592)=" + new String(underlyingCountryOfIssue) + sep;
			if (FixUtils.isSet(underlyingStateOrProvinceOfIssue)) s += "UnderlyingStateOrProvinceOfIssue(593)=" + new String(underlyingStateOrProvinceOfIssue) + sep;
			if (FixUtils.isSet(underlyingLocaleOfIssue)) s += "UnderlyingLocaleOfIssue(594)=" + new String(underlyingLocaleOfIssue) + sep;
			if (FixUtils.isSet(underlyingRedemptionDate)) s += "UnderlyingRedemptionDate(247)=" + new String(underlyingRedemptionDate) + sep;
			if (FixUtils.isSet(underlyingStrikePrice)) s += "UnderlyingStrikePrice(316)=" + String.valueOf(underlyingStrikePrice) + sep;
			if (FixUtils.isSet(underlyingStrikeCurrency)) s += "UnderlyingStrikeCurrency(941)=" + new String(underlyingStrikeCurrency) + sep;
			if (FixUtils.isSet(underlyingOptAttribute)) s += "UnderlyingOptAttribute(317)=" + String.valueOf(underlyingOptAttribute) + sep;
			if (FixUtils.isSet(underlyingContractMultiplier)) s += "UnderlyingContractMultiplier(436)=" + String.valueOf(underlyingContractMultiplier) + sep;
			if (FixUtils.isSet(underlyingUnitOfMeasure)) s += "UnderlyingUnitOfMeasure(998)=" + new String(underlyingUnitOfMeasure) + sep;
			if (FixUtils.isSet(underlyingTimeUnit)) s += "UnderlyingTimeUnit(1000)=" + new String(underlyingTimeUnit) + sep;
			if (FixUtils.isSet(underlyingExerciseStyle)) s += "UnderlyingExerciseStyle(1419)=" + String.valueOf(underlyingExerciseStyle) + sep;
			if (FixUtils.isSet(underlyingUnitOfMeasureQty)) s += "UnderlyingUnitOfMeasureQty(1423)=" + String.valueOf(underlyingUnitOfMeasureQty) + sep;
			if (FixUtils.isSet(underlyingPriceUnitOfMeasure)) s += "UnderlyingPriceUnitOfMeasure(1424)=" + new String(underlyingPriceUnitOfMeasure) + sep;
			if (FixUtils.isSet(underlyingPriceUnitOfMeasureQty)) s += "UnderlyingPriceUnitOfMeasureQty(1425)=" + String.valueOf(underlyingPriceUnitOfMeasureQty) + sep;
			if (FixUtils.isSet(underlyingContractMultiplierUnit)) s += "UnderlyingContractMultiplierUnit(1437)=" + String.valueOf(underlyingContractMultiplierUnit) + sep;
			if (FixUtils.isSet(underlyingFlowScheduleType)) s += "UnderlyingFlowScheduleType(1441)=" + String.valueOf(underlyingFlowScheduleType) + sep;
			if (FixUtils.isSet(underlyingCouponRate)) s += "UnderlyingCouponRate(435)=" + String.valueOf(underlyingCouponRate) + sep;
			if (FixUtils.isSet(underlyingSecurityExchange)) s += "UnderlyingSecurityExchange(308)=" + new String(underlyingSecurityExchange) + sep;
			if (FixUtils.isSet(underlyingIssuer)) s += "UnderlyingIssuer(306)=" + new String(underlyingIssuer) + sep;
			if (FixUtils.isSet(encodedUnderlyingIssuerLen)) s += "EncodedUnderlyingIssuerLen(362)=" + String.valueOf(encodedUnderlyingIssuerLen) + sep;
			if (FixUtils.isSet(encodedUnderlyingIssuer)) s += "EncodedUnderlyingIssuer(363)=" + new String(encodedUnderlyingIssuer) + sep;
			if (FixUtils.isSet(underlyingSecurityDesc)) s += "UnderlyingSecurityDesc(307)=" + new String(underlyingSecurityDesc) + sep;
			if (FixUtils.isSet(encodedUnderlyingSecurityDescLen)) s += "EncodedUnderlyingSecurityDescLen(364)=" + String.valueOf(encodedUnderlyingSecurityDescLen) + sep;
			if (FixUtils.isSet(encodedUnderlyingSecurityDesc)) s += "EncodedUnderlyingSecurityDesc(365)=" + new String(encodedUnderlyingSecurityDesc) + sep;
			if (FixUtils.isSet(underlyingCPProgram)) s += "UnderlyingCPProgram(877)=" + new String(underlyingCPProgram) + sep;
			if (FixUtils.isSet(underlyingCPRegType)) s += "UnderlyingCPRegType(878)=" + new String(underlyingCPRegType) + sep;
			if (FixUtils.isSet(underlyingAllocationPercent)) s += "UnderlyingAllocationPercent(972)=" + String.valueOf(underlyingAllocationPercent) + sep;
			if (FixUtils.isSet(underlyingCurrency)) s += "UnderlyingCurrency(318)=" + new String(underlyingCurrency) + sep;
			if (FixUtils.isSet(underlyingQty)) s += "UnderlyingQty(879)=" + String.valueOf(underlyingQty) + sep;
			if (FixUtils.isSet(underlyingSettlementType)) s += "UnderlyingSettlementType(975)=" + String.valueOf(underlyingSettlementType) + sep;
			if (FixUtils.isSet(underlyingCashAmount)) s += "UnderlyingCashAmount(973)=" + String.valueOf(underlyingCashAmount) + sep;
			if (FixUtils.isSet(underlyingCashType)) s += "UnderlyingCashType(974)=" + new String(underlyingCashType) + sep;
			if (FixUtils.isSet(underlyingPx)) s += "UnderlyingPx(810)=" + String.valueOf(underlyingPx) + sep;
			if (FixUtils.isSet(underlyingDirtyPrice)) s += "UnderlyingDirtyPrice(882)=" + String.valueOf(underlyingDirtyPrice) + sep;
			if (FixUtils.isSet(underlyingEndPrice)) s += "UnderlyingEndPrice(883)=" + String.valueOf(underlyingEndPrice) + sep;
			if (FixUtils.isSet(underlyingStartValue)) s += "UnderlyingStartValue(884)=" + String.valueOf(underlyingStartValue) + sep;
			if (FixUtils.isSet(underlyingCurrentValue)) s += "UnderlyingCurrentValue(885)=" + String.valueOf(underlyingCurrentValue) + sep;
			if (FixUtils.isSet(underlyingEndValue)) s += "UnderlyingEndValue(886)=" + String.valueOf(underlyingEndValue) + sep;
			if (FixUtils.isSet(underlyingAdjustedQuantity)) s += "UnderlyingAdjustedQuantity(1044)=" + String.valueOf(underlyingAdjustedQuantity) + sep;
			if (FixUtils.isSet(underlyingFXRate)) s += "UnderlyingFXRate(1045)=" + String.valueOf(underlyingFXRate) + sep;
			if (FixUtils.isSet(underlyingFXRateCalc)) s += "UnderlyingFXRateCalc(1046)=" + String.valueOf(underlyingFXRateCalc) + sep;
			if (FixUtils.isSet(underlyingStipulations.noUnderlyingStips)) s += underlyingStipulations.toString();
			if (FixUtils.isSet(underlyingCapValue)) s += "UnderlyingCapValue(1038)=" + String.valueOf(underlyingCapValue) + sep;
			if (FixUtils.isSet(underlyingSettlMethod)) s += "UnderlyingSettlMethod(1039)=" + new String(underlyingSettlMethod) + sep;
			if (FixUtils.isSet(underlyingPutOrCall)) s += "UnderlyingPutOrCall(315)=" + String.valueOf(underlyingPutOrCall) + sep;
			if (FixUtils.isSet(undlyInstrumentParties.noUndlyInstrumentParties)) s += undlyInstrumentParties.toString();
		return s;

	}

	@Override
	public boolean equals(Object o) {
		if (! ( o instanceof FixUnderlyingInstrument)) return false;

			FixUnderlyingInstrument msg = (FixUnderlyingInstrument) o;

		if ( ! super.equals(msg) ) return false;

		if (!Utils.equals( underlyingSymbol, msg.underlyingSymbol)) return false;

		if (!Utils.equals( underlyingSymbolSfx, msg.underlyingSymbolSfx)) return false;

		if (!Utils.equals( underlyingSecurityID, msg.underlyingSecurityID)) return false;

		if (!Utils.equals( underlyingSecurityIDSource, msg.underlyingSecurityIDSource)) return false;

		if (!undSecAltIDGrp.equals(msg.undSecAltIDGrp)) return false;

		if (!( underlyingProduct==msg.underlyingProduct)) return false;

		if (!Utils.equals( underlyingCFICode, msg.underlyingCFICode)) return false;

		if (!Utils.equals( underlyingSecurityType, msg.underlyingSecurityType)) return false;

		if (!Utils.equals( underlyingSecuritySubType, msg.underlyingSecuritySubType)) return false;

		if (!Utils.equals( underlyingMaturityMonthYear, msg.underlyingMaturityMonthYear)) return false;

		if (!Utils.equals( underlyingRestructuringType, msg.underlyingRestructuringType)) return false;

		if (!Utils.equals( underlyingSeniority, msg.underlyingSeniority)) return false;

		if (!( underlyingNotionalPercentageOutstanding==msg.underlyingNotionalPercentageOutstanding)) return false;

		if (!( underlyingOriginalNotionalPercentageOutstanding==msg.underlyingOriginalNotionalPercentageOutstanding)) return false;

		if (!( underlyingAttachmentPoint==msg.underlyingAttachmentPoint)) return false;

		if (!( underlyingDetachmentPoint==msg.underlyingDetachmentPoint)) return false;

		if (!( underlyingRepoCollateralSecurityType==msg.underlyingRepoCollateralSecurityType)) return false;

		if (!( underlyingRepurchaseTerm==msg.underlyingRepurchaseTerm)) return false;

		if (!( underlyingRepurchaseRate==msg.underlyingRepurchaseRate)) return false;

		if (!( underlyingFactor==msg.underlyingFactor)) return false;

		if (!Utils.equals( underlyingCreditRating, msg.underlyingCreditRating)) return false;

		if (!Utils.equals( underlyingInstrRegistry, msg.underlyingInstrRegistry)) return false;

		if (!Utils.equals( underlyingCountryOfIssue, msg.underlyingCountryOfIssue)) return false;

		if (!Utils.equals( underlyingStateOrProvinceOfIssue, msg.underlyingStateOrProvinceOfIssue)) return false;

		if (!Utils.equals( underlyingLocaleOfIssue, msg.underlyingLocaleOfIssue)) return false;

		if (!( underlyingStrikePrice==msg.underlyingStrikePrice)) return false;

		if (!Utils.equals( underlyingStrikeCurrency, msg.underlyingStrikeCurrency)) return false;

		if (!( underlyingOptAttribute==msg.underlyingOptAttribute)) return false;

		if (!( underlyingContractMultiplier==msg.underlyingContractMultiplier)) return false;

		if (!Utils.equals( underlyingUnitOfMeasure, msg.underlyingUnitOfMeasure)) return false;

		if (!Utils.equals( underlyingTimeUnit, msg.underlyingTimeUnit)) return false;

		if (!( underlyingExerciseStyle==msg.underlyingExerciseStyle)) return false;

		if (!( underlyingUnitOfMeasureQty==msg.underlyingUnitOfMeasureQty)) return false;

		if (!Utils.equals( underlyingPriceUnitOfMeasure, msg.underlyingPriceUnitOfMeasure)) return false;

		if (!( underlyingPriceUnitOfMeasureQty==msg.underlyingPriceUnitOfMeasureQty)) return false;

		if (!( underlyingContractMultiplierUnit==msg.underlyingContractMultiplierUnit)) return false;

		if (!( underlyingFlowScheduleType==msg.underlyingFlowScheduleType)) return false;

		if (!( underlyingCouponRate==msg.underlyingCouponRate)) return false;

		if (!Utils.equals( underlyingSecurityExchange, msg.underlyingSecurityExchange)) return false;

		if (!Utils.equals( underlyingIssuer, msg.underlyingIssuer)) return false;

		if (!( encodedUnderlyingIssuerLen==msg.encodedUnderlyingIssuerLen)) return false;

		if (!Utils.equals( encodedUnderlyingIssuer, msg.encodedUnderlyingIssuer)) return false;

		if (!Utils.equals( underlyingSecurityDesc, msg.underlyingSecurityDesc)) return false;

		if (!( encodedUnderlyingSecurityDescLen==msg.encodedUnderlyingSecurityDescLen)) return false;

		if (!Utils.equals( encodedUnderlyingSecurityDesc, msg.encodedUnderlyingSecurityDesc)) return false;

		if (!Utils.equals( underlyingCPProgram, msg.underlyingCPProgram)) return false;

		if (!Utils.equals( underlyingCPRegType, msg.underlyingCPRegType)) return false;

		if (!( underlyingAllocationPercent==msg.underlyingAllocationPercent)) return false;

		if (!Utils.equals( underlyingCurrency, msg.underlyingCurrency)) return false;

		if (!( underlyingQty==msg.underlyingQty)) return false;

		if (!( underlyingSettlementType==msg.underlyingSettlementType)) return false;

		if (!( underlyingCashAmount==msg.underlyingCashAmount)) return false;

		if (!Utils.equals( underlyingCashType, msg.underlyingCashType)) return false;

		if (!( underlyingPx==msg.underlyingPx)) return false;

		if (!( underlyingDirtyPrice==msg.underlyingDirtyPrice)) return false;

		if (!( underlyingEndPrice==msg.underlyingEndPrice)) return false;

		if (!( underlyingStartValue==msg.underlyingStartValue)) return false;

		if (!( underlyingCurrentValue==msg.underlyingCurrentValue)) return false;

		if (!( underlyingEndValue==msg.underlyingEndValue)) return false;

		if (!( underlyingAdjustedQuantity==msg.underlyingAdjustedQuantity)) return false;

		if (!( underlyingFXRate==msg.underlyingFXRate)) return false;

		if (!( underlyingFXRateCalc==msg.underlyingFXRateCalc)) return false;

		if (!underlyingStipulations.equals(msg.underlyingStipulations)) return false;

		if (!( underlyingCapValue==msg.underlyingCapValue)) return false;

		if (!Utils.equals( underlyingSettlMethod, msg.underlyingSettlMethod)) return false;

		if (!( underlyingPutOrCall==msg.underlyingPutOrCall)) return false;

		if (!undlyInstrumentParties.equals(msg.undlyInstrumentParties)) return false;

		return true;
	}
}
