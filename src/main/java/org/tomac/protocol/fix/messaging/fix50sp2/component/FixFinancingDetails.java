package org.tomac.protocol.fix.messaging.fix50sp2.component;

// DO NOT EDIT!!!
// This file is generated by FixMessageGenerator.
// If you need additional functionality, put it in a helper class
// that does not live in this folder!!!  Any java file in this folder 
// will be deleted upon the next run of the FixMessageGenerator!

import java.nio.ByteBuffer;

import org.tomac.protocol.fix.FixUtils;
import org.tomac.protocol.fix.FixSessionException;
import org.tomac.protocol.fix.FixGarbledException;
import org.tomac.utils.Utils;
import org.tomac.protocol.fix.FixConstants;


import org.tomac.protocol.fix.messaging.fix50sp2.FixTags;
import org.tomac.protocol.fix.messaging.fix50sp2.FixMessageInfo.*;

public class FixFinancingDetails implements FixComponent
{

	public byte[] agreementDesc;
	public byte[] agreementID;
	public byte[] agreementDate;
	public byte[] agreementCurrency;
	public long terminationType = 0;
	public byte[] startDate;
	public byte[] endDate;
	public long deliveryType = 0;
	public long marginRatio = 0;

	public FixFinancingDetails() {
		super();

		agreementDesc = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		agreementID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		agreementDate = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		agreementCurrency = new byte[FixUtils.CURRENCY_LENGTH];
		startDate = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		endDate = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		this.clear();

	}

	@Override
	public void clear()
	{

		// clear out all the fields that aren't msgType

		Utils.fill( agreementDesc, (byte)0 );
		Utils.fill( agreementID, (byte)0 );
		Utils.fill( agreementDate, (byte)0 );
		Utils.fill( agreementCurrency, (byte)0 );
		terminationType = Long.MAX_VALUE;		
		Utils.fill( startDate, (byte)0 );
		Utils.fill( endDate, (byte)0 );
		deliveryType = Long.MAX_VALUE;		
		marginRatio = Long.MAX_VALUE;		
	}

	public void getAll(int id, ByteBuffer buf) throws FixSessionException, FixGarbledException
	{

		int startTagPosition = buf.position();

		int lastTagPosition = buf.position();
		do {
			ByteBuffer value;

			value = buf;

			switch( id ) {

			case FixTags.AGREEMENTDESC_INT:
				agreementDesc = FixUtils.getTagStringValue(null ,id ,value, agreementDesc);
				break;

			case FixTags.AGREEMENTID_INT:
				agreementID = FixUtils.getTagStringValue(null ,id ,value, agreementID);
				break;

			case FixTags.AGREEMENTDATE_INT:
				agreementDate = FixUtils.getTagStringValue(null ,id ,value, agreementDate);
				break;

			case FixTags.AGREEMENTCURRENCY_INT:
				agreementCurrency = FixUtils.getTagStringValue(null ,id ,value, agreementCurrency);
				break;

			case FixTags.TERMINATIONTYPE_INT:
				terminationType = FixUtils.getTagIntValue(null ,id ,value );
				if (!TerminationType.isValid(terminationType) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + terminationType + ") for tag").getBytes(), id, new byte[0] );
				break;

			case FixTags.STARTDATE_INT:
				startDate = FixUtils.getTagStringValue(null ,id ,value, startDate);
				break;

			case FixTags.ENDDATE_INT:
				endDate = FixUtils.getTagStringValue(null ,id ,value, endDate);
				break;

			case FixTags.DELIVERYTYPE_INT:
				deliveryType = FixUtils.getTagIntValue(null ,id ,value );
				if (!DeliveryType.isValid(deliveryType) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + deliveryType + ") for tag").getBytes(), id, new byte[0] );
				break;

			case FixTags.MARGINRATIO_INT:
				marginRatio = FixUtils.getTagFloatValue(null ,id ,value);
				break;

			// we will always endup with unknown tag, unread and return to upper layer in hierarchy
			default:
				id = checkRequiredTags();
				if (id > 0) throw new FixSessionException(SessionRejectReason.REQUIRED_TAG_MISSING, "Required tag missing".getBytes(), id, new byte[0] );

				buf.position( lastTagPosition );
				return;

			}

			lastTagPosition = buf.position();

		} while ( ( id = FixUtils.getTagId( buf ) ) >= 0 );

		buf.position(startTagPosition);

	}

	private int checkRequiredTags() {
		int tag = -1;

		return tag;

	}
	@Override
	public boolean isSet()
	{
		if (FixUtils.isSet(agreementDesc)) return true;
		if (FixUtils.isSet(agreementID)) return true;
		if (FixUtils.isSet(agreementDate)) return true;
		if (FixUtils.isSet(agreementCurrency)) return true;
		if (FixUtils.isSet(terminationType)) return true;
		if (FixUtils.isSet(startDate)) return true;
		if (FixUtils.isSet(endDate)) return true;
		if (FixUtils.isSet(deliveryType)) return true;
		if (FixUtils.isSet(marginRatio)) return true;
		return false;
	}
	@Override
	public void encode( ByteBuffer out )
	{
		if (FixUtils.isSet(agreementDesc)) FixUtils.putFixTag( out, FixTags.AGREEMENTDESC_INT, agreementDesc, 0, Utils.lastIndexTrim(agreementDesc, (byte)0) );
		if (FixUtils.isSet(agreementID)) FixUtils.putFixTag( out, FixTags.AGREEMENTID_INT, agreementID, 0, Utils.lastIndexTrim(agreementID, (byte)0) );
		if (FixUtils.isSet(agreementDate)) FixUtils.putFixTag( out, FixTags.AGREEMENTDATE_INT, agreementDate);
		if (FixUtils.isSet(agreementCurrency)) FixUtils.putFixTag( out, FixTags.AGREEMENTCURRENCY_INT, agreementCurrency, 0, Utils.lastIndexTrim(agreementCurrency, (byte)0) );
		if (FixUtils.isSet(terminationType)) FixUtils.putFixTag( out, FixTags.TERMINATIONTYPE_INT, terminationType);
		if (FixUtils.isSet(startDate)) FixUtils.putFixTag( out, FixTags.STARTDATE_INT, startDate);
		if (FixUtils.isSet(endDate)) FixUtils.putFixTag( out, FixTags.ENDDATE_INT, endDate);
		if (FixUtils.isSet(deliveryType)) FixUtils.putFixTag( out, FixTags.DELIVERYTYPE_INT, deliveryType);
		if (FixUtils.isSet(marginRatio)) FixUtils.putFixFloatTag( out, FixTags.MARGINRATIO_INT, marginRatio);
	}
	/**
	 * If you use toString for any other purpose than administrative printout.
	 * You will end up in nifelheim!
	**/
	@Override
	public String toString() {
		char sep = '\n';
		if (Boolean.getBoolean("fix.useOneLiner")) sep = ( byte )0x01;

		String s = "";

			if (FixUtils.isSet(agreementDesc)) s += "AgreementDesc(913)=" + new String(agreementDesc) + sep;
			if (FixUtils.isSet(agreementID)) s += "AgreementID(914)=" + new String(agreementID) + sep;
			if (FixUtils.isSet(agreementDate)) s += "AgreementDate(915)=" + new String(agreementDate) + sep;
			if (FixUtils.isSet(agreementCurrency)) s += "AgreementCurrency(918)=" + new String(agreementCurrency) + sep;
			if (FixUtils.isSet(terminationType)) s += "TerminationType(788)=" + String.valueOf(terminationType) + sep;
			if (FixUtils.isSet(startDate)) s += "StartDate(916)=" + new String(startDate) + sep;
			if (FixUtils.isSet(endDate)) s += "EndDate(917)=" + new String(endDate) + sep;
			if (FixUtils.isSet(deliveryType)) s += "DeliveryType(919)=" + String.valueOf(deliveryType) + sep;
			if (FixUtils.isSet(marginRatio)) s += "MarginRatio(898)=" + String.valueOf(marginRatio) + sep;
		return s;

	}

	@Override
	public boolean equals(Object o) {
		if (! ( o instanceof FixFinancingDetails)) return false;

			FixFinancingDetails msg = (FixFinancingDetails) o;

		if (!Utils.equals( agreementDesc, msg.agreementDesc)) return false;

		if (!Utils.equals( agreementID, msg.agreementID)) return false;

		if (!Utils.equals( agreementCurrency, msg.agreementCurrency)) return false;

		if (!( terminationType==msg.terminationType)) return false;

		if (!( deliveryType==msg.deliveryType)) return false;

		if (!( marginRatio==msg.marginRatio)) return false;

		return true;
	}
}
