package org.tomac.protocol.fix.messaging.fix50sp2;

// DO NOT EDIT!!!
// This file is generated by FixMessageGenerator.
// If you need additional functionality, put it in a helper class
// that does not live in this folder!!!  Any java file in this folder 
// will be deleted upon the next run of the FixMessageGenerator!

import java.nio.ByteBuffer;

import org.tomac.protocol.fix.FixUtils;
import org.tomac.protocol.fix.FixSessionException;
import org.tomac.utils.Utils;
import org.tomac.protocol.fix.FixConstants;



public class FixAssignmentReport extends FixMessage
{

	public byte[] asgnRptID;
	public byte[] posReqID;
	public long totNumAssignmentReports = 0;
	public boolean lastRptRequested = false;
	public byte[] account;
	public long accountType = 0;
	public byte[] currency;
	public long thresholdAmount = 0;
	public long settlPrice = 0;
	public long settlPriceType = 0;
	public long underlyingSettlPrice = 0;
	public long priorSettlPrice = 0;
	public byte[] expireDate;
	public byte assignmentMethod = (byte)' ';
	public long assignmentUnit = 0;
	public long openInterest = 0;
	public byte exerciseMethod = (byte)' ';
	public byte[] settlSessID;
	public byte[] settlSessSubID;
	public byte[] clearingBusinessDate;
	public byte[] text;
	public long encodedTextLen = 0;
	public byte[] encodedText;

	public FixAssignmentReport() {
		super();

		asgnRptID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		posReqID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		account = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		currency = new byte[FixUtils.CURRENCY_LENGTH];
		expireDate = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		settlSessID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		settlSessSubID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		clearingBusinessDate = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		text = new byte[FixUtils.FIX_MAX_STRING_TEXT_LENGTH];
		encodedText = new byte[FixUtils.FIX_MAX_STRING_TEXT_LENGTH];
		this.clear();

		msgType = MsgTypes.ASSIGNMENTREPORT_INT;

	}

	@Override
	public void clear()
	{

		// clear out all the fields that aren't msgType

		Utils.fill( asgnRptID, (byte)0 );
		Utils.fill( posReqID, (byte)0 );
		totNumAssignmentReports = Long.MAX_VALUE;		
		lastRptRequested = false;		
		Utils.fill( account, (byte)0 );
		accountType = Long.MAX_VALUE;		
		Utils.fill( currency, (byte)0 );
		thresholdAmount = Long.MAX_VALUE;		
		settlPrice = Long.MAX_VALUE;		
		settlPriceType = Long.MAX_VALUE;		
		underlyingSettlPrice = Long.MAX_VALUE;		
		priorSettlPrice = Long.MAX_VALUE;		
		Utils.fill( expireDate, (byte)0 );
		assignmentMethod = Byte.MAX_VALUE;		
		assignmentUnit = Long.MAX_VALUE;		
		openInterest = Long.MAX_VALUE;		
		exerciseMethod = Byte.MAX_VALUE;		
		Utils.fill( settlSessID, (byte)0 );
		Utils.fill( settlSessSubID, (byte)0 );
		Utils.fill( clearingBusinessDate, (byte)0 );
		Utils.fill( text, (byte)0 );
		encodedTextLen = Long.MAX_VALUE;		
		Utils.fill( encodedText, (byte)0 );
	}

	@Override
	public void getAll() throws FixSessionException, IllegalStateException
	{

		int startTagPosition = buf.position();

		super.getAll();

		// assumption message is full otherwise decode would return null
		// so negative id means that we are at the end of the message
		int id;
		int lastTagPosition = buf.position();
		while ( ( id = FixUtils.getTagId( buf ) ) > 0 )
		{
			ByteBuffer value;

			value = buf;

			switch( id ) {

			case FixTags.ASGNRPTID_INT:
				asgnRptID = FixUtils.getTagStringValue(value, asgnRptID);
				break;

			case FixTags.POSREQID_INT:
				posReqID = FixUtils.getTagStringValue(value, posReqID);
				break;

			case FixTags.TOTNUMASSIGNMENTREPORTS_INT:
				totNumAssignmentReports = FixUtils.getTagIntValue( value );
				break;

			case FixTags.LASTRPTREQUESTED_INT:
				lastRptRequested = FixUtils.getTagBooleanValue( value );
				if (!LastRptRequested.isValid(lastRptRequested) ) throw new FixSessionException(buf, "Invalid enumerated value(" + lastRptRequested + ") for tag: " + id );
				break;

			case FixTags.ACCOUNT_INT:
				account = FixUtils.getTagStringValue(value, account);
				break;

			case FixTags.ACCOUNTTYPE_INT:
				accountType = FixUtils.getTagIntValue( value );
				if (!AccountType.isValid(accountType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + accountType + ") for tag: " + id );
				break;

			case FixTags.CURRENCY_INT:
				currency = FixUtils.getTagStringValue(value, currency);
				break;

			case FixTags.THRESHOLDAMOUNT_INT:
				thresholdAmount = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.SETTLPRICE_INT:
				settlPrice = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.SETTLPRICETYPE_INT:
				settlPriceType = FixUtils.getTagIntValue( value );
				if (!SettlPriceType.isValid(settlPriceType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + settlPriceType + ") for tag: " + id );
				break;

			case FixTags.UNDERLYINGSETTLPRICE_INT:
				underlyingSettlPrice = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.PRIORSETTLPRICE_INT:
				priorSettlPrice = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.EXPIREDATE_INT:
				expireDate = FixUtils.getTagStringValue(value, expireDate);
				break;

			case FixTags.ASSIGNMENTMETHOD_INT:
				assignmentMethod = FixUtils.getTagCharValue( value );
				if (!AssignmentMethod.isValid(assignmentMethod) ) throw new FixSessionException(buf, "Invalid enumerated value(" + assignmentMethod + ") for tag: " + id );
				break;

			case FixTags.ASSIGNMENTUNIT_INT:
				assignmentUnit = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.OPENINTEREST_INT:
				openInterest = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.EXERCISEMETHOD_INT:
				exerciseMethod = FixUtils.getTagCharValue( value );
				if (!ExerciseMethod.isValid(exerciseMethod) ) throw new FixSessionException(buf, "Invalid enumerated value(" + exerciseMethod + ") for tag: " + id );
				break;

			case FixTags.SETTLSESSID_INT:
				settlSessID = FixUtils.getTagStringValue(value, settlSessID);
				if (!SettlSessID.isValid(settlSessID) ) throw new FixSessionException(buf, "Invalid enumerated value(" + settlSessID + ") for tag: " + id );
				break;

			case FixTags.SETTLSESSSUBID_INT:
				settlSessSubID = FixUtils.getTagStringValue(value, settlSessSubID);
				break;

			case FixTags.CLEARINGBUSINESSDATE_INT:
				clearingBusinessDate = FixUtils.getTagStringValue(value, clearingBusinessDate);
				break;

			case FixTags.TEXT_INT:
				text = FixUtils.getTagStringValue(value, text);
				break;

			case FixTags.ENCODEDTEXTLEN_INT:
				encodedTextLen = FixUtils.getTagIntValue( value );
				break;

			case FixTags.ENCODEDTEXT_INT:
				encodedText = FixUtils.getTagStringValue(value, encodedText);
				break;

			// for a message always get the checksum
			case FixTags.CHECKSUM_INT:
				checkSum = FixUtils.getTagIntValue( value );

				id = checkRequiredTags();
				if (id > 0) throw new FixSessionException(buf, "Required tag missing: " + id );

				return;

			default:
				throw new FixSessionException(buf, "Unknown tag: " + id );

			}

			lastTagPosition = buf.position();

		}

		buf.position(startTagPosition);

	}

	private int checkRequiredTags() {
		int tag = -1;

		if (! FixUtils.isSet(asgnRptID) ) return FixTags.ASGNRPTID_INT;
		if (! FixUtils.isSet(clearingBusinessDate) ) return FixTags.CLEARINGBUSINESSDATE_INT;
		return tag;

	}
	@Override
	public void encode( ByteBuffer out )
	{
		// Encode message. Set msgSeqNum and sendingTime and optional resend flags, before encoding. 

		int msgStart = out.position();

		out.put( BEGINSTRING_VALUE_WITH_TAG );

		int msgLengthValueStart = out.position() + 2 /* 9= */;

		// placeholder
		FixUtils.putFixTag(out, FixTags.BODYLENGTH_INT, FixConstants.MAX_MESSAGE_SIZE );

		int msgTypeStart = out.position();

		FixUtils.putFixTag( out, FixTags.MSGTYPE_INT, MsgTypes.ASSIGNMENTREPORT);

		// encode all fields including the header

		if (FixUtils.isSet(applVerID)) FixUtils.putFixTag( out, FixTags.APPLVERID_INT, applVerID, 0, Utils.lastIndexTrim(applVerID, (byte)0) );
		if (FixUtils.isSet(cstmApplVerID)) FixUtils.putFixTag( out, FixTags.CSTMAPPLVERID_INT, cstmApplVerID, 0, Utils.lastIndexTrim(cstmApplVerID, (byte)0) );
		if (FixUtils.isSet(applExtID)) FixUtils.putFixTag( out, FixTags.APPLEXTID_INT, applExtID);
		FixUtils.putFixTag( out, FixTags.SENDERCOMPID_INT, senderCompID, 0, Utils.lastIndexTrim(senderCompID, (byte)0) );
		FixUtils.putFixTag( out, FixTags.TARGETCOMPID_INT, targetCompID, 0, Utils.lastIndexTrim(targetCompID, (byte)0) );
		if (FixUtils.isSet(onBehalfOfCompID)) FixUtils.putFixTag( out, FixTags.ONBEHALFOFCOMPID_INT, onBehalfOfCompID, 0, Utils.lastIndexTrim(onBehalfOfCompID, (byte)0) );
		if (FixUtils.isSet(deliverToCompID)) FixUtils.putFixTag( out, FixTags.DELIVERTOCOMPID_INT, deliverToCompID, 0, Utils.lastIndexTrim(deliverToCompID, (byte)0) );
		if (FixUtils.isSet(secureDataLen)) FixUtils.putFixTag( out, FixTags.SECUREDATALEN_INT, secureDataLen);
		if (FixUtils.isSet(secureData)) FixUtils.putFixTag( out, FixTags.SECUREDATA_INT, secureData, 0, Utils.lastIndexTrim(secureData, (byte)0) );
		FixUtils.putFixTag( out, FixTags.MSGSEQNUM_INT, msgSeqNum);
		if (FixUtils.isSet(senderSubID)) FixUtils.putFixTag( out, FixTags.SENDERSUBID_INT, senderSubID, 0, Utils.lastIndexTrim(senderSubID, (byte)0) );
		if (FixUtils.isSet(senderLocationID)) FixUtils.putFixTag( out, FixTags.SENDERLOCATIONID_INT, senderLocationID, 0, Utils.lastIndexTrim(senderLocationID, (byte)0) );
		if (FixUtils.isSet(targetSubID)) FixUtils.putFixTag( out, FixTags.TARGETSUBID_INT, targetSubID, 0, Utils.lastIndexTrim(targetSubID, (byte)0) );
		if (FixUtils.isSet(targetLocationID)) FixUtils.putFixTag( out, FixTags.TARGETLOCATIONID_INT, targetLocationID, 0, Utils.lastIndexTrim(targetLocationID, (byte)0) );
		if (FixUtils.isSet(onBehalfOfSubID)) FixUtils.putFixTag( out, FixTags.ONBEHALFOFSUBID_INT, onBehalfOfSubID, 0, Utils.lastIndexTrim(onBehalfOfSubID, (byte)0) );
		if (FixUtils.isSet(onBehalfOfLocationID)) FixUtils.putFixTag( out, FixTags.ONBEHALFOFLOCATIONID_INT, onBehalfOfLocationID, 0, Utils.lastIndexTrim(onBehalfOfLocationID, (byte)0) );
		if (FixUtils.isSet(deliverToSubID)) FixUtils.putFixTag( out, FixTags.DELIVERTOSUBID_INT, deliverToSubID, 0, Utils.lastIndexTrim(deliverToSubID, (byte)0) );
		if (FixUtils.isSet(deliverToLocationID)) FixUtils.putFixTag( out, FixTags.DELIVERTOLOCATIONID_INT, deliverToLocationID, 0, Utils.lastIndexTrim(deliverToLocationID, (byte)0) );
		if (FixUtils.isSet(possDupFlag)) FixUtils.putFixTag( out, FixTags.POSSDUPFLAG_INT, possDupFlag?(byte)'Y':(byte)'N' );
		if (FixUtils.isSet(possResend)) FixUtils.putFixTag( out, FixTags.POSSRESEND_INT, possResend?(byte)'Y':(byte)'N' );
		FixUtils.putFixTag( out, FixTags.SENDINGTIME_INT, sendingTime);
		if (FixUtils.isSet(origSendingTime)) FixUtils.putFixTag( out, FixTags.ORIGSENDINGTIME_INT, origSendingTime);
		if (FixUtils.isSet(xmlDataLen)) FixUtils.putFixTag( out, FixTags.XMLDATALEN_INT, xmlDataLen);
		if (FixUtils.isSet(xmlData)) FixUtils.putFixTag( out, FixTags.XMLDATA_INT, xmlData, 0, Utils.lastIndexTrim(xmlData, (byte)0) );
		if (FixUtils.isSet(messageEncoding)) FixUtils.putFixTag( out, FixTags.MESSAGEENCODING_INT, messageEncoding, 0, Utils.lastIndexTrim(messageEncoding, (byte)0) );
		if (FixUtils.isSet(lastMsgSeqNumProcessed)) FixUtils.putFixTag( out, FixTags.LASTMSGSEQNUMPROCESSED_INT, lastMsgSeqNumProcessed);

		FixUtils.putFixTag( out, FixTags.ASGNRPTID_INT, asgnRptID, 0, Utils.lastIndexTrim(asgnRptID, (byte)0) );
		if (FixUtils.isSet(posReqID)) FixUtils.putFixTag( out, FixTags.POSREQID_INT, posReqID, 0, Utils.lastIndexTrim(posReqID, (byte)0) );
		if (FixUtils.isSet(totNumAssignmentReports)) FixUtils.putFixTag( out, FixTags.TOTNUMASSIGNMENTREPORTS_INT, totNumAssignmentReports);
		if (FixUtils.isSet(lastRptRequested)) FixUtils.putFixTag( out, FixTags.LASTRPTREQUESTED_INT, lastRptRequested?(byte)'Y':(byte)'N' );
		if (FixUtils.isSet(account)) FixUtils.putFixTag( out, FixTags.ACCOUNT_INT, account, 0, Utils.lastIndexTrim(account, (byte)0) );
		if (FixUtils.isSet(accountType)) FixUtils.putFixTag( out, FixTags.ACCOUNTTYPE_INT, accountType);
		if (FixUtils.isSet(currency)) FixUtils.putFixTag( out, FixTags.CURRENCY_INT, currency, 0, Utils.lastIndexTrim(currency, (byte)0) );
		if (FixUtils.isSet(thresholdAmount)) FixUtils.putFixFloatTag( out, FixTags.THRESHOLDAMOUNT_INT, thresholdAmount);
		if (FixUtils.isSet(settlPrice)) FixUtils.putFixFloatTag( out, FixTags.SETTLPRICE_INT, settlPrice);
		if (FixUtils.isSet(settlPriceType)) FixUtils.putFixTag( out, FixTags.SETTLPRICETYPE_INT, settlPriceType);
		if (FixUtils.isSet(underlyingSettlPrice)) FixUtils.putFixFloatTag( out, FixTags.UNDERLYINGSETTLPRICE_INT, underlyingSettlPrice);
		if (FixUtils.isSet(priorSettlPrice)) FixUtils.putFixFloatTag( out, FixTags.PRIORSETTLPRICE_INT, priorSettlPrice);
		if (FixUtils.isSet(expireDate)) FixUtils.putFixTag( out, FixTags.EXPIREDATE_INT, expireDate);
		if (FixUtils.isSet(assignmentMethod)) FixUtils.putFixTag( out, FixTags.ASSIGNMENTMETHOD_INT, assignmentMethod );
		if (FixUtils.isSet(assignmentUnit)) FixUtils.putFixFloatTag( out, FixTags.ASSIGNMENTUNIT_INT, assignmentUnit);
		if (FixUtils.isSet(openInterest)) FixUtils.putFixTag( out, FixTags.OPENINTEREST_INT, openInterest);
		if (FixUtils.isSet(exerciseMethod)) FixUtils.putFixTag( out, FixTags.EXERCISEMETHOD_INT, exerciseMethod );
		if (FixUtils.isSet(settlSessID)) FixUtils.putFixTag( out, FixTags.SETTLSESSID_INT, settlSessID, 0, Utils.lastIndexTrim(settlSessID, (byte)0) );
		if (FixUtils.isSet(settlSessSubID)) FixUtils.putFixTag( out, FixTags.SETTLSESSSUBID_INT, settlSessSubID, 0, Utils.lastIndexTrim(settlSessSubID, (byte)0) );
		FixUtils.putFixTag( out, FixTags.CLEARINGBUSINESSDATE_INT, clearingBusinessDate);
		if (FixUtils.isSet(text)) FixUtils.putFixTag( out, FixTags.TEXT_INT, text, 0, Utils.lastIndexTrim(text, (byte)0) );
		if (FixUtils.isSet(encodedTextLen)) FixUtils.putFixTag( out, FixTags.ENCODEDTEXTLEN_INT, encodedTextLen);
		if (FixUtils.isSet(encodedText)) FixUtils.putFixTag( out, FixTags.ENCODEDTEXT_INT, encodedText, 0, Utils.lastIndexTrim(encodedText, (byte)0) );
		// the checksum at the end

		int checkSumStart = out.position();
		out.position( msgLengthValueStart );
		bodyLength = checkSumStart - msgTypeStart;
		Utils.longToNumeric( out, bodyLength, Utils.digits(FixConstants.MAX_MESSAGE_SIZE) );

		checkSum = FixUtils.computeChecksum( out, msgStart, checkSumStart );
		out.position( checkSumStart );
		FixUtils.putFixTag( out, FixTags.CHECKSUM_INT, checkSum );

		out.flip();

	}
	@Override		
	public void printBuffer(ByteBuffer out) {

		out.put(buf);

		out.flip();

	}

	/**
	 * If you use toString for any other purpose than administrative printout.
	 * You will end up in nifelheim!
	**/
	@Override
	public String toString() {
		char sep = '\n';
		if (Boolean.getBoolean("fix.useOneLiner")) sep = SOH;

		String s = "BeginString(8)=" + new String(BEGINSTRING_VALUE) + sep;
		s += "BodyLength(9)=" + bodyLength + sep;
		s += "MsgType(35)=" + new String(MsgTypes.ASSIGNMENTREPORT) + sep;

		try {
			// print all fields including the header

			if (FixUtils.isSet(applVerID)) s += "ApplVerID(1128)=" + new String(applVerID) + sep;
			if (FixUtils.isSet(cstmApplVerID)) s += "CstmApplVerID(1129)=" + new String(cstmApplVerID) + sep;
			if (FixUtils.isSet(applExtID)) s += "ApplExtID(1156)=" + String.valueOf(applExtID) + sep;
			 s += "SenderCompID(49)=" + new String(senderCompID) + sep;
			 s += "TargetCompID(56)=" + new String(targetCompID) + sep;
			if (FixUtils.isSet(onBehalfOfCompID)) s += "OnBehalfOfCompID(115)=" + new String(onBehalfOfCompID) + sep;
			if (FixUtils.isSet(deliverToCompID)) s += "DeliverToCompID(128)=" + new String(deliverToCompID) + sep;
			if (FixUtils.isSet(secureDataLen)) s += "SecureDataLen(90)=" + String.valueOf(secureDataLen) + sep;
			if (FixUtils.isSet(secureData)) s += "SecureData(91)=" + new String(secureData) + sep;
			 s += "MsgSeqNum(34)=" + String.valueOf(msgSeqNum) + sep;
			if (FixUtils.isSet(senderSubID)) s += "SenderSubID(50)=" + new String(senderSubID) + sep;
			if (FixUtils.isSet(senderLocationID)) s += "SenderLocationID(142)=" + new String(senderLocationID) + sep;
			if (FixUtils.isSet(targetSubID)) s += "TargetSubID(57)=" + new String(targetSubID) + sep;
			if (FixUtils.isSet(targetLocationID)) s += "TargetLocationID(143)=" + new String(targetLocationID) + sep;
			if (FixUtils.isSet(onBehalfOfSubID)) s += "OnBehalfOfSubID(116)=" + new String(onBehalfOfSubID) + sep;
			if (FixUtils.isSet(onBehalfOfLocationID)) s += "OnBehalfOfLocationID(144)=" + new String(onBehalfOfLocationID) + sep;
			if (FixUtils.isSet(deliverToSubID)) s += "DeliverToSubID(129)=" + new String(deliverToSubID) + sep;
			if (FixUtils.isSet(deliverToLocationID)) s += "DeliverToLocationID(145)=" + new String(deliverToLocationID) + sep;
			if (FixUtils.isSet(possDupFlag)) s += "PossDupFlag(43)=" + String.valueOf(possDupFlag) + sep;
			if (FixUtils.isSet(possResend)) s += "PossResend(97)=" + String.valueOf(possResend) + sep;
			 s += "SendingTime(52)=" + new String(sendingTime) + sep;
			if (FixUtils.isSet(origSendingTime)) s += "OrigSendingTime(122)=" + new String(origSendingTime) + sep;
			if (FixUtils.isSet(xmlDataLen)) s += "XmlDataLen(212)=" + String.valueOf(xmlDataLen) + sep;
			if (FixUtils.isSet(xmlData)) s += "XmlData(213)=" + new String(xmlData) + sep;
			if (FixUtils.isSet(messageEncoding)) s += "MessageEncoding(347)=" + new String(messageEncoding) + sep;
			if (FixUtils.isSet(lastMsgSeqNumProcessed)) s += "LastMsgSeqNumProcessed(369)=" + String.valueOf(lastMsgSeqNumProcessed) + sep;

			 s += "AsgnRptID(833)=" + new String(asgnRptID) + sep;
			if (FixUtils.isSet(posReqID)) s += "PosReqID(710)=" + new String(posReqID) + sep;
			if (FixUtils.isSet(totNumAssignmentReports)) s += "TotNumAssignmentReports(832)=" + String.valueOf(totNumAssignmentReports) + sep;
			if (FixUtils.isSet(lastRptRequested)) s += "LastRptRequested(912)=" + String.valueOf(lastRptRequested) + sep;
			if (FixUtils.isSet(account)) s += "Account(1)=" + new String(account) + sep;
			if (FixUtils.isSet(accountType)) s += "AccountType(581)=" + String.valueOf(accountType) + sep;
			if (FixUtils.isSet(currency)) s += "Currency(15)=" + new String(currency) + sep;
			if (FixUtils.isSet(thresholdAmount)) s += "ThresholdAmount(834)=" + String.valueOf(thresholdAmount) + sep;
			if (FixUtils.isSet(settlPrice)) s += "SettlPrice(730)=" + String.valueOf(settlPrice) + sep;
			if (FixUtils.isSet(settlPriceType)) s += "SettlPriceType(731)=" + String.valueOf(settlPriceType) + sep;
			if (FixUtils.isSet(underlyingSettlPrice)) s += "UnderlyingSettlPrice(732)=" + String.valueOf(underlyingSettlPrice) + sep;
			if (FixUtils.isSet(priorSettlPrice)) s += "PriorSettlPrice(734)=" + String.valueOf(priorSettlPrice) + sep;
			if (FixUtils.isSet(expireDate)) s += "ExpireDate(432)=" + new String(expireDate) + sep;
			if (FixUtils.isSet(assignmentMethod)) s += "AssignmentMethod(744)=" + String.valueOf(assignmentMethod) + sep;
			if (FixUtils.isSet(assignmentUnit)) s += "AssignmentUnit(745)=" + String.valueOf(assignmentUnit) + sep;
			if (FixUtils.isSet(openInterest)) s += "OpenInterest(746)=" + String.valueOf(openInterest) + sep;
			if (FixUtils.isSet(exerciseMethod)) s += "ExerciseMethod(747)=" + String.valueOf(exerciseMethod) + sep;
			if (FixUtils.isSet(settlSessID)) s += "SettlSessID(716)=" + new String(settlSessID) + sep;
			if (FixUtils.isSet(settlSessSubID)) s += "SettlSessSubID(717)=" + new String(settlSessSubID) + sep;
			 s += "ClearingBusinessDate(715)=" + new String(clearingBusinessDate) + sep;
			if (FixUtils.isSet(text)) s += "Text(58)=" + new String(text) + sep;
			if (FixUtils.isSet(encodedTextLen)) s += "EncodedTextLen(354)=" + String.valueOf(encodedTextLen) + sep;
			if (FixUtils.isSet(encodedText)) s += "EncodedText(355)=" + new String(encodedText) + sep;

			s += "checkSum(10)=" + String.valueOf(checkSum) + sep;

		} catch(Exception e) {  };

		return s;
	}

	@Override
	public boolean equals(Object o) {
		if (! ( o instanceof FixAssignmentReport)) return false;

			FixAssignmentReport msg = (FixAssignmentReport) o;

		if ( ! super.equals(msg) ) return false;

		if (!Utils.equals( asgnRptID, msg.asgnRptID)) return false;

		if (!Utils.equals( posReqID, msg.posReqID)) return false;

		if (!( totNumAssignmentReports==msg.totNumAssignmentReports)) return false;

		if (!( lastRptRequested==msg.lastRptRequested)) return false;

		if (!Utils.equals( account, msg.account)) return false;

		if (!( accountType==msg.accountType)) return false;

		if (!Utils.equals( currency, msg.currency)) return false;

		if (!( thresholdAmount==msg.thresholdAmount)) return false;

		if (!( settlPrice==msg.settlPrice)) return false;

		if (!( settlPriceType==msg.settlPriceType)) return false;

		if (!( underlyingSettlPrice==msg.underlyingSettlPrice)) return false;

		if (!( priorSettlPrice==msg.priorSettlPrice)) return false;

		if (!( assignmentMethod==msg.assignmentMethod)) return false;

		if (!( assignmentUnit==msg.assignmentUnit)) return false;

		if (!( openInterest==msg.openInterest)) return false;

		if (!( exerciseMethod==msg.exerciseMethod)) return false;

		if (!Utils.equals( settlSessID, msg.settlSessID)) return false;

		if (!Utils.equals( settlSessSubID, msg.settlSessSubID)) return false;

		if (!Utils.equals( text, msg.text)) return false;

		if (!( encodedTextLen==msg.encodedTextLen)) return false;

		if (!Utils.equals( encodedText, msg.encodedText)) return false;

		return true;
	}
}
