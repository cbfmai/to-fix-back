package org.tomac.protocol.fix.messaging.fix50sp2.component;

// DO NOT EDIT!!!
// This file is generated by FixMessageGenerator.
// If you need additional functionality, put it in a helper class
// that does not live in this folder!!!  Any java file in this folder 
// will be deleted upon the next run of the FixMessageGenerator!

import java.nio.ByteBuffer;

import org.tomac.protocol.fix.FixUtils;
import org.tomac.protocol.fix.FixSessionException;
import org.tomac.protocol.fix.FixGarbledException;
import org.tomac.utils.Utils;
import org.tomac.protocol.fix.FixConstants;


import org.tomac.protocol.fix.messaging.fix50sp2.FixMessageInfo;
import org.tomac.protocol.fix.messaging.fix50sp2.FixTags;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixSettlParties;

public class FixDlvyInstGrp
{

	public int noDlvyInst;
	public DlvyInstGrp[] group;

	public void getAll(int noDlvyInst, ByteBuffer buf) throws FixSessionException {
		this.noDlvyInst = noDlvyInst;

		if (noDlvyInst < 1) throw new FixSessionException("asdasd");
		// this will leak memory if we grow the group
		if (group.length < noDlvyInst) 
			group = new DlvyInstGrp[noDlvyInst];

		for ( int i = 0; i < noDlvyInst; i++ ) 
			group[i].getAllGroup(buf);
	}

	public void clear() {
		for (int i = 0; i<noDlvyInst; i++)
			group[i].clear();
	}
	public void encode(ByteBuffer out) {
		for (int i = 0; i<noDlvyInst; i++)
			group[i].encode(out);
	}
	public boolean isSet() {
		for (int i = 0; i<noDlvyInst; i++)
			if (group[i].isSet()) return true;
		return false;
	}

	@Override
	public String toString() {
		String s = "";
		for (int i = 0; i<noDlvyInst; i++)
			s += group[i].toString();
		return s;
	}

public class DlvyInstGrp implements FixComponent
{

	public byte settlInstSource = (byte)' ';
	public byte dlvyInstType = (byte)' ';
	public FixSettlParties settlParties;

	public DlvyInstGrp() {
		super();

		settlParties = new FixSettlParties();
		this.clear();

	}

	@Override
	public void clear()
	{

		// clear out all the fields that aren't msgType

		settlInstSource = Byte.MAX_VALUE;		
		dlvyInstType = Byte.MAX_VALUE;		
		settlParties.clear();
	}

	public void getAllGroup(ByteBuffer buf) throws FixSessionException
	{

		int startTagPosition = buf.position();

		int id = FixUtils.getTagId( buf );
		int lastTagPosition = buf.position();
			ByteBuffer value;

			value = buf;

			if(id == FixTags.SETTLINSTSOURCE_INT) {
				settlInstSource = FixUtils.getTagCharValue( value );
				if (!FixMessageInfo.SettlInstSource.isValid(settlInstSource) ) throw new FixSessionException(buf, "Invalid enumerated value(" + settlInstSource + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.DLVYINSTTYPE_INT) {
				dlvyInstType = FixUtils.getTagCharValue( value );
				if (!FixMessageInfo.DlvyInstType.isValid(dlvyInstType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + dlvyInstType + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.NOSETTLPARTYIDS_INT) {
				settlParties.getAll(FixTags.NOSETTLPARTYIDS_INT, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			id = checkRequiredTags();
			if (id > 0) throw new FixSessionException(buf, "Required tag missing: " + id );

			buf.position( lastTagPosition );
			return;

	}

	private int checkRequiredTags() {
		int tag = -1;

		return tag;

	}
	@Override
	public boolean isSet()
	{
		if (FixUtils.isSet(settlInstSource)) return true;
		if (FixUtils.isSet(dlvyInstType)) return true;
		if (FixUtils.isSet(settlParties.noSettlPartyIDs)) return true;
		return false;
	}
	@Override
	public void encode( ByteBuffer out )
	{
		if (FixUtils.isSet(settlInstSource)) FixUtils.putFixTag( out, FixTags.SETTLINSTSOURCE_INT, settlInstSource );
		if (FixUtils.isSet(dlvyInstType)) FixUtils.putFixTag( out, FixTags.DLVYINSTTYPE_INT, dlvyInstType );
		if (FixUtils.isSet(settlParties.noSettlPartyIDs)) settlParties.encode( out );
	}
	/**
	 * If you use toString for any other purpose than administrative printout.
	 * You will end up in nifelheim!
	**/
	@Override
	public String toString() {
		char sep = '\n';
		if (Boolean.getBoolean("fix.useOneLiner")) sep = ( byte )0x01;

		String s = "";

			if (FixUtils.isSet(settlInstSource)) s += "SettlInstSource(165)=" + String.valueOf(settlInstSource) + sep;
			if (FixUtils.isSet(dlvyInstType)) s += "DlvyInstType(787)=" + String.valueOf(dlvyInstType) + sep;
			if (FixUtils.isSet(settlParties.noSettlPartyIDs)) s += settlParties.toString();
		return s;

	}

	@Override
	public boolean equals(Object o) {
		if (! ( o instanceof DlvyInstGrp)) return false;

			DlvyInstGrp msg = (DlvyInstGrp) o;

		if ( ! super.equals(msg) ) return false;

		if (!( settlInstSource==msg.settlInstSource)) return false;

		if (!( dlvyInstType==msg.dlvyInstType)) return false;

		if (!settlParties.equals(msg.settlParties)) return false;

		return true;
	}
}
}
