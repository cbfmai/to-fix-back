package org.tomac.protocol.fix.messaging.fix50sp2;

// DO NOT EDIT!!!
// This file is generated by FixMessageGenerator.
// If you need additional functionality, put it in a helper class
// that does not live in this folder!!!  Any java file in this folder 
// will be deleted upon the next run of the FixMessageGenerator!

import java.nio.ByteBuffer;

import org.tomac.protocol.fix.FixUtils;
import org.tomac.protocol.fix.FixSessionException;
import org.tomac.protocol.fix.FixGarbledException;
import org.tomac.utils.Utils;
import org.tomac.protocol.fix.FixConstants;


import org.tomac.protocol.fix.messaging.fix50sp2.component.FixHopGrp;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixApplicationSequenceControl;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixParties;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixContraGrp;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixPreAllocGrp;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixInstrument;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixFinancingDetails;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixUndInstrmtGrp;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixStipulations;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixOrderQtyData;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixTriggeringInstruction;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixPegInstructions;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixDiscretionInstructions;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixStrategyParametersGrp;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixFillsGrp;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixCommissionData;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixSpreadOrBenchmarkCurveData;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixYieldData;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixRateSource;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixDisplayInstruction;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixContAmtGrp;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixInstrmtLegExecGrp;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixMiscFeesGrp;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixTrdRegTimestamps;

public class FixExecutionReport extends FixMessage
{

	public FixApplicationSequenceControl applicationSequenceControl;
	public byte[] orderID;
	public byte[] secondaryOrderID;
	public byte[] secondaryClOrdID;
	public byte[] secondaryExecID;
	public byte[] clOrdID;
	public byte[] origClOrdID;
	public byte[] clOrdLinkID;
	public byte[] quoteRespID;
	public byte[] ordStatusReqID;
	public byte[] massStatusReqID;
	public byte[] hostCrossID;
	public long totNumReports = 0;
	public boolean lastRptRequested = false;
	public FixParties parties;
	public byte[] tradeOriginationDate;
	public FixContraGrp contraGrp;
	public byte[] listID;
	public byte[] crossID;
	public byte[] origCrossID;
	public long crossType = 0;
	public byte[] trdMatchID;
	public byte[] execID;
	public byte[] execRefID;
	public byte execType = (byte)' ';
	public byte ordStatus = (byte)' ';
	public boolean workingIndicator = false;
	public long ordRejReason = 0;
	public long execRestatementReason = 0;
	public byte[] account;
	public long acctIDSource = 0;
	public long accountType = 0;
	public byte dayBookingInst = (byte)' ';
	public byte bookingUnit = (byte)' ';
	public byte preallocMethod = (byte)' ';
	public byte[] allocID;
	public FixPreAllocGrp preAllocGrp;
	public byte[] settlType;
	public byte[] settlDate;
	public byte[] matchType;
	public byte orderCategory = (byte)' ';
	public byte cashMargin = (byte)' ';
	public byte[] clearingFeeIndicator;
	public FixInstrument instrument;
	public FixFinancingDetails financingDetails;
	public FixUndInstrmtGrp undInstrmtGrp;
	public byte side = (byte)' ';
	public FixStipulations stipulations;
	public long qtyType = 0;
	public byte lotType = (byte)' ';
	public FixOrderQtyData orderQtyData;
	public byte ordType = (byte)' ';
	public long priceType = 0;
	public long price = 0;
	public byte priceProtectionScope = (byte)' ';
	public long stopPx = 0;
	public FixTriggeringInstruction triggeringInstruction;
	public FixPegInstructions pegInstructions;
	public FixDiscretionInstructions discretionInstructions;
	public long peggedPrice = 0;
	public long peggedRefPrice = 0;
	public long discretionPrice = 0;
	public long targetStrategy = 0;
	public FixStrategyParametersGrp strategyParametersGrp;
	public byte[] targetStrategyParameters;
	public long participationRate = 0;
	public long targetStrategyPerformance = 0;
	public byte[] currency;
	public byte[] complianceID;
	public boolean solicitedFlag = false;
	public byte timeInForce = (byte)' ';
	public byte[] effectiveTime;
	public byte[] expireDate;
	public byte[] expireTime;
	public byte[] execInst;
	public boolean aggressorIndicator = false;
	public byte orderCapacity = (byte)' ';
	public byte[] orderRestrictions;
	public boolean preTradeAnonymity = false;
	public long custOrderCapacity = 0;
	public long lastQty = 0;
	public long calculatedCcyLastQty = 0;
	public long lastSwapPoints = 0;
	public long underlyingLastQty = 0;
	public long lastPx = 0;
	public long underlyingLastPx = 0;
	public long lastParPx = 0;
	public long lastSpotRate = 0;
	public long lastForwardPoints = 0;
	public byte[] lastMkt;
	public byte[] tradingSessionID;
	public byte[] tradingSessionSubID;
	public byte[] timeBracket;
	public byte lastCapacity = (byte)' ';
	public long leavesQty = 0;
	public long cumQty = 0;
	public long avgPx = 0;
	public long dayOrderQty = 0;
	public long dayCumQty = 0;
	public long dayAvgPx = 0;
	public long totNoFills = 0;
	public boolean lastFragment = false;
	public FixFillsGrp fillsGrp;
	public long gTBookingInst = 0;
	public byte[] tradeDate;
	public byte[] transactTime;
	public boolean reportToExch = false;
	public FixCommissionData commissionData;
	public FixSpreadOrBenchmarkCurveData spreadOrBenchmarkCurveData;
	public FixYieldData yieldData;
	public long grossTradeAmt = 0;
	public long numDaysInterest = 0;
	public byte[] exDate;
	public long accruedInterestRate = 0;
	public long accruedInterestAmt = 0;
	public long interestAtMaturity = 0;
	public long endAccruedInterestAmt = 0;
	public long startCash = 0;
	public long endCash = 0;
	public boolean tradedFlatSwitch = false;
	public byte[] basisFeatureDate;
	public long basisFeaturePrice = 0;
	public long concession = 0;
	public long totalTakedown = 0;
	public long netMoney = 0;
	public long settlCurrAmt = 0;
	public byte[] settlCurrency;
	public FixRateSource rateSource;
	public long settlCurrFxRate = 0;
	public byte settlCurrFxRateCalc = (byte)' ';
	public byte handlInst = (byte)' ';
	public long minQty = 0;
	public long matchIncrement = 0;
	public long maxPriceLevels = 0;
	public FixDisplayInstruction displayInstruction;
	public long maxFloor = 0;
	public byte positionEffect = (byte)' ';
	public long maxShow = 0;
	public long bookingType = 0;
	public byte[] text;
	public long encodedTextLen = 0;
	public byte[] encodedText;
	public byte[] settlDate2;
	public long orderQty2 = 0;
	public long lastForwardPoints2 = 0;
	public byte multiLegReportingType = (byte)' ';
	public byte cancellationRights = (byte)' ';
	public byte moneyLaunderingStatus = (byte)' ';
	public byte[] registID;
	public byte[] designation;
	public byte[] transBkdTime;
	public byte[] execValuationPoint;
	public byte execPriceType = (byte)' ';
	public long execPriceAdjustment = 0;
	public long priorityIndicator = 0;
	public long priceImprovement = 0;
	public long lastLiquidityInd = 0;
	public FixContAmtGrp contAmtGrp;
	public FixInstrmtLegExecGrp instrmtLegExecGrp;
	public boolean copyMsgIndicator = false;
	public boolean manualOrderIndicator = false;
	public boolean custDirectedOrder = false;
	public byte[] receivedDeptID;
	public byte[] custOrderHandlingInst;
	public long orderHandlingInstSource = 0;
	public long dividendYield = 0;
	public FixMiscFeesGrp miscFeesGrp;
	public FixTrdRegTimestamps trdRegTimestamps;
	public long volatility = 0;
	public long timeToExpiration = 0;
	public long riskFreeRate = 0;
	public long priceDelta = 0;

	public FixExecutionReport() {
		super();

		applicationSequenceControl = new FixApplicationSequenceControl();
		orderID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		secondaryOrderID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		secondaryClOrdID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		secondaryExecID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		clOrdID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		origClOrdID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		clOrdLinkID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		quoteRespID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		ordStatusReqID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		massStatusReqID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		hostCrossID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		parties = new FixParties();
		tradeOriginationDate = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		contraGrp = new FixContraGrp();
		listID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		crossID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		origCrossID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		trdMatchID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		execID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		execRefID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		account = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		allocID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		preAllocGrp = new FixPreAllocGrp();
		settlType = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		settlDate = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		matchType = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		clearingFeeIndicator = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		instrument = new FixInstrument();
		financingDetails = new FixFinancingDetails();
		undInstrmtGrp = new FixUndInstrmtGrp();
		stipulations = new FixStipulations();
		orderQtyData = new FixOrderQtyData();
		triggeringInstruction = new FixTriggeringInstruction();
		pegInstructions = new FixPegInstructions();
		discretionInstructions = new FixDiscretionInstructions();
		strategyParametersGrp = new FixStrategyParametersGrp();
		targetStrategyParameters = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		currency = new byte[FixUtils.CURRENCY_LENGTH];
		complianceID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		effectiveTime = new byte[FixUtils.UTCTIMESTAMP_LENGTH];
		expireDate = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		expireTime = new byte[FixUtils.UTCTIMESTAMP_LENGTH];
		execInst = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		orderRestrictions = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		lastMkt = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		tradingSessionID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		tradingSessionSubID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		timeBracket = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		fillsGrp = new FixFillsGrp();
		tradeDate = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		transactTime = new byte[FixUtils.UTCTIMESTAMP_LENGTH];
		commissionData = new FixCommissionData();
		spreadOrBenchmarkCurveData = new FixSpreadOrBenchmarkCurveData();
		yieldData = new FixYieldData();
		exDate = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		basisFeatureDate = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		settlCurrency = new byte[FixUtils.CURRENCY_LENGTH];
		rateSource = new FixRateSource();
		displayInstruction = new FixDisplayInstruction();
		text = new byte[FixUtils.FIX_MAX_STRING_TEXT_LENGTH];
		encodedText = new byte[FixUtils.FIX_MAX_STRING_TEXT_LENGTH];
		settlDate2 = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		registID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		designation = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		transBkdTime = new byte[FixUtils.UTCTIMESTAMP_LENGTH];
		execValuationPoint = new byte[FixUtils.UTCTIMESTAMP_LENGTH];
		contAmtGrp = new FixContAmtGrp();
		instrmtLegExecGrp = new FixInstrmtLegExecGrp();
		receivedDeptID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		custOrderHandlingInst = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		miscFeesGrp = new FixMiscFeesGrp();
		trdRegTimestamps = new FixTrdRegTimestamps();
		this.clear();

		msgType = MsgTypes.EXECUTIONREPORT_INT;

	}

	@Override
	public void clear()
	{

		// clear out all the fields that aren't msgType

		Utils.fill( orderID, (byte)0 );
		Utils.fill( secondaryOrderID, (byte)0 );
		Utils.fill( secondaryClOrdID, (byte)0 );
		Utils.fill( secondaryExecID, (byte)0 );
		Utils.fill( clOrdID, (byte)0 );
		Utils.fill( origClOrdID, (byte)0 );
		Utils.fill( clOrdLinkID, (byte)0 );
		Utils.fill( quoteRespID, (byte)0 );
		Utils.fill( ordStatusReqID, (byte)0 );
		Utils.fill( massStatusReqID, (byte)0 );
		Utils.fill( hostCrossID, (byte)0 );
		totNumReports = Long.MAX_VALUE;		
		lastRptRequested = false;		
		Utils.fill( tradeOriginationDate, (byte)0 );
		Utils.fill( listID, (byte)0 );
		Utils.fill( crossID, (byte)0 );
		Utils.fill( origCrossID, (byte)0 );
		crossType = Long.MAX_VALUE;		
		Utils.fill( trdMatchID, (byte)0 );
		Utils.fill( execID, (byte)0 );
		Utils.fill( execRefID, (byte)0 );
		execType = Byte.MAX_VALUE;		
		ordStatus = Byte.MAX_VALUE;		
		workingIndicator = false;		
		ordRejReason = Long.MAX_VALUE;		
		execRestatementReason = Long.MAX_VALUE;		
		Utils.fill( account, (byte)0 );
		acctIDSource = Long.MAX_VALUE;		
		accountType = Long.MAX_VALUE;		
		dayBookingInst = Byte.MAX_VALUE;		
		bookingUnit = Byte.MAX_VALUE;		
		preallocMethod = Byte.MAX_VALUE;		
		Utils.fill( allocID, (byte)0 );
		Utils.fill( settlType, (byte)0 );
		Utils.fill( settlDate, (byte)0 );
		Utils.fill( matchType, (byte)0 );
		orderCategory = Byte.MAX_VALUE;		
		cashMargin = Byte.MAX_VALUE;		
		Utils.fill( clearingFeeIndicator, (byte)0 );
		side = Byte.MAX_VALUE;		
		qtyType = Long.MAX_VALUE;		
		lotType = Byte.MAX_VALUE;		
		ordType = Byte.MAX_VALUE;		
		priceType = Long.MAX_VALUE;		
		price = Long.MAX_VALUE;		
		priceProtectionScope = Byte.MAX_VALUE;		
		stopPx = Long.MAX_VALUE;		
		peggedPrice = Long.MAX_VALUE;		
		peggedRefPrice = Long.MAX_VALUE;		
		discretionPrice = Long.MAX_VALUE;		
		targetStrategy = Long.MAX_VALUE;		
		Utils.fill( targetStrategyParameters, (byte)0 );
		participationRate = Long.MAX_VALUE;		
		targetStrategyPerformance = Long.MAX_VALUE;		
		Utils.fill( currency, (byte)0 );
		Utils.fill( complianceID, (byte)0 );
		solicitedFlag = false;		
		timeInForce = Byte.MAX_VALUE;		
		Utils.fill( effectiveTime, (byte)0 );
		Utils.fill( expireDate, (byte)0 );
		Utils.fill( expireTime, (byte)0 );
		Utils.fill( execInst, (byte)0 );
		aggressorIndicator = false;		
		orderCapacity = Byte.MAX_VALUE;		
		Utils.fill( orderRestrictions, (byte)0 );
		preTradeAnonymity = false;		
		custOrderCapacity = Long.MAX_VALUE;		
		lastQty = Long.MAX_VALUE;		
		calculatedCcyLastQty = Long.MAX_VALUE;		
		lastSwapPoints = Long.MAX_VALUE;		
		underlyingLastQty = Long.MAX_VALUE;		
		lastPx = Long.MAX_VALUE;		
		underlyingLastPx = Long.MAX_VALUE;		
		lastParPx = Long.MAX_VALUE;		
		lastSpotRate = Long.MAX_VALUE;		
		lastForwardPoints = Long.MAX_VALUE;		
		Utils.fill( lastMkt, (byte)0 );
		Utils.fill( tradingSessionID, (byte)0 );
		Utils.fill( tradingSessionSubID, (byte)0 );
		Utils.fill( timeBracket, (byte)0 );
		lastCapacity = Byte.MAX_VALUE;		
		leavesQty = Long.MAX_VALUE;		
		cumQty = Long.MAX_VALUE;		
		avgPx = Long.MAX_VALUE;		
		dayOrderQty = Long.MAX_VALUE;		
		dayCumQty = Long.MAX_VALUE;		
		dayAvgPx = Long.MAX_VALUE;		
		totNoFills = Long.MAX_VALUE;		
		lastFragment = false;		
		gTBookingInst = Long.MAX_VALUE;		
		Utils.fill( tradeDate, (byte)0 );
		Utils.fill( transactTime, (byte)0 );
		reportToExch = false;		
		grossTradeAmt = Long.MAX_VALUE;		
		numDaysInterest = Long.MAX_VALUE;		
		Utils.fill( exDate, (byte)0 );
		accruedInterestRate = Long.MAX_VALUE;		
		accruedInterestAmt = Long.MAX_VALUE;		
		interestAtMaturity = Long.MAX_VALUE;		
		endAccruedInterestAmt = Long.MAX_VALUE;		
		startCash = Long.MAX_VALUE;		
		endCash = Long.MAX_VALUE;		
		tradedFlatSwitch = false;		
		Utils.fill( basisFeatureDate, (byte)0 );
		basisFeaturePrice = Long.MAX_VALUE;		
		concession = Long.MAX_VALUE;		
		totalTakedown = Long.MAX_VALUE;		
		netMoney = Long.MAX_VALUE;		
		settlCurrAmt = Long.MAX_VALUE;		
		Utils.fill( settlCurrency, (byte)0 );
		settlCurrFxRate = Long.MAX_VALUE;		
		settlCurrFxRateCalc = Byte.MAX_VALUE;		
		handlInst = Byte.MAX_VALUE;		
		minQty = Long.MAX_VALUE;		
		matchIncrement = Long.MAX_VALUE;		
		maxPriceLevels = Long.MAX_VALUE;		
		maxFloor = Long.MAX_VALUE;		
		positionEffect = Byte.MAX_VALUE;		
		maxShow = Long.MAX_VALUE;		
		bookingType = Long.MAX_VALUE;		
		Utils.fill( text, (byte)0 );
		encodedTextLen = Long.MAX_VALUE;		
		Utils.fill( encodedText, (byte)0 );
		Utils.fill( settlDate2, (byte)0 );
		orderQty2 = Long.MAX_VALUE;		
		lastForwardPoints2 = Long.MAX_VALUE;		
		multiLegReportingType = Byte.MAX_VALUE;		
		cancellationRights = Byte.MAX_VALUE;		
		moneyLaunderingStatus = Byte.MAX_VALUE;		
		Utils.fill( registID, (byte)0 );
		Utils.fill( designation, (byte)0 );
		Utils.fill( transBkdTime, (byte)0 );
		Utils.fill( execValuationPoint, (byte)0 );
		execPriceType = Byte.MAX_VALUE;		
		execPriceAdjustment = Long.MAX_VALUE;		
		priorityIndicator = Long.MAX_VALUE;		
		priceImprovement = Long.MAX_VALUE;		
		lastLiquidityInd = Long.MAX_VALUE;		
		copyMsgIndicator = false;		
		manualOrderIndicator = false;		
		custDirectedOrder = false;		
		Utils.fill( receivedDeptID, (byte)0 );
		Utils.fill( custOrderHandlingInst, (byte)0 );
		orderHandlingInstSource = Long.MAX_VALUE;		
		dividendYield = Long.MAX_VALUE;		
		volatility = Long.MAX_VALUE;		
		timeToExpiration = Long.MAX_VALUE;		
		riskFreeRate = Long.MAX_VALUE;		
		priceDelta = Long.MAX_VALUE;		
		applicationSequenceControl.clear();
		parties.clear();
		contraGrp.clear();
		preAllocGrp.clear();
		instrument.clear();
		financingDetails.clear();
		undInstrmtGrp.clear();
		stipulations.clear();
		orderQtyData.clear();
		triggeringInstruction.clear();
		pegInstructions.clear();
		discretionInstructions.clear();
		strategyParametersGrp.clear();
		fillsGrp.clear();
		commissionData.clear();
		spreadOrBenchmarkCurveData.clear();
		yieldData.clear();
		rateSource.clear();
		displayInstruction.clear();
		contAmtGrp.clear();
		instrmtLegExecGrp.clear();
		miscFeesGrp.clear();
		trdRegTimestamps.clear();
	}

	@Override
	public void getAll() throws FixSessionException, FixGarbledException
	{

		int startTagPosition = buf.position();

		super.getAll();

		// assumption message is full otherwise decode would return null
		// so negative id means that we are at the end of the message
		int id;
		int lastTagPosition = buf.position();
		while ( ( id = FixUtils.getTagId( buf ) ) > 0 )
		{
			ByteBuffer value;

			value = buf;

			switch( id ) {

			case FixTags.APPLID_INT:
				applicationSequenceControl.getAll(FixTags.APPLID_INT, value );
				break;

			case FixTags.ORDERID_INT:
				orderID = FixUtils.getTagStringValue(value, orderID);
				break;

			case FixTags.SECONDARYORDERID_INT:
				secondaryOrderID = FixUtils.getTagStringValue(value, secondaryOrderID);
				break;

			case FixTags.SECONDARYCLORDID_INT:
				secondaryClOrdID = FixUtils.getTagStringValue(value, secondaryClOrdID);
				break;

			case FixTags.SECONDARYEXECID_INT:
				secondaryExecID = FixUtils.getTagStringValue(value, secondaryExecID);
				break;

			case FixTags.CLORDID_INT:
				clOrdID = FixUtils.getTagStringValue(value, clOrdID);
				break;

			case FixTags.ORIGCLORDID_INT:
				origClOrdID = FixUtils.getTagStringValue(value, origClOrdID);
				break;

			case FixTags.CLORDLINKID_INT:
				clOrdLinkID = FixUtils.getTagStringValue(value, clOrdLinkID);
				break;

			case FixTags.QUOTERESPID_INT:
				quoteRespID = FixUtils.getTagStringValue(value, quoteRespID);
				break;

			case FixTags.ORDSTATUSREQID_INT:
				ordStatusReqID = FixUtils.getTagStringValue(value, ordStatusReqID);
				break;

			case FixTags.MASSSTATUSREQID_INT:
				massStatusReqID = FixUtils.getTagStringValue(value, massStatusReqID);
				break;

			case FixTags.HOSTCROSSID_INT:
				hostCrossID = FixUtils.getTagStringValue(value, hostCrossID);
				break;

			case FixTags.TOTNUMREPORTS_INT:
				totNumReports = FixUtils.getTagIntValue( value );
				break;

			case FixTags.LASTRPTREQUESTED_INT:
				lastRptRequested = FixUtils.getTagBooleanValue( value );
				if (!LastRptRequested.isValid(lastRptRequested) ) throw new FixSessionException(buf, "Invalid enumerated value(" + lastRptRequested + ") for tag: " + id );
				break;

			case FixTags.NOPARTYIDS_INT:
				parties.noPartyIDs = FixUtils.getTagIntValue( value );
				parties.getAll(parties.noPartyIDs, value );
				break;

			case FixTags.TRADEORIGINATIONDATE_INT:
				tradeOriginationDate = FixUtils.getTagStringValue(value, tradeOriginationDate);
				break;

			case FixTags.NOCONTRABROKERS_INT:
				contraGrp.noContraBrokers = FixUtils.getTagIntValue( value );
				contraGrp.getAll(contraGrp.noContraBrokers, value );
				break;

			case FixTags.LISTID_INT:
				listID = FixUtils.getTagStringValue(value, listID);
				break;

			case FixTags.CROSSID_INT:
				crossID = FixUtils.getTagStringValue(value, crossID);
				break;

			case FixTags.ORIGCROSSID_INT:
				origCrossID = FixUtils.getTagStringValue(value, origCrossID);
				break;

			case FixTags.CROSSTYPE_INT:
				crossType = FixUtils.getTagIntValue( value );
				if (!CrossType.isValid(crossType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + crossType + ") for tag: " + id );
				break;

			case FixTags.TRDMATCHID_INT:
				trdMatchID = FixUtils.getTagStringValue(value, trdMatchID);
				break;

			case FixTags.EXECID_INT:
				execID = FixUtils.getTagStringValue(value, execID);
				break;

			case FixTags.EXECREFID_INT:
				execRefID = FixUtils.getTagStringValue(value, execRefID);
				break;

			case FixTags.EXECTYPE_INT:
				execType = FixUtils.getTagCharValue( value );
				if (!ExecType.isValid(execType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + execType + ") for tag: " + id );
				break;

			case FixTags.ORDSTATUS_INT:
				ordStatus = FixUtils.getTagCharValue( value );
				if (!OrdStatus.isValid(ordStatus) ) throw new FixSessionException(buf, "Invalid enumerated value(" + ordStatus + ") for tag: " + id );
				break;

			case FixTags.WORKINGINDICATOR_INT:
				workingIndicator = FixUtils.getTagBooleanValue( value );
				if (!WorkingIndicator.isValid(workingIndicator) ) throw new FixSessionException(buf, "Invalid enumerated value(" + workingIndicator + ") for tag: " + id );
				break;

			case FixTags.ORDREJREASON_INT:
				ordRejReason = FixUtils.getTagIntValue( value );
				if (!OrdRejReason.isValid(ordRejReason) ) throw new FixSessionException(buf, "Invalid enumerated value(" + ordRejReason + ") for tag: " + id );
				break;

			case FixTags.EXECRESTATEMENTREASON_INT:
				execRestatementReason = FixUtils.getTagIntValue( value );
				if (!ExecRestatementReason.isValid(execRestatementReason) ) throw new FixSessionException(buf, "Invalid enumerated value(" + execRestatementReason + ") for tag: " + id );
				break;

			case FixTags.ACCOUNT_INT:
				account = FixUtils.getTagStringValue(value, account);
				break;

			case FixTags.ACCTIDSOURCE_INT:
				acctIDSource = FixUtils.getTagIntValue( value );
				if (!AcctIDSource.isValid(acctIDSource) ) throw new FixSessionException(buf, "Invalid enumerated value(" + acctIDSource + ") for tag: " + id );
				break;

			case FixTags.ACCOUNTTYPE_INT:
				accountType = FixUtils.getTagIntValue( value );
				if (!AccountType.isValid(accountType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + accountType + ") for tag: " + id );
				break;

			case FixTags.DAYBOOKINGINST_INT:
				dayBookingInst = FixUtils.getTagCharValue( value );
				if (!DayBookingInst.isValid(dayBookingInst) ) throw new FixSessionException(buf, "Invalid enumerated value(" + dayBookingInst + ") for tag: " + id );
				break;

			case FixTags.BOOKINGUNIT_INT:
				bookingUnit = FixUtils.getTagCharValue( value );
				if (!BookingUnit.isValid(bookingUnit) ) throw new FixSessionException(buf, "Invalid enumerated value(" + bookingUnit + ") for tag: " + id );
				break;

			case FixTags.PREALLOCMETHOD_INT:
				preallocMethod = FixUtils.getTagCharValue( value );
				if (!PreallocMethod.isValid(preallocMethod) ) throw new FixSessionException(buf, "Invalid enumerated value(" + preallocMethod + ") for tag: " + id );
				break;

			case FixTags.ALLOCID_INT:
				allocID = FixUtils.getTagStringValue(value, allocID);
				break;

			case FixTags.NOALLOCS_INT:
				preAllocGrp.noAllocs = FixUtils.getTagIntValue( value );
				preAllocGrp.getAll(preAllocGrp.noAllocs, value );
				break;

			case FixTags.SETTLTYPE_INT:
				settlType = FixUtils.getTagStringValue(value, settlType);
				if (!SettlType.isValid(settlType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + settlType + ") for tag: " + id );
				break;

			case FixTags.SETTLDATE_INT:
				settlDate = FixUtils.getTagStringValue(value, settlDate);
				break;

			case FixTags.MATCHTYPE_INT:
				matchType = FixUtils.getTagStringValue(value, matchType);
				if (!MatchType.isValid(matchType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + matchType + ") for tag: " + id );
				break;

			case FixTags.ORDERCATEGORY_INT:
				orderCategory = FixUtils.getTagCharValue( value );
				if (!OrderCategory.isValid(orderCategory) ) throw new FixSessionException(buf, "Invalid enumerated value(" + orderCategory + ") for tag: " + id );
				break;

			case FixTags.CASHMARGIN_INT:
				cashMargin = FixUtils.getTagCharValue( value );
				if (!CashMargin.isValid(cashMargin) ) throw new FixSessionException(buf, "Invalid enumerated value(" + cashMargin + ") for tag: " + id );
				break;

			case FixTags.CLEARINGFEEINDICATOR_INT:
				clearingFeeIndicator = FixUtils.getTagStringValue(value, clearingFeeIndicator);
				if (!ClearingFeeIndicator.isValid(clearingFeeIndicator) ) throw new FixSessionException(buf, "Invalid enumerated value(" + clearingFeeIndicator + ") for tag: " + id );
				break;

			case FixTags.SYMBOL_INT:
				instrument.getAll(FixTags.SYMBOL_INT, value );
				break;

			case FixTags.AGREEMENTDESC_INT:
				financingDetails.getAll(FixTags.AGREEMENTDESC_INT, value );
				break;

			case FixTags.NOUNDERLYINGS_INT:
				undInstrmtGrp.noUnderlyings = FixUtils.getTagIntValue( value );
				undInstrmtGrp.getAll(undInstrmtGrp.noUnderlyings, value );
				break;

			case FixTags.SIDE_INT:
				side = FixUtils.getTagCharValue( value );
				if (!Side.isValid(side) ) throw new FixSessionException(buf, "Invalid enumerated value(" + side + ") for tag: " + id );
				break;

			case FixTags.NOSTIPULATIONS_INT:
				stipulations.noStipulations = FixUtils.getTagIntValue( value );
				stipulations.getAll(stipulations.noStipulations, value );
				break;

			case FixTags.QTYTYPE_INT:
				qtyType = FixUtils.getTagIntValue( value );
				if (!QtyType.isValid(qtyType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + qtyType + ") for tag: " + id );
				break;

			case FixTags.LOTTYPE_INT:
				lotType = FixUtils.getTagCharValue( value );
				if (!LotType.isValid(lotType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + lotType + ") for tag: " + id );
				break;

			case FixTags.ORDERQTY_INT:
				orderQtyData.getAll(FixTags.ORDERQTY_INT, value );
				break;

			case FixTags.ORDTYPE_INT:
				ordType = FixUtils.getTagCharValue( value );
				if (!OrdType.isValid(ordType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + ordType + ") for tag: " + id );
				break;

			case FixTags.PRICETYPE_INT:
				priceType = FixUtils.getTagIntValue( value );
				if (!PriceType.isValid(priceType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + priceType + ") for tag: " + id );
				break;

			case FixTags.PRICE_INT:
				price = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.PRICEPROTECTIONSCOPE_INT:
				priceProtectionScope = FixUtils.getTagCharValue( value );
				if (!PriceProtectionScope.isValid(priceProtectionScope) ) throw new FixSessionException(buf, "Invalid enumerated value(" + priceProtectionScope + ") for tag: " + id );
				break;

			case FixTags.STOPPX_INT:
				stopPx = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.TRIGGERTYPE_INT:
				triggeringInstruction.getAll(FixTags.TRIGGERTYPE_INT, value );
				break;

			case FixTags.PEGOFFSETVALUE_INT:
				pegInstructions.getAll(FixTags.PEGOFFSETVALUE_INT, value );
				break;

			case FixTags.DISCRETIONINST_INT:
				discretionInstructions.getAll(FixTags.DISCRETIONINST_INT, value );
				break;

			case FixTags.PEGGEDPRICE_INT:
				peggedPrice = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.PEGGEDREFPRICE_INT:
				peggedRefPrice = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.DISCRETIONPRICE_INT:
				discretionPrice = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.TARGETSTRATEGY_INT:
				targetStrategy = FixUtils.getTagIntValue( value );
				if (!TargetStrategy.isValid(targetStrategy) ) throw new FixSessionException(buf, "Invalid enumerated value(" + targetStrategy + ") for tag: " + id );
				break;

			case FixTags.NOSTRATEGYPARAMETERS_INT:
				strategyParametersGrp.noStrategyParameters = FixUtils.getTagIntValue( value );
				strategyParametersGrp.getAll(strategyParametersGrp.noStrategyParameters, value );
				break;

			case FixTags.TARGETSTRATEGYPARAMETERS_INT:
				targetStrategyParameters = FixUtils.getTagStringValue(value, targetStrategyParameters);
				break;

			case FixTags.PARTICIPATIONRATE_INT:
				participationRate = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.TARGETSTRATEGYPERFORMANCE_INT:
				targetStrategyPerformance = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.CURRENCY_INT:
				currency = FixUtils.getTagStringValue(value, currency);
				break;

			case FixTags.COMPLIANCEID_INT:
				complianceID = FixUtils.getTagStringValue(value, complianceID);
				break;

			case FixTags.SOLICITEDFLAG_INT:
				solicitedFlag = FixUtils.getTagBooleanValue( value );
				if (!SolicitedFlag.isValid(solicitedFlag) ) throw new FixSessionException(buf, "Invalid enumerated value(" + solicitedFlag + ") for tag: " + id );
				break;

			case FixTags.TIMEINFORCE_INT:
				timeInForce = FixUtils.getTagCharValue( value );
				if (!TimeInForce.isValid(timeInForce) ) throw new FixSessionException(buf, "Invalid enumerated value(" + timeInForce + ") for tag: " + id );
				break;

			case FixTags.EFFECTIVETIME_INT:
				effectiveTime = FixUtils.getTagStringValue(value, effectiveTime);
				break;

			case FixTags.EXPIREDATE_INT:
				expireDate = FixUtils.getTagStringValue(value, expireDate);
				break;

			case FixTags.EXPIRETIME_INT:
				expireTime = FixUtils.getTagStringValue(value, expireTime);
				break;

			case FixTags.EXECINST_INT:
				execInst = FixUtils.getTagStringValue(value, execInst);
				if (!ExecInst.isValid(execInst) ) throw new FixSessionException(buf, "Invalid enumerated value(" + execInst + ") for tag: " + id );
				break;

			case FixTags.AGGRESSORINDICATOR_INT:
				aggressorIndicator = FixUtils.getTagBooleanValue( value );
				if (!AggressorIndicator.isValid(aggressorIndicator) ) throw new FixSessionException(buf, "Invalid enumerated value(" + aggressorIndicator + ") for tag: " + id );
				break;

			case FixTags.ORDERCAPACITY_INT:
				orderCapacity = FixUtils.getTagCharValue( value );
				if (!OrderCapacity.isValid(orderCapacity) ) throw new FixSessionException(buf, "Invalid enumerated value(" + orderCapacity + ") for tag: " + id );
				break;

			case FixTags.ORDERRESTRICTIONS_INT:
				orderRestrictions = FixUtils.getTagStringValue(value, orderRestrictions);
				if (!OrderRestrictions.isValid(orderRestrictions) ) throw new FixSessionException(buf, "Invalid enumerated value(" + orderRestrictions + ") for tag: " + id );
				break;

			case FixTags.PRETRADEANONYMITY_INT:
				preTradeAnonymity = FixUtils.getTagBooleanValue( value );
				break;

			case FixTags.CUSTORDERCAPACITY_INT:
				custOrderCapacity = FixUtils.getTagIntValue( value );
				if (!CustOrderCapacity.isValid(custOrderCapacity) ) throw new FixSessionException(buf, "Invalid enumerated value(" + custOrderCapacity + ") for tag: " + id );
				break;

			case FixTags.LASTQTY_INT:
				lastQty = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.CALCULATEDCCYLASTQTY_INT:
				calculatedCcyLastQty = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.LASTSWAPPOINTS_INT:
				lastSwapPoints = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.UNDERLYINGLASTQTY_INT:
				underlyingLastQty = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.LASTPX_INT:
				lastPx = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.UNDERLYINGLASTPX_INT:
				underlyingLastPx = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.LASTPARPX_INT:
				lastParPx = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.LASTSPOTRATE_INT:
				lastSpotRate = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.LASTFORWARDPOINTS_INT:
				lastForwardPoints = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.LASTMKT_INT:
				lastMkt = FixUtils.getTagStringValue(value, lastMkt);
				break;

			case FixTags.TRADINGSESSIONID_INT:
				tradingSessionID = FixUtils.getTagStringValue(value, tradingSessionID);
				if (!TradingSessionID.isValid(tradingSessionID) ) throw new FixSessionException(buf, "Invalid enumerated value(" + tradingSessionID + ") for tag: " + id );
				break;

			case FixTags.TRADINGSESSIONSUBID_INT:
				tradingSessionSubID = FixUtils.getTagStringValue(value, tradingSessionSubID);
				if (!TradingSessionSubID.isValid(tradingSessionSubID) ) throw new FixSessionException(buf, "Invalid enumerated value(" + tradingSessionSubID + ") for tag: " + id );
				break;

			case FixTags.TIMEBRACKET_INT:
				timeBracket = FixUtils.getTagStringValue(value, timeBracket);
				break;

			case FixTags.LASTCAPACITY_INT:
				lastCapacity = FixUtils.getTagCharValue( value );
				if (!LastCapacity.isValid(lastCapacity) ) throw new FixSessionException(buf, "Invalid enumerated value(" + lastCapacity + ") for tag: " + id );
				break;

			case FixTags.LEAVESQTY_INT:
				leavesQty = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.CUMQTY_INT:
				cumQty = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.AVGPX_INT:
				avgPx = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.DAYORDERQTY_INT:
				dayOrderQty = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.DAYCUMQTY_INT:
				dayCumQty = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.DAYAVGPX_INT:
				dayAvgPx = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.TOTNOFILLS_INT:
				totNoFills = FixUtils.getTagIntValue( value );
				break;

			case FixTags.LASTFRAGMENT_INT:
				lastFragment = FixUtils.getTagBooleanValue( value );
				if (!LastFragment.isValid(lastFragment) ) throw new FixSessionException(buf, "Invalid enumerated value(" + lastFragment + ") for tag: " + id );
				break;

			case FixTags.NOFILLS_INT:
				fillsGrp.noFills = FixUtils.getTagIntValue( value );
				fillsGrp.getAll(fillsGrp.noFills, value );
				break;

			case FixTags.GTBOOKINGINST_INT:
				gTBookingInst = FixUtils.getTagIntValue( value );
				if (!GTBookingInst.isValid(gTBookingInst) ) throw new FixSessionException(buf, "Invalid enumerated value(" + gTBookingInst + ") for tag: " + id );
				break;

			case FixTags.TRADEDATE_INT:
				tradeDate = FixUtils.getTagStringValue(value, tradeDate);
				break;

			case FixTags.TRANSACTTIME_INT:
				transactTime = FixUtils.getTagStringValue(value, transactTime);
				break;

			case FixTags.REPORTTOEXCH_INT:
				reportToExch = FixUtils.getTagBooleanValue( value );
				if (!ReportToExch.isValid(reportToExch) ) throw new FixSessionException(buf, "Invalid enumerated value(" + reportToExch + ") for tag: " + id );
				break;

			case FixTags.COMMISSION_INT:
				commissionData.getAll(FixTags.COMMISSION_INT, value );
				break;

			case FixTags.SPREAD_INT:
				spreadOrBenchmarkCurveData.getAll(FixTags.SPREAD_INT, value );
				break;

			case FixTags.YIELDTYPE_INT:
				yieldData.getAll(FixTags.YIELDTYPE_INT, value );
				break;

			case FixTags.GROSSTRADEAMT_INT:
				grossTradeAmt = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.NUMDAYSINTEREST_INT:
				numDaysInterest = FixUtils.getTagIntValue( value );
				break;

			case FixTags.EXDATE_INT:
				exDate = FixUtils.getTagStringValue(value, exDate);
				break;

			case FixTags.ACCRUEDINTERESTRATE_INT:
				accruedInterestRate = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.ACCRUEDINTERESTAMT_INT:
				accruedInterestAmt = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.INTERESTATMATURITY_INT:
				interestAtMaturity = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.ENDACCRUEDINTERESTAMT_INT:
				endAccruedInterestAmt = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.STARTCASH_INT:
				startCash = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.ENDCASH_INT:
				endCash = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.TRADEDFLATSWITCH_INT:
				tradedFlatSwitch = FixUtils.getTagBooleanValue( value );
				if (!TradedFlatSwitch.isValid(tradedFlatSwitch) ) throw new FixSessionException(buf, "Invalid enumerated value(" + tradedFlatSwitch + ") for tag: " + id );
				break;

			case FixTags.BASISFEATUREDATE_INT:
				basisFeatureDate = FixUtils.getTagStringValue(value, basisFeatureDate);
				break;

			case FixTags.BASISFEATUREPRICE_INT:
				basisFeaturePrice = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.CONCESSION_INT:
				concession = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.TOTALTAKEDOWN_INT:
				totalTakedown = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.NETMONEY_INT:
				netMoney = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.SETTLCURRAMT_INT:
				settlCurrAmt = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.SETTLCURRENCY_INT:
				settlCurrency = FixUtils.getTagStringValue(value, settlCurrency);
				break;

			case FixTags.NORATESOURCES_INT:
				rateSource.noRateSources = FixUtils.getTagIntValue( value );
				rateSource.getAll(rateSource.noRateSources, value );
				break;

			case FixTags.SETTLCURRFXRATE_INT:
				settlCurrFxRate = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.SETTLCURRFXRATECALC_INT:
				settlCurrFxRateCalc = FixUtils.getTagCharValue( value );
				if (!SettlCurrFxRateCalc.isValid(settlCurrFxRateCalc) ) throw new FixSessionException(buf, "Invalid enumerated value(" + settlCurrFxRateCalc + ") for tag: " + id );
				break;

			case FixTags.HANDLINST_INT:
				handlInst = FixUtils.getTagCharValue( value );
				if (!HandlInst.isValid(handlInst) ) throw new FixSessionException(buf, "Invalid enumerated value(" + handlInst + ") for tag: " + id );
				break;

			case FixTags.MINQTY_INT:
				minQty = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.MATCHINCREMENT_INT:
				matchIncrement = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.MAXPRICELEVELS_INT:
				maxPriceLevels = FixUtils.getTagIntValue( value );
				break;

			case FixTags.DISPLAYQTY_INT:
				displayInstruction.getAll(FixTags.DISPLAYQTY_INT, value );
				break;

			case FixTags.MAXFLOOR_INT:
				maxFloor = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.POSITIONEFFECT_INT:
				positionEffect = FixUtils.getTagCharValue( value );
				if (!PositionEffect.isValid(positionEffect) ) throw new FixSessionException(buf, "Invalid enumerated value(" + positionEffect + ") for tag: " + id );
				break;

			case FixTags.MAXSHOW_INT:
				maxShow = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.BOOKINGTYPE_INT:
				bookingType = FixUtils.getTagIntValue( value );
				if (!BookingType.isValid(bookingType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + bookingType + ") for tag: " + id );
				break;

			case FixTags.TEXT_INT:
				text = FixUtils.getTagStringValue(value, text);
				break;

			case FixTags.ENCODEDTEXTLEN_INT:
				encodedTextLen = FixUtils.getTagIntValue( value );
				break;

			case FixTags.ENCODEDTEXT_INT:
				encodedText = FixUtils.getTagStringValue(value, encodedText);
				break;

			case FixTags.SETTLDATE2_INT:
				settlDate2 = FixUtils.getTagStringValue(value, settlDate2);
				break;

			case FixTags.ORDERQTY2_INT:
				orderQty2 = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.LASTFORWARDPOINTS2_INT:
				lastForwardPoints2 = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.MULTILEGREPORTINGTYPE_INT:
				multiLegReportingType = FixUtils.getTagCharValue( value );
				if (!MultiLegReportingType.isValid(multiLegReportingType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + multiLegReportingType + ") for tag: " + id );
				break;

			case FixTags.CANCELLATIONRIGHTS_INT:
				cancellationRights = FixUtils.getTagCharValue( value );
				if (!CancellationRights.isValid(cancellationRights) ) throw new FixSessionException(buf, "Invalid enumerated value(" + cancellationRights + ") for tag: " + id );
				break;

			case FixTags.MONEYLAUNDERINGSTATUS_INT:
				moneyLaunderingStatus = FixUtils.getTagCharValue( value );
				if (!MoneyLaunderingStatus.isValid(moneyLaunderingStatus) ) throw new FixSessionException(buf, "Invalid enumerated value(" + moneyLaunderingStatus + ") for tag: " + id );
				break;

			case FixTags.REGISTID_INT:
				registID = FixUtils.getTagStringValue(value, registID);
				break;

			case FixTags.DESIGNATION_INT:
				designation = FixUtils.getTagStringValue(value, designation);
				break;

			case FixTags.TRANSBKDTIME_INT:
				transBkdTime = FixUtils.getTagStringValue(value, transBkdTime);
				break;

			case FixTags.EXECVALUATIONPOINT_INT:
				execValuationPoint = FixUtils.getTagStringValue(value, execValuationPoint);
				break;

			case FixTags.EXECPRICETYPE_INT:
				execPriceType = FixUtils.getTagCharValue( value );
				if (!ExecPriceType.isValid(execPriceType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + execPriceType + ") for tag: " + id );
				break;

			case FixTags.EXECPRICEADJUSTMENT_INT:
				execPriceAdjustment = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.PRIORITYINDICATOR_INT:
				priorityIndicator = FixUtils.getTagIntValue( value );
				if (!PriorityIndicator.isValid(priorityIndicator) ) throw new FixSessionException(buf, "Invalid enumerated value(" + priorityIndicator + ") for tag: " + id );
				break;

			case FixTags.PRICEIMPROVEMENT_INT:
				priceImprovement = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.LASTLIQUIDITYIND_INT:
				lastLiquidityInd = FixUtils.getTagIntValue( value );
				if (!LastLiquidityInd.isValid(lastLiquidityInd) ) throw new FixSessionException(buf, "Invalid enumerated value(" + lastLiquidityInd + ") for tag: " + id );
				break;

			case FixTags.NOCONTAMTS_INT:
				contAmtGrp.noContAmts = FixUtils.getTagIntValue( value );
				contAmtGrp.getAll(contAmtGrp.noContAmts, value );
				break;

			case FixTags.NOLEGS_INT:
				instrmtLegExecGrp.noLegs = FixUtils.getTagIntValue( value );
				instrmtLegExecGrp.getAll(instrmtLegExecGrp.noLegs, value );
				break;

			case FixTags.COPYMSGINDICATOR_INT:
				copyMsgIndicator = FixUtils.getTagBooleanValue( value );
				break;

			case FixTags.MANUALORDERINDICATOR_INT:
				manualOrderIndicator = FixUtils.getTagBooleanValue( value );
				break;

			case FixTags.CUSTDIRECTEDORDER_INT:
				custDirectedOrder = FixUtils.getTagBooleanValue( value );
				break;

			case FixTags.RECEIVEDDEPTID_INT:
				receivedDeptID = FixUtils.getTagStringValue(value, receivedDeptID);
				break;

			case FixTags.CUSTORDERHANDLINGINST_INT:
				custOrderHandlingInst = FixUtils.getTagStringValue(value, custOrderHandlingInst);
				if (!CustOrderHandlingInst.isValid(custOrderHandlingInst) ) throw new FixSessionException(buf, "Invalid enumerated value(" + custOrderHandlingInst + ") for tag: " + id );
				break;

			case FixTags.ORDERHANDLINGINSTSOURCE_INT:
				orderHandlingInstSource = FixUtils.getTagIntValue( value );
				if (!OrderHandlingInstSource.isValid(orderHandlingInstSource) ) throw new FixSessionException(buf, "Invalid enumerated value(" + orderHandlingInstSource + ") for tag: " + id );
				break;

			case FixTags.DIVIDENDYIELD_INT:
				dividendYield = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.NOMISCFEES_INT:
				miscFeesGrp.noMiscFees = FixUtils.getTagIntValue( value );
				miscFeesGrp.getAll(miscFeesGrp.noMiscFees, value );
				break;

			case FixTags.NOTRDREGTIMESTAMPS_INT:
				trdRegTimestamps.noTrdRegTimestamps = FixUtils.getTagIntValue( value );
				trdRegTimestamps.getAll(trdRegTimestamps.noTrdRegTimestamps, value );
				break;

			case FixTags.VOLATILITY_INT:
				volatility = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.TIMETOEXPIRATION_INT:
				timeToExpiration = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.RISKFREERATE_INT:
				riskFreeRate = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.PRICEDELTA_INT:
				priceDelta = FixUtils.getTagFloatValue(value);
				break;

			// for a message always get the checksum
			case FixTags.CHECKSUM_INT:
				checkSum = FixUtils.getTagIntValue( value );

				id = checkRequiredTags();
				if (id > 0) throw new FixSessionException(buf, "Required tag missing: " + id );

				return;

			default:
				throw new FixSessionException(buf, "Unknown tag: " + id );

			}

			lastTagPosition = buf.position();

		}

		buf.position(startTagPosition);

	}

	private int checkRequiredTags() {
		int tag = -1;

		if (! FixUtils.isSet(senderCompID) ) return FixTags.SENDERCOMPID_INT;
		if (! FixUtils.isSet(targetCompID) ) return FixTags.TARGETCOMPID_INT;
		if (! FixUtils.isSet(msgSeqNum) ) return FixTags.MSGSEQNUM_INT;
		if (! FixUtils.isSet(sendingTime) ) return FixTags.SENDINGTIME_INT;
		if (! FixUtils.isSet(orderID) ) return FixTags.ORDERID_INT;
		if (! FixUtils.isSet(execID) ) return FixTags.EXECID_INT;
		if (! FixUtils.isSet(execType) ) return FixTags.EXECTYPE_INT;
		if (! FixUtils.isSet(ordStatus) ) return FixTags.ORDSTATUS_INT;
		if (! FixUtils.isSet(side) ) return FixTags.SIDE_INT;
		if (! FixUtils.isSet(leavesQty) ) return FixTags.LEAVESQTY_INT;
		if (! FixUtils.isSet(cumQty) ) return FixTags.CUMQTY_INT;
		if (! instrument.isSet() ) return FixTags.SYMBOL_INT;
		if (! FixUtils.isSet(checkSum) ) return FixTags.CHECKSUM_INT;
		return tag;

	}
	@Override
	public void encode( ByteBuffer out )
	{
		// Encode message. Set msgSeqNum and sendingTime and optional resend flags, before encoding. 

		int msgStart = out.position();

		out.put( BEGINSTRING_VALUE_WITH_TAG );

		int msgLengthValueStart = out.position() + 2 /* 9= */;

		// placeholder
		FixUtils.putFixTag(out, FixTags.BODYLENGTH_INT, FixConstants.MAX_MESSAGE_SIZE );

		int msgTypeStart = out.position();

		FixUtils.putFixTag( out, FixTags.MSGTYPE_INT, MsgTypes.EXECUTIONREPORT);

		// encode all fields including the header

		if (FixUtils.isSet(applVerID)) FixUtils.putFixTag( out, FixTags.APPLVERID_INT, applVerID, 0, Utils.lastIndexTrim(applVerID, (byte)0) );
		if (FixUtils.isSet(cstmApplVerID)) FixUtils.putFixTag( out, FixTags.CSTMAPPLVERID_INT, cstmApplVerID, 0, Utils.lastIndexTrim(cstmApplVerID, (byte)0) );
		if (FixUtils.isSet(applExtID)) FixUtils.putFixTag( out, FixTags.APPLEXTID_INT, applExtID);
		FixUtils.putFixTag( out, FixTags.SENDERCOMPID_INT, senderCompID, 0, Utils.lastIndexTrim(senderCompID, (byte)0) );
		FixUtils.putFixTag( out, FixTags.TARGETCOMPID_INT, targetCompID, 0, Utils.lastIndexTrim(targetCompID, (byte)0) );
		if (FixUtils.isSet(onBehalfOfCompID)) FixUtils.putFixTag( out, FixTags.ONBEHALFOFCOMPID_INT, onBehalfOfCompID, 0, Utils.lastIndexTrim(onBehalfOfCompID, (byte)0) );
		if (FixUtils.isSet(deliverToCompID)) FixUtils.putFixTag( out, FixTags.DELIVERTOCOMPID_INT, deliverToCompID, 0, Utils.lastIndexTrim(deliverToCompID, (byte)0) );
		if (FixUtils.isSet(secureDataLen)) FixUtils.putFixTag( out, FixTags.SECUREDATALEN_INT, secureDataLen);
		if (FixUtils.isSet(secureData)) FixUtils.putFixTag( out, FixTags.SECUREDATA_INT, secureData, 0, Utils.lastIndexTrim(secureData, (byte)0) );
		FixUtils.putFixTag( out, FixTags.MSGSEQNUM_INT, msgSeqNum);
		if (FixUtils.isSet(senderSubID)) FixUtils.putFixTag( out, FixTags.SENDERSUBID_INT, senderSubID, 0, Utils.lastIndexTrim(senderSubID, (byte)0) );
		if (FixUtils.isSet(senderLocationID)) FixUtils.putFixTag( out, FixTags.SENDERLOCATIONID_INT, senderLocationID, 0, Utils.lastIndexTrim(senderLocationID, (byte)0) );
		if (FixUtils.isSet(targetSubID)) FixUtils.putFixTag( out, FixTags.TARGETSUBID_INT, targetSubID, 0, Utils.lastIndexTrim(targetSubID, (byte)0) );
		if (FixUtils.isSet(targetLocationID)) FixUtils.putFixTag( out, FixTags.TARGETLOCATIONID_INT, targetLocationID, 0, Utils.lastIndexTrim(targetLocationID, (byte)0) );
		if (FixUtils.isSet(onBehalfOfSubID)) FixUtils.putFixTag( out, FixTags.ONBEHALFOFSUBID_INT, onBehalfOfSubID, 0, Utils.lastIndexTrim(onBehalfOfSubID, (byte)0) );
		if (FixUtils.isSet(onBehalfOfLocationID)) FixUtils.putFixTag( out, FixTags.ONBEHALFOFLOCATIONID_INT, onBehalfOfLocationID, 0, Utils.lastIndexTrim(onBehalfOfLocationID, (byte)0) );
		if (FixUtils.isSet(deliverToSubID)) FixUtils.putFixTag( out, FixTags.DELIVERTOSUBID_INT, deliverToSubID, 0, Utils.lastIndexTrim(deliverToSubID, (byte)0) );
		if (FixUtils.isSet(deliverToLocationID)) FixUtils.putFixTag( out, FixTags.DELIVERTOLOCATIONID_INT, deliverToLocationID, 0, Utils.lastIndexTrim(deliverToLocationID, (byte)0) );
		if (FixUtils.isSet(possDupFlag)) FixUtils.putFixTag( out, FixTags.POSSDUPFLAG_INT, possDupFlag?(byte)'Y':(byte)'N' );
		if (FixUtils.isSet(possResend)) FixUtils.putFixTag( out, FixTags.POSSRESEND_INT, possResend?(byte)'Y':(byte)'N' );
		FixUtils.putFixTag( out, FixTags.SENDINGTIME_INT, sendingTime);
		if (FixUtils.isSet(origSendingTime)) FixUtils.putFixTag( out, FixTags.ORIGSENDINGTIME_INT, origSendingTime);
		if (FixUtils.isSet(xmlDataLen)) FixUtils.putFixTag( out, FixTags.XMLDATALEN_INT, xmlDataLen);
		if (FixUtils.isSet(xmlData)) FixUtils.putFixTag( out, FixTags.XMLDATA_INT, xmlData, 0, Utils.lastIndexTrim(xmlData, (byte)0) );
		if (FixUtils.isSet(messageEncoding)) FixUtils.putFixTag( out, FixTags.MESSAGEENCODING_INT, messageEncoding, 0, Utils.lastIndexTrim(messageEncoding, (byte)0) );
		if (FixUtils.isSet(lastMsgSeqNumProcessed)) FixUtils.putFixTag( out, FixTags.LASTMSGSEQNUMPROCESSED_INT, lastMsgSeqNumProcessed);
		if ( FixUtils.isSet(hopGrp.noHops) )hopGrp.encode( out );

		if (FixUtils.isSet(applicationSequenceControl.applID)) applicationSequenceControl.encode( out );
		FixUtils.putFixTag( out, FixTags.ORDERID_INT, orderID, 0, Utils.lastIndexTrim(orderID, (byte)0) );
		if (FixUtils.isSet(secondaryOrderID)) FixUtils.putFixTag( out, FixTags.SECONDARYORDERID_INT, secondaryOrderID, 0, Utils.lastIndexTrim(secondaryOrderID, (byte)0) );
		if (FixUtils.isSet(secondaryClOrdID)) FixUtils.putFixTag( out, FixTags.SECONDARYCLORDID_INT, secondaryClOrdID, 0, Utils.lastIndexTrim(secondaryClOrdID, (byte)0) );
		if (FixUtils.isSet(secondaryExecID)) FixUtils.putFixTag( out, FixTags.SECONDARYEXECID_INT, secondaryExecID, 0, Utils.lastIndexTrim(secondaryExecID, (byte)0) );
		if (FixUtils.isSet(clOrdID)) FixUtils.putFixTag( out, FixTags.CLORDID_INT, clOrdID, 0, Utils.lastIndexTrim(clOrdID, (byte)0) );
		if (FixUtils.isSet(origClOrdID)) FixUtils.putFixTag( out, FixTags.ORIGCLORDID_INT, origClOrdID, 0, Utils.lastIndexTrim(origClOrdID, (byte)0) );
		if (FixUtils.isSet(clOrdLinkID)) FixUtils.putFixTag( out, FixTags.CLORDLINKID_INT, clOrdLinkID, 0, Utils.lastIndexTrim(clOrdLinkID, (byte)0) );
		if (FixUtils.isSet(quoteRespID)) FixUtils.putFixTag( out, FixTags.QUOTERESPID_INT, quoteRespID, 0, Utils.lastIndexTrim(quoteRespID, (byte)0) );
		if (FixUtils.isSet(ordStatusReqID)) FixUtils.putFixTag( out, FixTags.ORDSTATUSREQID_INT, ordStatusReqID, 0, Utils.lastIndexTrim(ordStatusReqID, (byte)0) );
		if (FixUtils.isSet(massStatusReqID)) FixUtils.putFixTag( out, FixTags.MASSSTATUSREQID_INT, massStatusReqID, 0, Utils.lastIndexTrim(massStatusReqID, (byte)0) );
		if (FixUtils.isSet(hostCrossID)) FixUtils.putFixTag( out, FixTags.HOSTCROSSID_INT, hostCrossID, 0, Utils.lastIndexTrim(hostCrossID, (byte)0) );
		if (FixUtils.isSet(totNumReports)) FixUtils.putFixTag( out, FixTags.TOTNUMREPORTS_INT, totNumReports);
		if (FixUtils.isSet(lastRptRequested)) FixUtils.putFixTag( out, FixTags.LASTRPTREQUESTED_INT, lastRptRequested?(byte)'Y':(byte)'N' );
		if (FixUtils.isSet(parties.noPartyIDs)) parties.encode( out );
		if (FixUtils.isSet(tradeOriginationDate)) FixUtils.putFixTag( out, FixTags.TRADEORIGINATIONDATE_INT, tradeOriginationDate);
		if (FixUtils.isSet(contraGrp.noContraBrokers)) contraGrp.encode( out );
		if (FixUtils.isSet(listID)) FixUtils.putFixTag( out, FixTags.LISTID_INT, listID, 0, Utils.lastIndexTrim(listID, (byte)0) );
		if (FixUtils.isSet(crossID)) FixUtils.putFixTag( out, FixTags.CROSSID_INT, crossID, 0, Utils.lastIndexTrim(crossID, (byte)0) );
		if (FixUtils.isSet(origCrossID)) FixUtils.putFixTag( out, FixTags.ORIGCROSSID_INT, origCrossID, 0, Utils.lastIndexTrim(origCrossID, (byte)0) );
		if (FixUtils.isSet(crossType)) FixUtils.putFixTag( out, FixTags.CROSSTYPE_INT, crossType);
		if (FixUtils.isSet(trdMatchID)) FixUtils.putFixTag( out, FixTags.TRDMATCHID_INT, trdMatchID, 0, Utils.lastIndexTrim(trdMatchID, (byte)0) );
		FixUtils.putFixTag( out, FixTags.EXECID_INT, execID, 0, Utils.lastIndexTrim(execID, (byte)0) );
		if (FixUtils.isSet(execRefID)) FixUtils.putFixTag( out, FixTags.EXECREFID_INT, execRefID, 0, Utils.lastIndexTrim(execRefID, (byte)0) );
		FixUtils.putFixTag( out, FixTags.EXECTYPE_INT, execType );
		FixUtils.putFixTag( out, FixTags.ORDSTATUS_INT, ordStatus );
		if (FixUtils.isSet(workingIndicator)) FixUtils.putFixTag( out, FixTags.WORKINGINDICATOR_INT, workingIndicator?(byte)'Y':(byte)'N' );
		if (FixUtils.isSet(ordRejReason)) FixUtils.putFixTag( out, FixTags.ORDREJREASON_INT, ordRejReason);
		if (FixUtils.isSet(execRestatementReason)) FixUtils.putFixTag( out, FixTags.EXECRESTATEMENTREASON_INT, execRestatementReason);
		if (FixUtils.isSet(account)) FixUtils.putFixTag( out, FixTags.ACCOUNT_INT, account, 0, Utils.lastIndexTrim(account, (byte)0) );
		if (FixUtils.isSet(acctIDSource)) FixUtils.putFixTag( out, FixTags.ACCTIDSOURCE_INT, acctIDSource);
		if (FixUtils.isSet(accountType)) FixUtils.putFixTag( out, FixTags.ACCOUNTTYPE_INT, accountType);
		if (FixUtils.isSet(dayBookingInst)) FixUtils.putFixTag( out, FixTags.DAYBOOKINGINST_INT, dayBookingInst );
		if (FixUtils.isSet(bookingUnit)) FixUtils.putFixTag( out, FixTags.BOOKINGUNIT_INT, bookingUnit );
		if (FixUtils.isSet(preallocMethod)) FixUtils.putFixTag( out, FixTags.PREALLOCMETHOD_INT, preallocMethod );
		if (FixUtils.isSet(allocID)) FixUtils.putFixTag( out, FixTags.ALLOCID_INT, allocID, 0, Utils.lastIndexTrim(allocID, (byte)0) );
		if (FixUtils.isSet(preAllocGrp.noAllocs)) preAllocGrp.encode( out );
		if (FixUtils.isSet(settlType)) FixUtils.putFixTag( out, FixTags.SETTLTYPE_INT, settlType, 0, Utils.lastIndexTrim(settlType, (byte)0) );
		if (FixUtils.isSet(settlDate)) FixUtils.putFixTag( out, FixTags.SETTLDATE_INT, settlDate);
		if (FixUtils.isSet(matchType)) FixUtils.putFixTag( out, FixTags.MATCHTYPE_INT, matchType, 0, Utils.lastIndexTrim(matchType, (byte)0) );
		if (FixUtils.isSet(orderCategory)) FixUtils.putFixTag( out, FixTags.ORDERCATEGORY_INT, orderCategory );
		if (FixUtils.isSet(cashMargin)) FixUtils.putFixTag( out, FixTags.CASHMARGIN_INT, cashMargin );
		if (FixUtils.isSet(clearingFeeIndicator)) FixUtils.putFixTag( out, FixTags.CLEARINGFEEINDICATOR_INT, clearingFeeIndicator, 0, Utils.lastIndexTrim(clearingFeeIndicator, (byte)0) );
		if (FixUtils.isSet(instrument.symbol)) instrument.encode( out );
		if (FixUtils.isSet(financingDetails.agreementDesc)) financingDetails.encode( out );
		if (FixUtils.isSet(undInstrmtGrp.noUnderlyings)) undInstrmtGrp.encode( out );
		FixUtils.putFixTag( out, FixTags.SIDE_INT, side );
		if (FixUtils.isSet(stipulations.noStipulations)) stipulations.encode( out );
		if (FixUtils.isSet(qtyType)) FixUtils.putFixTag( out, FixTags.QTYTYPE_INT, qtyType);
		if (FixUtils.isSet(lotType)) FixUtils.putFixTag( out, FixTags.LOTTYPE_INT, lotType );
		if (FixUtils.isSet(orderQtyData.orderQty)) orderQtyData.encode( out );
		if (FixUtils.isSet(ordType)) FixUtils.putFixTag( out, FixTags.ORDTYPE_INT, ordType );
		if (FixUtils.isSet(priceType)) FixUtils.putFixTag( out, FixTags.PRICETYPE_INT, priceType);
		if (FixUtils.isSet(price)) FixUtils.putFixFloatTag( out, FixTags.PRICE_INT, price);
		if (FixUtils.isSet(priceProtectionScope)) FixUtils.putFixTag( out, FixTags.PRICEPROTECTIONSCOPE_INT, priceProtectionScope );
		if (FixUtils.isSet(stopPx)) FixUtils.putFixFloatTag( out, FixTags.STOPPX_INT, stopPx);
		if (FixUtils.isSet(triggeringInstruction.triggerType)) triggeringInstruction.encode( out );
		if (FixUtils.isSet(pegInstructions.pegOffsetValue)) pegInstructions.encode( out );
		if (FixUtils.isSet(discretionInstructions.discretionInst)) discretionInstructions.encode( out );
		if (FixUtils.isSet(peggedPrice)) FixUtils.putFixFloatTag( out, FixTags.PEGGEDPRICE_INT, peggedPrice);
		if (FixUtils.isSet(peggedRefPrice)) FixUtils.putFixFloatTag( out, FixTags.PEGGEDREFPRICE_INT, peggedRefPrice);
		if (FixUtils.isSet(discretionPrice)) FixUtils.putFixFloatTag( out, FixTags.DISCRETIONPRICE_INT, discretionPrice);
		if (FixUtils.isSet(targetStrategy)) FixUtils.putFixTag( out, FixTags.TARGETSTRATEGY_INT, targetStrategy);
		if (FixUtils.isSet(strategyParametersGrp.noStrategyParameters)) strategyParametersGrp.encode( out );
		if (FixUtils.isSet(targetStrategyParameters)) FixUtils.putFixTag( out, FixTags.TARGETSTRATEGYPARAMETERS_INT, targetStrategyParameters, 0, Utils.lastIndexTrim(targetStrategyParameters, (byte)0) );
		if (FixUtils.isSet(participationRate)) FixUtils.putFixFloatTag( out, FixTags.PARTICIPATIONRATE_INT, participationRate);
		if (FixUtils.isSet(targetStrategyPerformance)) FixUtils.putFixFloatTag( out, FixTags.TARGETSTRATEGYPERFORMANCE_INT, targetStrategyPerformance);
		if (FixUtils.isSet(currency)) FixUtils.putFixTag( out, FixTags.CURRENCY_INT, currency, 0, Utils.lastIndexTrim(currency, (byte)0) );
		if (FixUtils.isSet(complianceID)) FixUtils.putFixTag( out, FixTags.COMPLIANCEID_INT, complianceID, 0, Utils.lastIndexTrim(complianceID, (byte)0) );
		if (FixUtils.isSet(solicitedFlag)) FixUtils.putFixTag( out, FixTags.SOLICITEDFLAG_INT, solicitedFlag?(byte)'Y':(byte)'N' );
		if (FixUtils.isSet(timeInForce)) FixUtils.putFixTag( out, FixTags.TIMEINFORCE_INT, timeInForce );
		if (FixUtils.isSet(effectiveTime)) FixUtils.putFixTag( out, FixTags.EFFECTIVETIME_INT, effectiveTime);
		if (FixUtils.isSet(expireDate)) FixUtils.putFixTag( out, FixTags.EXPIREDATE_INT, expireDate);
		if (FixUtils.isSet(expireTime)) FixUtils.putFixTag( out, FixTags.EXPIRETIME_INT, expireTime);
		if (FixUtils.isSet(execInst)) FixUtils.putFixTag( out, FixTags.EXECINST_INT, execInst, 0, Utils.lastIndexTrim(execInst, (byte)0) );
		if (FixUtils.isSet(aggressorIndicator)) FixUtils.putFixTag( out, FixTags.AGGRESSORINDICATOR_INT, aggressorIndicator?(byte)'Y':(byte)'N' );
		if (FixUtils.isSet(orderCapacity)) FixUtils.putFixTag( out, FixTags.ORDERCAPACITY_INT, orderCapacity );
		if (FixUtils.isSet(orderRestrictions)) FixUtils.putFixTag( out, FixTags.ORDERRESTRICTIONS_INT, orderRestrictions, 0, Utils.lastIndexTrim(orderRestrictions, (byte)0) );
		if (FixUtils.isSet(preTradeAnonymity)) FixUtils.putFixTag( out, FixTags.PRETRADEANONYMITY_INT, preTradeAnonymity?(byte)'Y':(byte)'N' );
		if (FixUtils.isSet(custOrderCapacity)) FixUtils.putFixTag( out, FixTags.CUSTORDERCAPACITY_INT, custOrderCapacity);
		if (FixUtils.isSet(lastQty)) FixUtils.putFixFloatTag( out, FixTags.LASTQTY_INT, lastQty);
		if (FixUtils.isSet(calculatedCcyLastQty)) FixUtils.putFixFloatTag( out, FixTags.CALCULATEDCCYLASTQTY_INT, calculatedCcyLastQty);
		if (FixUtils.isSet(lastSwapPoints)) FixUtils.putFixFloatTag( out, FixTags.LASTSWAPPOINTS_INT, lastSwapPoints);
		if (FixUtils.isSet(underlyingLastQty)) FixUtils.putFixFloatTag( out, FixTags.UNDERLYINGLASTQTY_INT, underlyingLastQty);
		if (FixUtils.isSet(lastPx)) FixUtils.putFixFloatTag( out, FixTags.LASTPX_INT, lastPx);
		if (FixUtils.isSet(underlyingLastPx)) FixUtils.putFixFloatTag( out, FixTags.UNDERLYINGLASTPX_INT, underlyingLastPx);
		if (FixUtils.isSet(lastParPx)) FixUtils.putFixFloatTag( out, FixTags.LASTPARPX_INT, lastParPx);
		if (FixUtils.isSet(lastSpotRate)) FixUtils.putFixFloatTag( out, FixTags.LASTSPOTRATE_INT, lastSpotRate);
		if (FixUtils.isSet(lastForwardPoints)) FixUtils.putFixFloatTag( out, FixTags.LASTFORWARDPOINTS_INT, lastForwardPoints);
		if (FixUtils.isSet(lastMkt)) FixUtils.putFixTag( out, FixTags.LASTMKT_INT, lastMkt, 0, Utils.lastIndexTrim(lastMkt, (byte)0) );
		if (FixUtils.isSet(tradingSessionID)) FixUtils.putFixTag( out, FixTags.TRADINGSESSIONID_INT, tradingSessionID, 0, Utils.lastIndexTrim(tradingSessionID, (byte)0) );
		if (FixUtils.isSet(tradingSessionSubID)) FixUtils.putFixTag( out, FixTags.TRADINGSESSIONSUBID_INT, tradingSessionSubID, 0, Utils.lastIndexTrim(tradingSessionSubID, (byte)0) );
		if (FixUtils.isSet(timeBracket)) FixUtils.putFixTag( out, FixTags.TIMEBRACKET_INT, timeBracket, 0, Utils.lastIndexTrim(timeBracket, (byte)0) );
		if (FixUtils.isSet(lastCapacity)) FixUtils.putFixTag( out, FixTags.LASTCAPACITY_INT, lastCapacity );
		FixUtils.putFixFloatTag( out, FixTags.LEAVESQTY_INT, leavesQty);
		FixUtils.putFixFloatTag( out, FixTags.CUMQTY_INT, cumQty);
		if (FixUtils.isSet(avgPx)) FixUtils.putFixFloatTag( out, FixTags.AVGPX_INT, avgPx);
		if (FixUtils.isSet(dayOrderQty)) FixUtils.putFixFloatTag( out, FixTags.DAYORDERQTY_INT, dayOrderQty);
		if (FixUtils.isSet(dayCumQty)) FixUtils.putFixFloatTag( out, FixTags.DAYCUMQTY_INT, dayCumQty);
		if (FixUtils.isSet(dayAvgPx)) FixUtils.putFixFloatTag( out, FixTags.DAYAVGPX_INT, dayAvgPx);
		if (FixUtils.isSet(totNoFills)) FixUtils.putFixTag( out, FixTags.TOTNOFILLS_INT, totNoFills);
		if (FixUtils.isSet(lastFragment)) FixUtils.putFixTag( out, FixTags.LASTFRAGMENT_INT, lastFragment?(byte)'Y':(byte)'N' );
		if (FixUtils.isSet(fillsGrp.noFills)) fillsGrp.encode( out );
		if (FixUtils.isSet(gTBookingInst)) FixUtils.putFixTag( out, FixTags.GTBOOKINGINST_INT, gTBookingInst);
		if (FixUtils.isSet(tradeDate)) FixUtils.putFixTag( out, FixTags.TRADEDATE_INT, tradeDate);
		if (FixUtils.isSet(transactTime)) FixUtils.putFixTag( out, FixTags.TRANSACTTIME_INT, transactTime);
		if (FixUtils.isSet(reportToExch)) FixUtils.putFixTag( out, FixTags.REPORTTOEXCH_INT, reportToExch?(byte)'Y':(byte)'N' );
		if (FixUtils.isSet(commissionData.commission)) commissionData.encode( out );
		if (FixUtils.isSet(spreadOrBenchmarkCurveData.spread)) spreadOrBenchmarkCurveData.encode( out );
		if (FixUtils.isSet(yieldData.yieldType)) yieldData.encode( out );
		if (FixUtils.isSet(grossTradeAmt)) FixUtils.putFixTag( out, FixTags.GROSSTRADEAMT_INT, grossTradeAmt);
		if (FixUtils.isSet(numDaysInterest)) FixUtils.putFixTag( out, FixTags.NUMDAYSINTEREST_INT, numDaysInterest);
		if (FixUtils.isSet(exDate)) FixUtils.putFixTag( out, FixTags.EXDATE_INT, exDate);
		if (FixUtils.isSet(accruedInterestRate)) FixUtils.putFixFloatTag( out, FixTags.ACCRUEDINTERESTRATE_INT, accruedInterestRate);
		if (FixUtils.isSet(accruedInterestAmt)) FixUtils.putFixTag( out, FixTags.ACCRUEDINTERESTAMT_INT, accruedInterestAmt);
		if (FixUtils.isSet(interestAtMaturity)) FixUtils.putFixTag( out, FixTags.INTERESTATMATURITY_INT, interestAtMaturity);
		if (FixUtils.isSet(endAccruedInterestAmt)) FixUtils.putFixTag( out, FixTags.ENDACCRUEDINTERESTAMT_INT, endAccruedInterestAmt);
		if (FixUtils.isSet(startCash)) FixUtils.putFixTag( out, FixTags.STARTCASH_INT, startCash);
		if (FixUtils.isSet(endCash)) FixUtils.putFixTag( out, FixTags.ENDCASH_INT, endCash);
		if (FixUtils.isSet(tradedFlatSwitch)) FixUtils.putFixTag( out, FixTags.TRADEDFLATSWITCH_INT, tradedFlatSwitch?(byte)'Y':(byte)'N' );
		if (FixUtils.isSet(basisFeatureDate)) FixUtils.putFixTag( out, FixTags.BASISFEATUREDATE_INT, basisFeatureDate);
		if (FixUtils.isSet(basisFeaturePrice)) FixUtils.putFixFloatTag( out, FixTags.BASISFEATUREPRICE_INT, basisFeaturePrice);
		if (FixUtils.isSet(concession)) FixUtils.putFixTag( out, FixTags.CONCESSION_INT, concession);
		if (FixUtils.isSet(totalTakedown)) FixUtils.putFixTag( out, FixTags.TOTALTAKEDOWN_INT, totalTakedown);
		if (FixUtils.isSet(netMoney)) FixUtils.putFixTag( out, FixTags.NETMONEY_INT, netMoney);
		if (FixUtils.isSet(settlCurrAmt)) FixUtils.putFixTag( out, FixTags.SETTLCURRAMT_INT, settlCurrAmt);
		if (FixUtils.isSet(settlCurrency)) FixUtils.putFixTag( out, FixTags.SETTLCURRENCY_INT, settlCurrency, 0, Utils.lastIndexTrim(settlCurrency, (byte)0) );
		if (FixUtils.isSet(rateSource.noRateSources)) rateSource.encode( out );
		if (FixUtils.isSet(settlCurrFxRate)) FixUtils.putFixFloatTag( out, FixTags.SETTLCURRFXRATE_INT, settlCurrFxRate);
		if (FixUtils.isSet(settlCurrFxRateCalc)) FixUtils.putFixTag( out, FixTags.SETTLCURRFXRATECALC_INT, settlCurrFxRateCalc );
		if (FixUtils.isSet(handlInst)) FixUtils.putFixTag( out, FixTags.HANDLINST_INT, handlInst );
		if (FixUtils.isSet(minQty)) FixUtils.putFixFloatTag( out, FixTags.MINQTY_INT, minQty);
		if (FixUtils.isSet(matchIncrement)) FixUtils.putFixFloatTag( out, FixTags.MATCHINCREMENT_INT, matchIncrement);
		if (FixUtils.isSet(maxPriceLevels)) FixUtils.putFixTag( out, FixTags.MAXPRICELEVELS_INT, maxPriceLevels);
		if (FixUtils.isSet(displayInstruction.displayQty)) displayInstruction.encode( out );
		if (FixUtils.isSet(maxFloor)) FixUtils.putFixFloatTag( out, FixTags.MAXFLOOR_INT, maxFloor);
		if (FixUtils.isSet(positionEffect)) FixUtils.putFixTag( out, FixTags.POSITIONEFFECT_INT, positionEffect );
		if (FixUtils.isSet(maxShow)) FixUtils.putFixFloatTag( out, FixTags.MAXSHOW_INT, maxShow);
		if (FixUtils.isSet(bookingType)) FixUtils.putFixTag( out, FixTags.BOOKINGTYPE_INT, bookingType);
		if (FixUtils.isSet(text)) FixUtils.putFixTag( out, FixTags.TEXT_INT, text, 0, Utils.lastIndexTrim(text, (byte)0) );
		if (FixUtils.isSet(encodedTextLen)) FixUtils.putFixTag( out, FixTags.ENCODEDTEXTLEN_INT, encodedTextLen);
		if (FixUtils.isSet(encodedText)) FixUtils.putFixTag( out, FixTags.ENCODEDTEXT_INT, encodedText, 0, Utils.lastIndexTrim(encodedText, (byte)0) );
		if (FixUtils.isSet(settlDate2)) FixUtils.putFixTag( out, FixTags.SETTLDATE2_INT, settlDate2);
		if (FixUtils.isSet(orderQty2)) FixUtils.putFixFloatTag( out, FixTags.ORDERQTY2_INT, orderQty2);
		if (FixUtils.isSet(lastForwardPoints2)) FixUtils.putFixFloatTag( out, FixTags.LASTFORWARDPOINTS2_INT, lastForwardPoints2);
		if (FixUtils.isSet(multiLegReportingType)) FixUtils.putFixTag( out, FixTags.MULTILEGREPORTINGTYPE_INT, multiLegReportingType );
		if (FixUtils.isSet(cancellationRights)) FixUtils.putFixTag( out, FixTags.CANCELLATIONRIGHTS_INT, cancellationRights );
		if (FixUtils.isSet(moneyLaunderingStatus)) FixUtils.putFixTag( out, FixTags.MONEYLAUNDERINGSTATUS_INT, moneyLaunderingStatus );
		if (FixUtils.isSet(registID)) FixUtils.putFixTag( out, FixTags.REGISTID_INT, registID, 0, Utils.lastIndexTrim(registID, (byte)0) );
		if (FixUtils.isSet(designation)) FixUtils.putFixTag( out, FixTags.DESIGNATION_INT, designation, 0, Utils.lastIndexTrim(designation, (byte)0) );
		if (FixUtils.isSet(transBkdTime)) FixUtils.putFixTag( out, FixTags.TRANSBKDTIME_INT, transBkdTime);
		if (FixUtils.isSet(execValuationPoint)) FixUtils.putFixTag( out, FixTags.EXECVALUATIONPOINT_INT, execValuationPoint);
		if (FixUtils.isSet(execPriceType)) FixUtils.putFixTag( out, FixTags.EXECPRICETYPE_INT, execPriceType );
		if (FixUtils.isSet(execPriceAdjustment)) FixUtils.putFixFloatTag( out, FixTags.EXECPRICEADJUSTMENT_INT, execPriceAdjustment);
		if (FixUtils.isSet(priorityIndicator)) FixUtils.putFixTag( out, FixTags.PRIORITYINDICATOR_INT, priorityIndicator);
		if (FixUtils.isSet(priceImprovement)) FixUtils.putFixFloatTag( out, FixTags.PRICEIMPROVEMENT_INT, priceImprovement);
		if (FixUtils.isSet(lastLiquidityInd)) FixUtils.putFixTag( out, FixTags.LASTLIQUIDITYIND_INT, lastLiquidityInd);
		if (FixUtils.isSet(contAmtGrp.noContAmts)) contAmtGrp.encode( out );
		if (FixUtils.isSet(instrmtLegExecGrp.noLegs)) instrmtLegExecGrp.encode( out );
		if (FixUtils.isSet(copyMsgIndicator)) FixUtils.putFixTag( out, FixTags.COPYMSGINDICATOR_INT, copyMsgIndicator?(byte)'Y':(byte)'N' );
		if (FixUtils.isSet(manualOrderIndicator)) FixUtils.putFixTag( out, FixTags.MANUALORDERINDICATOR_INT, manualOrderIndicator?(byte)'Y':(byte)'N' );
		if (FixUtils.isSet(custDirectedOrder)) FixUtils.putFixTag( out, FixTags.CUSTDIRECTEDORDER_INT, custDirectedOrder?(byte)'Y':(byte)'N' );
		if (FixUtils.isSet(receivedDeptID)) FixUtils.putFixTag( out, FixTags.RECEIVEDDEPTID_INT, receivedDeptID, 0, Utils.lastIndexTrim(receivedDeptID, (byte)0) );
		if (FixUtils.isSet(custOrderHandlingInst)) FixUtils.putFixTag( out, FixTags.CUSTORDERHANDLINGINST_INT, custOrderHandlingInst, 0, Utils.lastIndexTrim(custOrderHandlingInst, (byte)0) );
		if (FixUtils.isSet(orderHandlingInstSource)) FixUtils.putFixTag( out, FixTags.ORDERHANDLINGINSTSOURCE_INT, orderHandlingInstSource);
		if (FixUtils.isSet(dividendYield)) FixUtils.putFixFloatTag( out, FixTags.DIVIDENDYIELD_INT, dividendYield);
		if (FixUtils.isSet(miscFeesGrp.noMiscFees)) miscFeesGrp.encode( out );
		if (FixUtils.isSet(trdRegTimestamps.noTrdRegTimestamps)) trdRegTimestamps.encode( out );
		if (FixUtils.isSet(volatility)) FixUtils.putFixFloatTag( out, FixTags.VOLATILITY_INT, volatility);
		if (FixUtils.isSet(timeToExpiration)) FixUtils.putFixFloatTag( out, FixTags.TIMETOEXPIRATION_INT, timeToExpiration);
		if (FixUtils.isSet(riskFreeRate)) FixUtils.putFixFloatTag( out, FixTags.RISKFREERATE_INT, riskFreeRate);
		if (FixUtils.isSet(priceDelta)) FixUtils.putFixFloatTag( out, FixTags.PRICEDELTA_INT, priceDelta);
		// the checksum at the end

		int checkSumStart = out.position();
		out.position( msgLengthValueStart );
		bodyLength = checkSumStart - msgTypeStart;
		Utils.longToNumeric( out, bodyLength, Utils.digits(FixConstants.MAX_MESSAGE_SIZE) );

		checkSum = FixUtils.computeChecksum( out, msgStart, checkSumStart );
		out.position( checkSumStart );
		FixUtils.putFixTag( out, FixTags.CHECKSUM_INT, checkSum );

		out.flip();

	}
	@Override		
	public void printBuffer(ByteBuffer out) {

		out.put(buf);

		out.flip();

	}

	/**
	 * If you use toString for any other purpose than administrative printout.
	 * You will end up in nifelheim!
	**/
	@Override
	public String toString() {
		char sep = '\n';
		if (Boolean.getBoolean("fix.useOneLiner")) sep = SOH;

		String s = "BeginString(8)=" + new String(BEGINSTRING_VALUE) + sep;
		s += "BodyLength(9)=" + bodyLength + sep;
		s += "MsgType(35)=" + new String(MsgTypes.EXECUTIONREPORT) + sep;

		try {
			// print all fields including the header

			if (FixUtils.isSet(applVerID)) s += "ApplVerID(1128)=" + new String(applVerID) + sep;
			if (FixUtils.isSet(cstmApplVerID)) s += "CstmApplVerID(1129)=" + new String(cstmApplVerID) + sep;
			if (FixUtils.isSet(applExtID)) s += "ApplExtID(1156)=" + String.valueOf(applExtID) + sep;
			 s += "SenderCompID(49)=" + new String(senderCompID) + sep;
			 s += "TargetCompID(56)=" + new String(targetCompID) + sep;
			if (FixUtils.isSet(onBehalfOfCompID)) s += "OnBehalfOfCompID(115)=" + new String(onBehalfOfCompID) + sep;
			if (FixUtils.isSet(deliverToCompID)) s += "DeliverToCompID(128)=" + new String(deliverToCompID) + sep;
			if (FixUtils.isSet(secureDataLen)) s += "SecureDataLen(90)=" + String.valueOf(secureDataLen) + sep;
			if (FixUtils.isSet(secureData)) s += "SecureData(91)=" + new String(secureData) + sep;
			 s += "MsgSeqNum(34)=" + String.valueOf(msgSeqNum) + sep;
			if (FixUtils.isSet(senderSubID)) s += "SenderSubID(50)=" + new String(senderSubID) + sep;
			if (FixUtils.isSet(senderLocationID)) s += "SenderLocationID(142)=" + new String(senderLocationID) + sep;
			if (FixUtils.isSet(targetSubID)) s += "TargetSubID(57)=" + new String(targetSubID) + sep;
			if (FixUtils.isSet(targetLocationID)) s += "TargetLocationID(143)=" + new String(targetLocationID) + sep;
			if (FixUtils.isSet(onBehalfOfSubID)) s += "OnBehalfOfSubID(116)=" + new String(onBehalfOfSubID) + sep;
			if (FixUtils.isSet(onBehalfOfLocationID)) s += "OnBehalfOfLocationID(144)=" + new String(onBehalfOfLocationID) + sep;
			if (FixUtils.isSet(deliverToSubID)) s += "DeliverToSubID(129)=" + new String(deliverToSubID) + sep;
			if (FixUtils.isSet(deliverToLocationID)) s += "DeliverToLocationID(145)=" + new String(deliverToLocationID) + sep;
			if (FixUtils.isSet(possDupFlag)) s += "PossDupFlag(43)=" + String.valueOf(possDupFlag) + sep;
			if (FixUtils.isSet(possResend)) s += "PossResend(97)=" + String.valueOf(possResend) + sep;
			 s += "SendingTime(52)=" + new String(sendingTime) + sep;
			if (FixUtils.isSet(origSendingTime)) s += "OrigSendingTime(122)=" + new String(origSendingTime) + sep;
			if (FixUtils.isSet(xmlDataLen)) s += "XmlDataLen(212)=" + String.valueOf(xmlDataLen) + sep;
			if (FixUtils.isSet(xmlData)) s += "XmlData(213)=" + new String(xmlData) + sep;
			if (FixUtils.isSet(messageEncoding)) s += "MessageEncoding(347)=" + new String(messageEncoding) + sep;
			if (FixUtils.isSet(lastMsgSeqNumProcessed)) s += "LastMsgSeqNumProcessed(369)=" + String.valueOf(lastMsgSeqNumProcessed) + sep;
			if (FixUtils.isSet(hopGrp.noHops)) s += hopGrp.toString();

			if (FixUtils.isSet(applicationSequenceControl.applID)) s += applicationSequenceControl.toString();
			 s += "OrderID(37)=" + new String(orderID) + sep;
			if (FixUtils.isSet(secondaryOrderID)) s += "SecondaryOrderID(198)=" + new String(secondaryOrderID) + sep;
			if (FixUtils.isSet(secondaryClOrdID)) s += "SecondaryClOrdID(526)=" + new String(secondaryClOrdID) + sep;
			if (FixUtils.isSet(secondaryExecID)) s += "SecondaryExecID(527)=" + new String(secondaryExecID) + sep;
			if (FixUtils.isSet(clOrdID)) s += "ClOrdID(11)=" + new String(clOrdID) + sep;
			if (FixUtils.isSet(origClOrdID)) s += "OrigClOrdID(41)=" + new String(origClOrdID) + sep;
			if (FixUtils.isSet(clOrdLinkID)) s += "ClOrdLinkID(583)=" + new String(clOrdLinkID) + sep;
			if (FixUtils.isSet(quoteRespID)) s += "QuoteRespID(693)=" + new String(quoteRespID) + sep;
			if (FixUtils.isSet(ordStatusReqID)) s += "OrdStatusReqID(790)=" + new String(ordStatusReqID) + sep;
			if (FixUtils.isSet(massStatusReqID)) s += "MassStatusReqID(584)=" + new String(massStatusReqID) + sep;
			if (FixUtils.isSet(hostCrossID)) s += "HostCrossID(961)=" + new String(hostCrossID) + sep;
			if (FixUtils.isSet(totNumReports)) s += "TotNumReports(911)=" + String.valueOf(totNumReports) + sep;
			if (FixUtils.isSet(lastRptRequested)) s += "LastRptRequested(912)=" + String.valueOf(lastRptRequested) + sep;
			if (FixUtils.isSet(parties.noPartyIDs)) s += parties.toString();
			if (FixUtils.isSet(tradeOriginationDate)) s += "TradeOriginationDate(229)=" + new String(tradeOriginationDate) + sep;
			if (FixUtils.isSet(contraGrp.noContraBrokers)) s += contraGrp.toString();
			if (FixUtils.isSet(listID)) s += "ListID(66)=" + new String(listID) + sep;
			if (FixUtils.isSet(crossID)) s += "CrossID(548)=" + new String(crossID) + sep;
			if (FixUtils.isSet(origCrossID)) s += "OrigCrossID(551)=" + new String(origCrossID) + sep;
			if (FixUtils.isSet(crossType)) s += "CrossType(549)=" + String.valueOf(crossType) + sep;
			if (FixUtils.isSet(trdMatchID)) s += "TrdMatchID(880)=" + new String(trdMatchID) + sep;
			 s += "ExecID(17)=" + new String(execID) + sep;
			if (FixUtils.isSet(execRefID)) s += "ExecRefID(19)=" + new String(execRefID) + sep;
			 s += "ExecType(150)=" + String.valueOf(execType) + sep;
			 s += "OrdStatus(39)=" + String.valueOf(ordStatus) + sep;
			if (FixUtils.isSet(workingIndicator)) s += "WorkingIndicator(636)=" + String.valueOf(workingIndicator) + sep;
			if (FixUtils.isSet(ordRejReason)) s += "OrdRejReason(103)=" + String.valueOf(ordRejReason) + sep;
			if (FixUtils.isSet(execRestatementReason)) s += "ExecRestatementReason(378)=" + String.valueOf(execRestatementReason) + sep;
			if (FixUtils.isSet(account)) s += "Account(1)=" + new String(account) + sep;
			if (FixUtils.isSet(acctIDSource)) s += "AcctIDSource(660)=" + String.valueOf(acctIDSource) + sep;
			if (FixUtils.isSet(accountType)) s += "AccountType(581)=" + String.valueOf(accountType) + sep;
			if (FixUtils.isSet(dayBookingInst)) s += "DayBookingInst(589)=" + String.valueOf(dayBookingInst) + sep;
			if (FixUtils.isSet(bookingUnit)) s += "BookingUnit(590)=" + String.valueOf(bookingUnit) + sep;
			if (FixUtils.isSet(preallocMethod)) s += "PreallocMethod(591)=" + String.valueOf(preallocMethod) + sep;
			if (FixUtils.isSet(allocID)) s += "AllocID(70)=" + new String(allocID) + sep;
			if (FixUtils.isSet(preAllocGrp.noAllocs)) s += preAllocGrp.toString();
			if (FixUtils.isSet(settlType)) s += "SettlType(63)=" + new String(settlType) + sep;
			if (FixUtils.isSet(settlDate)) s += "SettlDate(64)=" + new String(settlDate) + sep;
			if (FixUtils.isSet(matchType)) s += "MatchType(574)=" + new String(matchType) + sep;
			if (FixUtils.isSet(orderCategory)) s += "OrderCategory(1115)=" + String.valueOf(orderCategory) + sep;
			if (FixUtils.isSet(cashMargin)) s += "CashMargin(544)=" + String.valueOf(cashMargin) + sep;
			if (FixUtils.isSet(clearingFeeIndicator)) s += "ClearingFeeIndicator(635)=" + new String(clearingFeeIndicator) + sep;
			if (FixUtils.isSet(instrument.symbol)) s += instrument.toString();
			if (FixUtils.isSet(financingDetails.agreementDesc)) s += financingDetails.toString();
			if (FixUtils.isSet(undInstrmtGrp.noUnderlyings)) s += undInstrmtGrp.toString();
			 s += "Side(54)=" + String.valueOf(side) + sep;
			if (FixUtils.isSet(stipulations.noStipulations)) s += stipulations.toString();
			if (FixUtils.isSet(qtyType)) s += "QtyType(854)=" + String.valueOf(qtyType) + sep;
			if (FixUtils.isSet(lotType)) s += "LotType(1093)=" + String.valueOf(lotType) + sep;
			if (FixUtils.isSet(orderQtyData.orderQty)) s += orderQtyData.toString();
			if (FixUtils.isSet(ordType)) s += "OrdType(40)=" + String.valueOf(ordType) + sep;
			if (FixUtils.isSet(priceType)) s += "PriceType(423)=" + String.valueOf(priceType) + sep;
			if (FixUtils.isSet(price)) s += "Price(44)=" + String.valueOf(price) + sep;
			if (FixUtils.isSet(priceProtectionScope)) s += "PriceProtectionScope(1092)=" + String.valueOf(priceProtectionScope) + sep;
			if (FixUtils.isSet(stopPx)) s += "StopPx(99)=" + String.valueOf(stopPx) + sep;
			if (FixUtils.isSet(triggeringInstruction.triggerType)) s += triggeringInstruction.toString();
			if (FixUtils.isSet(pegInstructions.pegOffsetValue)) s += pegInstructions.toString();
			if (FixUtils.isSet(discretionInstructions.discretionInst)) s += discretionInstructions.toString();
			if (FixUtils.isSet(peggedPrice)) s += "PeggedPrice(839)=" + String.valueOf(peggedPrice) + sep;
			if (FixUtils.isSet(peggedRefPrice)) s += "PeggedRefPrice(1095)=" + String.valueOf(peggedRefPrice) + sep;
			if (FixUtils.isSet(discretionPrice)) s += "DiscretionPrice(845)=" + String.valueOf(discretionPrice) + sep;
			if (FixUtils.isSet(targetStrategy)) s += "TargetStrategy(847)=" + String.valueOf(targetStrategy) + sep;
			if (FixUtils.isSet(strategyParametersGrp.noStrategyParameters)) s += strategyParametersGrp.toString();
			if (FixUtils.isSet(targetStrategyParameters)) s += "TargetStrategyParameters(848)=" + new String(targetStrategyParameters) + sep;
			if (FixUtils.isSet(participationRate)) s += "ParticipationRate(849)=" + String.valueOf(participationRate) + sep;
			if (FixUtils.isSet(targetStrategyPerformance)) s += "TargetStrategyPerformance(850)=" + String.valueOf(targetStrategyPerformance) + sep;
			if (FixUtils.isSet(currency)) s += "Currency(15)=" + new String(currency) + sep;
			if (FixUtils.isSet(complianceID)) s += "ComplianceID(376)=" + new String(complianceID) + sep;
			if (FixUtils.isSet(solicitedFlag)) s += "SolicitedFlag(377)=" + String.valueOf(solicitedFlag) + sep;
			if (FixUtils.isSet(timeInForce)) s += "TimeInForce(59)=" + String.valueOf(timeInForce) + sep;
			if (FixUtils.isSet(effectiveTime)) s += "EffectiveTime(168)=" + new String(effectiveTime) + sep;
			if (FixUtils.isSet(expireDate)) s += "ExpireDate(432)=" + new String(expireDate) + sep;
			if (FixUtils.isSet(expireTime)) s += "ExpireTime(126)=" + new String(expireTime) + sep;
			if (FixUtils.isSet(execInst)) s += "ExecInst(18)=" + new String(execInst) + sep;
			if (FixUtils.isSet(aggressorIndicator)) s += "AggressorIndicator(1057)=" + String.valueOf(aggressorIndicator) + sep;
			if (FixUtils.isSet(orderCapacity)) s += "OrderCapacity(528)=" + String.valueOf(orderCapacity) + sep;
			if (FixUtils.isSet(orderRestrictions)) s += "OrderRestrictions(529)=" + new String(orderRestrictions) + sep;
			if (FixUtils.isSet(preTradeAnonymity)) s += "PreTradeAnonymity(1091)=" + String.valueOf(preTradeAnonymity) + sep;
			if (FixUtils.isSet(custOrderCapacity)) s += "CustOrderCapacity(582)=" + String.valueOf(custOrderCapacity) + sep;
			if (FixUtils.isSet(lastQty)) s += "LastQty(32)=" + String.valueOf(lastQty) + sep;
			if (FixUtils.isSet(calculatedCcyLastQty)) s += "CalculatedCcyLastQty(1056)=" + String.valueOf(calculatedCcyLastQty) + sep;
			if (FixUtils.isSet(lastSwapPoints)) s += "LastSwapPoints(1071)=" + String.valueOf(lastSwapPoints) + sep;
			if (FixUtils.isSet(underlyingLastQty)) s += "UnderlyingLastQty(652)=" + String.valueOf(underlyingLastQty) + sep;
			if (FixUtils.isSet(lastPx)) s += "LastPx(31)=" + String.valueOf(lastPx) + sep;
			if (FixUtils.isSet(underlyingLastPx)) s += "UnderlyingLastPx(651)=" + String.valueOf(underlyingLastPx) + sep;
			if (FixUtils.isSet(lastParPx)) s += "LastParPx(669)=" + String.valueOf(lastParPx) + sep;
			if (FixUtils.isSet(lastSpotRate)) s += "LastSpotRate(194)=" + String.valueOf(lastSpotRate) + sep;
			if (FixUtils.isSet(lastForwardPoints)) s += "LastForwardPoints(195)=" + String.valueOf(lastForwardPoints) + sep;
			if (FixUtils.isSet(lastMkt)) s += "LastMkt(30)=" + new String(lastMkt) + sep;
			if (FixUtils.isSet(tradingSessionID)) s += "TradingSessionID(336)=" + new String(tradingSessionID) + sep;
			if (FixUtils.isSet(tradingSessionSubID)) s += "TradingSessionSubID(625)=" + new String(tradingSessionSubID) + sep;
			if (FixUtils.isSet(timeBracket)) s += "TimeBracket(943)=" + new String(timeBracket) + sep;
			if (FixUtils.isSet(lastCapacity)) s += "LastCapacity(29)=" + String.valueOf(lastCapacity) + sep;
			 s += "LeavesQty(151)=" + String.valueOf(leavesQty) + sep;
			 s += "CumQty(14)=" + String.valueOf(cumQty) + sep;
			if (FixUtils.isSet(avgPx)) s += "AvgPx(6)=" + String.valueOf(avgPx) + sep;
			if (FixUtils.isSet(dayOrderQty)) s += "DayOrderQty(424)=" + String.valueOf(dayOrderQty) + sep;
			if (FixUtils.isSet(dayCumQty)) s += "DayCumQty(425)=" + String.valueOf(dayCumQty) + sep;
			if (FixUtils.isSet(dayAvgPx)) s += "DayAvgPx(426)=" + String.valueOf(dayAvgPx) + sep;
			if (FixUtils.isSet(totNoFills)) s += "TotNoFills(1361)=" + String.valueOf(totNoFills) + sep;
			if (FixUtils.isSet(lastFragment)) s += "LastFragment(893)=" + String.valueOf(lastFragment) + sep;
			if (FixUtils.isSet(fillsGrp.noFills)) s += fillsGrp.toString();
			if (FixUtils.isSet(gTBookingInst)) s += "GTBookingInst(427)=" + String.valueOf(gTBookingInst) + sep;
			if (FixUtils.isSet(tradeDate)) s += "TradeDate(75)=" + new String(tradeDate) + sep;
			if (FixUtils.isSet(transactTime)) s += "TransactTime(60)=" + new String(transactTime) + sep;
			if (FixUtils.isSet(reportToExch)) s += "ReportToExch(113)=" + String.valueOf(reportToExch) + sep;
			if (FixUtils.isSet(commissionData.commission)) s += commissionData.toString();
			if (FixUtils.isSet(spreadOrBenchmarkCurveData.spread)) s += spreadOrBenchmarkCurveData.toString();
			if (FixUtils.isSet(yieldData.yieldType)) s += yieldData.toString();
			if (FixUtils.isSet(grossTradeAmt)) s += "GrossTradeAmt(381)=" + String.valueOf(grossTradeAmt) + sep;
			if (FixUtils.isSet(numDaysInterest)) s += "NumDaysInterest(157)=" + String.valueOf(numDaysInterest) + sep;
			if (FixUtils.isSet(exDate)) s += "ExDate(230)=" + new String(exDate) + sep;
			if (FixUtils.isSet(accruedInterestRate)) s += "AccruedInterestRate(158)=" + String.valueOf(accruedInterestRate) + sep;
			if (FixUtils.isSet(accruedInterestAmt)) s += "AccruedInterestAmt(159)=" + String.valueOf(accruedInterestAmt) + sep;
			if (FixUtils.isSet(interestAtMaturity)) s += "InterestAtMaturity(738)=" + String.valueOf(interestAtMaturity) + sep;
			if (FixUtils.isSet(endAccruedInterestAmt)) s += "EndAccruedInterestAmt(920)=" + String.valueOf(endAccruedInterestAmt) + sep;
			if (FixUtils.isSet(startCash)) s += "StartCash(921)=" + String.valueOf(startCash) + sep;
			if (FixUtils.isSet(endCash)) s += "EndCash(922)=" + String.valueOf(endCash) + sep;
			if (FixUtils.isSet(tradedFlatSwitch)) s += "TradedFlatSwitch(258)=" + String.valueOf(tradedFlatSwitch) + sep;
			if (FixUtils.isSet(basisFeatureDate)) s += "BasisFeatureDate(259)=" + new String(basisFeatureDate) + sep;
			if (FixUtils.isSet(basisFeaturePrice)) s += "BasisFeaturePrice(260)=" + String.valueOf(basisFeaturePrice) + sep;
			if (FixUtils.isSet(concession)) s += "Concession(238)=" + String.valueOf(concession) + sep;
			if (FixUtils.isSet(totalTakedown)) s += "TotalTakedown(237)=" + String.valueOf(totalTakedown) + sep;
			if (FixUtils.isSet(netMoney)) s += "NetMoney(118)=" + String.valueOf(netMoney) + sep;
			if (FixUtils.isSet(settlCurrAmt)) s += "SettlCurrAmt(119)=" + String.valueOf(settlCurrAmt) + sep;
			if (FixUtils.isSet(settlCurrency)) s += "SettlCurrency(120)=" + new String(settlCurrency) + sep;
			if (FixUtils.isSet(rateSource.noRateSources)) s += rateSource.toString();
			if (FixUtils.isSet(settlCurrFxRate)) s += "SettlCurrFxRate(155)=" + String.valueOf(settlCurrFxRate) + sep;
			if (FixUtils.isSet(settlCurrFxRateCalc)) s += "SettlCurrFxRateCalc(156)=" + String.valueOf(settlCurrFxRateCalc) + sep;
			if (FixUtils.isSet(handlInst)) s += "HandlInst(21)=" + String.valueOf(handlInst) + sep;
			if (FixUtils.isSet(minQty)) s += "MinQty(110)=" + String.valueOf(minQty) + sep;
			if (FixUtils.isSet(matchIncrement)) s += "MatchIncrement(1089)=" + String.valueOf(matchIncrement) + sep;
			if (FixUtils.isSet(maxPriceLevels)) s += "MaxPriceLevels(1090)=" + String.valueOf(maxPriceLevels) + sep;
			if (FixUtils.isSet(displayInstruction.displayQty)) s += displayInstruction.toString();
			if (FixUtils.isSet(maxFloor)) s += "MaxFloor(111)=" + String.valueOf(maxFloor) + sep;
			if (FixUtils.isSet(positionEffect)) s += "PositionEffect(77)=" + String.valueOf(positionEffect) + sep;
			if (FixUtils.isSet(maxShow)) s += "MaxShow(210)=" + String.valueOf(maxShow) + sep;
			if (FixUtils.isSet(bookingType)) s += "BookingType(775)=" + String.valueOf(bookingType) + sep;
			if (FixUtils.isSet(text)) s += "Text(58)=" + new String(text) + sep;
			if (FixUtils.isSet(encodedTextLen)) s += "EncodedTextLen(354)=" + String.valueOf(encodedTextLen) + sep;
			if (FixUtils.isSet(encodedText)) s += "EncodedText(355)=" + new String(encodedText) + sep;
			if (FixUtils.isSet(settlDate2)) s += "SettlDate2(193)=" + new String(settlDate2) + sep;
			if (FixUtils.isSet(orderQty2)) s += "OrderQty2(192)=" + String.valueOf(orderQty2) + sep;
			if (FixUtils.isSet(lastForwardPoints2)) s += "LastForwardPoints2(641)=" + String.valueOf(lastForwardPoints2) + sep;
			if (FixUtils.isSet(multiLegReportingType)) s += "MultiLegReportingType(442)=" + String.valueOf(multiLegReportingType) + sep;
			if (FixUtils.isSet(cancellationRights)) s += "CancellationRights(480)=" + String.valueOf(cancellationRights) + sep;
			if (FixUtils.isSet(moneyLaunderingStatus)) s += "MoneyLaunderingStatus(481)=" + String.valueOf(moneyLaunderingStatus) + sep;
			if (FixUtils.isSet(registID)) s += "RegistID(513)=" + new String(registID) + sep;
			if (FixUtils.isSet(designation)) s += "Designation(494)=" + new String(designation) + sep;
			if (FixUtils.isSet(transBkdTime)) s += "TransBkdTime(483)=" + new String(transBkdTime) + sep;
			if (FixUtils.isSet(execValuationPoint)) s += "ExecValuationPoint(515)=" + new String(execValuationPoint) + sep;
			if (FixUtils.isSet(execPriceType)) s += "ExecPriceType(484)=" + String.valueOf(execPriceType) + sep;
			if (FixUtils.isSet(execPriceAdjustment)) s += "ExecPriceAdjustment(485)=" + String.valueOf(execPriceAdjustment) + sep;
			if (FixUtils.isSet(priorityIndicator)) s += "PriorityIndicator(638)=" + String.valueOf(priorityIndicator) + sep;
			if (FixUtils.isSet(priceImprovement)) s += "PriceImprovement(639)=" + String.valueOf(priceImprovement) + sep;
			if (FixUtils.isSet(lastLiquidityInd)) s += "LastLiquidityInd(851)=" + String.valueOf(lastLiquidityInd) + sep;
			if (FixUtils.isSet(contAmtGrp.noContAmts)) s += contAmtGrp.toString();
			if (FixUtils.isSet(instrmtLegExecGrp.noLegs)) s += instrmtLegExecGrp.toString();
			if (FixUtils.isSet(copyMsgIndicator)) s += "CopyMsgIndicator(797)=" + String.valueOf(copyMsgIndicator) + sep;
			if (FixUtils.isSet(manualOrderIndicator)) s += "ManualOrderIndicator(1028)=" + String.valueOf(manualOrderIndicator) + sep;
			if (FixUtils.isSet(custDirectedOrder)) s += "CustDirectedOrder(1029)=" + String.valueOf(custDirectedOrder) + sep;
			if (FixUtils.isSet(receivedDeptID)) s += "ReceivedDeptID(1030)=" + new String(receivedDeptID) + sep;
			if (FixUtils.isSet(custOrderHandlingInst)) s += "CustOrderHandlingInst(1031)=" + new String(custOrderHandlingInst) + sep;
			if (FixUtils.isSet(orderHandlingInstSource)) s += "OrderHandlingInstSource(1032)=" + String.valueOf(orderHandlingInstSource) + sep;
			if (FixUtils.isSet(dividendYield)) s += "DividendYield(1380)=" + String.valueOf(dividendYield) + sep;
			if (FixUtils.isSet(miscFeesGrp.noMiscFees)) s += miscFeesGrp.toString();
			if (FixUtils.isSet(trdRegTimestamps.noTrdRegTimestamps)) s += trdRegTimestamps.toString();
			if (FixUtils.isSet(volatility)) s += "Volatility(1188)=" + String.valueOf(volatility) + sep;
			if (FixUtils.isSet(timeToExpiration)) s += "TimeToExpiration(1189)=" + String.valueOf(timeToExpiration) + sep;
			if (FixUtils.isSet(riskFreeRate)) s += "RiskFreeRate(1190)=" + String.valueOf(riskFreeRate) + sep;
			if (FixUtils.isSet(priceDelta)) s += "PriceDelta(811)=" + String.valueOf(priceDelta) + sep;

			s += "checkSum(10)=" + String.valueOf(checkSum) + sep;

		} catch(Exception e) {  };

		return s;
	}

	@Override
	public boolean equals(Object o) {
		if (! ( o instanceof FixExecutionReport)) return false;

			FixExecutionReport msg = (FixExecutionReport) o;

		if ( ! super.equals(msg) ) return false;

		if (!applicationSequenceControl.equals(msg.applicationSequenceControl)) return false;

		if (!Utils.equals( orderID, msg.orderID)) return false;

		if (!Utils.equals( secondaryOrderID, msg.secondaryOrderID)) return false;

		if (!Utils.equals( secondaryClOrdID, msg.secondaryClOrdID)) return false;

		if (!Utils.equals( secondaryExecID, msg.secondaryExecID)) return false;

		if (!Utils.equals( clOrdID, msg.clOrdID)) return false;

		if (!Utils.equals( origClOrdID, msg.origClOrdID)) return false;

		if (!Utils.equals( clOrdLinkID, msg.clOrdLinkID)) return false;

		if (!Utils.equals( quoteRespID, msg.quoteRespID)) return false;

		if (!Utils.equals( ordStatusReqID, msg.ordStatusReqID)) return false;

		if (!Utils.equals( massStatusReqID, msg.massStatusReqID)) return false;

		if (!Utils.equals( hostCrossID, msg.hostCrossID)) return false;

		if (!( totNumReports==msg.totNumReports)) return false;

		if (!( lastRptRequested==msg.lastRptRequested)) return false;

		if (!parties.equals(msg.parties)) return false;

		if (!contraGrp.equals(msg.contraGrp)) return false;

		if (!Utils.equals( listID, msg.listID)) return false;

		if (!Utils.equals( crossID, msg.crossID)) return false;

		if (!Utils.equals( origCrossID, msg.origCrossID)) return false;

		if (!( crossType==msg.crossType)) return false;

		if (!Utils.equals( trdMatchID, msg.trdMatchID)) return false;

		if (!Utils.equals( execID, msg.execID)) return false;

		if (!Utils.equals( execRefID, msg.execRefID)) return false;

		if (!( execType==msg.execType)) return false;

		if (!( ordStatus==msg.ordStatus)) return false;

		if (!( workingIndicator==msg.workingIndicator)) return false;

		if (!( ordRejReason==msg.ordRejReason)) return false;

		if (!( execRestatementReason==msg.execRestatementReason)) return false;

		if (!Utils.equals( account, msg.account)) return false;

		if (!( acctIDSource==msg.acctIDSource)) return false;

		if (!( accountType==msg.accountType)) return false;

		if (!( dayBookingInst==msg.dayBookingInst)) return false;

		if (!( bookingUnit==msg.bookingUnit)) return false;

		if (!( preallocMethod==msg.preallocMethod)) return false;

		if (!Utils.equals( allocID, msg.allocID)) return false;

		if (!preAllocGrp.equals(msg.preAllocGrp)) return false;

		if (!Utils.equals( settlType, msg.settlType)) return false;

		if (!Utils.equals( matchType, msg.matchType)) return false;

		if (!( orderCategory==msg.orderCategory)) return false;

		if (!( cashMargin==msg.cashMargin)) return false;

		if (!Utils.equals( clearingFeeIndicator, msg.clearingFeeIndicator)) return false;

		if (!instrument.equals(msg.instrument)) return false;

		if (!financingDetails.equals(msg.financingDetails)) return false;

		if (!undInstrmtGrp.equals(msg.undInstrmtGrp)) return false;

		if (!( side==msg.side)) return false;

		if (!stipulations.equals(msg.stipulations)) return false;

		if (!( qtyType==msg.qtyType)) return false;

		if (!( lotType==msg.lotType)) return false;

		if (!orderQtyData.equals(msg.orderQtyData)) return false;

		if (!( ordType==msg.ordType)) return false;

		if (!( priceType==msg.priceType)) return false;

		if (!( price==msg.price)) return false;

		if (!( priceProtectionScope==msg.priceProtectionScope)) return false;

		if (!( stopPx==msg.stopPx)) return false;

		if (!triggeringInstruction.equals(msg.triggeringInstruction)) return false;

		if (!pegInstructions.equals(msg.pegInstructions)) return false;

		if (!discretionInstructions.equals(msg.discretionInstructions)) return false;

		if (!( peggedPrice==msg.peggedPrice)) return false;

		if (!( peggedRefPrice==msg.peggedRefPrice)) return false;

		if (!( discretionPrice==msg.discretionPrice)) return false;

		if (!( targetStrategy==msg.targetStrategy)) return false;

		if (!strategyParametersGrp.equals(msg.strategyParametersGrp)) return false;

		if (!Utils.equals( targetStrategyParameters, msg.targetStrategyParameters)) return false;

		if (!( participationRate==msg.participationRate)) return false;

		if (!( targetStrategyPerformance==msg.targetStrategyPerformance)) return false;

		if (!Utils.equals( currency, msg.currency)) return false;

		if (!Utils.equals( complianceID, msg.complianceID)) return false;

		if (!( solicitedFlag==msg.solicitedFlag)) return false;

		if (!( timeInForce==msg.timeInForce)) return false;

		if (!Utils.equals( execInst, msg.execInst)) return false;

		if (!( aggressorIndicator==msg.aggressorIndicator)) return false;

		if (!( orderCapacity==msg.orderCapacity)) return false;

		if (!Utils.equals( orderRestrictions, msg.orderRestrictions)) return false;

		if (!( preTradeAnonymity==msg.preTradeAnonymity)) return false;

		if (!( custOrderCapacity==msg.custOrderCapacity)) return false;

		if (!( lastQty==msg.lastQty)) return false;

		if (!( calculatedCcyLastQty==msg.calculatedCcyLastQty)) return false;

		if (!( lastSwapPoints==msg.lastSwapPoints)) return false;

		if (!( underlyingLastQty==msg.underlyingLastQty)) return false;

		if (!( lastPx==msg.lastPx)) return false;

		if (!( underlyingLastPx==msg.underlyingLastPx)) return false;

		if (!( lastParPx==msg.lastParPx)) return false;

		if (!( lastSpotRate==msg.lastSpotRate)) return false;

		if (!( lastForwardPoints==msg.lastForwardPoints)) return false;

		if (!Utils.equals( lastMkt, msg.lastMkt)) return false;

		if (!Utils.equals( tradingSessionID, msg.tradingSessionID)) return false;

		if (!Utils.equals( tradingSessionSubID, msg.tradingSessionSubID)) return false;

		if (!Utils.equals( timeBracket, msg.timeBracket)) return false;

		if (!( lastCapacity==msg.lastCapacity)) return false;

		if (!( leavesQty==msg.leavesQty)) return false;

		if (!( cumQty==msg.cumQty)) return false;

		if (!( avgPx==msg.avgPx)) return false;

		if (!( dayOrderQty==msg.dayOrderQty)) return false;

		if (!( dayCumQty==msg.dayCumQty)) return false;

		if (!( dayAvgPx==msg.dayAvgPx)) return false;

		if (!( totNoFills==msg.totNoFills)) return false;

		if (!( lastFragment==msg.lastFragment)) return false;

		if (!fillsGrp.equals(msg.fillsGrp)) return false;

		if (!( gTBookingInst==msg.gTBookingInst)) return false;

		if (!( reportToExch==msg.reportToExch)) return false;

		if (!commissionData.equals(msg.commissionData)) return false;

		if (!spreadOrBenchmarkCurveData.equals(msg.spreadOrBenchmarkCurveData)) return false;

		if (!yieldData.equals(msg.yieldData)) return false;

		if (!( grossTradeAmt==msg.grossTradeAmt)) return false;

		if (!( numDaysInterest==msg.numDaysInterest)) return false;

		if (!( accruedInterestRate==msg.accruedInterestRate)) return false;

		if (!( accruedInterestAmt==msg.accruedInterestAmt)) return false;

		if (!( interestAtMaturity==msg.interestAtMaturity)) return false;

		if (!( endAccruedInterestAmt==msg.endAccruedInterestAmt)) return false;

		if (!( startCash==msg.startCash)) return false;

		if (!( endCash==msg.endCash)) return false;

		if (!( tradedFlatSwitch==msg.tradedFlatSwitch)) return false;

		if (!( basisFeaturePrice==msg.basisFeaturePrice)) return false;

		if (!( concession==msg.concession)) return false;

		if (!( totalTakedown==msg.totalTakedown)) return false;

		if (!( netMoney==msg.netMoney)) return false;

		if (!( settlCurrAmt==msg.settlCurrAmt)) return false;

		if (!Utils.equals( settlCurrency, msg.settlCurrency)) return false;

		if (!rateSource.equals(msg.rateSource)) return false;

		if (!( settlCurrFxRate==msg.settlCurrFxRate)) return false;

		if (!( settlCurrFxRateCalc==msg.settlCurrFxRateCalc)) return false;

		if (!( handlInst==msg.handlInst)) return false;

		if (!( minQty==msg.minQty)) return false;

		if (!( matchIncrement==msg.matchIncrement)) return false;

		if (!( maxPriceLevels==msg.maxPriceLevels)) return false;

		if (!displayInstruction.equals(msg.displayInstruction)) return false;

		if (!( maxFloor==msg.maxFloor)) return false;

		if (!( positionEffect==msg.positionEffect)) return false;

		if (!( maxShow==msg.maxShow)) return false;

		if (!( bookingType==msg.bookingType)) return false;

		if (!Utils.equals( text, msg.text)) return false;

		if (!( encodedTextLen==msg.encodedTextLen)) return false;

		if (!Utils.equals( encodedText, msg.encodedText)) return false;

		if (!( orderQty2==msg.orderQty2)) return false;

		if (!( lastForwardPoints2==msg.lastForwardPoints2)) return false;

		if (!( multiLegReportingType==msg.multiLegReportingType)) return false;

		if (!( cancellationRights==msg.cancellationRights)) return false;

		if (!( moneyLaunderingStatus==msg.moneyLaunderingStatus)) return false;

		if (!Utils.equals( registID, msg.registID)) return false;

		if (!Utils.equals( designation, msg.designation)) return false;

		if (!( execPriceType==msg.execPriceType)) return false;

		if (!( execPriceAdjustment==msg.execPriceAdjustment)) return false;

		if (!( priorityIndicator==msg.priorityIndicator)) return false;

		if (!( priceImprovement==msg.priceImprovement)) return false;

		if (!( lastLiquidityInd==msg.lastLiquidityInd)) return false;

		if (!contAmtGrp.equals(msg.contAmtGrp)) return false;

		if (!instrmtLegExecGrp.equals(msg.instrmtLegExecGrp)) return false;

		if (!( copyMsgIndicator==msg.copyMsgIndicator)) return false;

		if (!( manualOrderIndicator==msg.manualOrderIndicator)) return false;

		if (!( custDirectedOrder==msg.custDirectedOrder)) return false;

		if (!Utils.equals( receivedDeptID, msg.receivedDeptID)) return false;

		if (!Utils.equals( custOrderHandlingInst, msg.custOrderHandlingInst)) return false;

		if (!( orderHandlingInstSource==msg.orderHandlingInstSource)) return false;

		if (!( dividendYield==msg.dividendYield)) return false;

		if (!miscFeesGrp.equals(msg.miscFeesGrp)) return false;

		if (!trdRegTimestamps.equals(msg.trdRegTimestamps)) return false;

		if (!( volatility==msg.volatility)) return false;

		if (!( timeToExpiration==msg.timeToExpiration)) return false;

		if (!( riskFreeRate==msg.riskFreeRate)) return false;

		if (!( priceDelta==msg.priceDelta)) return false;

		return true;
	}
}
