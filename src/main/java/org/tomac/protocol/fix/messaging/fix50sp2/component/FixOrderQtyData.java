package org.tomac.protocol.fix.messaging.fix50sp2.component;

// DO NOT EDIT!!!
// This file is generated by FixMessageGenerator.
// If you need additional functionality, put it in a helper class
// that does not live in this folder!!!  Any java file in this folder 
// will be deleted upon the next run of the FixMessageGenerator!

import java.nio.ByteBuffer;

import org.tomac.protocol.fix.FixUtils;
import org.tomac.protocol.fix.FixSessionException;
import org.tomac.protocol.fix.FixGarbledException;
import org.tomac.utils.Utils;
import org.tomac.protocol.fix.FixConstants;


import org.tomac.protocol.fix.messaging.fix50sp2.FixTags;
import org.tomac.protocol.fix.messaging.fix50sp2.FixMessageInfo.*;

public class FixOrderQtyData implements FixComponent
{

	public long orderQty = 0;
	public long cashOrderQty = 0;
	public long orderPercent = 0;
	public byte roundingDirection = (byte)' ';
	public long roundingModulus = 0;

	public FixOrderQtyData() {
		super();

		this.clear();

	}

	@Override
	public void clear()
	{

		// clear out all the fields that aren't msgType

		orderQty = Long.MAX_VALUE;		
		cashOrderQty = Long.MAX_VALUE;		
		orderPercent = Long.MAX_VALUE;		
		roundingDirection = Byte.MAX_VALUE;		
		roundingModulus = Long.MAX_VALUE;		
	}

	public void getAll(int id, ByteBuffer buf) throws FixSessionException
	{

		int startTagPosition = buf.position();

		int lastTagPosition = buf.position();
		do {
			ByteBuffer value;

			value = buf;

			switch( id ) {

			case FixTags.ORDERQTY_INT:
				orderQty = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.CASHORDERQTY_INT:
				cashOrderQty = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.ORDERPERCENT_INT:
				orderPercent = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.ROUNDINGDIRECTION_INT:
				roundingDirection = FixUtils.getTagCharValue( value );
				if (!RoundingDirection.isValid(roundingDirection) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + roundingDirection + ") for tag").getBytes(), id, new byte[0] );
				break;

			case FixTags.ROUNDINGMODULUS_INT:
				roundingModulus = FixUtils.getTagFloatValue(value);
				break;

			// we will always endup with unknown tag, unread and return to upper layer in hierarchy
			default:
				id = checkRequiredTags();
				if (id > 0) throw new FixSessionException(SessionRejectReason.REQUIRED_TAG_MISSING, "Required tag missing".getBytes(), id, new byte[0] );

				buf.position( lastTagPosition );
				return;

			}

			lastTagPosition = buf.position();

		} while ( ( id = FixUtils.getTagId( buf ) ) > 0 );

		buf.position(startTagPosition);

	}

	private int checkRequiredTags() {
		int tag = -1;

		return tag;

	}
	@Override
	public boolean isSet()
	{
		if (FixUtils.isSet(orderQty)) return true;
		if (FixUtils.isSet(cashOrderQty)) return true;
		if (FixUtils.isSet(orderPercent)) return true;
		if (FixUtils.isSet(roundingDirection)) return true;
		if (FixUtils.isSet(roundingModulus)) return true;
		return false;
	}
	@Override
	public void encode( ByteBuffer out )
	{
		if (FixUtils.isSet(orderQty)) FixUtils.putFixFloatTag( out, FixTags.ORDERQTY_INT, orderQty);
		if (FixUtils.isSet(cashOrderQty)) FixUtils.putFixFloatTag( out, FixTags.CASHORDERQTY_INT, cashOrderQty);
		if (FixUtils.isSet(orderPercent)) FixUtils.putFixFloatTag( out, FixTags.ORDERPERCENT_INT, orderPercent);
		if (FixUtils.isSet(roundingDirection)) FixUtils.putFixTag( out, FixTags.ROUNDINGDIRECTION_INT, roundingDirection );
		if (FixUtils.isSet(roundingModulus)) FixUtils.putFixFloatTag( out, FixTags.ROUNDINGMODULUS_INT, roundingModulus);
	}
	/**
	 * If you use toString for any other purpose than administrative printout.
	 * You will end up in nifelheim!
	**/
	@Override
	public String toString() {
		char sep = '\n';
		if (Boolean.getBoolean("fix.useOneLiner")) sep = ( byte )0x01;

		String s = "";

			if (FixUtils.isSet(orderQty)) s += "OrderQty(38)=" + String.valueOf(orderQty) + sep;
			if (FixUtils.isSet(cashOrderQty)) s += "CashOrderQty(152)=" + String.valueOf(cashOrderQty) + sep;
			if (FixUtils.isSet(orderPercent)) s += "OrderPercent(516)=" + String.valueOf(orderPercent) + sep;
			if (FixUtils.isSet(roundingDirection)) s += "RoundingDirection(468)=" + String.valueOf(roundingDirection) + sep;
			if (FixUtils.isSet(roundingModulus)) s += "RoundingModulus(469)=" + String.valueOf(roundingModulus) + sep;
		return s;

	}

	@Override
	public boolean equals(Object o) {
		if (! ( o instanceof FixOrderQtyData)) return false;

			FixOrderQtyData msg = (FixOrderQtyData) o;

		if ( ! super.equals(msg) ) return false;

		if (!( orderQty==msg.orderQty)) return false;

		if (!( cashOrderQty==msg.cashOrderQty)) return false;

		if (!( orderPercent==msg.orderPercent)) return false;

		if (!( roundingDirection==msg.roundingDirection)) return false;

		if (!( roundingModulus==msg.roundingModulus)) return false;

		return true;
	}
}
