package org.tomac.protocol.fix.messaging.fix50sp2.component;

// DO NOT EDIT!!!
// This file is generated by FixMessageGenerator.
// If you need additional functionality, put it in a helper class
// that does not live in this folder!!!  Any java file in this folder 
// will be deleted upon the next run of the FixMessageGenerator!

import java.nio.ByteBuffer;

import org.tomac.protocol.fix.FixUtils;
import org.tomac.protocol.fix.FixSessionException;
import org.tomac.protocol.fix.FixGarbledException;
import org.tomac.utils.Utils;
import org.tomac.protocol.fix.FixConstants;


import org.tomac.protocol.fix.messaging.fix50sp2.FixTags;
import org.tomac.protocol.fix.messaging.fix50sp2.FixMessageInfo.*;

public class FixSecurityXML implements FixComponent
{

	public long securityXMLLen = 0;
	public byte[] securityXML;
	public byte[] securityXMLSchema;

	public FixSecurityXML() {
		super();

		securityXML = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		securityXMLSchema = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		this.clear();

	}

	@Override
	public void clear()
	{

		// clear out all the fields that aren't msgType

		securityXMLLen = Long.MAX_VALUE;		
		Utils.fill( securityXML, (byte)0 );
		Utils.fill( securityXMLSchema, (byte)0 );
	}

	public void getAll(int id, ByteBuffer buf) throws FixSessionException, FixGarbledException
	{

		int startTagPosition = buf.position();

		int lastTagPosition = buf.position();
		do {
			ByteBuffer value;

			value = buf;

			switch( id ) {

			case FixTags.SECURITYXMLLEN_INT:
				securityXMLLen = FixUtils.getTagIntValue( value );
				break;

			case FixTags.SECURITYXML_INT:
				securityXML = FixUtils.getTagStringValue(value, securityXML);
				break;

			case FixTags.SECURITYXMLSCHEMA_INT:
				securityXMLSchema = FixUtils.getTagStringValue(value, securityXMLSchema);
				break;

			// we will always endup with unknown tag, unread and return to upper layer in hierarchy
			default:
				id = checkRequiredTags();
				if (id > 0) throw new FixSessionException(SessionRejectReason.REQUIRED_TAG_MISSING, "Required tag missing".getBytes(), id, new byte[0] );

				buf.position( lastTagPosition );
				return;

			}

			lastTagPosition = buf.position();

		} while ( ( id = FixUtils.getTagId( buf ) ) > 0 );

		buf.position(startTagPosition);

	}

	private int checkRequiredTags() {
		int tag = -1;

		return tag;

	}
	@Override
	public boolean isSet()
	{
		if (FixUtils.isSet(securityXMLLen)) return true;
		if (FixUtils.isSet(securityXML)) return true;
		if (FixUtils.isSet(securityXMLSchema)) return true;
		return false;
	}
	@Override
	public void encode( ByteBuffer out )
	{
		if (FixUtils.isSet(securityXMLLen)) FixUtils.putFixTag( out, FixTags.SECURITYXMLLEN_INT, securityXMLLen);
		if (FixUtils.isSet(securityXML)) FixUtils.putFixTag( out, FixTags.SECURITYXML_INT, securityXML, 0, Utils.lastIndexTrim(securityXML, (byte)0) );
		if (FixUtils.isSet(securityXMLSchema)) FixUtils.putFixTag( out, FixTags.SECURITYXMLSCHEMA_INT, securityXMLSchema, 0, Utils.lastIndexTrim(securityXMLSchema, (byte)0) );
	}
	/**
	 * If you use toString for any other purpose than administrative printout.
	 * You will end up in nifelheim!
	**/
	@Override
	public String toString() {
		char sep = '\n';
		if (Boolean.getBoolean("fix.useOneLiner")) sep = ( byte )0x01;

		String s = "";

			if (FixUtils.isSet(securityXMLLen)) s += "SecurityXMLLen(1184)=" + String.valueOf(securityXMLLen) + sep;
			if (FixUtils.isSet(securityXML)) s += "SecurityXML(1185)=" + new String(securityXML) + sep;
			if (FixUtils.isSet(securityXMLSchema)) s += "SecurityXMLSchema(1186)=" + new String(securityXMLSchema) + sep;
		return s;

	}

	@Override
	public boolean equals(Object o) {
		if (! ( o instanceof FixSecurityXML)) return false;

			FixSecurityXML msg = (FixSecurityXML) o;

		if (!( securityXMLLen==msg.securityXMLLen)) return false;

		if (!Utils.equals( securityXML, msg.securityXML)) return false;

		if (!Utils.equals( securityXMLSchema, msg.securityXMLSchema)) return false;

		return true;
	}
}
