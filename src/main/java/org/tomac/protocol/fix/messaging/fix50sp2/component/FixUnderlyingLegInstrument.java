package org.tomac.protocol.fix.messaging.fix50sp2.component;

// DO NOT EDIT!!!
// This file is generated by FixMessageGenerator.
// If you need additional functionality, put it in a helper class
// that does not live in this folder!!!  Any java file in this folder 
// will be deleted upon the next run of the FixMessageGenerator!

import java.nio.ByteBuffer;

import org.tomac.protocol.fix.FixUtils;
import org.tomac.protocol.fix.FixSessionException;
import org.tomac.protocol.fix.FixGarbledException;
import org.tomac.utils.Utils;
import org.tomac.protocol.fix.FixConstants;


import org.tomac.protocol.fix.messaging.fix50sp2.FixTags;
import org.tomac.protocol.fix.messaging.fix50sp2.FixMessageInfo.*;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixUnderlyingLegSecurityAltIDGrp;

public class FixUnderlyingLegInstrument implements FixComponent
{

	public byte[] underlyingLegSymbol;
	public byte[] underlyingLegSymbolSfx;
	public byte[] underlyingLegSecurityID;
	public byte[] underlyingLegSecurityIDSource;
	public FixUnderlyingLegSecurityAltIDGrp underlyingLegSecurityAltIDGrp;
	public byte[] underlyingLegCFICode;
	public byte[] underlyingLegSecurityType;
	public byte[] underlyingLegSecuritySubType;
	public byte[] underlyingLegMaturityMonthYear;
	public byte[] underlyingLegMaturityDate;
	public byte[] underlyingLegMaturityTime;
	public long underlyingLegStrikePrice = 0;
	public byte underlyingLegOptAttribute = (byte)' ';
	public long underlyingLegPutOrCall = 0;
	public byte[] underlyingLegSecurityExchange;
	public byte[] underlyingLegSecurityDesc;

	public FixUnderlyingLegInstrument() {
		super();

		underlyingLegSymbol = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		underlyingLegSymbolSfx = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		underlyingLegSecurityID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		underlyingLegSecurityIDSource = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		underlyingLegSecurityAltIDGrp = new FixUnderlyingLegSecurityAltIDGrp();
		underlyingLegCFICode = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		underlyingLegSecurityType = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		underlyingLegSecuritySubType = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		underlyingLegMaturityMonthYear = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		underlyingLegMaturityDate = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		underlyingLegMaturityTime = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		underlyingLegSecurityExchange = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		underlyingLegSecurityDesc = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		this.clear();

	}

	@Override
	public void clear()
	{

		// clear out all the fields that aren't msgType

		Utils.fill( underlyingLegSymbol, (byte)0 );
		Utils.fill( underlyingLegSymbolSfx, (byte)0 );
		Utils.fill( underlyingLegSecurityID, (byte)0 );
		Utils.fill( underlyingLegSecurityIDSource, (byte)0 );
		Utils.fill( underlyingLegCFICode, (byte)0 );
		Utils.fill( underlyingLegSecurityType, (byte)0 );
		Utils.fill( underlyingLegSecuritySubType, (byte)0 );
		Utils.fill( underlyingLegMaturityMonthYear, (byte)0 );
		Utils.fill( underlyingLegMaturityDate, (byte)0 );
		Utils.fill( underlyingLegMaturityTime, (byte)0 );
		underlyingLegStrikePrice = Long.MAX_VALUE;		
		underlyingLegOptAttribute = Byte.MAX_VALUE;		
		underlyingLegPutOrCall = Long.MAX_VALUE;		
		Utils.fill( underlyingLegSecurityExchange, (byte)0 );
		Utils.fill( underlyingLegSecurityDesc, (byte)0 );
		underlyingLegSecurityAltIDGrp.clear();
	}

	public void getAll(int id, ByteBuffer buf) throws FixSessionException
	{

		int startTagPosition = buf.position();

		int lastTagPosition = buf.position();
		do {
			ByteBuffer value;

			value = buf;

			switch( id ) {

			case FixTags.UNDERLYINGLEGSYMBOL_INT:
				underlyingLegSymbol = FixUtils.getTagStringValue(value, underlyingLegSymbol);
				break;

			case FixTags.UNDERLYINGLEGSYMBOLSFX_INT:
				underlyingLegSymbolSfx = FixUtils.getTagStringValue(value, underlyingLegSymbolSfx);
				break;

			case FixTags.UNDERLYINGLEGSECURITYID_INT:
				underlyingLegSecurityID = FixUtils.getTagStringValue(value, underlyingLegSecurityID);
				break;

			case FixTags.UNDERLYINGLEGSECURITYIDSOURCE_INT:
				underlyingLegSecurityIDSource = FixUtils.getTagStringValue(value, underlyingLegSecurityIDSource);
				break;

			case FixTags.NOUNDERLYINGLEGSECURITYALTID_INT:
				underlyingLegSecurityAltIDGrp.noUnderlyingLegSecurityAltID = FixUtils.getTagIntValue( value );
				underlyingLegSecurityAltIDGrp.getAll(underlyingLegSecurityAltIDGrp.noUnderlyingLegSecurityAltID, value );
				break;

			case FixTags.UNDERLYINGLEGCFICODE_INT:
				underlyingLegCFICode = FixUtils.getTagStringValue(value, underlyingLegCFICode);
				break;

			case FixTags.UNDERLYINGLEGSECURITYTYPE_INT:
				underlyingLegSecurityType = FixUtils.getTagStringValue(value, underlyingLegSecurityType);
				break;

			case FixTags.UNDERLYINGLEGSECURITYSUBTYPE_INT:
				underlyingLegSecuritySubType = FixUtils.getTagStringValue(value, underlyingLegSecuritySubType);
				break;

			case FixTags.UNDERLYINGLEGMATURITYMONTHYEAR_INT:
				underlyingLegMaturityMonthYear = FixUtils.getTagStringValue(value, underlyingLegMaturityMonthYear);
				break;

			case FixTags.UNDERLYINGLEGMATURITYDATE_INT:
				underlyingLegMaturityDate = FixUtils.getTagStringValue(value, underlyingLegMaturityDate);
				break;

			case FixTags.UNDERLYINGLEGMATURITYTIME_INT:
				underlyingLegMaturityTime = FixUtils.getTagStringValue(value, underlyingLegMaturityTime);
				break;

			case FixTags.UNDERLYINGLEGSTRIKEPRICE_INT:
				underlyingLegStrikePrice = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.UNDERLYINGLEGOPTATTRIBUTE_INT:
				underlyingLegOptAttribute = FixUtils.getTagCharValue( value );
				break;

			case FixTags.UNDERLYINGLEGPUTORCALL_INT:
				underlyingLegPutOrCall = FixUtils.getTagIntValue( value );
				break;

			case FixTags.UNDERLYINGLEGSECURITYEXCHANGE_INT:
				underlyingLegSecurityExchange = FixUtils.getTagStringValue(value, underlyingLegSecurityExchange);
				break;

			case FixTags.UNDERLYINGLEGSECURITYDESC_INT:
				underlyingLegSecurityDesc = FixUtils.getTagStringValue(value, underlyingLegSecurityDesc);
				break;

			// we will always endup with unknown tag, unread and return to upper layer in hierarchy
			default:
				id = checkRequiredTags();
				if (id > 0) throw new FixSessionException(buf, "Required tag missing: " + id );

				buf.position( lastTagPosition );
				return;

			}

			lastTagPosition = buf.position();

		} while ( ( id = FixUtils.getTagId( buf ) ) > 0 );

		buf.position(startTagPosition);

	}

	private int checkRequiredTags() {
		int tag = -1;

		return tag;

	}
	@Override
	public boolean isSet()
	{
		if (FixUtils.isSet(underlyingLegSymbol)) return true;
		if (FixUtils.isSet(underlyingLegSymbolSfx)) return true;
		if (FixUtils.isSet(underlyingLegSecurityID)) return true;
		if (FixUtils.isSet(underlyingLegSecurityIDSource)) return true;
		if (FixUtils.isSet(underlyingLegSecurityAltIDGrp.noUnderlyingLegSecurityAltID)) return true;
		if (FixUtils.isSet(underlyingLegCFICode)) return true;
		if (FixUtils.isSet(underlyingLegSecurityType)) return true;
		if (FixUtils.isSet(underlyingLegSecuritySubType)) return true;
		if (FixUtils.isSet(underlyingLegMaturityMonthYear)) return true;
		if (FixUtils.isSet(underlyingLegMaturityDate)) return true;
		if (FixUtils.isSet(underlyingLegMaturityTime)) return true;
		if (FixUtils.isSet(underlyingLegStrikePrice)) return true;
		if (FixUtils.isSet(underlyingLegOptAttribute)) return true;
		if (FixUtils.isSet(underlyingLegPutOrCall)) return true;
		if (FixUtils.isSet(underlyingLegSecurityExchange)) return true;
		if (FixUtils.isSet(underlyingLegSecurityDesc)) return true;
		return false;
	}
	@Override
	public void encode( ByteBuffer out )
	{
		if (FixUtils.isSet(underlyingLegSymbol)) FixUtils.putFixTag( out, FixTags.UNDERLYINGLEGSYMBOL_INT, underlyingLegSymbol, 0, Utils.lastIndexTrim(underlyingLegSymbol, (byte)0) );
		if (FixUtils.isSet(underlyingLegSymbolSfx)) FixUtils.putFixTag( out, FixTags.UNDERLYINGLEGSYMBOLSFX_INT, underlyingLegSymbolSfx, 0, Utils.lastIndexTrim(underlyingLegSymbolSfx, (byte)0) );
		if (FixUtils.isSet(underlyingLegSecurityID)) FixUtils.putFixTag( out, FixTags.UNDERLYINGLEGSECURITYID_INT, underlyingLegSecurityID, 0, Utils.lastIndexTrim(underlyingLegSecurityID, (byte)0) );
		if (FixUtils.isSet(underlyingLegSecurityIDSource)) FixUtils.putFixTag( out, FixTags.UNDERLYINGLEGSECURITYIDSOURCE_INT, underlyingLegSecurityIDSource, 0, Utils.lastIndexTrim(underlyingLegSecurityIDSource, (byte)0) );
		if (FixUtils.isSet(underlyingLegSecurityAltIDGrp.noUnderlyingLegSecurityAltID)) underlyingLegSecurityAltIDGrp.encode( out );
		if (FixUtils.isSet(underlyingLegCFICode)) FixUtils.putFixTag( out, FixTags.UNDERLYINGLEGCFICODE_INT, underlyingLegCFICode, 0, Utils.lastIndexTrim(underlyingLegCFICode, (byte)0) );
		if (FixUtils.isSet(underlyingLegSecurityType)) FixUtils.putFixTag( out, FixTags.UNDERLYINGLEGSECURITYTYPE_INT, underlyingLegSecurityType, 0, Utils.lastIndexTrim(underlyingLegSecurityType, (byte)0) );
		if (FixUtils.isSet(underlyingLegSecuritySubType)) FixUtils.putFixTag( out, FixTags.UNDERLYINGLEGSECURITYSUBTYPE_INT, underlyingLegSecuritySubType, 0, Utils.lastIndexTrim(underlyingLegSecuritySubType, (byte)0) );
		if (FixUtils.isSet(underlyingLegMaturityMonthYear)) FixUtils.putFixTag( out, FixTags.UNDERLYINGLEGMATURITYMONTHYEAR_INT, underlyingLegMaturityMonthYear);
		if (FixUtils.isSet(underlyingLegMaturityDate)) FixUtils.putFixTag( out, FixTags.UNDERLYINGLEGMATURITYDATE_INT, underlyingLegMaturityDate);
		if (FixUtils.isSet(underlyingLegMaturityTime)) FixUtils.putFixTag( out, FixTags.UNDERLYINGLEGMATURITYTIME_INT, underlyingLegMaturityTime);
		if (FixUtils.isSet(underlyingLegStrikePrice)) FixUtils.putFixFloatTag( out, FixTags.UNDERLYINGLEGSTRIKEPRICE_INT, underlyingLegStrikePrice);
		if (FixUtils.isSet(underlyingLegOptAttribute)) FixUtils.putFixTag( out, FixTags.UNDERLYINGLEGOPTATTRIBUTE_INT, underlyingLegOptAttribute );
		if (FixUtils.isSet(underlyingLegPutOrCall)) FixUtils.putFixTag( out, FixTags.UNDERLYINGLEGPUTORCALL_INT, underlyingLegPutOrCall);
		if (FixUtils.isSet(underlyingLegSecurityExchange)) FixUtils.putFixTag( out, FixTags.UNDERLYINGLEGSECURITYEXCHANGE_INT, underlyingLegSecurityExchange, 0, Utils.lastIndexTrim(underlyingLegSecurityExchange, (byte)0) );
		if (FixUtils.isSet(underlyingLegSecurityDesc)) FixUtils.putFixTag( out, FixTags.UNDERLYINGLEGSECURITYDESC_INT, underlyingLegSecurityDesc, 0, Utils.lastIndexTrim(underlyingLegSecurityDesc, (byte)0) );
	}
	/**
	 * If you use toString for any other purpose than administrative printout.
	 * You will end up in nifelheim!
	**/
	@Override
	public String toString() {
		char sep = '\n';
		if (Boolean.getBoolean("fix.useOneLiner")) sep = ( byte )0x01;

		String s = "";

			if (FixUtils.isSet(underlyingLegSymbol)) s += "UnderlyingLegSymbol(1330)=" + new String(underlyingLegSymbol) + sep;
			if (FixUtils.isSet(underlyingLegSymbolSfx)) s += "UnderlyingLegSymbolSfx(1331)=" + new String(underlyingLegSymbolSfx) + sep;
			if (FixUtils.isSet(underlyingLegSecurityID)) s += "UnderlyingLegSecurityID(1332)=" + new String(underlyingLegSecurityID) + sep;
			if (FixUtils.isSet(underlyingLegSecurityIDSource)) s += "UnderlyingLegSecurityIDSource(1333)=" + new String(underlyingLegSecurityIDSource) + sep;
			if (FixUtils.isSet(underlyingLegSecurityAltIDGrp.noUnderlyingLegSecurityAltID)) s += underlyingLegSecurityAltIDGrp.toString();
			if (FixUtils.isSet(underlyingLegCFICode)) s += "UnderlyingLegCFICode(1344)=" + new String(underlyingLegCFICode) + sep;
			if (FixUtils.isSet(underlyingLegSecurityType)) s += "UnderlyingLegSecurityType(1337)=" + new String(underlyingLegSecurityType) + sep;
			if (FixUtils.isSet(underlyingLegSecuritySubType)) s += "UnderlyingLegSecuritySubType(1338)=" + new String(underlyingLegSecuritySubType) + sep;
			if (FixUtils.isSet(underlyingLegMaturityMonthYear)) s += "UnderlyingLegMaturityMonthYear(1339)=" + new String(underlyingLegMaturityMonthYear) + sep;
			if (FixUtils.isSet(underlyingLegMaturityDate)) s += "UnderlyingLegMaturityDate(1345)=" + new String(underlyingLegMaturityDate) + sep;
			if (FixUtils.isSet(underlyingLegMaturityTime)) s += "UnderlyingLegMaturityTime(1405)=" + new String(underlyingLegMaturityTime) + sep;
			if (FixUtils.isSet(underlyingLegStrikePrice)) s += "UnderlyingLegStrikePrice(1340)=" + String.valueOf(underlyingLegStrikePrice) + sep;
			if (FixUtils.isSet(underlyingLegOptAttribute)) s += "UnderlyingLegOptAttribute(1391)=" + String.valueOf(underlyingLegOptAttribute) + sep;
			if (FixUtils.isSet(underlyingLegPutOrCall)) s += "UnderlyingLegPutOrCall(1343)=" + String.valueOf(underlyingLegPutOrCall) + sep;
			if (FixUtils.isSet(underlyingLegSecurityExchange)) s += "UnderlyingLegSecurityExchange(1341)=" + new String(underlyingLegSecurityExchange) + sep;
			if (FixUtils.isSet(underlyingLegSecurityDesc)) s += "UnderlyingLegSecurityDesc(1392)=" + new String(underlyingLegSecurityDesc) + sep;
		return s;

	}

	@Override
	public boolean equals(Object o) {
		if (! ( o instanceof FixUnderlyingLegInstrument)) return false;

			FixUnderlyingLegInstrument msg = (FixUnderlyingLegInstrument) o;

		if ( ! super.equals(msg) ) return false;

		if (!Utils.equals( underlyingLegSymbol, msg.underlyingLegSymbol)) return false;

		if (!Utils.equals( underlyingLegSymbolSfx, msg.underlyingLegSymbolSfx)) return false;

		if (!Utils.equals( underlyingLegSecurityID, msg.underlyingLegSecurityID)) return false;

		if (!Utils.equals( underlyingLegSecurityIDSource, msg.underlyingLegSecurityIDSource)) return false;

		if (!underlyingLegSecurityAltIDGrp.equals(msg.underlyingLegSecurityAltIDGrp)) return false;

		if (!Utils.equals( underlyingLegCFICode, msg.underlyingLegCFICode)) return false;

		if (!Utils.equals( underlyingLegSecurityType, msg.underlyingLegSecurityType)) return false;

		if (!Utils.equals( underlyingLegSecuritySubType, msg.underlyingLegSecuritySubType)) return false;

		if (!Utils.equals( underlyingLegMaturityMonthYear, msg.underlyingLegMaturityMonthYear)) return false;

		if (!( underlyingLegStrikePrice==msg.underlyingLegStrikePrice)) return false;

		if (!( underlyingLegOptAttribute==msg.underlyingLegOptAttribute)) return false;

		if (!( underlyingLegPutOrCall==msg.underlyingLegPutOrCall)) return false;

		if (!Utils.equals( underlyingLegSecurityExchange, msg.underlyingLegSecurityExchange)) return false;

		if (!Utils.equals( underlyingLegSecurityDesc, msg.underlyingLegSecurityDesc)) return false;

		return true;
	}
}
