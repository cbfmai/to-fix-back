package org.tomac.protocol.fix.messaging.fix50sp2.component;

// DO NOT EDIT!!!
// This file is generated by FixMessageGenerator.
// If you need additional functionality, put it in a helper class
// that does not live in this folder!!!  Any java file in this folder 
// will be deleted upon the next run of the FixMessageGenerator!

import java.nio.ByteBuffer;

import org.tomac.protocol.fix.FixUtils;
import org.tomac.protocol.fix.FixSessionException;
import org.tomac.protocol.fix.FixGarbledException;
import org.tomac.utils.Utils;
import org.tomac.protocol.fix.FixConstants;


import org.tomac.protocol.fix.messaging.fix50sp2.FixTags;
import org.tomac.protocol.fix.messaging.fix50sp2.FixMessageInfo.*;

public class FixPriceLimits implements FixComponent
{

	public long priceLimitType = 0;
	public long lowLimitPrice = 0;
	public long highLimitPrice = 0;
	public long tradingReferencePrice = 0;

	public FixPriceLimits() {
		super();

		this.clear();

	}

	@Override
	public void clear()
	{

		// clear out all the fields that aren't msgType

		priceLimitType = Long.MAX_VALUE;		
		lowLimitPrice = Long.MAX_VALUE;		
		highLimitPrice = Long.MAX_VALUE;		
		tradingReferencePrice = Long.MAX_VALUE;		
	}

	public void getAll(int id, ByteBuffer buf) throws FixSessionException, FixGarbledException
	{

		int startTagPosition = buf.position();

		int lastTagPosition = buf.position();
		do {
			ByteBuffer value;

			value = buf;

			switch( id ) {

			case FixTags.PRICELIMITTYPE_INT:
				priceLimitType = FixUtils.getTagIntValue( value );
				if (!PriceLimitType.isValid(priceLimitType) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + priceLimitType + ") for tag").getBytes(), id, new byte[0] );
				break;

			case FixTags.LOWLIMITPRICE_INT:
				lowLimitPrice = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.HIGHLIMITPRICE_INT:
				highLimitPrice = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.TRADINGREFERENCEPRICE_INT:
				tradingReferencePrice = FixUtils.getTagFloatValue(value);
				break;

			// we will always endup with unknown tag, unread and return to upper layer in hierarchy
			default:
				id = checkRequiredTags();
				if (id > 0) throw new FixSessionException(SessionRejectReason.REQUIRED_TAG_MISSING, "Required tag missing".getBytes(), id, new byte[0] );

				buf.position( lastTagPosition );
				return;

			}

			lastTagPosition = buf.position();

		} while ( ( id = FixUtils.getTagId( buf ) ) > 0 );

		buf.position(startTagPosition);

	}

	private int checkRequiredTags() {
		int tag = -1;

		return tag;

	}
	@Override
	public boolean isSet()
	{
		if (FixUtils.isSet(priceLimitType)) return true;
		if (FixUtils.isSet(lowLimitPrice)) return true;
		if (FixUtils.isSet(highLimitPrice)) return true;
		if (FixUtils.isSet(tradingReferencePrice)) return true;
		return false;
	}
	@Override
	public void encode( ByteBuffer out )
	{
		if (FixUtils.isSet(priceLimitType)) FixUtils.putFixTag( out, FixTags.PRICELIMITTYPE_INT, priceLimitType);
		if (FixUtils.isSet(lowLimitPrice)) FixUtils.putFixFloatTag( out, FixTags.LOWLIMITPRICE_INT, lowLimitPrice);
		if (FixUtils.isSet(highLimitPrice)) FixUtils.putFixFloatTag( out, FixTags.HIGHLIMITPRICE_INT, highLimitPrice);
		if (FixUtils.isSet(tradingReferencePrice)) FixUtils.putFixFloatTag( out, FixTags.TRADINGREFERENCEPRICE_INT, tradingReferencePrice);
	}
	/**
	 * If you use toString for any other purpose than administrative printout.
	 * You will end up in nifelheim!
	**/
	@Override
	public String toString() {
		char sep = '\n';
		if (Boolean.getBoolean("fix.useOneLiner")) sep = ( byte )0x01;

		String s = "";

			if (FixUtils.isSet(priceLimitType)) s += "PriceLimitType(1306)=" + String.valueOf(priceLimitType) + sep;
			if (FixUtils.isSet(lowLimitPrice)) s += "LowLimitPrice(1148)=" + String.valueOf(lowLimitPrice) + sep;
			if (FixUtils.isSet(highLimitPrice)) s += "HighLimitPrice(1149)=" + String.valueOf(highLimitPrice) + sep;
			if (FixUtils.isSet(tradingReferencePrice)) s += "TradingReferencePrice(1150)=" + String.valueOf(tradingReferencePrice) + sep;
		return s;

	}

	@Override
	public boolean equals(Object o) {
		if (! ( o instanceof FixPriceLimits)) return false;

			FixPriceLimits msg = (FixPriceLimits) o;

		if ( ! super.equals(msg) ) return false;

		if (!( priceLimitType==msg.priceLimitType)) return false;

		if (!( lowLimitPrice==msg.lowLimitPrice)) return false;

		if (!( highLimitPrice==msg.highLimitPrice)) return false;

		if (!( tradingReferencePrice==msg.tradingReferencePrice)) return false;

		return true;
	}
}
