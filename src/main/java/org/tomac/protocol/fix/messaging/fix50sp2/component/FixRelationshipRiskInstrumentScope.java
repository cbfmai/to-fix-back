package org.tomac.protocol.fix.messaging.fix50sp2.component;

// DO NOT EDIT!!!
// This file is generated by FixMessageGenerator.
// If you need additional functionality, put it in a helper class
// that does not live in this folder!!!  Any java file in this folder 
// will be deleted upon the next run of the FixMessageGenerator!

import java.nio.ByteBuffer;

import org.tomac.protocol.fix.FixUtils;
import org.tomac.protocol.fix.FixSessionException;
import org.tomac.protocol.fix.FixGarbledException;
import org.tomac.utils.Utils;
import org.tomac.protocol.fix.FixConstants;


import org.tomac.protocol.fix.messaging.fix50sp2.FixMessageInfo.SessionRejectReason;
import org.tomac.protocol.fix.messaging.fix50sp2.FixMessageInfo;
import org.tomac.protocol.fix.messaging.fix50sp2.FixTags;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixRelationshipRiskSecAltIDGrp;

public class FixRelationshipRiskInstrumentScope
{

	public int noRelationshipRiskInstruments;
	public RelationshipRiskInstrumentScope[] group;

	public void getAll(int noRelationshipRiskInstruments, ByteBuffer buf) throws FixSessionException, FixGarbledException {
		this.noRelationshipRiskInstruments = noRelationshipRiskInstruments;

		if (noRelationshipRiskInstruments < 1) throw new FixSessionException(SessionRejectReason.INCORRECT_NUMINGROUP_COUNT_FOR_REPEATING_GROUP, ("Incorrect num in group count " + noRelationshipRiskInstruments ).getBytes(), FixTags.NORELATIONSHIPRISKINSTRUMENTS_INT, new byte[0]);
		// this will leak memory if we grow the group
		if (group == null || group.length < noRelationshipRiskInstruments) {
			group = new RelationshipRiskInstrumentScope[noRelationshipRiskInstruments];

			for ( int i = 0; i < noRelationshipRiskInstruments; i++ ) group[i] = new RelationshipRiskInstrumentScope();
	}

		for ( int i = 0; i < noRelationshipRiskInstruments; i++ ) 
			group[i].getAllGroup(buf);
	}

	public void clear() {
		for (int i = 0; i<noRelationshipRiskInstruments; i++)
			group[i].clear();
	}
	public void encode(ByteBuffer out) {
		for (int i = 0; i<noRelationshipRiskInstruments; i++)
			group[i].encode(out);
	}
	public boolean isSet() {
		for (int i = 0; i<noRelationshipRiskInstruments; i++)
			if (group[i].isSet()) return true;
		return false;
	}

	@Override
	public boolean equals(Object o) {
		if (! ( o instanceof FixRelationshipRiskInstrumentScope)) return false;

		FixRelationshipRiskInstrumentScope msg = (FixRelationshipRiskInstrumentScope) o;

		for (int i = 0; i<noRelationshipRiskInstruments; i++)
			if (!group[i].equals(msg.group[i])) return false;
		return true;
	}

	@Override
	public String toString() {
		String s = "";
		for (int i = 0; i<noRelationshipRiskInstruments; i++)
			s += group[i].toString();
		return s;
	}

public class RelationshipRiskInstrumentScope implements FixComponent
{

	public long relationshipRiskInstrumentOperator = 0;
	public byte[] relationshipRiskSymbol;
	public byte[] relationshipRiskSymbolSfx;
	public byte[] relationshipRiskSecurityID;
	public byte[] relationshipRiskSecurityIDSource;
	public FixRelationshipRiskSecAltIDGrp relationshipRiskSecAltIDGrp;
	public long relationshipRiskProduct = 0;
	public byte[] relationshipRiskProductComplex;
	public byte[] relationshipRiskSecurityGroup;
	public byte[] relationshipRiskCFICode;
	public byte[] relationshipRiskSecurityType;
	public byte[] relationshipRiskSecuritySubType;
	public byte[] relationshipRiskMaturityMonthYear;
	public byte[] relationshipRiskMaturityTime;
	public byte[] relationshipRiskRestructuringType;
	public byte[] relationshipRiskSeniority;
	public long relationshipRiskPutOrCall = 0;
	public boolean relationshipRiskFlexibleIndicator = false;
	public long relationshipRiskCouponRate = 0;
	public byte[] relationshipRiskSecurityExchange;
	public byte[] relationshipRiskSecurityDesc;
	public long relationshipRiskEncodedSecurityDescLen = 0;
	public byte[] relationshipRiskEncodedSecurityDesc;
	public byte[] relationshipRiskInstrumentSettlType;
	public long relationshipRiskInstrumentMultiplier = 0;

	public RelationshipRiskInstrumentScope() {
		super();

		relationshipRiskSymbol = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		relationshipRiskSymbolSfx = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		relationshipRiskSecurityID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		relationshipRiskSecurityIDSource = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		relationshipRiskSecAltIDGrp = new FixRelationshipRiskSecAltIDGrp();
		relationshipRiskProductComplex = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		relationshipRiskSecurityGroup = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		relationshipRiskCFICode = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		relationshipRiskSecurityType = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		relationshipRiskSecuritySubType = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		relationshipRiskMaturityMonthYear = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		relationshipRiskMaturityTime = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		relationshipRiskRestructuringType = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		relationshipRiskSeniority = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		relationshipRiskSecurityExchange = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		relationshipRiskSecurityDesc = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		relationshipRiskEncodedSecurityDesc = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		relationshipRiskInstrumentSettlType = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		this.clear();

	}

	@Override
	public void clear()
	{

		// clear out all the fields that aren't msgType

		relationshipRiskInstrumentOperator = Long.MAX_VALUE;		
		Utils.fill( relationshipRiskSymbol, (byte)0 );
		Utils.fill( relationshipRiskSymbolSfx, (byte)0 );
		Utils.fill( relationshipRiskSecurityID, (byte)0 );
		Utils.fill( relationshipRiskSecurityIDSource, (byte)0 );
		relationshipRiskProduct = Long.MAX_VALUE;		
		Utils.fill( relationshipRiskProductComplex, (byte)0 );
		Utils.fill( relationshipRiskSecurityGroup, (byte)0 );
		Utils.fill( relationshipRiskCFICode, (byte)0 );
		Utils.fill( relationshipRiskSecurityType, (byte)0 );
		Utils.fill( relationshipRiskSecuritySubType, (byte)0 );
		Utils.fill( relationshipRiskMaturityMonthYear, (byte)0 );
		Utils.fill( relationshipRiskMaturityTime, (byte)0 );
		Utils.fill( relationshipRiskRestructuringType, (byte)0 );
		Utils.fill( relationshipRiskSeniority, (byte)0 );
		relationshipRiskPutOrCall = Long.MAX_VALUE;		
		relationshipRiskFlexibleIndicator = false;		
		relationshipRiskCouponRate = Long.MAX_VALUE;		
		Utils.fill( relationshipRiskSecurityExchange, (byte)0 );
		Utils.fill( relationshipRiskSecurityDesc, (byte)0 );
		relationshipRiskEncodedSecurityDescLen = Long.MAX_VALUE;		
		Utils.fill( relationshipRiskEncodedSecurityDesc, (byte)0 );
		Utils.fill( relationshipRiskInstrumentSettlType, (byte)0 );
		relationshipRiskInstrumentMultiplier = Long.MAX_VALUE;		
		relationshipRiskSecAltIDGrp.clear();
	}

	public void getAllGroup(ByteBuffer buf) throws FixSessionException, FixGarbledException
	{

		int startTagPosition = buf.position();

		int id = FixUtils.getTagId( buf );
		int lastTagPosition = buf.position();
			ByteBuffer value;

			value = buf;

			if(id == FixTags.RELATIONSHIPRISKINSTRUMENTOPERATOR_INT) {
				relationshipRiskInstrumentOperator = FixUtils.getTagIntValue( value );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.RELATIONSHIPRISKSYMBOL_INT) {
				relationshipRiskSymbol = FixUtils.getTagStringValue(value, relationshipRiskSymbol);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.RELATIONSHIPRISKSYMBOLSFX_INT) {
				relationshipRiskSymbolSfx = FixUtils.getTagStringValue(value, relationshipRiskSymbolSfx);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.RELATIONSHIPRISKSECURITYID_INT) {
				relationshipRiskSecurityID = FixUtils.getTagStringValue(value, relationshipRiskSecurityID);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.RELATIONSHIPRISKSECURITYIDSOURCE_INT) {
				relationshipRiskSecurityIDSource = FixUtils.getTagStringValue(value, relationshipRiskSecurityIDSource);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.NORELATIONSHIPRISKSECURITYALTID_INT) {
				int noRelationshipRiskSecurityAltID;
				noRelationshipRiskSecurityAltID = FixUtils.getTagIntValue( value );
				relationshipRiskSecAltIDGrp.getAll(noRelationshipRiskSecurityAltID, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.RELATIONSHIPRISKPRODUCT_INT) {
				relationshipRiskProduct = FixUtils.getTagIntValue( value );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.RELATIONSHIPRISKPRODUCTCOMPLEX_INT) {
				relationshipRiskProductComplex = FixUtils.getTagStringValue(value, relationshipRiskProductComplex);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.RELATIONSHIPRISKSECURITYGROUP_INT) {
				relationshipRiskSecurityGroup = FixUtils.getTagStringValue(value, relationshipRiskSecurityGroup);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.RELATIONSHIPRISKCFICODE_INT) {
				relationshipRiskCFICode = FixUtils.getTagStringValue(value, relationshipRiskCFICode);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.RELATIONSHIPRISKSECURITYTYPE_INT) {
				relationshipRiskSecurityType = FixUtils.getTagStringValue(value, relationshipRiskSecurityType);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.RELATIONSHIPRISKSECURITYSUBTYPE_INT) {
				relationshipRiskSecuritySubType = FixUtils.getTagStringValue(value, relationshipRiskSecuritySubType);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.RELATIONSHIPRISKMATURITYMONTHYEAR_INT) {
				relationshipRiskMaturityMonthYear = FixUtils.getTagStringValue(value, relationshipRiskMaturityMonthYear);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.RELATIONSHIPRISKMATURITYTIME_INT) {
				relationshipRiskMaturityTime = FixUtils.getTagStringValue(value, relationshipRiskMaturityTime);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.RELATIONSHIPRISKRESTRUCTURINGTYPE_INT) {
				relationshipRiskRestructuringType = FixUtils.getTagStringValue(value, relationshipRiskRestructuringType);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.RELATIONSHIPRISKSENIORITY_INT) {
				relationshipRiskSeniority = FixUtils.getTagStringValue(value, relationshipRiskSeniority);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.RELATIONSHIPRISKPUTORCALL_INT) {
				relationshipRiskPutOrCall = FixUtils.getTagIntValue( value );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.RELATIONSHIPRISKFLEXIBLEINDICATOR_INT) {
				relationshipRiskFlexibleIndicator = FixUtils.getTagBooleanValue( value );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.RELATIONSHIPRISKCOUPONRATE_INT) {
				relationshipRiskCouponRate = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.RELATIONSHIPRISKSECURITYEXCHANGE_INT) {
				relationshipRiskSecurityExchange = FixUtils.getTagStringValue(value, relationshipRiskSecurityExchange);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.RELATIONSHIPRISKSECURITYDESC_INT) {
				relationshipRiskSecurityDesc = FixUtils.getTagStringValue(value, relationshipRiskSecurityDesc);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.RELATIONSHIPRISKENCODEDSECURITYDESCLEN_INT) {
				relationshipRiskEncodedSecurityDescLen = FixUtils.getTagIntValue( value );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.RELATIONSHIPRISKENCODEDSECURITYDESC_INT) {
				relationshipRiskEncodedSecurityDesc = FixUtils.getTagStringValue(value, relationshipRiskEncodedSecurityDesc);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.RELATIONSHIPRISKINSTRUMENTSETTLTYPE_INT) {
				relationshipRiskInstrumentSettlType = FixUtils.getTagStringValue(value, relationshipRiskInstrumentSettlType);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.RELATIONSHIPRISKINSTRUMENTMULTIPLIER_INT) {
				relationshipRiskInstrumentMultiplier = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			id = checkRequiredTags();
				if (id > 0) throw new FixSessionException(SessionRejectReason.REQUIRED_TAG_MISSING, "Required tag missing".getBytes(), id, new byte[0] );

			buf.position( lastTagPosition );
			return;

	}

	private int checkRequiredTags() {
		int tag = -1;

		return tag;

	}
	@Override
	public boolean isSet()
	{
		if (FixUtils.isSet(relationshipRiskInstrumentOperator)) return true;
		if (FixUtils.isSet(relationshipRiskSymbol)) return true;
		if (FixUtils.isSet(relationshipRiskSymbolSfx)) return true;
		if (FixUtils.isSet(relationshipRiskSecurityID)) return true;
		if (FixUtils.isSet(relationshipRiskSecurityIDSource)) return true;
		if (FixUtils.isSet(relationshipRiskSecAltIDGrp.noRelationshipRiskSecurityAltID)) return true;
		if (FixUtils.isSet(relationshipRiskProduct)) return true;
		if (FixUtils.isSet(relationshipRiskProductComplex)) return true;
		if (FixUtils.isSet(relationshipRiskSecurityGroup)) return true;
		if (FixUtils.isSet(relationshipRiskCFICode)) return true;
		if (FixUtils.isSet(relationshipRiskSecurityType)) return true;
		if (FixUtils.isSet(relationshipRiskSecuritySubType)) return true;
		if (FixUtils.isSet(relationshipRiskMaturityMonthYear)) return true;
		if (FixUtils.isSet(relationshipRiskMaturityTime)) return true;
		if (FixUtils.isSet(relationshipRiskRestructuringType)) return true;
		if (FixUtils.isSet(relationshipRiskSeniority)) return true;
		if (FixUtils.isSet(relationshipRiskPutOrCall)) return true;
		if (FixUtils.isSet(relationshipRiskFlexibleIndicator)) return true;
		if (FixUtils.isSet(relationshipRiskCouponRate)) return true;
		if (FixUtils.isSet(relationshipRiskSecurityExchange)) return true;
		if (FixUtils.isSet(relationshipRiskSecurityDesc)) return true;
		if (FixUtils.isSet(relationshipRiskEncodedSecurityDescLen)) return true;
		if (FixUtils.isSet(relationshipRiskEncodedSecurityDesc)) return true;
		if (FixUtils.isSet(relationshipRiskInstrumentSettlType)) return true;
		if (FixUtils.isSet(relationshipRiskInstrumentMultiplier)) return true;
		return false;
	}
	@Override
	public void encode( ByteBuffer out )
	{
		if (FixUtils.isSet(relationshipRiskInstrumentOperator)) FixUtils.putFixTag( out, FixTags.RELATIONSHIPRISKINSTRUMENTOPERATOR_INT, relationshipRiskInstrumentOperator);
		if (FixUtils.isSet(relationshipRiskSymbol)) FixUtils.putFixTag( out, FixTags.RELATIONSHIPRISKSYMBOL_INT, relationshipRiskSymbol, 0, Utils.lastIndexTrim(relationshipRiskSymbol, (byte)0) );
		if (FixUtils.isSet(relationshipRiskSymbolSfx)) FixUtils.putFixTag( out, FixTags.RELATIONSHIPRISKSYMBOLSFX_INT, relationshipRiskSymbolSfx, 0, Utils.lastIndexTrim(relationshipRiskSymbolSfx, (byte)0) );
		if (FixUtils.isSet(relationshipRiskSecurityID)) FixUtils.putFixTag( out, FixTags.RELATIONSHIPRISKSECURITYID_INT, relationshipRiskSecurityID, 0, Utils.lastIndexTrim(relationshipRiskSecurityID, (byte)0) );
		if (FixUtils.isSet(relationshipRiskSecurityIDSource)) FixUtils.putFixTag( out, FixTags.RELATIONSHIPRISKSECURITYIDSOURCE_INT, relationshipRiskSecurityIDSource, 0, Utils.lastIndexTrim(relationshipRiskSecurityIDSource, (byte)0) );
		if (FixUtils.isSet(relationshipRiskSecAltIDGrp.noRelationshipRiskSecurityAltID)) relationshipRiskSecAltIDGrp.encode( out );
		if (FixUtils.isSet(relationshipRiskProduct)) FixUtils.putFixTag( out, FixTags.RELATIONSHIPRISKPRODUCT_INT, relationshipRiskProduct);
		if (FixUtils.isSet(relationshipRiskProductComplex)) FixUtils.putFixTag( out, FixTags.RELATIONSHIPRISKPRODUCTCOMPLEX_INT, relationshipRiskProductComplex, 0, Utils.lastIndexTrim(relationshipRiskProductComplex, (byte)0) );
		if (FixUtils.isSet(relationshipRiskSecurityGroup)) FixUtils.putFixTag( out, FixTags.RELATIONSHIPRISKSECURITYGROUP_INT, relationshipRiskSecurityGroup, 0, Utils.lastIndexTrim(relationshipRiskSecurityGroup, (byte)0) );
		if (FixUtils.isSet(relationshipRiskCFICode)) FixUtils.putFixTag( out, FixTags.RELATIONSHIPRISKCFICODE_INT, relationshipRiskCFICode, 0, Utils.lastIndexTrim(relationshipRiskCFICode, (byte)0) );
		if (FixUtils.isSet(relationshipRiskSecurityType)) FixUtils.putFixTag( out, FixTags.RELATIONSHIPRISKSECURITYTYPE_INT, relationshipRiskSecurityType, 0, Utils.lastIndexTrim(relationshipRiskSecurityType, (byte)0) );
		if (FixUtils.isSet(relationshipRiskSecuritySubType)) FixUtils.putFixTag( out, FixTags.RELATIONSHIPRISKSECURITYSUBTYPE_INT, relationshipRiskSecuritySubType, 0, Utils.lastIndexTrim(relationshipRiskSecuritySubType, (byte)0) );
		if (FixUtils.isSet(relationshipRiskMaturityMonthYear)) FixUtils.putFixTag( out, FixTags.RELATIONSHIPRISKMATURITYMONTHYEAR_INT, relationshipRiskMaturityMonthYear);
		if (FixUtils.isSet(relationshipRiskMaturityTime)) FixUtils.putFixTag( out, FixTags.RELATIONSHIPRISKMATURITYTIME_INT, relationshipRiskMaturityTime);
		if (FixUtils.isSet(relationshipRiskRestructuringType)) FixUtils.putFixTag( out, FixTags.RELATIONSHIPRISKRESTRUCTURINGTYPE_INT, relationshipRiskRestructuringType, 0, Utils.lastIndexTrim(relationshipRiskRestructuringType, (byte)0) );
		if (FixUtils.isSet(relationshipRiskSeniority)) FixUtils.putFixTag( out, FixTags.RELATIONSHIPRISKSENIORITY_INT, relationshipRiskSeniority, 0, Utils.lastIndexTrim(relationshipRiskSeniority, (byte)0) );
		if (FixUtils.isSet(relationshipRiskPutOrCall)) FixUtils.putFixTag( out, FixTags.RELATIONSHIPRISKPUTORCALL_INT, relationshipRiskPutOrCall);
		if (FixUtils.isSet(relationshipRiskFlexibleIndicator)) FixUtils.putFixTag( out, FixTags.RELATIONSHIPRISKFLEXIBLEINDICATOR_INT, relationshipRiskFlexibleIndicator?(byte)'Y':(byte)'N' );
		if (FixUtils.isSet(relationshipRiskCouponRate)) FixUtils.putFixFloatTag( out, FixTags.RELATIONSHIPRISKCOUPONRATE_INT, relationshipRiskCouponRate);
		if (FixUtils.isSet(relationshipRiskSecurityExchange)) FixUtils.putFixTag( out, FixTags.RELATIONSHIPRISKSECURITYEXCHANGE_INT, relationshipRiskSecurityExchange, 0, Utils.lastIndexTrim(relationshipRiskSecurityExchange, (byte)0) );
		if (FixUtils.isSet(relationshipRiskSecurityDesc)) FixUtils.putFixTag( out, FixTags.RELATIONSHIPRISKSECURITYDESC_INT, relationshipRiskSecurityDesc, 0, Utils.lastIndexTrim(relationshipRiskSecurityDesc, (byte)0) );
		if (FixUtils.isSet(relationshipRiskEncodedSecurityDescLen)) FixUtils.putFixTag( out, FixTags.RELATIONSHIPRISKENCODEDSECURITYDESCLEN_INT, relationshipRiskEncodedSecurityDescLen);
		if (FixUtils.isSet(relationshipRiskEncodedSecurityDesc)) FixUtils.putFixTag( out, FixTags.RELATIONSHIPRISKENCODEDSECURITYDESC_INT, relationshipRiskEncodedSecurityDesc, 0, Utils.lastIndexTrim(relationshipRiskEncodedSecurityDesc, (byte)0) );
		if (FixUtils.isSet(relationshipRiskInstrumentSettlType)) FixUtils.putFixTag( out, FixTags.RELATIONSHIPRISKINSTRUMENTSETTLTYPE_INT, relationshipRiskInstrumentSettlType, 0, Utils.lastIndexTrim(relationshipRiskInstrumentSettlType, (byte)0) );
		if (FixUtils.isSet(relationshipRiskInstrumentMultiplier)) FixUtils.putFixFloatTag( out, FixTags.RELATIONSHIPRISKINSTRUMENTMULTIPLIER_INT, relationshipRiskInstrumentMultiplier);
	}
	/**
	 * If you use toString for any other purpose than administrative printout.
	 * You will end up in nifelheim!
	**/
	@Override
	public String toString() {
		char sep = '\n';
		if (Boolean.getBoolean("fix.useOneLiner")) sep = ( byte )0x01;

		String s = "";

			if (FixUtils.isSet(relationshipRiskInstrumentOperator)) s += "RelationshipRiskInstrumentOperator(1588)=" + String.valueOf(relationshipRiskInstrumentOperator) + sep;
			if (FixUtils.isSet(relationshipRiskSymbol)) s += "RelationshipRiskSymbol(1589)=" + new String(relationshipRiskSymbol) + sep;
			if (FixUtils.isSet(relationshipRiskSymbolSfx)) s += "RelationshipRiskSymbolSfx(1590)=" + new String(relationshipRiskSymbolSfx) + sep;
			if (FixUtils.isSet(relationshipRiskSecurityID)) s += "RelationshipRiskSecurityID(1591)=" + new String(relationshipRiskSecurityID) + sep;
			if (FixUtils.isSet(relationshipRiskSecurityIDSource)) s += "RelationshipRiskSecurityIDSource(1592)=" + new String(relationshipRiskSecurityIDSource) + sep;
			if (FixUtils.isSet(relationshipRiskSecAltIDGrp.noRelationshipRiskSecurityAltID)) s += relationshipRiskSecAltIDGrp.toString();
			if (FixUtils.isSet(relationshipRiskProduct)) s += "RelationshipRiskProduct(1596)=" + String.valueOf(relationshipRiskProduct) + sep;
			if (FixUtils.isSet(relationshipRiskProductComplex)) s += "RelationshipRiskProductComplex(1597)=" + new String(relationshipRiskProductComplex) + sep;
			if (FixUtils.isSet(relationshipRiskSecurityGroup)) s += "RelationshipRiskSecurityGroup(1598)=" + new String(relationshipRiskSecurityGroup) + sep;
			if (FixUtils.isSet(relationshipRiskCFICode)) s += "RelationshipRiskCFICode(1599)=" + new String(relationshipRiskCFICode) + sep;
			if (FixUtils.isSet(relationshipRiskSecurityType)) s += "RelationshipRiskSecurityType(1600)=" + new String(relationshipRiskSecurityType) + sep;
			if (FixUtils.isSet(relationshipRiskSecuritySubType)) s += "RelationshipRiskSecuritySubType(1601)=" + new String(relationshipRiskSecuritySubType) + sep;
			if (FixUtils.isSet(relationshipRiskMaturityMonthYear)) s += "RelationshipRiskMaturityMonthYear(1602)=" + new String(relationshipRiskMaturityMonthYear) + sep;
			if (FixUtils.isSet(relationshipRiskMaturityTime)) s += "RelationshipRiskMaturityTime(1603)=" + new String(relationshipRiskMaturityTime) + sep;
			if (FixUtils.isSet(relationshipRiskRestructuringType)) s += "RelationshipRiskRestructuringType(1604)=" + new String(relationshipRiskRestructuringType) + sep;
			if (FixUtils.isSet(relationshipRiskSeniority)) s += "RelationshipRiskSeniority(1605)=" + new String(relationshipRiskSeniority) + sep;
			if (FixUtils.isSet(relationshipRiskPutOrCall)) s += "RelationshipRiskPutOrCall(1606)=" + String.valueOf(relationshipRiskPutOrCall) + sep;
			if (FixUtils.isSet(relationshipRiskFlexibleIndicator)) s += "RelationshipRiskFlexibleIndicator(1607)=" + String.valueOf(relationshipRiskFlexibleIndicator) + sep;
			if (FixUtils.isSet(relationshipRiskCouponRate)) s += "RelationshipRiskCouponRate(1608)=" + String.valueOf(relationshipRiskCouponRate) + sep;
			if (FixUtils.isSet(relationshipRiskSecurityExchange)) s += "RelationshipRiskSecurityExchange(1609)=" + new String(relationshipRiskSecurityExchange) + sep;
			if (FixUtils.isSet(relationshipRiskSecurityDesc)) s += "RelationshipRiskSecurityDesc(1610)=" + new String(relationshipRiskSecurityDesc) + sep;
			if (FixUtils.isSet(relationshipRiskEncodedSecurityDescLen)) s += "RelationshipRiskEncodedSecurityDescLen(1618)=" + String.valueOf(relationshipRiskEncodedSecurityDescLen) + sep;
			if (FixUtils.isSet(relationshipRiskEncodedSecurityDesc)) s += "RelationshipRiskEncodedSecurityDesc(1619)=" + new String(relationshipRiskEncodedSecurityDesc) + sep;
			if (FixUtils.isSet(relationshipRiskInstrumentSettlType)) s += "RelationshipRiskInstrumentSettlType(1611)=" + new String(relationshipRiskInstrumentSettlType) + sep;
			if (FixUtils.isSet(relationshipRiskInstrumentMultiplier)) s += "RelationshipRiskInstrumentMultiplier(1612)=" + String.valueOf(relationshipRiskInstrumentMultiplier) + sep;
		return s;

	}

	@Override
	public boolean equals(Object o) {
		if (! ( o instanceof RelationshipRiskInstrumentScope)) return false;

			RelationshipRiskInstrumentScope msg = (RelationshipRiskInstrumentScope) o;

		if (!( relationshipRiskInstrumentOperator==msg.relationshipRiskInstrumentOperator)) return false;

		if (!Utils.equals( relationshipRiskSymbol, msg.relationshipRiskSymbol)) return false;

		if (!Utils.equals( relationshipRiskSymbolSfx, msg.relationshipRiskSymbolSfx)) return false;

		if (!Utils.equals( relationshipRiskSecurityID, msg.relationshipRiskSecurityID)) return false;

		if (!Utils.equals( relationshipRiskSecurityIDSource, msg.relationshipRiskSecurityIDSource)) return false;

		if (!relationshipRiskSecAltIDGrp.equals(msg.relationshipRiskSecAltIDGrp)) return false;

		if (!( relationshipRiskProduct==msg.relationshipRiskProduct)) return false;

		if (!Utils.equals( relationshipRiskProductComplex, msg.relationshipRiskProductComplex)) return false;

		if (!Utils.equals( relationshipRiskSecurityGroup, msg.relationshipRiskSecurityGroup)) return false;

		if (!Utils.equals( relationshipRiskCFICode, msg.relationshipRiskCFICode)) return false;

		if (!Utils.equals( relationshipRiskSecurityType, msg.relationshipRiskSecurityType)) return false;

		if (!Utils.equals( relationshipRiskSecuritySubType, msg.relationshipRiskSecuritySubType)) return false;

		if (!Utils.equals( relationshipRiskMaturityMonthYear, msg.relationshipRiskMaturityMonthYear)) return false;

		if (!Utils.equals( relationshipRiskRestructuringType, msg.relationshipRiskRestructuringType)) return false;

		if (!Utils.equals( relationshipRiskSeniority, msg.relationshipRiskSeniority)) return false;

		if (!( relationshipRiskPutOrCall==msg.relationshipRiskPutOrCall)) return false;

		if (!( relationshipRiskFlexibleIndicator==msg.relationshipRiskFlexibleIndicator)) return false;

		if (!( relationshipRiskCouponRate==msg.relationshipRiskCouponRate)) return false;

		if (!Utils.equals( relationshipRiskSecurityExchange, msg.relationshipRiskSecurityExchange)) return false;

		if (!Utils.equals( relationshipRiskSecurityDesc, msg.relationshipRiskSecurityDesc)) return false;

		if (!( relationshipRiskEncodedSecurityDescLen==msg.relationshipRiskEncodedSecurityDescLen)) return false;

		if (!Utils.equals( relationshipRiskEncodedSecurityDesc, msg.relationshipRiskEncodedSecurityDesc)) return false;

		if (!Utils.equals( relationshipRiskInstrumentSettlType, msg.relationshipRiskInstrumentSettlType)) return false;

		if (!( relationshipRiskInstrumentMultiplier==msg.relationshipRiskInstrumentMultiplier)) return false;

		return true;
	}
}
}
