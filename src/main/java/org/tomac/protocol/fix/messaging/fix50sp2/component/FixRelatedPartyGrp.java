package org.tomac.protocol.fix.messaging.fix50sp2.component;

// DO NOT EDIT!!!
// This file is generated by FixMessageGenerator.
// If you need additional functionality, put it in a helper class
// that does not live in this folder!!!  Any java file in this folder 
// will be deleted upon the next run of the FixMessageGenerator!

import java.nio.ByteBuffer;

import org.tomac.protocol.fix.FixUtils;
import org.tomac.protocol.fix.FixSessionException;
import org.tomac.protocol.fix.FixGarbledException;
import org.tomac.utils.Utils;
import org.tomac.protocol.fix.FixConstants;


import org.tomac.protocol.fix.messaging.fix50sp2.FixMessageInfo;
import org.tomac.protocol.fix.messaging.fix50sp2.FixTags;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixRelatedPartyDetail;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixPartyRelationships;

public class FixRelatedPartyGrp
{

	public int noRelatedPartyIDs;
	public RelatedPartyGrp[] group;

	public void getAll(int noRelatedPartyIDs, ByteBuffer buf) throws FixSessionException {
		this.noRelatedPartyIDs = noRelatedPartyIDs;

		if (noRelatedPartyIDs < 1) throw new FixSessionException("asdasd");
		// this will leak memory if we grow the group
		if (group == null || group.length < noRelatedPartyIDs) {
			group = new RelatedPartyGrp[noRelatedPartyIDs];

			for ( int i = 0; i < noRelatedPartyIDs; i++ ) group[i] = new RelatedPartyGrp();
	}

		for ( int i = 0; i < noRelatedPartyIDs; i++ ) 
			group[i].getAllGroup(buf);
	}

	public void clear() {
		for (int i = 0; i<noRelatedPartyIDs; i++)
			group[i].clear();
	}
	public void encode(ByteBuffer out) {
		for (int i = 0; i<noRelatedPartyIDs; i++)
			group[i].encode(out);
	}
	public boolean isSet() {
		for (int i = 0; i<noRelatedPartyIDs; i++)
			if (group[i].isSet()) return true;
		return false;
	}

	@Override
	public String toString() {
		String s = "";
		for (int i = 0; i<noRelatedPartyIDs; i++)
			s += group[i].toString();
		return s;
	}

public class RelatedPartyGrp implements FixComponent
{

	public FixRelatedPartyDetail relatedPartyDetail;
	public FixPartyRelationships partyRelationships;

	public RelatedPartyGrp() {
		super();

		relatedPartyDetail = new FixRelatedPartyDetail();
		partyRelationships = new FixPartyRelationships();
		this.clear();

	}

	@Override
	public void clear()
	{

		// clear out all the fields that aren't msgType

		relatedPartyDetail.clear();
		partyRelationships.clear();
	}

	public void getAllGroup(ByteBuffer buf) throws FixSessionException
	{

		int startTagPosition = buf.position();

		int id = FixUtils.getTagId( buf );
		int lastTagPosition = buf.position();
			ByteBuffer value;

			value = buf;

			if(id == FixTags.RELATEDPARTYID_INT) {
				relatedPartyDetail.getAll(FixTags.RELATEDPARTYID_INT, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.NOPARTYRELATIONSHIPS_INT) {
				partyRelationships.getAll(FixTags.NOPARTYRELATIONSHIPS_INT, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			id = checkRequiredTags();
			if (id > 0) throw new FixSessionException(buf, "Required tag missing: " + id );

			buf.position( lastTagPosition );
			return;

	}

	private int checkRequiredTags() {
		int tag = -1;

		return tag;

	}
	@Override
	public boolean isSet()
	{
		if (FixUtils.isSet(relatedPartyDetail.relatedPartyID)) return true;
		if (FixUtils.isSet(partyRelationships.noPartyRelationships)) return true;
		return false;
	}
	@Override
	public void encode( ByteBuffer out )
	{
		if (FixUtils.isSet(relatedPartyDetail.relatedPartyID)) relatedPartyDetail.encode( out );
		if (FixUtils.isSet(partyRelationships.noPartyRelationships)) partyRelationships.encode( out );
	}
	/**
	 * If you use toString for any other purpose than administrative printout.
	 * You will end up in nifelheim!
	**/
	@Override
	public String toString() {
		char sep = '\n';
		if (Boolean.getBoolean("fix.useOneLiner")) sep = ( byte )0x01;

		String s = "";

			if (FixUtils.isSet(relatedPartyDetail.relatedPartyID)) s += relatedPartyDetail.toString();
			if (FixUtils.isSet(partyRelationships.noPartyRelationships)) s += partyRelationships.toString();
		return s;

	}

	@Override
	public boolean equals(Object o) {
		if (! ( o instanceof RelatedPartyGrp)) return false;

			RelatedPartyGrp msg = (RelatedPartyGrp) o;

		if ( ! super.equals(msg) ) return false;

		if (!relatedPartyDetail.equals(msg.relatedPartyDetail)) return false;

		if (!partyRelationships.equals(msg.partyRelationships)) return false;

		return true;
	}
}
}
