package org.tomac.protocol.fix.messaging.fix50sp2.component;

// DO NOT EDIT!!!
// This file is generated by FixMessageGenerator.
// If you need additional functionality, put it in a helper class
// that does not live in this folder!!!  Any java file in this folder 
// will be deleted upon the next run of the FixMessageGenerator!

import java.nio.ByteBuffer;

import org.tomac.protocol.fix.FixUtils;
import org.tomac.protocol.fix.FixSessionException;
import org.tomac.protocol.fix.FixGarbledException;
import org.tomac.utils.Utils;
import org.tomac.protocol.fix.FixConstants;


import org.tomac.protocol.fix.messaging.fix50sp2.FixMessageInfo.SessionRejectReason;
import org.tomac.protocol.fix.messaging.fix50sp2.FixMessageInfo;
import org.tomac.protocol.fix.messaging.fix50sp2.FixTags;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixParties;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixSettlInstructionsData;

public class FixSettlInstGrp
{

	public int noSettlInst;
	public SettlInstGrp[] group;

	public void getAll(int noSettlInst, ByteBuffer buf) throws FixSessionException, FixGarbledException {
		this.noSettlInst = noSettlInst;

		if (noSettlInst < 1) throw new FixSessionException(SessionRejectReason.INCORRECT_NUMINGROUP_COUNT_FOR_REPEATING_GROUP, ("Incorrect num in group count " + noSettlInst ).getBytes(), FixTags.NOSETTLINST_INT, new byte[0]);
		// this will leak memory if we grow the group
		if (group == null || group.length < noSettlInst) {
			group = new SettlInstGrp[noSettlInst];

			for ( int i = 0; i < noSettlInst; i++ ) group[i] = new SettlInstGrp();
	}

		for ( int i = 0; i < noSettlInst; i++ ) 
			group[i].getAllGroup(buf);
	}

	public void clear() {
		for (int i = 0; i<noSettlInst; i++)
			group[i].clear();
	}
	public void encode(ByteBuffer out) {
		for (int i = 0; i<noSettlInst; i++)
			group[i].encode(out);
	}
	public boolean isSet() {
		for (int i = 0; i<noSettlInst; i++)
			if (group[i].isSet()) return true;
		return false;
	}

	@Override
	public String toString() {
		String s = "";
		for (int i = 0; i<noSettlInst; i++)
			s += group[i].toString();
		return s;
	}

public class SettlInstGrp implements FixComponent
{

	public byte[] settlInstID;
	public byte settlInstTransType = (byte)' ';
	public byte[] settlInstRefID;
	public FixParties parties;
	public byte side = (byte)' ';
	public long product = 0;
	public byte[] securityType;
	public byte[] cFICode;
	public byte[] settlCurrency;
	public byte[] effectiveTime;
	public byte[] expireTime;
	public byte[] lastUpdateTime;
	public FixSettlInstructionsData settlInstructionsData;
	public long paymentMethod = 0;
	public byte[] paymentRef;
	public byte[] cardHolderName;
	public byte[] cardNumber;
	public byte[] cardStartDate;
	public byte[] cardExpDate;
	public byte[] cardIssNum;
	public byte[] paymentDate;
	public byte[] paymentRemitterID;

	public SettlInstGrp() {
		super();

		settlInstID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		settlInstRefID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		parties = new FixParties();
		securityType = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		cFICode = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		settlCurrency = new byte[FixUtils.CURRENCY_LENGTH];
		effectiveTime = new byte[FixUtils.UTCTIMESTAMP_LENGTH];
		expireTime = new byte[FixUtils.UTCTIMESTAMP_LENGTH];
		lastUpdateTime = new byte[FixUtils.UTCTIMESTAMP_LENGTH];
		settlInstructionsData = new FixSettlInstructionsData();
		paymentRef = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		cardHolderName = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		cardNumber = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		cardStartDate = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		cardExpDate = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		cardIssNum = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		paymentDate = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		paymentRemitterID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		this.clear();

	}

	@Override
	public void clear()
	{

		// clear out all the fields that aren't msgType

		Utils.fill( settlInstID, (byte)0 );
		settlInstTransType = Byte.MAX_VALUE;		
		Utils.fill( settlInstRefID, (byte)0 );
		side = Byte.MAX_VALUE;		
		product = Long.MAX_VALUE;		
		Utils.fill( securityType, (byte)0 );
		Utils.fill( cFICode, (byte)0 );
		Utils.fill( settlCurrency, (byte)0 );
		Utils.fill( effectiveTime, (byte)0 );
		Utils.fill( expireTime, (byte)0 );
		Utils.fill( lastUpdateTime, (byte)0 );
		paymentMethod = Long.MAX_VALUE;		
		Utils.fill( paymentRef, (byte)0 );
		Utils.fill( cardHolderName, (byte)0 );
		Utils.fill( cardNumber, (byte)0 );
		Utils.fill( cardStartDate, (byte)0 );
		Utils.fill( cardExpDate, (byte)0 );
		Utils.fill( cardIssNum, (byte)0 );
		Utils.fill( paymentDate, (byte)0 );
		Utils.fill( paymentRemitterID, (byte)0 );
		parties.clear();
		settlInstructionsData.clear();
	}

	public void getAllGroup(ByteBuffer buf) throws FixSessionException, FixGarbledException
	{

		int startTagPosition = buf.position();

		int id = FixUtils.getTagId( buf );
		int lastTagPosition = buf.position();
			ByteBuffer value;

			value = buf;

			if(id == FixTags.SETTLINSTID_INT) {
				settlInstID = FixUtils.getTagStringValue(value, settlInstID);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.SETTLINSTTRANSTYPE_INT) {
				settlInstTransType = FixUtils.getTagCharValue( value );
				if (!FixMessageInfo.SettlInstTransType.isValid(settlInstTransType) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + settlInstTransType + ") for tag").getBytes(), id, new byte[0] );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.SETTLINSTREFID_INT) {
				settlInstRefID = FixUtils.getTagStringValue(value, settlInstRefID);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.NOPARTYIDS_INT) {
				parties.getAll(FixTags.NOPARTYIDS_INT, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.SIDE_INT) {
				side = FixUtils.getTagCharValue( value );
				if (!FixMessageInfo.Side.isValid(side) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + side + ") for tag").getBytes(), id, new byte[0] );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.PRODUCT_INT) {
				product = FixUtils.getTagIntValue( value );
				if (!FixMessageInfo.Product.isValid(product) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + product + ") for tag").getBytes(), id, new byte[0] );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.SECURITYTYPE_INT) {
				securityType = FixUtils.getTagStringValue(value, securityType);
				if (!FixMessageInfo.SecurityType.isValid(securityType) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + securityType + ") for tag").getBytes(), id, new byte[0] );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.CFICODE_INT) {
				cFICode = FixUtils.getTagStringValue(value, cFICode);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.SETTLCURRENCY_INT) {
				settlCurrency = FixUtils.getTagStringValue(value, settlCurrency);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.EFFECTIVETIME_INT) {
				effectiveTime = FixUtils.getTagStringValue(value, effectiveTime);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.EXPIRETIME_INT) {
				expireTime = FixUtils.getTagStringValue(value, expireTime);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.LASTUPDATETIME_INT) {
				lastUpdateTime = FixUtils.getTagStringValue(value, lastUpdateTime);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.SETTLDELIVERYTYPE_INT) {
				settlInstructionsData.getAll(FixTags.SETTLDELIVERYTYPE_INT, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.PAYMENTMETHOD_INT) {
				paymentMethod = FixUtils.getTagIntValue( value );
				if (!FixMessageInfo.PaymentMethod.isValid(paymentMethod) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + paymentMethod + ") for tag").getBytes(), id, new byte[0] );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.PAYMENTREF_INT) {
				paymentRef = FixUtils.getTagStringValue(value, paymentRef);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.CARDHOLDERNAME_INT) {
				cardHolderName = FixUtils.getTagStringValue(value, cardHolderName);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.CARDNUMBER_INT) {
				cardNumber = FixUtils.getTagStringValue(value, cardNumber);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.CARDSTARTDATE_INT) {
				cardStartDate = FixUtils.getTagStringValue(value, cardStartDate);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.CARDEXPDATE_INT) {
				cardExpDate = FixUtils.getTagStringValue(value, cardExpDate);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.CARDISSNUM_INT) {
				cardIssNum = FixUtils.getTagStringValue(value, cardIssNum);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.PAYMENTDATE_INT) {
				paymentDate = FixUtils.getTagStringValue(value, paymentDate);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.PAYMENTREMITTERID_INT) {
				paymentRemitterID = FixUtils.getTagStringValue(value, paymentRemitterID);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			id = checkRequiredTags();
				if (id > 0) throw new FixSessionException(SessionRejectReason.REQUIRED_TAG_MISSING, "Required tag missing".getBytes(), id, new byte[0] );

			buf.position( lastTagPosition );
			return;

	}

	private int checkRequiredTags() {
		int tag = -1;

		return tag;

	}
	@Override
	public boolean isSet()
	{
		if (FixUtils.isSet(settlInstID)) return true;
		if (FixUtils.isSet(settlInstTransType)) return true;
		if (FixUtils.isSet(settlInstRefID)) return true;
		if (FixUtils.isSet(parties.noPartyIDs)) return true;
		if (FixUtils.isSet(side)) return true;
		if (FixUtils.isSet(product)) return true;
		if (FixUtils.isSet(securityType)) return true;
		if (FixUtils.isSet(cFICode)) return true;
		if (FixUtils.isSet(settlCurrency)) return true;
		if (FixUtils.isSet(effectiveTime)) return true;
		if (FixUtils.isSet(expireTime)) return true;
		if (FixUtils.isSet(lastUpdateTime)) return true;
		if (FixUtils.isSet(settlInstructionsData.settlDeliveryType)) return true;
		if (FixUtils.isSet(paymentMethod)) return true;
		if (FixUtils.isSet(paymentRef)) return true;
		if (FixUtils.isSet(cardHolderName)) return true;
		if (FixUtils.isSet(cardNumber)) return true;
		if (FixUtils.isSet(cardStartDate)) return true;
		if (FixUtils.isSet(cardExpDate)) return true;
		if (FixUtils.isSet(cardIssNum)) return true;
		if (FixUtils.isSet(paymentDate)) return true;
		if (FixUtils.isSet(paymentRemitterID)) return true;
		return false;
	}
	@Override
	public void encode( ByteBuffer out )
	{
		if (FixUtils.isSet(settlInstID)) FixUtils.putFixTag( out, FixTags.SETTLINSTID_INT, settlInstID, 0, Utils.lastIndexTrim(settlInstID, (byte)0) );
		if (FixUtils.isSet(settlInstTransType)) FixUtils.putFixTag( out, FixTags.SETTLINSTTRANSTYPE_INT, settlInstTransType );
		if (FixUtils.isSet(settlInstRefID)) FixUtils.putFixTag( out, FixTags.SETTLINSTREFID_INT, settlInstRefID, 0, Utils.lastIndexTrim(settlInstRefID, (byte)0) );
		if (FixUtils.isSet(parties.noPartyIDs)) parties.encode( out );
		if (FixUtils.isSet(side)) FixUtils.putFixTag( out, FixTags.SIDE_INT, side );
		if (FixUtils.isSet(product)) FixUtils.putFixTag( out, FixTags.PRODUCT_INT, product);
		if (FixUtils.isSet(securityType)) FixUtils.putFixTag( out, FixTags.SECURITYTYPE_INT, securityType, 0, Utils.lastIndexTrim(securityType, (byte)0) );
		if (FixUtils.isSet(cFICode)) FixUtils.putFixTag( out, FixTags.CFICODE_INT, cFICode, 0, Utils.lastIndexTrim(cFICode, (byte)0) );
		if (FixUtils.isSet(settlCurrency)) FixUtils.putFixTag( out, FixTags.SETTLCURRENCY_INT, settlCurrency, 0, Utils.lastIndexTrim(settlCurrency, (byte)0) );
		if (FixUtils.isSet(effectiveTime)) FixUtils.putFixTag( out, FixTags.EFFECTIVETIME_INT, effectiveTime);
		if (FixUtils.isSet(expireTime)) FixUtils.putFixTag( out, FixTags.EXPIRETIME_INT, expireTime);
		if (FixUtils.isSet(lastUpdateTime)) FixUtils.putFixTag( out, FixTags.LASTUPDATETIME_INT, lastUpdateTime);
		if (FixUtils.isSet(settlInstructionsData.settlDeliveryType)) settlInstructionsData.encode( out );
		if (FixUtils.isSet(paymentMethod)) FixUtils.putFixTag( out, FixTags.PAYMENTMETHOD_INT, paymentMethod);
		if (FixUtils.isSet(paymentRef)) FixUtils.putFixTag( out, FixTags.PAYMENTREF_INT, paymentRef, 0, Utils.lastIndexTrim(paymentRef, (byte)0) );
		if (FixUtils.isSet(cardHolderName)) FixUtils.putFixTag( out, FixTags.CARDHOLDERNAME_INT, cardHolderName, 0, Utils.lastIndexTrim(cardHolderName, (byte)0) );
		if (FixUtils.isSet(cardNumber)) FixUtils.putFixTag( out, FixTags.CARDNUMBER_INT, cardNumber, 0, Utils.lastIndexTrim(cardNumber, (byte)0) );
		if (FixUtils.isSet(cardStartDate)) FixUtils.putFixTag( out, FixTags.CARDSTARTDATE_INT, cardStartDate);
		if (FixUtils.isSet(cardExpDate)) FixUtils.putFixTag( out, FixTags.CARDEXPDATE_INT, cardExpDate);
		if (FixUtils.isSet(cardIssNum)) FixUtils.putFixTag( out, FixTags.CARDISSNUM_INT, cardIssNum, 0, Utils.lastIndexTrim(cardIssNum, (byte)0) );
		if (FixUtils.isSet(paymentDate)) FixUtils.putFixTag( out, FixTags.PAYMENTDATE_INT, paymentDate);
		if (FixUtils.isSet(paymentRemitterID)) FixUtils.putFixTag( out, FixTags.PAYMENTREMITTERID_INT, paymentRemitterID, 0, Utils.lastIndexTrim(paymentRemitterID, (byte)0) );
	}
	/**
	 * If you use toString for any other purpose than administrative printout.
	 * You will end up in nifelheim!
	**/
	@Override
	public String toString() {
		char sep = '\n';
		if (Boolean.getBoolean("fix.useOneLiner")) sep = ( byte )0x01;

		String s = "";

			if (FixUtils.isSet(settlInstID)) s += "SettlInstID(162)=" + new String(settlInstID) + sep;
			if (FixUtils.isSet(settlInstTransType)) s += "SettlInstTransType(163)=" + String.valueOf(settlInstTransType) + sep;
			if (FixUtils.isSet(settlInstRefID)) s += "SettlInstRefID(214)=" + new String(settlInstRefID) + sep;
			if (FixUtils.isSet(parties.noPartyIDs)) s += parties.toString();
			if (FixUtils.isSet(side)) s += "Side(54)=" + String.valueOf(side) + sep;
			if (FixUtils.isSet(product)) s += "Product(460)=" + String.valueOf(product) + sep;
			if (FixUtils.isSet(securityType)) s += "SecurityType(167)=" + new String(securityType) + sep;
			if (FixUtils.isSet(cFICode)) s += "CFICode(461)=" + new String(cFICode) + sep;
			if (FixUtils.isSet(settlCurrency)) s += "SettlCurrency(120)=" + new String(settlCurrency) + sep;
			if (FixUtils.isSet(effectiveTime)) s += "EffectiveTime(168)=" + new String(effectiveTime) + sep;
			if (FixUtils.isSet(expireTime)) s += "ExpireTime(126)=" + new String(expireTime) + sep;
			if (FixUtils.isSet(lastUpdateTime)) s += "LastUpdateTime(779)=" + new String(lastUpdateTime) + sep;
			if (FixUtils.isSet(settlInstructionsData.settlDeliveryType)) s += settlInstructionsData.toString();
			if (FixUtils.isSet(paymentMethod)) s += "PaymentMethod(492)=" + String.valueOf(paymentMethod) + sep;
			if (FixUtils.isSet(paymentRef)) s += "PaymentRef(476)=" + new String(paymentRef) + sep;
			if (FixUtils.isSet(cardHolderName)) s += "CardHolderName(488)=" + new String(cardHolderName) + sep;
			if (FixUtils.isSet(cardNumber)) s += "CardNumber(489)=" + new String(cardNumber) + sep;
			if (FixUtils.isSet(cardStartDate)) s += "CardStartDate(503)=" + new String(cardStartDate) + sep;
			if (FixUtils.isSet(cardExpDate)) s += "CardExpDate(490)=" + new String(cardExpDate) + sep;
			if (FixUtils.isSet(cardIssNum)) s += "CardIssNum(491)=" + new String(cardIssNum) + sep;
			if (FixUtils.isSet(paymentDate)) s += "PaymentDate(504)=" + new String(paymentDate) + sep;
			if (FixUtils.isSet(paymentRemitterID)) s += "PaymentRemitterID(505)=" + new String(paymentRemitterID) + sep;
		return s;

	}

	@Override
	public boolean equals(Object o) {
		if (! ( o instanceof SettlInstGrp)) return false;

			SettlInstGrp msg = (SettlInstGrp) o;

		if ( ! super.equals(msg) ) return false;

		if (!Utils.equals( settlInstID, msg.settlInstID)) return false;

		if (!( settlInstTransType==msg.settlInstTransType)) return false;

		if (!Utils.equals( settlInstRefID, msg.settlInstRefID)) return false;

		if (!parties.equals(msg.parties)) return false;

		if (!( side==msg.side)) return false;

		if (!( product==msg.product)) return false;

		if (!Utils.equals( securityType, msg.securityType)) return false;

		if (!Utils.equals( cFICode, msg.cFICode)) return false;

		if (!Utils.equals( settlCurrency, msg.settlCurrency)) return false;

		if (!settlInstructionsData.equals(msg.settlInstructionsData)) return false;

		if (!( paymentMethod==msg.paymentMethod)) return false;

		if (!Utils.equals( paymentRef, msg.paymentRef)) return false;

		if (!Utils.equals( cardHolderName, msg.cardHolderName)) return false;

		if (!Utils.equals( cardNumber, msg.cardNumber)) return false;

		if (!Utils.equals( cardIssNum, msg.cardIssNum)) return false;

		if (!Utils.equals( paymentRemitterID, msg.paymentRemitterID)) return false;

		return true;
	}
}
}
