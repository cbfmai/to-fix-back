package org.tomac.protocol.fix.messaging.fix50sp2.component;

// DO NOT EDIT!!!
// This file is generated by FixMessageGenerator.
// If you need additional functionality, put it in a helper class
// that does not live in this folder!!!  Any java file in this folder 
// will be deleted upon the next run of the FixMessageGenerator!

import java.nio.ByteBuffer;

import org.tomac.protocol.fix.FixUtils;
import org.tomac.protocol.fix.FixSessionException;
import org.tomac.protocol.fix.FixGarbledException;
import org.tomac.utils.Utils;
import org.tomac.protocol.fix.FixConstants;


import org.tomac.protocol.fix.messaging.fix50sp2.FixMessageInfo.SessionRejectReason;
import org.tomac.protocol.fix.messaging.fix50sp2.FixMessageInfo;
import org.tomac.protocol.fix.messaging.fix50sp2.FixTags;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixNstdPtys2SubGrp;

public class FixNestedParties2
{

	public int noNested2PartyIDs;
	public NestedParties2[] group;

	public void getAll(int noNested2PartyIDs, ByteBuffer buf) throws FixSessionException {
		this.noNested2PartyIDs = noNested2PartyIDs;

		if (noNested2PartyIDs < 1) throw new FixSessionException(SessionRejectReason.INCORRECT_NUMINGROUP_COUNT_FOR_REPEATING_GROUP, ("Incorrect num in group count " + noNested2PartyIDs ).getBytes(), FixTags.NONESTED2PARTYIDS_INT, new byte[0]);
		// this will leak memory if we grow the group
		if (group == null || group.length < noNested2PartyIDs) {
			group = new NestedParties2[noNested2PartyIDs];

			for ( int i = 0; i < noNested2PartyIDs; i++ ) group[i] = new NestedParties2();
	}

		for ( int i = 0; i < noNested2PartyIDs; i++ ) 
			group[i].getAllGroup(buf);
	}

	public void clear() {
		for (int i = 0; i<noNested2PartyIDs; i++)
			group[i].clear();
	}
	public void encode(ByteBuffer out) {
		for (int i = 0; i<noNested2PartyIDs; i++)
			group[i].encode(out);
	}
	public boolean isSet() {
		for (int i = 0; i<noNested2PartyIDs; i++)
			if (group[i].isSet()) return true;
		return false;
	}

	@Override
	public String toString() {
		String s = "";
		for (int i = 0; i<noNested2PartyIDs; i++)
			s += group[i].toString();
		return s;
	}

public class NestedParties2 implements FixComponent
{

	public byte[] nested2PartyID;
	public byte nested2PartyIDSource = (byte)' ';
	public long nested2PartyRole = 0;
	public FixNstdPtys2SubGrp nstdPtys2SubGrp;

	public NestedParties2() {
		super();

		nested2PartyID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		nstdPtys2SubGrp = new FixNstdPtys2SubGrp();
		this.clear();

	}

	@Override
	public void clear()
	{

		// clear out all the fields that aren't msgType

		Utils.fill( nested2PartyID, (byte)0 );
		nested2PartyIDSource = Byte.MAX_VALUE;		
		nested2PartyRole = Long.MAX_VALUE;		
		nstdPtys2SubGrp.clear();
	}

	public void getAllGroup(ByteBuffer buf) throws FixSessionException
	{

		int startTagPosition = buf.position();

		int id = FixUtils.getTagId( buf );
		int lastTagPosition = buf.position();
			ByteBuffer value;

			value = buf;

			if(id == FixTags.NESTED2PARTYID_INT) {
				nested2PartyID = FixUtils.getTagStringValue(value, nested2PartyID);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.NESTED2PARTYIDSOURCE_INT) {
				nested2PartyIDSource = FixUtils.getTagCharValue( value );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.NESTED2PARTYROLE_INT) {
				nested2PartyRole = FixUtils.getTagIntValue( value );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.NONESTED2PARTYSUBIDS_INT) {
				nstdPtys2SubGrp.getAll(FixTags.NONESTED2PARTYSUBIDS_INT, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			id = checkRequiredTags();
				if (id > 0) throw new FixSessionException(SessionRejectReason.REQUIRED_TAG_MISSING, "Required tag missing".getBytes(), id, new byte[0] );

			buf.position( lastTagPosition );
			return;

	}

	private int checkRequiredTags() {
		int tag = -1;

		return tag;

	}
	@Override
	public boolean isSet()
	{
		if (FixUtils.isSet(nested2PartyID)) return true;
		if (FixUtils.isSet(nested2PartyIDSource)) return true;
		if (FixUtils.isSet(nested2PartyRole)) return true;
		if (FixUtils.isSet(nstdPtys2SubGrp.noNested2PartySubIDs)) return true;
		return false;
	}
	@Override
	public void encode( ByteBuffer out )
	{
		if (FixUtils.isSet(nested2PartyID)) FixUtils.putFixTag( out, FixTags.NESTED2PARTYID_INT, nested2PartyID, 0, Utils.lastIndexTrim(nested2PartyID, (byte)0) );
		if (FixUtils.isSet(nested2PartyIDSource)) FixUtils.putFixTag( out, FixTags.NESTED2PARTYIDSOURCE_INT, nested2PartyIDSource );
		if (FixUtils.isSet(nested2PartyRole)) FixUtils.putFixTag( out, FixTags.NESTED2PARTYROLE_INT, nested2PartyRole);
		if (FixUtils.isSet(nstdPtys2SubGrp.noNested2PartySubIDs)) nstdPtys2SubGrp.encode( out );
	}
	/**
	 * If you use toString for any other purpose than administrative printout.
	 * You will end up in nifelheim!
	**/
	@Override
	public String toString() {
		char sep = '\n';
		if (Boolean.getBoolean("fix.useOneLiner")) sep = ( byte )0x01;

		String s = "";

			if (FixUtils.isSet(nested2PartyID)) s += "Nested2PartyID(757)=" + new String(nested2PartyID) + sep;
			if (FixUtils.isSet(nested2PartyIDSource)) s += "Nested2PartyIDSource(758)=" + String.valueOf(nested2PartyIDSource) + sep;
			if (FixUtils.isSet(nested2PartyRole)) s += "Nested2PartyRole(759)=" + String.valueOf(nested2PartyRole) + sep;
			if (FixUtils.isSet(nstdPtys2SubGrp.noNested2PartySubIDs)) s += nstdPtys2SubGrp.toString();
		return s;

	}

	@Override
	public boolean equals(Object o) {
		if (! ( o instanceof NestedParties2)) return false;

			NestedParties2 msg = (NestedParties2) o;

		if ( ! super.equals(msg) ) return false;

		if (!Utils.equals( nested2PartyID, msg.nested2PartyID)) return false;

		if (!( nested2PartyIDSource==msg.nested2PartyIDSource)) return false;

		if (!( nested2PartyRole==msg.nested2PartyRole)) return false;

		if (!nstdPtys2SubGrp.equals(msg.nstdPtys2SubGrp)) return false;

		return true;
	}
}
}
