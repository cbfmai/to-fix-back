package org.tomac.protocol.fix.messaging.fix50sp2;

// DO NOT EDIT!!!
// This file is generated by FixMessageGenerator.
// If you need additional functionality, put it in a helper class
// that does not live in this folder!!!  Any java file in this folder 
// will be deleted upon the next run of the FixMessageGenerator!

import java.nio.ByteBuffer;

import org.tomac.protocol.fix.FixUtils;
import org.tomac.protocol.fix.FixSessionException;
import org.tomac.utils.Utils;
import org.tomac.protocol.fix.FixConstants;



public class FixSecurityStatus extends FixMessage
{

	public byte[] securityStatusReqID;
	public byte[] currency;
	public byte[] marketID;
	public byte[] marketSegmentID;
	public byte[] tradingSessionID;
	public byte[] tradingSessionSubID;
	public boolean unsolicitedIndicator = false;
	public long securityTradingStatus = 0;
	public long securityTradingEvent = 0;
	public byte[] financialStatus;
	public byte[] corporateAction;
	public long haltReason = 0;
	public boolean inViewOfCommon = false;
	public boolean dueToRelated = false;
	public long mDBookType = 0;
	public long marketDepth = 0;
	public long buyVolume = 0;
	public long sellVolume = 0;
	public long highPx = 0;
	public long lowPx = 0;
	public long lastPx = 0;
	public byte[] transactTime;
	public long adjustment = 0;
	public long firstPx = 0;
	public byte[] text;
	public long encodedTextLen = 0;
	public byte[] encodedText;

	public FixSecurityStatus() {
		super();

		securityStatusReqID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		currency = new byte[FixUtils.CURRENCY_LENGTH];
		marketID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		marketSegmentID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		tradingSessionID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		tradingSessionSubID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		financialStatus = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		corporateAction = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		transactTime = new byte[FixUtils.UTCTIMESTAMP_LENGTH];
		text = new byte[FixUtils.FIX_MAX_STRING_TEXT_LENGTH];
		encodedText = new byte[FixUtils.FIX_MAX_STRING_TEXT_LENGTH];
		this.clear();

		msgType = MsgTypes.SECURITYSTATUS_INT;

	}

	@Override
	public void clear()
	{

		// clear out all the fields that aren't msgType

		Utils.fill( securityStatusReqID, (byte)0 );
		Utils.fill( currency, (byte)0 );
		Utils.fill( marketID, (byte)0 );
		Utils.fill( marketSegmentID, (byte)0 );
		Utils.fill( tradingSessionID, (byte)0 );
		Utils.fill( tradingSessionSubID, (byte)0 );
		unsolicitedIndicator = false;		
		securityTradingStatus = Long.MAX_VALUE;		
		securityTradingEvent = Long.MAX_VALUE;		
		Utils.fill( financialStatus, (byte)0 );
		Utils.fill( corporateAction, (byte)0 );
		haltReason = Long.MAX_VALUE;		
		inViewOfCommon = false;		
		dueToRelated = false;		
		mDBookType = Long.MAX_VALUE;		
		marketDepth = Long.MAX_VALUE;		
		buyVolume = Long.MAX_VALUE;		
		sellVolume = Long.MAX_VALUE;		
		highPx = Long.MAX_VALUE;		
		lowPx = Long.MAX_VALUE;		
		lastPx = Long.MAX_VALUE;		
		Utils.fill( transactTime, (byte)0 );
		adjustment = Long.MAX_VALUE;		
		firstPx = Long.MAX_VALUE;		
		Utils.fill( text, (byte)0 );
		encodedTextLen = Long.MAX_VALUE;		
		Utils.fill( encodedText, (byte)0 );
	}

	@Override
	public void getAll() throws FixSessionException, IllegalStateException
	{

		int startTagPosition = buf.position();

		super.getAll();

		// assumption message is full otherwise decode would return null
		// so negative id means that we are at the end of the message
		int id;
		int lastTagPosition = buf.position();
		while ( ( id = FixUtils.getTagId( buf ) ) > 0 )
		{
			ByteBuffer value;

			value = buf;

			switch( id ) {

			case FixTags.SECURITYSTATUSREQID_INT:
				securityStatusReqID = FixUtils.getTagStringValue(value, securityStatusReqID);
				break;

			case FixTags.CURRENCY_INT:
				currency = FixUtils.getTagStringValue(value, currency);
				break;

			case FixTags.MARKETID_INT:
				marketID = FixUtils.getTagStringValue(value, marketID);
				break;

			case FixTags.MARKETSEGMENTID_INT:
				marketSegmentID = FixUtils.getTagStringValue(value, marketSegmentID);
				break;

			case FixTags.TRADINGSESSIONID_INT:
				tradingSessionID = FixUtils.getTagStringValue(value, tradingSessionID);
				if (!TradingSessionID.isValid(tradingSessionID) ) throw new FixSessionException(buf, "Invalid enumerated value(" + tradingSessionID + ") for tag: " + id );
				break;

			case FixTags.TRADINGSESSIONSUBID_INT:
				tradingSessionSubID = FixUtils.getTagStringValue(value, tradingSessionSubID);
				if (!TradingSessionSubID.isValid(tradingSessionSubID) ) throw new FixSessionException(buf, "Invalid enumerated value(" + tradingSessionSubID + ") for tag: " + id );
				break;

			case FixTags.UNSOLICITEDINDICATOR_INT:
				unsolicitedIndicator = FixUtils.getTagBooleanValue( value );
				if (!UnsolicitedIndicator.isValid(unsolicitedIndicator) ) throw new FixSessionException(buf, "Invalid enumerated value(" + unsolicitedIndicator + ") for tag: " + id );
				break;

			case FixTags.SECURITYTRADINGSTATUS_INT:
				securityTradingStatus = FixUtils.getTagIntValue( value );
				if (!SecurityTradingStatus.isValid(securityTradingStatus) ) throw new FixSessionException(buf, "Invalid enumerated value(" + securityTradingStatus + ") for tag: " + id );
				break;

			case FixTags.SECURITYTRADINGEVENT_INT:
				securityTradingEvent = FixUtils.getTagIntValue( value );
				if (!SecurityTradingEvent.isValid(securityTradingEvent) ) throw new FixSessionException(buf, "Invalid enumerated value(" + securityTradingEvent + ") for tag: " + id );
				break;

			case FixTags.FINANCIALSTATUS_INT:
				financialStatus = FixUtils.getTagStringValue(value, financialStatus);
				if (!FinancialStatus.isValid(financialStatus) ) throw new FixSessionException(buf, "Invalid enumerated value(" + financialStatus + ") for tag: " + id );
				break;

			case FixTags.CORPORATEACTION_INT:
				corporateAction = FixUtils.getTagStringValue(value, corporateAction);
				if (!CorporateAction.isValid(corporateAction) ) throw new FixSessionException(buf, "Invalid enumerated value(" + corporateAction + ") for tag: " + id );
				break;

			case FixTags.HALTREASON_INT:
				haltReason = FixUtils.getTagIntValue( value );
				if (!HaltReason.isValid(haltReason) ) throw new FixSessionException(buf, "Invalid enumerated value(" + haltReason + ") for tag: " + id );
				break;

			case FixTags.INVIEWOFCOMMON_INT:
				inViewOfCommon = FixUtils.getTagBooleanValue( value );
				if (!InViewOfCommon.isValid(inViewOfCommon) ) throw new FixSessionException(buf, "Invalid enumerated value(" + inViewOfCommon + ") for tag: " + id );
				break;

			case FixTags.DUETORELATED_INT:
				dueToRelated = FixUtils.getTagBooleanValue( value );
				if (!DueToRelated.isValid(dueToRelated) ) throw new FixSessionException(buf, "Invalid enumerated value(" + dueToRelated + ") for tag: " + id );
				break;

			case FixTags.MDBOOKTYPE_INT:
				mDBookType = FixUtils.getTagIntValue( value );
				if (!MDBookType.isValid(mDBookType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + mDBookType + ") for tag: " + id );
				break;

			case FixTags.MARKETDEPTH_INT:
				marketDepth = FixUtils.getTagIntValue( value );
				break;

			case FixTags.BUYVOLUME_INT:
				buyVolume = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.SELLVOLUME_INT:
				sellVolume = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.HIGHPX_INT:
				highPx = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.LOWPX_INT:
				lowPx = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.LASTPX_INT:
				lastPx = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.TRANSACTTIME_INT:
				transactTime = FixUtils.getTagStringValue(value, transactTime);
				break;

			case FixTags.ADJUSTMENT_INT:
				adjustment = FixUtils.getTagIntValue( value );
				if (!Adjustment.isValid(adjustment) ) throw new FixSessionException(buf, "Invalid enumerated value(" + adjustment + ") for tag: " + id );
				break;

			case FixTags.FIRSTPX_INT:
				firstPx = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.TEXT_INT:
				text = FixUtils.getTagStringValue(value, text);
				break;

			case FixTags.ENCODEDTEXTLEN_INT:
				encodedTextLen = FixUtils.getTagIntValue( value );
				break;

			case FixTags.ENCODEDTEXT_INT:
				encodedText = FixUtils.getTagStringValue(value, encodedText);
				break;

			// for a message always get the checksum
			case FixTags.CHECKSUM_INT:
				checkSum = FixUtils.getTagIntValue( value );

				id = checkRequiredTags();
				if (id > 0) throw new FixSessionException(buf, "Required tag missing: " + id );

				return;

			default:
				throw new FixSessionException(buf, "Unknown tag: " + id );

			}

			lastTagPosition = buf.position();

		}

		buf.position(startTagPosition);

	}

	private int checkRequiredTags() {
		int tag = -1;

		return tag;

	}
	@Override
	public void encode( ByteBuffer out )
	{
		// Encode message. Set msgSeqNum and sendingTime and optional resend flags, before encoding. 

		int msgStart = out.position();

		out.put( BEGINSTRING_VALUE_WITH_TAG );

		int msgLengthValueStart = out.position() + 2 /* 9= */;

		// placeholder
		FixUtils.putFixTag(out, FixTags.BODYLENGTH_INT, FixConstants.MAX_MESSAGE_SIZE );

		int msgTypeStart = out.position();

		FixUtils.putFixTag( out, FixTags.MSGTYPE_INT, MsgTypes.SECURITYSTATUS);

		// encode all fields including the header

		if (FixUtils.isSet(applVerID)) FixUtils.putFixTag( out, FixTags.APPLVERID_INT, applVerID, 0, Utils.lastIndexTrim(applVerID, (byte)0) );
		if (FixUtils.isSet(cstmApplVerID)) FixUtils.putFixTag( out, FixTags.CSTMAPPLVERID_INT, cstmApplVerID, 0, Utils.lastIndexTrim(cstmApplVerID, (byte)0) );
		if (FixUtils.isSet(applExtID)) FixUtils.putFixTag( out, FixTags.APPLEXTID_INT, applExtID);
		FixUtils.putFixTag( out, FixTags.SENDERCOMPID_INT, senderCompID, 0, Utils.lastIndexTrim(senderCompID, (byte)0) );
		FixUtils.putFixTag( out, FixTags.TARGETCOMPID_INT, targetCompID, 0, Utils.lastIndexTrim(targetCompID, (byte)0) );
		if (FixUtils.isSet(onBehalfOfCompID)) FixUtils.putFixTag( out, FixTags.ONBEHALFOFCOMPID_INT, onBehalfOfCompID, 0, Utils.lastIndexTrim(onBehalfOfCompID, (byte)0) );
		if (FixUtils.isSet(deliverToCompID)) FixUtils.putFixTag( out, FixTags.DELIVERTOCOMPID_INT, deliverToCompID, 0, Utils.lastIndexTrim(deliverToCompID, (byte)0) );
		if (FixUtils.isSet(secureDataLen)) FixUtils.putFixTag( out, FixTags.SECUREDATALEN_INT, secureDataLen);
		if (FixUtils.isSet(secureData)) FixUtils.putFixTag( out, FixTags.SECUREDATA_INT, secureData, 0, Utils.lastIndexTrim(secureData, (byte)0) );
		FixUtils.putFixTag( out, FixTags.MSGSEQNUM_INT, msgSeqNum);
		if (FixUtils.isSet(senderSubID)) FixUtils.putFixTag( out, FixTags.SENDERSUBID_INT, senderSubID, 0, Utils.lastIndexTrim(senderSubID, (byte)0) );
		if (FixUtils.isSet(senderLocationID)) FixUtils.putFixTag( out, FixTags.SENDERLOCATIONID_INT, senderLocationID, 0, Utils.lastIndexTrim(senderLocationID, (byte)0) );
		if (FixUtils.isSet(targetSubID)) FixUtils.putFixTag( out, FixTags.TARGETSUBID_INT, targetSubID, 0, Utils.lastIndexTrim(targetSubID, (byte)0) );
		if (FixUtils.isSet(targetLocationID)) FixUtils.putFixTag( out, FixTags.TARGETLOCATIONID_INT, targetLocationID, 0, Utils.lastIndexTrim(targetLocationID, (byte)0) );
		if (FixUtils.isSet(onBehalfOfSubID)) FixUtils.putFixTag( out, FixTags.ONBEHALFOFSUBID_INT, onBehalfOfSubID, 0, Utils.lastIndexTrim(onBehalfOfSubID, (byte)0) );
		if (FixUtils.isSet(onBehalfOfLocationID)) FixUtils.putFixTag( out, FixTags.ONBEHALFOFLOCATIONID_INT, onBehalfOfLocationID, 0, Utils.lastIndexTrim(onBehalfOfLocationID, (byte)0) );
		if (FixUtils.isSet(deliverToSubID)) FixUtils.putFixTag( out, FixTags.DELIVERTOSUBID_INT, deliverToSubID, 0, Utils.lastIndexTrim(deliverToSubID, (byte)0) );
		if (FixUtils.isSet(deliverToLocationID)) FixUtils.putFixTag( out, FixTags.DELIVERTOLOCATIONID_INT, deliverToLocationID, 0, Utils.lastIndexTrim(deliverToLocationID, (byte)0) );
		if (FixUtils.isSet(possDupFlag)) FixUtils.putFixTag( out, FixTags.POSSDUPFLAG_INT, possDupFlag?(byte)'Y':(byte)'N' );
		if (FixUtils.isSet(possResend)) FixUtils.putFixTag( out, FixTags.POSSRESEND_INT, possResend?(byte)'Y':(byte)'N' );
		FixUtils.putFixTag( out, FixTags.SENDINGTIME_INT, sendingTime);
		if (FixUtils.isSet(origSendingTime)) FixUtils.putFixTag( out, FixTags.ORIGSENDINGTIME_INT, origSendingTime);
		if (FixUtils.isSet(xmlDataLen)) FixUtils.putFixTag( out, FixTags.XMLDATALEN_INT, xmlDataLen);
		if (FixUtils.isSet(xmlData)) FixUtils.putFixTag( out, FixTags.XMLDATA_INT, xmlData, 0, Utils.lastIndexTrim(xmlData, (byte)0) );
		if (FixUtils.isSet(messageEncoding)) FixUtils.putFixTag( out, FixTags.MESSAGEENCODING_INT, messageEncoding, 0, Utils.lastIndexTrim(messageEncoding, (byte)0) );
		if (FixUtils.isSet(lastMsgSeqNumProcessed)) FixUtils.putFixTag( out, FixTags.LASTMSGSEQNUMPROCESSED_INT, lastMsgSeqNumProcessed);

		if (FixUtils.isSet(securityStatusReqID)) FixUtils.putFixTag( out, FixTags.SECURITYSTATUSREQID_INT, securityStatusReqID, 0, Utils.lastIndexTrim(securityStatusReqID, (byte)0) );
		if (FixUtils.isSet(currency)) FixUtils.putFixTag( out, FixTags.CURRENCY_INT, currency, 0, Utils.lastIndexTrim(currency, (byte)0) );
		if (FixUtils.isSet(marketID)) FixUtils.putFixTag( out, FixTags.MARKETID_INT, marketID, 0, Utils.lastIndexTrim(marketID, (byte)0) );
		if (FixUtils.isSet(marketSegmentID)) FixUtils.putFixTag( out, FixTags.MARKETSEGMENTID_INT, marketSegmentID, 0, Utils.lastIndexTrim(marketSegmentID, (byte)0) );
		if (FixUtils.isSet(tradingSessionID)) FixUtils.putFixTag( out, FixTags.TRADINGSESSIONID_INT, tradingSessionID, 0, Utils.lastIndexTrim(tradingSessionID, (byte)0) );
		if (FixUtils.isSet(tradingSessionSubID)) FixUtils.putFixTag( out, FixTags.TRADINGSESSIONSUBID_INT, tradingSessionSubID, 0, Utils.lastIndexTrim(tradingSessionSubID, (byte)0) );
		if (FixUtils.isSet(unsolicitedIndicator)) FixUtils.putFixTag( out, FixTags.UNSOLICITEDINDICATOR_INT, unsolicitedIndicator?(byte)'Y':(byte)'N' );
		if (FixUtils.isSet(securityTradingStatus)) FixUtils.putFixTag( out, FixTags.SECURITYTRADINGSTATUS_INT, securityTradingStatus);
		if (FixUtils.isSet(securityTradingEvent)) FixUtils.putFixTag( out, FixTags.SECURITYTRADINGEVENT_INT, securityTradingEvent);
		if (FixUtils.isSet(financialStatus)) FixUtils.putFixTag( out, FixTags.FINANCIALSTATUS_INT, financialStatus, 0, Utils.lastIndexTrim(financialStatus, (byte)0) );
		if (FixUtils.isSet(corporateAction)) FixUtils.putFixTag( out, FixTags.CORPORATEACTION_INT, corporateAction, 0, Utils.lastIndexTrim(corporateAction, (byte)0) );
		if (FixUtils.isSet(haltReason)) FixUtils.putFixTag( out, FixTags.HALTREASON_INT, haltReason);
		if (FixUtils.isSet(inViewOfCommon)) FixUtils.putFixTag( out, FixTags.INVIEWOFCOMMON_INT, inViewOfCommon?(byte)'Y':(byte)'N' );
		if (FixUtils.isSet(dueToRelated)) FixUtils.putFixTag( out, FixTags.DUETORELATED_INT, dueToRelated?(byte)'Y':(byte)'N' );
		if (FixUtils.isSet(mDBookType)) FixUtils.putFixTag( out, FixTags.MDBOOKTYPE_INT, mDBookType);
		if (FixUtils.isSet(marketDepth)) FixUtils.putFixTag( out, FixTags.MARKETDEPTH_INT, marketDepth);
		if (FixUtils.isSet(buyVolume)) FixUtils.putFixFloatTag( out, FixTags.BUYVOLUME_INT, buyVolume);
		if (FixUtils.isSet(sellVolume)) FixUtils.putFixFloatTag( out, FixTags.SELLVOLUME_INT, sellVolume);
		if (FixUtils.isSet(highPx)) FixUtils.putFixFloatTag( out, FixTags.HIGHPX_INT, highPx);
		if (FixUtils.isSet(lowPx)) FixUtils.putFixFloatTag( out, FixTags.LOWPX_INT, lowPx);
		if (FixUtils.isSet(lastPx)) FixUtils.putFixFloatTag( out, FixTags.LASTPX_INT, lastPx);
		if (FixUtils.isSet(transactTime)) FixUtils.putFixTag( out, FixTags.TRANSACTTIME_INT, transactTime);
		if (FixUtils.isSet(adjustment)) FixUtils.putFixTag( out, FixTags.ADJUSTMENT_INT, adjustment);
		if (FixUtils.isSet(firstPx)) FixUtils.putFixFloatTag( out, FixTags.FIRSTPX_INT, firstPx);
		if (FixUtils.isSet(text)) FixUtils.putFixTag( out, FixTags.TEXT_INT, text, 0, Utils.lastIndexTrim(text, (byte)0) );
		if (FixUtils.isSet(encodedTextLen)) FixUtils.putFixTag( out, FixTags.ENCODEDTEXTLEN_INT, encodedTextLen);
		if (FixUtils.isSet(encodedText)) FixUtils.putFixTag( out, FixTags.ENCODEDTEXT_INT, encodedText, 0, Utils.lastIndexTrim(encodedText, (byte)0) );
		// the checksum at the end

		int checkSumStart = out.position();
		out.position( msgLengthValueStart );
		bodyLength = checkSumStart - msgTypeStart;
		Utils.longToNumeric( out, bodyLength, Utils.digits(FixConstants.MAX_MESSAGE_SIZE) );

		checkSum = FixUtils.computeChecksum( out, msgStart, checkSumStart );
		out.position( checkSumStart );
		FixUtils.putFixTag( out, FixTags.CHECKSUM_INT, checkSum );

		out.flip();

	}
	@Override		
	public void printBuffer(ByteBuffer out) {

		out.put(buf);

		out.flip();

	}

	/**
	 * If you use toString for any other purpose than administrative printout.
	 * You will end up in nifelheim!
	**/
	@Override
	public String toString() {
		char sep = '\n';
		if (Boolean.getBoolean("fix.useOneLiner")) sep = SOH;

		String s = "BeginString(8)=" + new String(BEGINSTRING_VALUE) + sep;
		s += "BodyLength(9)=" + bodyLength + sep;
		s += "MsgType(35)=" + new String(MsgTypes.SECURITYSTATUS) + sep;

		try {
			// print all fields including the header

			if (FixUtils.isSet(applVerID)) s += "ApplVerID(1128)=" + new String(applVerID) + sep;
			if (FixUtils.isSet(cstmApplVerID)) s += "CstmApplVerID(1129)=" + new String(cstmApplVerID) + sep;
			if (FixUtils.isSet(applExtID)) s += "ApplExtID(1156)=" + String.valueOf(applExtID) + sep;
			 s += "SenderCompID(49)=" + new String(senderCompID) + sep;
			 s += "TargetCompID(56)=" + new String(targetCompID) + sep;
			if (FixUtils.isSet(onBehalfOfCompID)) s += "OnBehalfOfCompID(115)=" + new String(onBehalfOfCompID) + sep;
			if (FixUtils.isSet(deliverToCompID)) s += "DeliverToCompID(128)=" + new String(deliverToCompID) + sep;
			if (FixUtils.isSet(secureDataLen)) s += "SecureDataLen(90)=" + String.valueOf(secureDataLen) + sep;
			if (FixUtils.isSet(secureData)) s += "SecureData(91)=" + new String(secureData) + sep;
			 s += "MsgSeqNum(34)=" + String.valueOf(msgSeqNum) + sep;
			if (FixUtils.isSet(senderSubID)) s += "SenderSubID(50)=" + new String(senderSubID) + sep;
			if (FixUtils.isSet(senderLocationID)) s += "SenderLocationID(142)=" + new String(senderLocationID) + sep;
			if (FixUtils.isSet(targetSubID)) s += "TargetSubID(57)=" + new String(targetSubID) + sep;
			if (FixUtils.isSet(targetLocationID)) s += "TargetLocationID(143)=" + new String(targetLocationID) + sep;
			if (FixUtils.isSet(onBehalfOfSubID)) s += "OnBehalfOfSubID(116)=" + new String(onBehalfOfSubID) + sep;
			if (FixUtils.isSet(onBehalfOfLocationID)) s += "OnBehalfOfLocationID(144)=" + new String(onBehalfOfLocationID) + sep;
			if (FixUtils.isSet(deliverToSubID)) s += "DeliverToSubID(129)=" + new String(deliverToSubID) + sep;
			if (FixUtils.isSet(deliverToLocationID)) s += "DeliverToLocationID(145)=" + new String(deliverToLocationID) + sep;
			if (FixUtils.isSet(possDupFlag)) s += "PossDupFlag(43)=" + String.valueOf(possDupFlag) + sep;
			if (FixUtils.isSet(possResend)) s += "PossResend(97)=" + String.valueOf(possResend) + sep;
			 s += "SendingTime(52)=" + new String(sendingTime) + sep;
			if (FixUtils.isSet(origSendingTime)) s += "OrigSendingTime(122)=" + new String(origSendingTime) + sep;
			if (FixUtils.isSet(xmlDataLen)) s += "XmlDataLen(212)=" + String.valueOf(xmlDataLen) + sep;
			if (FixUtils.isSet(xmlData)) s += "XmlData(213)=" + new String(xmlData) + sep;
			if (FixUtils.isSet(messageEncoding)) s += "MessageEncoding(347)=" + new String(messageEncoding) + sep;
			if (FixUtils.isSet(lastMsgSeqNumProcessed)) s += "LastMsgSeqNumProcessed(369)=" + String.valueOf(lastMsgSeqNumProcessed) + sep;

			if (FixUtils.isSet(securityStatusReqID)) s += "SecurityStatusReqID(324)=" + new String(securityStatusReqID) + sep;
			if (FixUtils.isSet(currency)) s += "Currency(15)=" + new String(currency) + sep;
			if (FixUtils.isSet(marketID)) s += "MarketID(1301)=" + new String(marketID) + sep;
			if (FixUtils.isSet(marketSegmentID)) s += "MarketSegmentID(1300)=" + new String(marketSegmentID) + sep;
			if (FixUtils.isSet(tradingSessionID)) s += "TradingSessionID(336)=" + new String(tradingSessionID) + sep;
			if (FixUtils.isSet(tradingSessionSubID)) s += "TradingSessionSubID(625)=" + new String(tradingSessionSubID) + sep;
			if (FixUtils.isSet(unsolicitedIndicator)) s += "UnsolicitedIndicator(325)=" + String.valueOf(unsolicitedIndicator) + sep;
			if (FixUtils.isSet(securityTradingStatus)) s += "SecurityTradingStatus(326)=" + String.valueOf(securityTradingStatus) + sep;
			if (FixUtils.isSet(securityTradingEvent)) s += "SecurityTradingEvent(1174)=" + String.valueOf(securityTradingEvent) + sep;
			if (FixUtils.isSet(financialStatus)) s += "FinancialStatus(291)=" + new String(financialStatus) + sep;
			if (FixUtils.isSet(corporateAction)) s += "CorporateAction(292)=" + new String(corporateAction) + sep;
			if (FixUtils.isSet(haltReason)) s += "HaltReason(327)=" + String.valueOf(haltReason) + sep;
			if (FixUtils.isSet(inViewOfCommon)) s += "InViewOfCommon(328)=" + String.valueOf(inViewOfCommon) + sep;
			if (FixUtils.isSet(dueToRelated)) s += "DueToRelated(329)=" + String.valueOf(dueToRelated) + sep;
			if (FixUtils.isSet(mDBookType)) s += "MDBookType(1021)=" + String.valueOf(mDBookType) + sep;
			if (FixUtils.isSet(marketDepth)) s += "MarketDepth(264)=" + String.valueOf(marketDepth) + sep;
			if (FixUtils.isSet(buyVolume)) s += "BuyVolume(330)=" + String.valueOf(buyVolume) + sep;
			if (FixUtils.isSet(sellVolume)) s += "SellVolume(331)=" + String.valueOf(sellVolume) + sep;
			if (FixUtils.isSet(highPx)) s += "HighPx(332)=" + String.valueOf(highPx) + sep;
			if (FixUtils.isSet(lowPx)) s += "LowPx(333)=" + String.valueOf(lowPx) + sep;
			if (FixUtils.isSet(lastPx)) s += "LastPx(31)=" + String.valueOf(lastPx) + sep;
			if (FixUtils.isSet(transactTime)) s += "TransactTime(60)=" + new String(transactTime) + sep;
			if (FixUtils.isSet(adjustment)) s += "Adjustment(334)=" + String.valueOf(adjustment) + sep;
			if (FixUtils.isSet(firstPx)) s += "FirstPx(1025)=" + String.valueOf(firstPx) + sep;
			if (FixUtils.isSet(text)) s += "Text(58)=" + new String(text) + sep;
			if (FixUtils.isSet(encodedTextLen)) s += "EncodedTextLen(354)=" + String.valueOf(encodedTextLen) + sep;
			if (FixUtils.isSet(encodedText)) s += "EncodedText(355)=" + new String(encodedText) + sep;

			s += "checkSum(10)=" + String.valueOf(checkSum) + sep;

		} catch(Exception e) {  };

		return s;
	}

	@Override
	public boolean equals(Object o) {
		if (! ( o instanceof FixSecurityStatus)) return false;

			FixSecurityStatus msg = (FixSecurityStatus) o;

		if ( ! super.equals(msg) ) return false;

		if (!Utils.equals( securityStatusReqID, msg.securityStatusReqID)) return false;

		if (!Utils.equals( currency, msg.currency)) return false;

		if (!Utils.equals( marketID, msg.marketID)) return false;

		if (!Utils.equals( marketSegmentID, msg.marketSegmentID)) return false;

		if (!Utils.equals( tradingSessionID, msg.tradingSessionID)) return false;

		if (!Utils.equals( tradingSessionSubID, msg.tradingSessionSubID)) return false;

		if (!( unsolicitedIndicator==msg.unsolicitedIndicator)) return false;

		if (!( securityTradingStatus==msg.securityTradingStatus)) return false;

		if (!( securityTradingEvent==msg.securityTradingEvent)) return false;

		if (!Utils.equals( financialStatus, msg.financialStatus)) return false;

		if (!Utils.equals( corporateAction, msg.corporateAction)) return false;

		if (!( haltReason==msg.haltReason)) return false;

		if (!( inViewOfCommon==msg.inViewOfCommon)) return false;

		if (!( dueToRelated==msg.dueToRelated)) return false;

		if (!( mDBookType==msg.mDBookType)) return false;

		if (!( marketDepth==msg.marketDepth)) return false;

		if (!( buyVolume==msg.buyVolume)) return false;

		if (!( sellVolume==msg.sellVolume)) return false;

		if (!( highPx==msg.highPx)) return false;

		if (!( lowPx==msg.lowPx)) return false;

		if (!( lastPx==msg.lastPx)) return false;

		if (!( adjustment==msg.adjustment)) return false;

		if (!( firstPx==msg.firstPx)) return false;

		if (!Utils.equals( text, msg.text)) return false;

		if (!( encodedTextLen==msg.encodedTextLen)) return false;

		if (!Utils.equals( encodedText, msg.encodedText)) return false;

		return true;
	}
}
