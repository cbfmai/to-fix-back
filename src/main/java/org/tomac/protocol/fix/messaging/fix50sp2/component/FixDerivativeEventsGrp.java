package org.tomac.protocol.fix.messaging.fix50sp2.component;

// DO NOT EDIT!!!
// This file is generated by FixMessageGenerator.
// If you need additional functionality, put it in a helper class
// that does not live in this folder!!!  Any java file in this folder 
// will be deleted upon the next run of the FixMessageGenerator!

import java.nio.ByteBuffer;

import org.tomac.protocol.fix.FixUtils;
import org.tomac.protocol.fix.FixSessionException;
import org.tomac.protocol.fix.FixGarbledException;
import org.tomac.utils.Utils;
import org.tomac.protocol.fix.FixConstants;


import org.tomac.protocol.fix.messaging.fix50sp2.FixMessageInfo;
import org.tomac.protocol.fix.messaging.fix50sp2.FixTags;

public class FixDerivativeEventsGrp
{

	public int noDerivativeEvents;
	public DerivativeEventsGrp[] group;

	public void getAll(int noDerivativeEvents, ByteBuffer buf) throws FixSessionException {
		this.noDerivativeEvents = noDerivativeEvents;

		if (noDerivativeEvents < 1) throw new FixSessionException("asdasd");
		// this will leak memory if we grow the group
		if (group == null || group.length < noDerivativeEvents) {
			group = new DerivativeEventsGrp[noDerivativeEvents];

			for ( int i = 0; i < noDerivativeEvents; i++ ) group[i] = new DerivativeEventsGrp();
	}

		for ( int i = 0; i < noDerivativeEvents; i++ ) 
			group[i].getAllGroup(buf);
	}

	public void clear() {
		for (int i = 0; i<noDerivativeEvents; i++)
			group[i].clear();
	}
	public void encode(ByteBuffer out) {
		for (int i = 0; i<noDerivativeEvents; i++)
			group[i].encode(out);
	}
	public boolean isSet() {
		for (int i = 0; i<noDerivativeEvents; i++)
			if (group[i].isSet()) return true;
		return false;
	}

	@Override
	public String toString() {
		String s = "";
		for (int i = 0; i<noDerivativeEvents; i++)
			s += group[i].toString();
		return s;
	}

public class DerivativeEventsGrp implements FixComponent
{

	public long derivativeEventType = 0;
	public byte[] derivativeEventDate;
	public byte[] derivativeEventTime;
	public long derivativeEventPx = 0;
	public byte[] derivativeEventText;

	public DerivativeEventsGrp() {
		super();

		derivativeEventDate = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		derivativeEventTime = new byte[FixUtils.UTCTIMESTAMP_LENGTH];
		derivativeEventText = new byte[FixUtils.FIX_MAX_STRING_TEXT_LENGTH];
		this.clear();

	}

	@Override
	public void clear()
	{

		// clear out all the fields that aren't msgType

		derivativeEventType = Long.MAX_VALUE;		
		Utils.fill( derivativeEventDate, (byte)0 );
		Utils.fill( derivativeEventTime, (byte)0 );
		derivativeEventPx = Long.MAX_VALUE;		
		Utils.fill( derivativeEventText, (byte)0 );
	}

	public void getAllGroup(ByteBuffer buf) throws FixSessionException
	{

		int startTagPosition = buf.position();

		int id = FixUtils.getTagId( buf );
		int lastTagPosition = buf.position();
			ByteBuffer value;

			value = buf;

			if(id == FixTags.DERIVATIVEEVENTTYPE_INT) {
				derivativeEventType = FixUtils.getTagIntValue( value );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.DERIVATIVEEVENTDATE_INT) {
				derivativeEventDate = FixUtils.getTagStringValue(value, derivativeEventDate);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.DERIVATIVEEVENTTIME_INT) {
				derivativeEventTime = FixUtils.getTagStringValue(value, derivativeEventTime);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.DERIVATIVEEVENTPX_INT) {
				derivativeEventPx = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.DERIVATIVEEVENTTEXT_INT) {
				derivativeEventText = FixUtils.getTagStringValue(value, derivativeEventText);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			id = checkRequiredTags();
			if (id > 0) throw new FixSessionException(buf, "Required tag missing: " + id );

			buf.position( lastTagPosition );
			return;

	}

	private int checkRequiredTags() {
		int tag = -1;

		return tag;

	}
	@Override
	public boolean isSet()
	{
		if (FixUtils.isSet(derivativeEventType)) return true;
		if (FixUtils.isSet(derivativeEventDate)) return true;
		if (FixUtils.isSet(derivativeEventTime)) return true;
		if (FixUtils.isSet(derivativeEventPx)) return true;
		if (FixUtils.isSet(derivativeEventText)) return true;
		return false;
	}
	@Override
	public void encode( ByteBuffer out )
	{
		if (FixUtils.isSet(derivativeEventType)) FixUtils.putFixTag( out, FixTags.DERIVATIVEEVENTTYPE_INT, derivativeEventType);
		if (FixUtils.isSet(derivativeEventDate)) FixUtils.putFixTag( out, FixTags.DERIVATIVEEVENTDATE_INT, derivativeEventDate);
		if (FixUtils.isSet(derivativeEventTime)) FixUtils.putFixTag( out, FixTags.DERIVATIVEEVENTTIME_INT, derivativeEventTime);
		if (FixUtils.isSet(derivativeEventPx)) FixUtils.putFixFloatTag( out, FixTags.DERIVATIVEEVENTPX_INT, derivativeEventPx);
		if (FixUtils.isSet(derivativeEventText)) FixUtils.putFixTag( out, FixTags.DERIVATIVEEVENTTEXT_INT, derivativeEventText, 0, Utils.lastIndexTrim(derivativeEventText, (byte)0) );
	}
	/**
	 * If you use toString for any other purpose than administrative printout.
	 * You will end up in nifelheim!
	**/
	@Override
	public String toString() {
		char sep = '\n';
		if (Boolean.getBoolean("fix.useOneLiner")) sep = ( byte )0x01;

		String s = "";

			if (FixUtils.isSet(derivativeEventType)) s += "DerivativeEventType(1287)=" + String.valueOf(derivativeEventType) + sep;
			if (FixUtils.isSet(derivativeEventDate)) s += "DerivativeEventDate(1288)=" + new String(derivativeEventDate) + sep;
			if (FixUtils.isSet(derivativeEventTime)) s += "DerivativeEventTime(1289)=" + new String(derivativeEventTime) + sep;
			if (FixUtils.isSet(derivativeEventPx)) s += "DerivativeEventPx(1290)=" + String.valueOf(derivativeEventPx) + sep;
			if (FixUtils.isSet(derivativeEventText)) s += "DerivativeEventText(1291)=" + new String(derivativeEventText) + sep;
		return s;

	}

	@Override
	public boolean equals(Object o) {
		if (! ( o instanceof DerivativeEventsGrp)) return false;

			DerivativeEventsGrp msg = (DerivativeEventsGrp) o;

		if ( ! super.equals(msg) ) return false;

		if (!( derivativeEventType==msg.derivativeEventType)) return false;

		if (!( derivativeEventPx==msg.derivativeEventPx)) return false;

		if (!Utils.equals( derivativeEventText, msg.derivativeEventText)) return false;

		return true;
	}
}
}
