package org.tomac.protocol.fix.messaging.fix50sp2;

// DO NOT EDIT!!!
// This file is generated by FixMessageGenerator.
// If you need additional functionality, put it in a helper class
// that does not live in this folder!!!  Any java file in this folder 
// will be deleted upon the next run of the FixMessageGenerator!

import java.nio.ByteBuffer;

import org.tomac.protocol.fix.FixUtils;
import org.tomac.protocol.fix.FixSessionException;
import org.tomac.utils.Utils;
import org.tomac.protocol.fix.FixConstants;



public class FixCrossOrderCancelReplaceRequest extends FixMessage
{

	public byte[] orderID;
	public byte[] crossID;
	public byte[] origCrossID;
	public byte[] hostCrossID;
	public long crossType = 0;
	public long crossPrioritization = 0;
	public byte[] settlType;
	public byte[] settlDate;
	public byte handlInst = (byte)' ';
	public byte[] execInst;
	public long minQty = 0;
	public long matchIncrement = 0;
	public long maxPriceLevels = 0;
	public long maxFloor = 0;
	public byte[] exDestination;
	public byte exDestinationIDSource = (byte)' ';
	public byte processCode = (byte)' ';
	public long prevClosePx = 0;
	public boolean locateReqd = false;
	public byte[] transactTime;
	public byte[] transBkdTime;
	public byte ordType = (byte)' ';
	public long priceType = 0;
	public long price = 0;
	public byte priceProtectionScope = (byte)' ';
	public long stopPx = 0;
	public byte[] currency;
	public byte[] complianceID;
	public byte[] iOIID;
	public byte[] quoteID;
	public byte timeInForce = (byte)' ';
	public byte[] effectiveTime;
	public byte[] expireDate;
	public byte[] expireTime;
	public long gTBookingInst = 0;
	public long maxShow = 0;
	public long targetStrategy = 0;
	public byte[] targetStrategyParameters;
	public long participationRate = 0;
	public byte cancellationRights = (byte)' ';
	public byte moneyLaunderingStatus = (byte)' ';
	public byte[] registID;
	public byte[] designation;

	public FixCrossOrderCancelReplaceRequest() {
		super();

		orderID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		crossID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		origCrossID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		hostCrossID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		settlType = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		settlDate = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		execInst = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		exDestination = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		transactTime = new byte[FixUtils.UTCTIMESTAMP_LENGTH];
		transBkdTime = new byte[FixUtils.UTCTIMESTAMP_LENGTH];
		currency = new byte[FixUtils.CURRENCY_LENGTH];
		complianceID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		iOIID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		quoteID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		effectiveTime = new byte[FixUtils.UTCTIMESTAMP_LENGTH];
		expireDate = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		expireTime = new byte[FixUtils.UTCTIMESTAMP_LENGTH];
		targetStrategyParameters = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		registID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		designation = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		this.clear();

		msgType = MsgTypes.CROSSORDERCANCELREPLACEREQUEST_INT;

	}

	@Override
	public void clear()
	{

		// clear out all the fields that aren't msgType

		Utils.fill( orderID, (byte)0 );
		Utils.fill( crossID, (byte)0 );
		Utils.fill( origCrossID, (byte)0 );
		Utils.fill( hostCrossID, (byte)0 );
		crossType = Long.MAX_VALUE;		
		crossPrioritization = Long.MAX_VALUE;		
		Utils.fill( settlType, (byte)0 );
		Utils.fill( settlDate, (byte)0 );
		handlInst = Byte.MAX_VALUE;		
		Utils.fill( execInst, (byte)0 );
		minQty = Long.MAX_VALUE;		
		matchIncrement = Long.MAX_VALUE;		
		maxPriceLevels = Long.MAX_VALUE;		
		maxFloor = Long.MAX_VALUE;		
		Utils.fill( exDestination, (byte)0 );
		exDestinationIDSource = Byte.MAX_VALUE;		
		processCode = Byte.MAX_VALUE;		
		prevClosePx = Long.MAX_VALUE;		
		locateReqd = false;		
		Utils.fill( transactTime, (byte)0 );
		Utils.fill( transBkdTime, (byte)0 );
		ordType = Byte.MAX_VALUE;		
		priceType = Long.MAX_VALUE;		
		price = Long.MAX_VALUE;		
		priceProtectionScope = Byte.MAX_VALUE;		
		stopPx = Long.MAX_VALUE;		
		Utils.fill( currency, (byte)0 );
		Utils.fill( complianceID, (byte)0 );
		Utils.fill( iOIID, (byte)0 );
		Utils.fill( quoteID, (byte)0 );
		timeInForce = Byte.MAX_VALUE;		
		Utils.fill( effectiveTime, (byte)0 );
		Utils.fill( expireDate, (byte)0 );
		Utils.fill( expireTime, (byte)0 );
		gTBookingInst = Long.MAX_VALUE;		
		maxShow = Long.MAX_VALUE;		
		targetStrategy = Long.MAX_VALUE;		
		Utils.fill( targetStrategyParameters, (byte)0 );
		participationRate = Long.MAX_VALUE;		
		cancellationRights = Byte.MAX_VALUE;		
		moneyLaunderingStatus = Byte.MAX_VALUE;		
		Utils.fill( registID, (byte)0 );
		Utils.fill( designation, (byte)0 );
	}

	@Override
	public void getAll() throws FixSessionException, IllegalStateException
	{

		int startTagPosition = buf.position();

		super.getAll();

		// assumption message is full otherwise decode would return null
		// so negative id means that we are at the end of the message
		int id;
		int lastTagPosition = buf.position();
		while ( ( id = FixUtils.getTagId( buf ) ) > 0 )
		{
			ByteBuffer value;

			value = buf;

			switch( id ) {

			case FixTags.ORDERID_INT:
				orderID = FixUtils.getTagStringValue(value, orderID);
				break;

			case FixTags.CROSSID_INT:
				crossID = FixUtils.getTagStringValue(value, crossID);
				break;

			case FixTags.ORIGCROSSID_INT:
				origCrossID = FixUtils.getTagStringValue(value, origCrossID);
				break;

			case FixTags.HOSTCROSSID_INT:
				hostCrossID = FixUtils.getTagStringValue(value, hostCrossID);
				break;

			case FixTags.CROSSTYPE_INT:
				crossType = FixUtils.getTagIntValue( value );
				if (!CrossType.isValid(crossType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + crossType + ") for tag: " + id );
				break;

			case FixTags.CROSSPRIORITIZATION_INT:
				crossPrioritization = FixUtils.getTagIntValue( value );
				if (!CrossPrioritization.isValid(crossPrioritization) ) throw new FixSessionException(buf, "Invalid enumerated value(" + crossPrioritization + ") for tag: " + id );
				break;

			case FixTags.SETTLTYPE_INT:
				settlType = FixUtils.getTagStringValue(value, settlType);
				if (!SettlType.isValid(settlType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + settlType + ") for tag: " + id );
				break;

			case FixTags.SETTLDATE_INT:
				settlDate = FixUtils.getTagStringValue(value, settlDate);
				break;

			case FixTags.HANDLINST_INT:
				handlInst = FixUtils.getTagCharValue( value );
				if (!HandlInst.isValid(handlInst) ) throw new FixSessionException(buf, "Invalid enumerated value(" + handlInst + ") for tag: " + id );
				break;

			case FixTags.EXECINST_INT:
				execInst = FixUtils.getTagStringValue(value, execInst);
				if (!ExecInst.isValid(execInst) ) throw new FixSessionException(buf, "Invalid enumerated value(" + execInst + ") for tag: " + id );
				break;

			case FixTags.MINQTY_INT:
				minQty = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.MATCHINCREMENT_INT:
				matchIncrement = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.MAXPRICELEVELS_INT:
				maxPriceLevels = FixUtils.getTagIntValue( value );
				break;

			case FixTags.MAXFLOOR_INT:
				maxFloor = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.EXDESTINATION_INT:
				exDestination = FixUtils.getTagStringValue(value, exDestination);
				break;

			case FixTags.EXDESTINATIONIDSOURCE_INT:
				exDestinationIDSource = FixUtils.getTagCharValue( value );
				if (!ExDestinationIDSource.isValid(exDestinationIDSource) ) throw new FixSessionException(buf, "Invalid enumerated value(" + exDestinationIDSource + ") for tag: " + id );
				break;

			case FixTags.PROCESSCODE_INT:
				processCode = FixUtils.getTagCharValue( value );
				if (!ProcessCode.isValid(processCode) ) throw new FixSessionException(buf, "Invalid enumerated value(" + processCode + ") for tag: " + id );
				break;

			case FixTags.PREVCLOSEPX_INT:
				prevClosePx = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.LOCATEREQD_INT:
				locateReqd = FixUtils.getTagBooleanValue( value );
				if (!LocateReqd.isValid(locateReqd) ) throw new FixSessionException(buf, "Invalid enumerated value(" + locateReqd + ") for tag: " + id );
				break;

			case FixTags.TRANSACTTIME_INT:
				transactTime = FixUtils.getTagStringValue(value, transactTime);
				break;

			case FixTags.TRANSBKDTIME_INT:
				transBkdTime = FixUtils.getTagStringValue(value, transBkdTime);
				break;

			case FixTags.ORDTYPE_INT:
				ordType = FixUtils.getTagCharValue( value );
				if (!OrdType.isValid(ordType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + ordType + ") for tag: " + id );
				break;

			case FixTags.PRICETYPE_INT:
				priceType = FixUtils.getTagIntValue( value );
				if (!PriceType.isValid(priceType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + priceType + ") for tag: " + id );
				break;

			case FixTags.PRICE_INT:
				price = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.PRICEPROTECTIONSCOPE_INT:
				priceProtectionScope = FixUtils.getTagCharValue( value );
				if (!PriceProtectionScope.isValid(priceProtectionScope) ) throw new FixSessionException(buf, "Invalid enumerated value(" + priceProtectionScope + ") for tag: " + id );
				break;

			case FixTags.STOPPX_INT:
				stopPx = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.CURRENCY_INT:
				currency = FixUtils.getTagStringValue(value, currency);
				break;

			case FixTags.COMPLIANCEID_INT:
				complianceID = FixUtils.getTagStringValue(value, complianceID);
				break;

			case FixTags.IOIID_INT:
				iOIID = FixUtils.getTagStringValue(value, iOIID);
				break;

			case FixTags.QUOTEID_INT:
				quoteID = FixUtils.getTagStringValue(value, quoteID);
				break;

			case FixTags.TIMEINFORCE_INT:
				timeInForce = FixUtils.getTagCharValue( value );
				if (!TimeInForce.isValid(timeInForce) ) throw new FixSessionException(buf, "Invalid enumerated value(" + timeInForce + ") for tag: " + id );
				break;

			case FixTags.EFFECTIVETIME_INT:
				effectiveTime = FixUtils.getTagStringValue(value, effectiveTime);
				break;

			case FixTags.EXPIREDATE_INT:
				expireDate = FixUtils.getTagStringValue(value, expireDate);
				break;

			case FixTags.EXPIRETIME_INT:
				expireTime = FixUtils.getTagStringValue(value, expireTime);
				break;

			case FixTags.GTBOOKINGINST_INT:
				gTBookingInst = FixUtils.getTagIntValue( value );
				if (!GTBookingInst.isValid(gTBookingInst) ) throw new FixSessionException(buf, "Invalid enumerated value(" + gTBookingInst + ") for tag: " + id );
				break;

			case FixTags.MAXSHOW_INT:
				maxShow = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.TARGETSTRATEGY_INT:
				targetStrategy = FixUtils.getTagIntValue( value );
				if (!TargetStrategy.isValid(targetStrategy) ) throw new FixSessionException(buf, "Invalid enumerated value(" + targetStrategy + ") for tag: " + id );
				break;

			case FixTags.TARGETSTRATEGYPARAMETERS_INT:
				targetStrategyParameters = FixUtils.getTagStringValue(value, targetStrategyParameters);
				break;

			case FixTags.PARTICIPATIONRATE_INT:
				participationRate = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.CANCELLATIONRIGHTS_INT:
				cancellationRights = FixUtils.getTagCharValue( value );
				if (!CancellationRights.isValid(cancellationRights) ) throw new FixSessionException(buf, "Invalid enumerated value(" + cancellationRights + ") for tag: " + id );
				break;

			case FixTags.MONEYLAUNDERINGSTATUS_INT:
				moneyLaunderingStatus = FixUtils.getTagCharValue( value );
				if (!MoneyLaunderingStatus.isValid(moneyLaunderingStatus) ) throw new FixSessionException(buf, "Invalid enumerated value(" + moneyLaunderingStatus + ") for tag: " + id );
				break;

			case FixTags.REGISTID_INT:
				registID = FixUtils.getTagStringValue(value, registID);
				break;

			case FixTags.DESIGNATION_INT:
				designation = FixUtils.getTagStringValue(value, designation);
				break;

			// for a message always get the checksum
			case FixTags.CHECKSUM_INT:
				checkSum = FixUtils.getTagIntValue( value );

				id = checkRequiredTags();
				if (id > 0) throw new FixSessionException(buf, "Required tag missing: " + id );

				return;

			default:
				throw new FixSessionException(buf, "Unknown tag: " + id );

			}

			lastTagPosition = buf.position();

		}

		buf.position(startTagPosition);

	}

	private int checkRequiredTags() {
		int tag = -1;

		if (! FixUtils.isSet(crossID) ) return FixTags.CROSSID_INT;
		if (! FixUtils.isSet(origCrossID) ) return FixTags.ORIGCROSSID_INT;
		if (! FixUtils.isSet(crossType) ) return FixTags.CROSSTYPE_INT;
		if (! FixUtils.isSet(crossPrioritization) ) return FixTags.CROSSPRIORITIZATION_INT;
		if (! FixUtils.isSet(transactTime) ) return FixTags.TRANSACTTIME_INT;
		if (! FixUtils.isSet(ordType) ) return FixTags.ORDTYPE_INT;
		return tag;

	}
	@Override
	public void encode( ByteBuffer out )
	{
		// Encode message. Set msgSeqNum and sendingTime and optional resend flags, before encoding. 

		int msgStart = out.position();

		out.put( BEGINSTRING_VALUE_WITH_TAG );

		int msgLengthValueStart = out.position() + 2 /* 9= */;

		// placeholder
		FixUtils.putFixTag(out, FixTags.BODYLENGTH_INT, FixConstants.MAX_MESSAGE_SIZE );

		int msgTypeStart = out.position();

		FixUtils.putFixTag( out, FixTags.MSGTYPE_INT, MsgTypes.CROSSORDERCANCELREPLACEREQUEST);

		// encode all fields including the header

		if (FixUtils.isSet(applVerID)) FixUtils.putFixTag( out, FixTags.APPLVERID_INT, applVerID, 0, Utils.lastIndexTrim(applVerID, (byte)0) );
		if (FixUtils.isSet(cstmApplVerID)) FixUtils.putFixTag( out, FixTags.CSTMAPPLVERID_INT, cstmApplVerID, 0, Utils.lastIndexTrim(cstmApplVerID, (byte)0) );
		if (FixUtils.isSet(applExtID)) FixUtils.putFixTag( out, FixTags.APPLEXTID_INT, applExtID);
		FixUtils.putFixTag( out, FixTags.SENDERCOMPID_INT, senderCompID, 0, Utils.lastIndexTrim(senderCompID, (byte)0) );
		FixUtils.putFixTag( out, FixTags.TARGETCOMPID_INT, targetCompID, 0, Utils.lastIndexTrim(targetCompID, (byte)0) );
		if (FixUtils.isSet(onBehalfOfCompID)) FixUtils.putFixTag( out, FixTags.ONBEHALFOFCOMPID_INT, onBehalfOfCompID, 0, Utils.lastIndexTrim(onBehalfOfCompID, (byte)0) );
		if (FixUtils.isSet(deliverToCompID)) FixUtils.putFixTag( out, FixTags.DELIVERTOCOMPID_INT, deliverToCompID, 0, Utils.lastIndexTrim(deliverToCompID, (byte)0) );
		if (FixUtils.isSet(secureDataLen)) FixUtils.putFixTag( out, FixTags.SECUREDATALEN_INT, secureDataLen);
		if (FixUtils.isSet(secureData)) FixUtils.putFixTag( out, FixTags.SECUREDATA_INT, secureData, 0, Utils.lastIndexTrim(secureData, (byte)0) );
		FixUtils.putFixTag( out, FixTags.MSGSEQNUM_INT, msgSeqNum);
		if (FixUtils.isSet(senderSubID)) FixUtils.putFixTag( out, FixTags.SENDERSUBID_INT, senderSubID, 0, Utils.lastIndexTrim(senderSubID, (byte)0) );
		if (FixUtils.isSet(senderLocationID)) FixUtils.putFixTag( out, FixTags.SENDERLOCATIONID_INT, senderLocationID, 0, Utils.lastIndexTrim(senderLocationID, (byte)0) );
		if (FixUtils.isSet(targetSubID)) FixUtils.putFixTag( out, FixTags.TARGETSUBID_INT, targetSubID, 0, Utils.lastIndexTrim(targetSubID, (byte)0) );
		if (FixUtils.isSet(targetLocationID)) FixUtils.putFixTag( out, FixTags.TARGETLOCATIONID_INT, targetLocationID, 0, Utils.lastIndexTrim(targetLocationID, (byte)0) );
		if (FixUtils.isSet(onBehalfOfSubID)) FixUtils.putFixTag( out, FixTags.ONBEHALFOFSUBID_INT, onBehalfOfSubID, 0, Utils.lastIndexTrim(onBehalfOfSubID, (byte)0) );
		if (FixUtils.isSet(onBehalfOfLocationID)) FixUtils.putFixTag( out, FixTags.ONBEHALFOFLOCATIONID_INT, onBehalfOfLocationID, 0, Utils.lastIndexTrim(onBehalfOfLocationID, (byte)0) );
		if (FixUtils.isSet(deliverToSubID)) FixUtils.putFixTag( out, FixTags.DELIVERTOSUBID_INT, deliverToSubID, 0, Utils.lastIndexTrim(deliverToSubID, (byte)0) );
		if (FixUtils.isSet(deliverToLocationID)) FixUtils.putFixTag( out, FixTags.DELIVERTOLOCATIONID_INT, deliverToLocationID, 0, Utils.lastIndexTrim(deliverToLocationID, (byte)0) );
		if (FixUtils.isSet(possDupFlag)) FixUtils.putFixTag( out, FixTags.POSSDUPFLAG_INT, possDupFlag?(byte)'Y':(byte)'N' );
		if (FixUtils.isSet(possResend)) FixUtils.putFixTag( out, FixTags.POSSRESEND_INT, possResend?(byte)'Y':(byte)'N' );
		FixUtils.putFixTag( out, FixTags.SENDINGTIME_INT, sendingTime);
		if (FixUtils.isSet(origSendingTime)) FixUtils.putFixTag( out, FixTags.ORIGSENDINGTIME_INT, origSendingTime);
		if (FixUtils.isSet(xmlDataLen)) FixUtils.putFixTag( out, FixTags.XMLDATALEN_INT, xmlDataLen);
		if (FixUtils.isSet(xmlData)) FixUtils.putFixTag( out, FixTags.XMLDATA_INT, xmlData, 0, Utils.lastIndexTrim(xmlData, (byte)0) );
		if (FixUtils.isSet(messageEncoding)) FixUtils.putFixTag( out, FixTags.MESSAGEENCODING_INT, messageEncoding, 0, Utils.lastIndexTrim(messageEncoding, (byte)0) );
		if (FixUtils.isSet(lastMsgSeqNumProcessed)) FixUtils.putFixTag( out, FixTags.LASTMSGSEQNUMPROCESSED_INT, lastMsgSeqNumProcessed);

		if (FixUtils.isSet(orderID)) FixUtils.putFixTag( out, FixTags.ORDERID_INT, orderID, 0, Utils.lastIndexTrim(orderID, (byte)0) );
		FixUtils.putFixTag( out, FixTags.CROSSID_INT, crossID, 0, Utils.lastIndexTrim(crossID, (byte)0) );
		FixUtils.putFixTag( out, FixTags.ORIGCROSSID_INT, origCrossID, 0, Utils.lastIndexTrim(origCrossID, (byte)0) );
		if (FixUtils.isSet(hostCrossID)) FixUtils.putFixTag( out, FixTags.HOSTCROSSID_INT, hostCrossID, 0, Utils.lastIndexTrim(hostCrossID, (byte)0) );
		FixUtils.putFixTag( out, FixTags.CROSSTYPE_INT, crossType);
		FixUtils.putFixTag( out, FixTags.CROSSPRIORITIZATION_INT, crossPrioritization);
		if (FixUtils.isSet(settlType)) FixUtils.putFixTag( out, FixTags.SETTLTYPE_INT, settlType, 0, Utils.lastIndexTrim(settlType, (byte)0) );
		if (FixUtils.isSet(settlDate)) FixUtils.putFixTag( out, FixTags.SETTLDATE_INT, settlDate);
		if (FixUtils.isSet(handlInst)) FixUtils.putFixTag( out, FixTags.HANDLINST_INT, handlInst );
		if (FixUtils.isSet(execInst)) FixUtils.putFixTag( out, FixTags.EXECINST_INT, execInst, 0, Utils.lastIndexTrim(execInst, (byte)0) );
		if (FixUtils.isSet(minQty)) FixUtils.putFixFloatTag( out, FixTags.MINQTY_INT, minQty);
		if (FixUtils.isSet(matchIncrement)) FixUtils.putFixFloatTag( out, FixTags.MATCHINCREMENT_INT, matchIncrement);
		if (FixUtils.isSet(maxPriceLevels)) FixUtils.putFixTag( out, FixTags.MAXPRICELEVELS_INT, maxPriceLevels);
		if (FixUtils.isSet(maxFloor)) FixUtils.putFixFloatTag( out, FixTags.MAXFLOOR_INT, maxFloor);
		if (FixUtils.isSet(exDestination)) FixUtils.putFixTag( out, FixTags.EXDESTINATION_INT, exDestination, 0, Utils.lastIndexTrim(exDestination, (byte)0) );
		if (FixUtils.isSet(exDestinationIDSource)) FixUtils.putFixTag( out, FixTags.EXDESTINATIONIDSOURCE_INT, exDestinationIDSource );
		if (FixUtils.isSet(processCode)) FixUtils.putFixTag( out, FixTags.PROCESSCODE_INT, processCode );
		if (FixUtils.isSet(prevClosePx)) FixUtils.putFixFloatTag( out, FixTags.PREVCLOSEPX_INT, prevClosePx);
		if (FixUtils.isSet(locateReqd)) FixUtils.putFixTag( out, FixTags.LOCATEREQD_INT, locateReqd?(byte)'Y':(byte)'N' );
		FixUtils.putFixTag( out, FixTags.TRANSACTTIME_INT, transactTime);
		if (FixUtils.isSet(transBkdTime)) FixUtils.putFixTag( out, FixTags.TRANSBKDTIME_INT, transBkdTime);
		FixUtils.putFixTag( out, FixTags.ORDTYPE_INT, ordType );
		if (FixUtils.isSet(priceType)) FixUtils.putFixTag( out, FixTags.PRICETYPE_INT, priceType);
		if (FixUtils.isSet(price)) FixUtils.putFixFloatTag( out, FixTags.PRICE_INT, price);
		if (FixUtils.isSet(priceProtectionScope)) FixUtils.putFixTag( out, FixTags.PRICEPROTECTIONSCOPE_INT, priceProtectionScope );
		if (FixUtils.isSet(stopPx)) FixUtils.putFixFloatTag( out, FixTags.STOPPX_INT, stopPx);
		if (FixUtils.isSet(currency)) FixUtils.putFixTag( out, FixTags.CURRENCY_INT, currency, 0, Utils.lastIndexTrim(currency, (byte)0) );
		if (FixUtils.isSet(complianceID)) FixUtils.putFixTag( out, FixTags.COMPLIANCEID_INT, complianceID, 0, Utils.lastIndexTrim(complianceID, (byte)0) );
		if (FixUtils.isSet(iOIID)) FixUtils.putFixTag( out, FixTags.IOIID_INT, iOIID, 0, Utils.lastIndexTrim(iOIID, (byte)0) );
		if (FixUtils.isSet(quoteID)) FixUtils.putFixTag( out, FixTags.QUOTEID_INT, quoteID, 0, Utils.lastIndexTrim(quoteID, (byte)0) );
		if (FixUtils.isSet(timeInForce)) FixUtils.putFixTag( out, FixTags.TIMEINFORCE_INT, timeInForce );
		if (FixUtils.isSet(effectiveTime)) FixUtils.putFixTag( out, FixTags.EFFECTIVETIME_INT, effectiveTime);
		if (FixUtils.isSet(expireDate)) FixUtils.putFixTag( out, FixTags.EXPIREDATE_INT, expireDate);
		if (FixUtils.isSet(expireTime)) FixUtils.putFixTag( out, FixTags.EXPIRETIME_INT, expireTime);
		if (FixUtils.isSet(gTBookingInst)) FixUtils.putFixTag( out, FixTags.GTBOOKINGINST_INT, gTBookingInst);
		if (FixUtils.isSet(maxShow)) FixUtils.putFixFloatTag( out, FixTags.MAXSHOW_INT, maxShow);
		if (FixUtils.isSet(targetStrategy)) FixUtils.putFixTag( out, FixTags.TARGETSTRATEGY_INT, targetStrategy);
		if (FixUtils.isSet(targetStrategyParameters)) FixUtils.putFixTag( out, FixTags.TARGETSTRATEGYPARAMETERS_INT, targetStrategyParameters, 0, Utils.lastIndexTrim(targetStrategyParameters, (byte)0) );
		if (FixUtils.isSet(participationRate)) FixUtils.putFixFloatTag( out, FixTags.PARTICIPATIONRATE_INT, participationRate);
		if (FixUtils.isSet(cancellationRights)) FixUtils.putFixTag( out, FixTags.CANCELLATIONRIGHTS_INT, cancellationRights );
		if (FixUtils.isSet(moneyLaunderingStatus)) FixUtils.putFixTag( out, FixTags.MONEYLAUNDERINGSTATUS_INT, moneyLaunderingStatus );
		if (FixUtils.isSet(registID)) FixUtils.putFixTag( out, FixTags.REGISTID_INT, registID, 0, Utils.lastIndexTrim(registID, (byte)0) );
		if (FixUtils.isSet(designation)) FixUtils.putFixTag( out, FixTags.DESIGNATION_INT, designation, 0, Utils.lastIndexTrim(designation, (byte)0) );
		// the checksum at the end

		int checkSumStart = out.position();
		out.position( msgLengthValueStart );
		bodyLength = checkSumStart - msgTypeStart;
		Utils.longToNumeric( out, bodyLength, Utils.digits(FixConstants.MAX_MESSAGE_SIZE) );

		checkSum = FixUtils.computeChecksum( out, msgStart, checkSumStart );
		out.position( checkSumStart );
		FixUtils.putFixTag( out, FixTags.CHECKSUM_INT, checkSum );

		out.flip();

	}
	@Override		
	public void printBuffer(ByteBuffer out) {

		out.put(buf);

		out.flip();

	}

	/**
	 * If you use toString for any other purpose than administrative printout.
	 * You will end up in nifelheim!
	**/
	@Override
	public String toString() {
		char sep = '\n';
		if (Boolean.getBoolean("fix.useOneLiner")) sep = SOH;

		String s = "BeginString(8)=" + new String(BEGINSTRING_VALUE) + sep;
		s += "BodyLength(9)=" + bodyLength + sep;
		s += "MsgType(35)=" + new String(MsgTypes.CROSSORDERCANCELREPLACEREQUEST) + sep;

		try {
			// print all fields including the header

			if (FixUtils.isSet(applVerID)) s += "ApplVerID(1128)=" + new String(applVerID) + sep;
			if (FixUtils.isSet(cstmApplVerID)) s += "CstmApplVerID(1129)=" + new String(cstmApplVerID) + sep;
			if (FixUtils.isSet(applExtID)) s += "ApplExtID(1156)=" + String.valueOf(applExtID) + sep;
			 s += "SenderCompID(49)=" + new String(senderCompID) + sep;
			 s += "TargetCompID(56)=" + new String(targetCompID) + sep;
			if (FixUtils.isSet(onBehalfOfCompID)) s += "OnBehalfOfCompID(115)=" + new String(onBehalfOfCompID) + sep;
			if (FixUtils.isSet(deliverToCompID)) s += "DeliverToCompID(128)=" + new String(deliverToCompID) + sep;
			if (FixUtils.isSet(secureDataLen)) s += "SecureDataLen(90)=" + String.valueOf(secureDataLen) + sep;
			if (FixUtils.isSet(secureData)) s += "SecureData(91)=" + new String(secureData) + sep;
			 s += "MsgSeqNum(34)=" + String.valueOf(msgSeqNum) + sep;
			if (FixUtils.isSet(senderSubID)) s += "SenderSubID(50)=" + new String(senderSubID) + sep;
			if (FixUtils.isSet(senderLocationID)) s += "SenderLocationID(142)=" + new String(senderLocationID) + sep;
			if (FixUtils.isSet(targetSubID)) s += "TargetSubID(57)=" + new String(targetSubID) + sep;
			if (FixUtils.isSet(targetLocationID)) s += "TargetLocationID(143)=" + new String(targetLocationID) + sep;
			if (FixUtils.isSet(onBehalfOfSubID)) s += "OnBehalfOfSubID(116)=" + new String(onBehalfOfSubID) + sep;
			if (FixUtils.isSet(onBehalfOfLocationID)) s += "OnBehalfOfLocationID(144)=" + new String(onBehalfOfLocationID) + sep;
			if (FixUtils.isSet(deliverToSubID)) s += "DeliverToSubID(129)=" + new String(deliverToSubID) + sep;
			if (FixUtils.isSet(deliverToLocationID)) s += "DeliverToLocationID(145)=" + new String(deliverToLocationID) + sep;
			if (FixUtils.isSet(possDupFlag)) s += "PossDupFlag(43)=" + String.valueOf(possDupFlag) + sep;
			if (FixUtils.isSet(possResend)) s += "PossResend(97)=" + String.valueOf(possResend) + sep;
			 s += "SendingTime(52)=" + new String(sendingTime) + sep;
			if (FixUtils.isSet(origSendingTime)) s += "OrigSendingTime(122)=" + new String(origSendingTime) + sep;
			if (FixUtils.isSet(xmlDataLen)) s += "XmlDataLen(212)=" + String.valueOf(xmlDataLen) + sep;
			if (FixUtils.isSet(xmlData)) s += "XmlData(213)=" + new String(xmlData) + sep;
			if (FixUtils.isSet(messageEncoding)) s += "MessageEncoding(347)=" + new String(messageEncoding) + sep;
			if (FixUtils.isSet(lastMsgSeqNumProcessed)) s += "LastMsgSeqNumProcessed(369)=" + String.valueOf(lastMsgSeqNumProcessed) + sep;

			if (FixUtils.isSet(orderID)) s += "OrderID(37)=" + new String(orderID) + sep;
			 s += "CrossID(548)=" + new String(crossID) + sep;
			 s += "OrigCrossID(551)=" + new String(origCrossID) + sep;
			if (FixUtils.isSet(hostCrossID)) s += "HostCrossID(961)=" + new String(hostCrossID) + sep;
			 s += "CrossType(549)=" + String.valueOf(crossType) + sep;
			 s += "CrossPrioritization(550)=" + String.valueOf(crossPrioritization) + sep;
			if (FixUtils.isSet(settlType)) s += "SettlType(63)=" + new String(settlType) + sep;
			if (FixUtils.isSet(settlDate)) s += "SettlDate(64)=" + new String(settlDate) + sep;
			if (FixUtils.isSet(handlInst)) s += "HandlInst(21)=" + String.valueOf(handlInst) + sep;
			if (FixUtils.isSet(execInst)) s += "ExecInst(18)=" + new String(execInst) + sep;
			if (FixUtils.isSet(minQty)) s += "MinQty(110)=" + String.valueOf(minQty) + sep;
			if (FixUtils.isSet(matchIncrement)) s += "MatchIncrement(1089)=" + String.valueOf(matchIncrement) + sep;
			if (FixUtils.isSet(maxPriceLevels)) s += "MaxPriceLevels(1090)=" + String.valueOf(maxPriceLevels) + sep;
			if (FixUtils.isSet(maxFloor)) s += "MaxFloor(111)=" + String.valueOf(maxFloor) + sep;
			if (FixUtils.isSet(exDestination)) s += "ExDestination(100)=" + new String(exDestination) + sep;
			if (FixUtils.isSet(exDestinationIDSource)) s += "ExDestinationIDSource(1133)=" + String.valueOf(exDestinationIDSource) + sep;
			if (FixUtils.isSet(processCode)) s += "ProcessCode(81)=" + String.valueOf(processCode) + sep;
			if (FixUtils.isSet(prevClosePx)) s += "PrevClosePx(140)=" + String.valueOf(prevClosePx) + sep;
			if (FixUtils.isSet(locateReqd)) s += "LocateReqd(114)=" + String.valueOf(locateReqd) + sep;
			 s += "TransactTime(60)=" + new String(transactTime) + sep;
			if (FixUtils.isSet(transBkdTime)) s += "TransBkdTime(483)=" + new String(transBkdTime) + sep;
			 s += "OrdType(40)=" + String.valueOf(ordType) + sep;
			if (FixUtils.isSet(priceType)) s += "PriceType(423)=" + String.valueOf(priceType) + sep;
			if (FixUtils.isSet(price)) s += "Price(44)=" + String.valueOf(price) + sep;
			if (FixUtils.isSet(priceProtectionScope)) s += "PriceProtectionScope(1092)=" + String.valueOf(priceProtectionScope) + sep;
			if (FixUtils.isSet(stopPx)) s += "StopPx(99)=" + String.valueOf(stopPx) + sep;
			if (FixUtils.isSet(currency)) s += "Currency(15)=" + new String(currency) + sep;
			if (FixUtils.isSet(complianceID)) s += "ComplianceID(376)=" + new String(complianceID) + sep;
			if (FixUtils.isSet(iOIID)) s += "IOIID(23)=" + new String(iOIID) + sep;
			if (FixUtils.isSet(quoteID)) s += "QuoteID(117)=" + new String(quoteID) + sep;
			if (FixUtils.isSet(timeInForce)) s += "TimeInForce(59)=" + String.valueOf(timeInForce) + sep;
			if (FixUtils.isSet(effectiveTime)) s += "EffectiveTime(168)=" + new String(effectiveTime) + sep;
			if (FixUtils.isSet(expireDate)) s += "ExpireDate(432)=" + new String(expireDate) + sep;
			if (FixUtils.isSet(expireTime)) s += "ExpireTime(126)=" + new String(expireTime) + sep;
			if (FixUtils.isSet(gTBookingInst)) s += "GTBookingInst(427)=" + String.valueOf(gTBookingInst) + sep;
			if (FixUtils.isSet(maxShow)) s += "MaxShow(210)=" + String.valueOf(maxShow) + sep;
			if (FixUtils.isSet(targetStrategy)) s += "TargetStrategy(847)=" + String.valueOf(targetStrategy) + sep;
			if (FixUtils.isSet(targetStrategyParameters)) s += "TargetStrategyParameters(848)=" + new String(targetStrategyParameters) + sep;
			if (FixUtils.isSet(participationRate)) s += "ParticipationRate(849)=" + String.valueOf(participationRate) + sep;
			if (FixUtils.isSet(cancellationRights)) s += "CancellationRights(480)=" + String.valueOf(cancellationRights) + sep;
			if (FixUtils.isSet(moneyLaunderingStatus)) s += "MoneyLaunderingStatus(481)=" + String.valueOf(moneyLaunderingStatus) + sep;
			if (FixUtils.isSet(registID)) s += "RegistID(513)=" + new String(registID) + sep;
			if (FixUtils.isSet(designation)) s += "Designation(494)=" + new String(designation) + sep;

			s += "checkSum(10)=" + String.valueOf(checkSum) + sep;

		} catch(Exception e) {  };

		return s;
	}

	@Override
	public boolean equals(Object o) {
		if (! ( o instanceof FixCrossOrderCancelReplaceRequest)) return false;

			FixCrossOrderCancelReplaceRequest msg = (FixCrossOrderCancelReplaceRequest) o;

		if ( ! super.equals(msg) ) return false;

		if (!Utils.equals( orderID, msg.orderID)) return false;

		if (!Utils.equals( crossID, msg.crossID)) return false;

		if (!Utils.equals( origCrossID, msg.origCrossID)) return false;

		if (!Utils.equals( hostCrossID, msg.hostCrossID)) return false;

		if (!( crossType==msg.crossType)) return false;

		if (!( crossPrioritization==msg.crossPrioritization)) return false;

		if (!Utils.equals( settlType, msg.settlType)) return false;

		if (!( handlInst==msg.handlInst)) return false;

		if (!Utils.equals( execInst, msg.execInst)) return false;

		if (!( minQty==msg.minQty)) return false;

		if (!( matchIncrement==msg.matchIncrement)) return false;

		if (!( maxPriceLevels==msg.maxPriceLevels)) return false;

		if (!( maxFloor==msg.maxFloor)) return false;

		if (!Utils.equals( exDestination, msg.exDestination)) return false;

		if (!( exDestinationIDSource==msg.exDestinationIDSource)) return false;

		if (!( processCode==msg.processCode)) return false;

		if (!( prevClosePx==msg.prevClosePx)) return false;

		if (!( locateReqd==msg.locateReqd)) return false;

		if (!( ordType==msg.ordType)) return false;

		if (!( priceType==msg.priceType)) return false;

		if (!( price==msg.price)) return false;

		if (!( priceProtectionScope==msg.priceProtectionScope)) return false;

		if (!( stopPx==msg.stopPx)) return false;

		if (!Utils.equals( currency, msg.currency)) return false;

		if (!Utils.equals( complianceID, msg.complianceID)) return false;

		if (!Utils.equals( iOIID, msg.iOIID)) return false;

		if (!Utils.equals( quoteID, msg.quoteID)) return false;

		if (!( timeInForce==msg.timeInForce)) return false;

		if (!( gTBookingInst==msg.gTBookingInst)) return false;

		if (!( maxShow==msg.maxShow)) return false;

		if (!( targetStrategy==msg.targetStrategy)) return false;

		if (!Utils.equals( targetStrategyParameters, msg.targetStrategyParameters)) return false;

		if (!( participationRate==msg.participationRate)) return false;

		if (!( cancellationRights==msg.cancellationRights)) return false;

		if (!( moneyLaunderingStatus==msg.moneyLaunderingStatus)) return false;

		if (!Utils.equals( registID, msg.registID)) return false;

		if (!Utils.equals( designation, msg.designation)) return false;

		return true;
	}
}
