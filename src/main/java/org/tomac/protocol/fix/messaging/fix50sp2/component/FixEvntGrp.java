package org.tomac.protocol.fix.messaging.fix50sp2.component;

// DO NOT EDIT!!!
// This file is generated by FixMessageGenerator.
// If you need additional functionality, put it in a helper class
// that does not live in this folder!!!  Any java file in this folder 
// will be deleted upon the next run of the FixMessageGenerator!

import java.nio.ByteBuffer;

import org.tomac.protocol.fix.FixUtils;
import org.tomac.protocol.fix.FixSessionException;
import org.tomac.protocol.fix.FixGarbledException;
import org.tomac.utils.Utils;
import org.tomac.protocol.fix.FixConstants;


import org.tomac.protocol.fix.messaging.fix50sp2.FixMessageInfo.SessionRejectReason;
import org.tomac.protocol.fix.messaging.fix50sp2.FixMessageInfo;
import org.tomac.protocol.fix.messaging.fix50sp2.FixTags;

public class FixEvntGrp
{

	public int noEvents;
	public EvntGrp[] group;

	public void getAll(int noEvents, ByteBuffer buf) throws FixSessionException, FixGarbledException {
		this.noEvents = noEvents;

		if (noEvents < 1) throw new FixSessionException(SessionRejectReason.INCORRECT_NUMINGROUP_COUNT_FOR_REPEATING_GROUP, ("Incorrect num in group count " + noEvents ).getBytes(), FixTags.NOEVENTS_INT, new byte[0]);
		// this will leak memory if we grow the group
		if (group == null || group.length < noEvents) {
			group = new EvntGrp[noEvents];

			for ( int i = 0; i < noEvents; i++ ) group[i] = new EvntGrp();
	}

		for ( int i = 0; i < noEvents; i++ ) 
			group[i].getAllGroup(buf);
	}

	public void clear() {
		for (int i = 0; i<noEvents; i++)
			group[i].clear();
	}
	public void encode(ByteBuffer out) {
		for (int i = 0; i<noEvents; i++)
			group[i].encode(out);
	}
	public boolean isSet() {
		for (int i = 0; i<noEvents; i++)
			if (group[i].isSet()) return true;
		return false;
	}

	@Override
	public boolean equals(Object o) {
		if (! ( o instanceof FixEvntGrp)) return false;

		FixEvntGrp msg = (FixEvntGrp) o;

		for (int i = 0; i<noEvents; i++)
			if (!group[i].equals(msg.group[i])) return false;
		return true;
	}

	@Override
	public String toString() {
		String s = "";
		for (int i = 0; i<noEvents; i++)
			s += group[i].toString();
		return s;
	}

public class EvntGrp implements FixComponent
{

	public long eventType = 0;
	public byte[] eventDate;
	public byte[] eventTime;
	public long eventPx = 0;
	public byte[] eventText;

	public EvntGrp() {
		super();

		eventDate = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		eventTime = new byte[FixUtils.UTCTIMESTAMP_LENGTH];
		eventText = new byte[FixUtils.FIX_MAX_STRING_TEXT_LENGTH];
		this.clear();

	}

	@Override
	public void clear()
	{

		// clear out all the fields that aren't msgType

		eventType = Long.MAX_VALUE;		
		Utils.fill( eventDate, (byte)0 );
		Utils.fill( eventTime, (byte)0 );
		eventPx = Long.MAX_VALUE;		
		Utils.fill( eventText, (byte)0 );
	}

	public void getAllGroup(ByteBuffer buf) throws FixSessionException, FixGarbledException
	{

		int startTagPosition = buf.position();

		int id = FixUtils.getTagId( buf );
		int lastTagPosition = buf.position();
			ByteBuffer value;

			value = buf;

			if(id == FixTags.EVENTTYPE_INT) {
				eventType = FixUtils.getTagIntValue(null ,id ,value );
				if (!FixMessageInfo.EventType.isValid(eventType) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + eventType + ") for tag").getBytes(), id, new byte[0] );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.EVENTDATE_INT) {
				eventDate = FixUtils.getTagStringValue(null ,id ,value, eventDate);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.EVENTTIME_INT) {
				eventTime = FixUtils.getTagStringValue(null ,id ,value, eventTime);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.EVENTPX_INT) {
				eventPx = FixUtils.getTagFloatValue(null ,id ,value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.EVENTTEXT_INT) {
				eventText = FixUtils.getTagStringValue(null ,id ,value, eventText);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			id = checkRequiredTags();
				if (id > 0) throw new FixSessionException(SessionRejectReason.REQUIRED_TAG_MISSING, "Required tag missing".getBytes(), id, new byte[0] );

			buf.position( lastTagPosition );
			return;

	}

	private int checkRequiredTags() {
		int tag = -1;

		return tag;

	}
	@Override
	public boolean isSet()
	{
		if (FixUtils.isSet(eventType)) return true;
		if (FixUtils.isSet(eventDate)) return true;
		if (FixUtils.isSet(eventTime)) return true;
		if (FixUtils.isSet(eventPx)) return true;
		if (FixUtils.isSet(eventText)) return true;
		return false;
	}
	@Override
	public void encode( ByteBuffer out )
	{
		if (FixUtils.isSet(eventType)) FixUtils.putFixTag( out, FixTags.EVENTTYPE_INT, eventType);
		if (FixUtils.isSet(eventDate)) FixUtils.putFixTag( out, FixTags.EVENTDATE_INT, eventDate);
		if (FixUtils.isSet(eventTime)) FixUtils.putFixTag( out, FixTags.EVENTTIME_INT, eventTime);
		if (FixUtils.isSet(eventPx)) FixUtils.putFixFloatTag( out, FixTags.EVENTPX_INT, eventPx);
		if (FixUtils.isSet(eventText)) FixUtils.putFixTag( out, FixTags.EVENTTEXT_INT, eventText, 0, Utils.lastIndexTrim(eventText, (byte)0) );
	}
	/**
	 * If you use toString for any other purpose than administrative printout.
	 * You will end up in nifelheim!
	**/
	@Override
	public String toString() {
		char sep = '\n';
		if (Boolean.getBoolean("fix.useOneLiner")) sep = ( byte )0x01;

		String s = "";

			if (FixUtils.isSet(eventType)) s += "EventType(865)=" + String.valueOf(eventType) + sep;
			if (FixUtils.isSet(eventDate)) s += "EventDate(866)=" + new String(eventDate) + sep;
			if (FixUtils.isSet(eventTime)) s += "EventTime(1145)=" + new String(eventTime) + sep;
			if (FixUtils.isSet(eventPx)) s += "EventPx(867)=" + String.valueOf(eventPx) + sep;
			if (FixUtils.isSet(eventText)) s += "EventText(868)=" + new String(eventText) + sep;
		return s;

	}

	@Override
	public boolean equals(Object o) {
		if (! ( o instanceof EvntGrp)) return false;

			EvntGrp msg = (EvntGrp) o;

		if (!( eventType==msg.eventType)) return false;

		if (!( eventPx==msg.eventPx)) return false;

		if (!Utils.equals( eventText, msg.eventText)) return false;

		return true;
	}
}
}
