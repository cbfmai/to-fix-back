package org.tomac.protocol.fix.messaging.fix50sp2.component;

// DO NOT EDIT!!!
// This file is generated by FixMessageGenerator.
// If you need additional functionality, put it in a helper class
// that does not live in this folder!!!  Any java file in this folder 
// will be deleted upon the next run of the FixMessageGenerator!

import java.nio.ByteBuffer;

import org.tomac.protocol.fix.FixUtils;
import org.tomac.protocol.fix.FixSessionException;
import org.tomac.protocol.fix.FixGarbledException;
import org.tomac.utils.Utils;
import org.tomac.protocol.fix.FixConstants;


import org.tomac.protocol.fix.messaging.fix50sp2.FixMessageInfo.SessionRejectReason;
import org.tomac.protocol.fix.messaging.fix50sp2.FixMessageInfo;
import org.tomac.protocol.fix.messaging.fix50sp2.FixTags;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixTradingSessionRules;

public class FixTrdSessLstGrp
{

	public int noTradingSessions;
	public TrdSessLstGrp[] group;

	public void getAll(int noTradingSessions, ByteBuffer buf) throws FixSessionException, FixGarbledException {
		this.noTradingSessions = noTradingSessions;

		if (noTradingSessions < 1) throw new FixSessionException(SessionRejectReason.INCORRECT_NUMINGROUP_COUNT_FOR_REPEATING_GROUP, ("Incorrect num in group count " + noTradingSessions ).getBytes(), FixTags.NOTRADINGSESSIONS_INT, new byte[0]);
		// this will leak memory if we grow the group
		if (group == null || group.length < noTradingSessions) {
			group = new TrdSessLstGrp[noTradingSessions];

			for ( int i = 0; i < noTradingSessions; i++ ) group[i] = new TrdSessLstGrp();
	}

		for ( int i = 0; i < noTradingSessions; i++ ) 
			group[i].getAllGroup(buf);
	}

	public void clear() {
		for (int i = 0; i<noTradingSessions; i++)
			group[i].clear();
	}
	public void encode(ByteBuffer out) {
		for (int i = 0; i<noTradingSessions; i++)
			group[i].encode(out);
	}
	public boolean isSet() {
		for (int i = 0; i<noTradingSessions; i++)
			if (group[i].isSet()) return true;
		return false;
	}

	@Override
	public boolean equals(Object o) {
		if (! ( o instanceof FixTrdSessLstGrp)) return false;

		FixTrdSessLstGrp msg = (FixTrdSessLstGrp) o;

		for (int i = 0; i<noTradingSessions; i++)
			if (!group[i].equals(msg.group[i])) return false;
		return true;
	}

	@Override
	public String toString() {
		String s = "";
		for (int i = 0; i<noTradingSessions; i++)
			s += group[i].toString();
		return s;
	}

public class TrdSessLstGrp implements FixComponent
{

	public byte[] tradingSessionID;
	public byte[] tradingSessionSubID;
	public byte[] securityExchange;
	public long tradSesMethod = 0;
	public long tradSesMode = 0;
	public boolean unsolicitedIndicator = false;
	public long tradSesStatus = 0;
	public long tradSesStatusRejReason = 0;
	public byte[] tradSesStartTime;
	public byte[] marketID;
	public byte[] marketSegmentID;
	public byte[] tradingSessionDesc;
	public byte tradSesUpdateAction = (byte)' ';
	public byte[] tradSesOpenTime;
	public byte[] tradSesPreCloseTime;
	public byte[] tradSesCloseTime;
	public byte[] tradSesEndTime;
	public long totalVolumeTraded = 0;
	public byte[] text;
	public long encodedTextLen = 0;
	public byte[] encodedText;
	public byte[] transactTime;
	public FixTradingSessionRules tradingSessionRules;

	public TrdSessLstGrp() {
		super();

		tradingSessionID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		tradingSessionSubID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		securityExchange = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		tradSesStartTime = new byte[FixUtils.UTCTIMESTAMP_LENGTH];
		marketID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		marketSegmentID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		tradingSessionDesc = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		tradSesOpenTime = new byte[FixUtils.UTCTIMESTAMP_LENGTH];
		tradSesPreCloseTime = new byte[FixUtils.UTCTIMESTAMP_LENGTH];
		tradSesCloseTime = new byte[FixUtils.UTCTIMESTAMP_LENGTH];
		tradSesEndTime = new byte[FixUtils.UTCTIMESTAMP_LENGTH];
		text = new byte[FixUtils.FIX_MAX_STRING_TEXT_LENGTH];
		encodedText = new byte[FixUtils.FIX_MAX_STRING_TEXT_LENGTH];
		transactTime = new byte[FixUtils.UTCTIMESTAMP_LENGTH];
		tradingSessionRules = new FixTradingSessionRules();
		this.clear();

	}

	@Override
	public void clear()
	{

		// clear out all the fields that aren't msgType

		Utils.fill( tradingSessionID, (byte)0 );
		Utils.fill( tradingSessionSubID, (byte)0 );
		Utils.fill( securityExchange, (byte)0 );
		tradSesMethod = Long.MAX_VALUE;		
		tradSesMode = Long.MAX_VALUE;		
		unsolicitedIndicator = false;		
		tradSesStatus = Long.MAX_VALUE;		
		tradSesStatusRejReason = Long.MAX_VALUE;		
		Utils.fill( tradSesStartTime, (byte)0 );
		Utils.fill( marketID, (byte)0 );
		Utils.fill( marketSegmentID, (byte)0 );
		Utils.fill( tradingSessionDesc, (byte)0 );
		tradSesUpdateAction = Byte.MAX_VALUE;		
		Utils.fill( tradSesOpenTime, (byte)0 );
		Utils.fill( tradSesPreCloseTime, (byte)0 );
		Utils.fill( tradSesCloseTime, (byte)0 );
		Utils.fill( tradSesEndTime, (byte)0 );
		totalVolumeTraded = Long.MAX_VALUE;		
		Utils.fill( text, (byte)0 );
		encodedTextLen = Long.MAX_VALUE;		
		Utils.fill( encodedText, (byte)0 );
		Utils.fill( transactTime, (byte)0 );
		tradingSessionRules.clear();
	}

	public void getAllGroup(ByteBuffer buf) throws FixSessionException, FixGarbledException
	{

		int startTagPosition = buf.position();

		int id = FixUtils.getTagId( buf );
		int lastTagPosition = buf.position();
			ByteBuffer value;

			value = buf;

			if(id == FixTags.TRADINGSESSIONID_INT) {
				tradingSessionID = FixUtils.getTagStringValue(null ,id ,value, tradingSessionID);
				if (!FixMessageInfo.TradingSessionID.isValid(tradingSessionID) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + tradingSessionID + ") for tag").getBytes(), id, new byte[0] );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.TRADINGSESSIONSUBID_INT) {
				tradingSessionSubID = FixUtils.getTagStringValue(null ,id ,value, tradingSessionSubID);
				if (!FixMessageInfo.TradingSessionSubID.isValid(tradingSessionSubID) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + tradingSessionSubID + ") for tag").getBytes(), id, new byte[0] );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.SECURITYEXCHANGE_INT) {
				securityExchange = FixUtils.getTagStringValue(null ,id ,value, securityExchange);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.TRADSESMETHOD_INT) {
				tradSesMethod = FixUtils.getTagIntValue(null ,id ,value );
				if (!FixMessageInfo.TradSesMethod.isValid(tradSesMethod) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + tradSesMethod + ") for tag").getBytes(), id, new byte[0] );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.TRADSESMODE_INT) {
				tradSesMode = FixUtils.getTagIntValue(null ,id ,value );
				if (!FixMessageInfo.TradSesMode.isValid(tradSesMode) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + tradSesMode + ") for tag").getBytes(), id, new byte[0] );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.UNSOLICITEDINDICATOR_INT) {
				unsolicitedIndicator = FixUtils.getTagBooleanValue(null ,id ,value );
				if (!FixMessageInfo.UnsolicitedIndicator.isValid(unsolicitedIndicator) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + unsolicitedIndicator + ") for tag").getBytes(), id, new byte[0] );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.TRADSESSTATUS_INT) {
				tradSesStatus = FixUtils.getTagIntValue(null ,id ,value );
				if (!FixMessageInfo.TradSesStatus.isValid(tradSesStatus) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + tradSesStatus + ") for tag").getBytes(), id, new byte[0] );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.TRADSESSTATUSREJREASON_INT) {
				tradSesStatusRejReason = FixUtils.getTagIntValue(null ,id ,value );
				if (!FixMessageInfo.TradSesStatusRejReason.isValid(tradSesStatusRejReason) ) throw new FixSessionException(SessionRejectReason.VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG, ("Invalid enumerated value(" + tradSesStatusRejReason + ") for tag").getBytes(), id, new byte[0] );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.TRADSESSTARTTIME_INT) {
				tradSesStartTime = FixUtils.getTagStringValue(null ,id ,value, tradSesStartTime);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.MARKETID_INT) {
				marketID = FixUtils.getTagStringValue(null ,id ,value, marketID);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.MARKETSEGMENTID_INT) {
				marketSegmentID = FixUtils.getTagStringValue(null ,id ,value, marketSegmentID);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.TRADINGSESSIONDESC_INT) {
				tradingSessionDesc = FixUtils.getTagStringValue(null ,id ,value, tradingSessionDesc);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.TRADSESUPDATEACTION_INT) {
				tradSesUpdateAction = FixUtils.getTagCharValue(null ,id ,value );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.TRADSESOPENTIME_INT) {
				tradSesOpenTime = FixUtils.getTagStringValue(null ,id ,value, tradSesOpenTime);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.TRADSESPRECLOSETIME_INT) {
				tradSesPreCloseTime = FixUtils.getTagStringValue(null ,id ,value, tradSesPreCloseTime);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.TRADSESCLOSETIME_INT) {
				tradSesCloseTime = FixUtils.getTagStringValue(null ,id ,value, tradSesCloseTime);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.TRADSESENDTIME_INT) {
				tradSesEndTime = FixUtils.getTagStringValue(null ,id ,value, tradSesEndTime);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.TOTALVOLUMETRADED_INT) {
				totalVolumeTraded = FixUtils.getTagFloatValue(null ,id ,value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.TEXT_INT) {
				text = FixUtils.getTagStringValue(null ,id ,value, text);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.ENCODEDTEXTLEN_INT) {
				encodedTextLen = FixUtils.getTagIntValue(null ,id ,value );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.ENCODEDTEXT_INT) {
				encodedText = FixUtils.getTagStringValue(null ,id ,value, encodedText);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.TRANSACTTIME_INT) {
				transactTime = FixUtils.getTagStringValue(null ,id ,value, transactTime);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.NOORDTYPERULES_INT) {
				tradingSessionRules.getAll(FixTags.NOORDTYPERULES_INT, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			id = checkRequiredTags();
				if (id > 0) throw new FixSessionException(SessionRejectReason.REQUIRED_TAG_MISSING, "Required tag missing".getBytes(), id, new byte[0] );

			buf.position( lastTagPosition );
			return;

	}

	private int checkRequiredTags() {
		int tag = -1;

		if (! FixUtils.isSet(tradingSessionID) ) return FixTags.TRADINGSESSIONID_INT;
		if (! FixUtils.isSet(tradSesStatus) ) return FixTags.TRADSESSTATUS_INT;
		return tag;

	}
	@Override
	public boolean isSet()
	{
		if (FixUtils.isSet(tradingSessionSubID)) return true;
		if (FixUtils.isSet(securityExchange)) return true;
		if (FixUtils.isSet(tradSesMethod)) return true;
		if (FixUtils.isSet(tradSesMode)) return true;
		if (FixUtils.isSet(unsolicitedIndicator)) return true;
		if (FixUtils.isSet(tradSesStatusRejReason)) return true;
		if (FixUtils.isSet(tradSesStartTime)) return true;
		if (FixUtils.isSet(marketID)) return true;
		if (FixUtils.isSet(marketSegmentID)) return true;
		if (FixUtils.isSet(tradingSessionDesc)) return true;
		if (FixUtils.isSet(tradSesUpdateAction)) return true;
		if (FixUtils.isSet(tradSesOpenTime)) return true;
		if (FixUtils.isSet(tradSesPreCloseTime)) return true;
		if (FixUtils.isSet(tradSesCloseTime)) return true;
		if (FixUtils.isSet(tradSesEndTime)) return true;
		if (FixUtils.isSet(totalVolumeTraded)) return true;
		if (FixUtils.isSet(text)) return true;
		if (FixUtils.isSet(encodedTextLen)) return true;
		if (FixUtils.isSet(encodedText)) return true;
		if (FixUtils.isSet(transactTime)) return true;
		if (FixUtils.isSet(tradingSessionRules.ordTypeRules.noOrdTypeRules)) return true;
		return false;
	}
	@Override
	public void encode( ByteBuffer out )
	{
		FixUtils.putFixTag( out, FixTags.TRADINGSESSIONID_INT, tradingSessionID, 0, Utils.lastIndexTrim(tradingSessionID, (byte)0) );
		if (FixUtils.isSet(tradingSessionSubID)) FixUtils.putFixTag( out, FixTags.TRADINGSESSIONSUBID_INT, tradingSessionSubID, 0, Utils.lastIndexTrim(tradingSessionSubID, (byte)0) );
		if (FixUtils.isSet(securityExchange)) FixUtils.putFixTag( out, FixTags.SECURITYEXCHANGE_INT, securityExchange, 0, Utils.lastIndexTrim(securityExchange, (byte)0) );
		if (FixUtils.isSet(tradSesMethod)) FixUtils.putFixTag( out, FixTags.TRADSESMETHOD_INT, tradSesMethod);
		if (FixUtils.isSet(tradSesMode)) FixUtils.putFixTag( out, FixTags.TRADSESMODE_INT, tradSesMode);
		if (FixUtils.isSet(unsolicitedIndicator)) FixUtils.putFixTag( out, FixTags.UNSOLICITEDINDICATOR_INT, unsolicitedIndicator?(byte)'Y':(byte)'N' );
		FixUtils.putFixTag( out, FixTags.TRADSESSTATUS_INT, tradSesStatus);
		if (FixUtils.isSet(tradSesStatusRejReason)) FixUtils.putFixTag( out, FixTags.TRADSESSTATUSREJREASON_INT, tradSesStatusRejReason);
		if (FixUtils.isSet(tradSesStartTime)) FixUtils.putFixTag( out, FixTags.TRADSESSTARTTIME_INT, tradSesStartTime);
		if (FixUtils.isSet(marketID)) FixUtils.putFixTag( out, FixTags.MARKETID_INT, marketID, 0, Utils.lastIndexTrim(marketID, (byte)0) );
		if (FixUtils.isSet(marketSegmentID)) FixUtils.putFixTag( out, FixTags.MARKETSEGMENTID_INT, marketSegmentID, 0, Utils.lastIndexTrim(marketSegmentID, (byte)0) );
		if (FixUtils.isSet(tradingSessionDesc)) FixUtils.putFixTag( out, FixTags.TRADINGSESSIONDESC_INT, tradingSessionDesc, 0, Utils.lastIndexTrim(tradingSessionDesc, (byte)0) );
		if (FixUtils.isSet(tradSesUpdateAction)) FixUtils.putFixTag( out, FixTags.TRADSESUPDATEACTION_INT, tradSesUpdateAction );
		if (FixUtils.isSet(tradSesOpenTime)) FixUtils.putFixTag( out, FixTags.TRADSESOPENTIME_INT, tradSesOpenTime);
		if (FixUtils.isSet(tradSesPreCloseTime)) FixUtils.putFixTag( out, FixTags.TRADSESPRECLOSETIME_INT, tradSesPreCloseTime);
		if (FixUtils.isSet(tradSesCloseTime)) FixUtils.putFixTag( out, FixTags.TRADSESCLOSETIME_INT, tradSesCloseTime);
		if (FixUtils.isSet(tradSesEndTime)) FixUtils.putFixTag( out, FixTags.TRADSESENDTIME_INT, tradSesEndTime);
		if (FixUtils.isSet(totalVolumeTraded)) FixUtils.putFixFloatTag( out, FixTags.TOTALVOLUMETRADED_INT, totalVolumeTraded);
		if (FixUtils.isSet(text)) FixUtils.putFixTag( out, FixTags.TEXT_INT, text, 0, Utils.lastIndexTrim(text, (byte)0) );
		if (FixUtils.isSet(encodedTextLen)) FixUtils.putFixTag( out, FixTags.ENCODEDTEXTLEN_INT, encodedTextLen);
		if (FixUtils.isSet(encodedText)) FixUtils.putFixTag( out, FixTags.ENCODEDTEXT_INT, encodedText, 0, Utils.lastIndexTrim(encodedText, (byte)0) );
		if (FixUtils.isSet(transactTime)) FixUtils.putFixTag( out, FixTags.TRANSACTTIME_INT, transactTime);
		if (FixUtils.isSet(tradingSessionRules.ordTypeRules.noOrdTypeRules)) tradingSessionRules.encode( out );
	}
	/**
	 * If you use toString for any other purpose than administrative printout.
	 * You will end up in nifelheim!
	**/
	@Override
	public String toString() {
		char sep = '\n';
		if (Boolean.getBoolean("fix.useOneLiner")) sep = ( byte )0x01;

		String s = "";

			 s += "TradingSessionID(336)=" + new String(tradingSessionID) + sep;
			if (FixUtils.isSet(tradingSessionSubID)) s += "TradingSessionSubID(625)=" + new String(tradingSessionSubID) + sep;
			if (FixUtils.isSet(securityExchange)) s += "SecurityExchange(207)=" + new String(securityExchange) + sep;
			if (FixUtils.isSet(tradSesMethod)) s += "TradSesMethod(338)=" + String.valueOf(tradSesMethod) + sep;
			if (FixUtils.isSet(tradSesMode)) s += "TradSesMode(339)=" + String.valueOf(tradSesMode) + sep;
			if (FixUtils.isSet(unsolicitedIndicator)) s += "UnsolicitedIndicator(325)=" + String.valueOf(unsolicitedIndicator) + sep;
			 s += "TradSesStatus(340)=" + String.valueOf(tradSesStatus) + sep;
			if (FixUtils.isSet(tradSesStatusRejReason)) s += "TradSesStatusRejReason(567)=" + String.valueOf(tradSesStatusRejReason) + sep;
			if (FixUtils.isSet(tradSesStartTime)) s += "TradSesStartTime(341)=" + new String(tradSesStartTime) + sep;
			if (FixUtils.isSet(marketID)) s += "MarketID(1301)=" + new String(marketID) + sep;
			if (FixUtils.isSet(marketSegmentID)) s += "MarketSegmentID(1300)=" + new String(marketSegmentID) + sep;
			if (FixUtils.isSet(tradingSessionDesc)) s += "TradingSessionDesc(1326)=" + new String(tradingSessionDesc) + sep;
			if (FixUtils.isSet(tradSesUpdateAction)) s += "TradSesUpdateAction(1327)=" + String.valueOf(tradSesUpdateAction) + sep;
			if (FixUtils.isSet(tradSesOpenTime)) s += "TradSesOpenTime(342)=" + new String(tradSesOpenTime) + sep;
			if (FixUtils.isSet(tradSesPreCloseTime)) s += "TradSesPreCloseTime(343)=" + new String(tradSesPreCloseTime) + sep;
			if (FixUtils.isSet(tradSesCloseTime)) s += "TradSesCloseTime(344)=" + new String(tradSesCloseTime) + sep;
			if (FixUtils.isSet(tradSesEndTime)) s += "TradSesEndTime(345)=" + new String(tradSesEndTime) + sep;
			if (FixUtils.isSet(totalVolumeTraded)) s += "TotalVolumeTraded(387)=" + String.valueOf(totalVolumeTraded) + sep;
			if (FixUtils.isSet(text)) s += "Text(58)=" + new String(text) + sep;
			if (FixUtils.isSet(encodedTextLen)) s += "EncodedTextLen(354)=" + String.valueOf(encodedTextLen) + sep;
			if (FixUtils.isSet(encodedText)) s += "EncodedText(355)=" + new String(encodedText) + sep;
			if (FixUtils.isSet(transactTime)) s += "TransactTime(60)=" + new String(transactTime) + sep;
			if (FixUtils.isSet(tradingSessionRules.ordTypeRules.noOrdTypeRules)) s += tradingSessionRules.toString();
		return s;

	}

	@Override
	public boolean equals(Object o) {
		if (! ( o instanceof TrdSessLstGrp)) return false;

			TrdSessLstGrp msg = (TrdSessLstGrp) o;

		if (!Utils.equals( tradingSessionID, msg.tradingSessionID)) return false;

		if (!Utils.equals( tradingSessionSubID, msg.tradingSessionSubID)) return false;

		if (!Utils.equals( securityExchange, msg.securityExchange)) return false;

		if (!( tradSesMethod==msg.tradSesMethod)) return false;

		if (!( tradSesMode==msg.tradSesMode)) return false;

		if (!( unsolicitedIndicator==msg.unsolicitedIndicator)) return false;

		if (!( tradSesStatus==msg.tradSesStatus)) return false;

		if (!( tradSesStatusRejReason==msg.tradSesStatusRejReason)) return false;

		if (!Utils.equals( marketID, msg.marketID)) return false;

		if (!Utils.equals( marketSegmentID, msg.marketSegmentID)) return false;

		if (!Utils.equals( tradingSessionDesc, msg.tradingSessionDesc)) return false;

		if (!( tradSesUpdateAction==msg.tradSesUpdateAction)) return false;

		if (!( totalVolumeTraded==msg.totalVolumeTraded)) return false;

		if (!Utils.equals( text, msg.text)) return false;

		if (!( encodedTextLen==msg.encodedTextLen)) return false;

		if (!Utils.equals( encodedText, msg.encodedText)) return false;

		if (!tradingSessionRules.equals(msg.tradingSessionRules)) return false;

		return true;
	}
}
}
