package org.tomac.protocol.fix.messaging.fix50sp2.component;

// DO NOT EDIT!!!
// This file is generated by FixMessageGenerator.
// If you need additional functionality, put it in a helper class
// that does not live in this folder!!!  Any java file in this folder 
// will be deleted upon the next run of the FixMessageGenerator!

import java.nio.ByteBuffer;

import org.tomac.protocol.fix.FixUtils;
import org.tomac.protocol.fix.FixSessionException;
import org.tomac.protocol.fix.FixGarbledException;
import org.tomac.utils.Utils;
import org.tomac.protocol.fix.FixConstants;


import org.tomac.protocol.fix.messaging.fix50sp2.FixTags;
import org.tomac.protocol.fix.messaging.fix50sp2.FixMessageInfo.*;

public class FixLegBenchmarkCurveData implements FixComponent
{

	public byte[] legBenchmarkCurveCurrency;
	public byte[] legBenchmarkCurveName;
	public byte[] legBenchmarkCurvePoint;
	public long legBenchmarkPrice = 0;
	public long legBenchmarkPriceType = 0;

	public FixLegBenchmarkCurveData() {
		super();

		legBenchmarkCurveCurrency = new byte[FixUtils.CURRENCY_LENGTH];
		legBenchmarkCurveName = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		legBenchmarkCurvePoint = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		this.clear();

	}

	@Override
	public void clear()
	{

		// clear out all the fields that aren't msgType

		Utils.fill( legBenchmarkCurveCurrency, (byte)0 );
		Utils.fill( legBenchmarkCurveName, (byte)0 );
		Utils.fill( legBenchmarkCurvePoint, (byte)0 );
		legBenchmarkPrice = Long.MAX_VALUE;		
		legBenchmarkPriceType = Long.MAX_VALUE;		
	}

	public void getAll(int id, ByteBuffer buf) throws FixSessionException, FixGarbledException
	{

		int startTagPosition = buf.position();

		int lastTagPosition = buf.position();
		do {
			ByteBuffer value;

			value = buf;

			switch( id ) {

			case FixTags.LEGBENCHMARKCURVECURRENCY_INT:
				legBenchmarkCurveCurrency = FixUtils.getTagStringValue(value, legBenchmarkCurveCurrency);
				break;

			case FixTags.LEGBENCHMARKCURVENAME_INT:
				legBenchmarkCurveName = FixUtils.getTagStringValue(value, legBenchmarkCurveName);
				break;

			case FixTags.LEGBENCHMARKCURVEPOINT_INT:
				legBenchmarkCurvePoint = FixUtils.getTagStringValue(value, legBenchmarkCurvePoint);
				break;

			case FixTags.LEGBENCHMARKPRICE_INT:
				legBenchmarkPrice = FixUtils.getTagFloatValue(value);
				break;

			case FixTags.LEGBENCHMARKPRICETYPE_INT:
				legBenchmarkPriceType = FixUtils.getTagIntValue( value );
				break;

			// we will always endup with unknown tag, unread and return to upper layer in hierarchy
			default:
				id = checkRequiredTags();
				if (id > 0) throw new FixSessionException(SessionRejectReason.REQUIRED_TAG_MISSING, "Required tag missing".getBytes(), id, new byte[0] );

				buf.position( lastTagPosition );
				return;

			}

			lastTagPosition = buf.position();

		} while ( ( id = FixUtils.getTagId( buf ) ) > 0 );

		buf.position(startTagPosition);

	}

	private int checkRequiredTags() {
		int tag = -1;

		return tag;

	}
	@Override
	public boolean isSet()
	{
		if (FixUtils.isSet(legBenchmarkCurveCurrency)) return true;
		if (FixUtils.isSet(legBenchmarkCurveName)) return true;
		if (FixUtils.isSet(legBenchmarkCurvePoint)) return true;
		if (FixUtils.isSet(legBenchmarkPrice)) return true;
		if (FixUtils.isSet(legBenchmarkPriceType)) return true;
		return false;
	}
	@Override
	public void encode( ByteBuffer out )
	{
		if (FixUtils.isSet(legBenchmarkCurveCurrency)) FixUtils.putFixTag( out, FixTags.LEGBENCHMARKCURVECURRENCY_INT, legBenchmarkCurveCurrency, 0, Utils.lastIndexTrim(legBenchmarkCurveCurrency, (byte)0) );
		if (FixUtils.isSet(legBenchmarkCurveName)) FixUtils.putFixTag( out, FixTags.LEGBENCHMARKCURVENAME_INT, legBenchmarkCurveName, 0, Utils.lastIndexTrim(legBenchmarkCurveName, (byte)0) );
		if (FixUtils.isSet(legBenchmarkCurvePoint)) FixUtils.putFixTag( out, FixTags.LEGBENCHMARKCURVEPOINT_INT, legBenchmarkCurvePoint, 0, Utils.lastIndexTrim(legBenchmarkCurvePoint, (byte)0) );
		if (FixUtils.isSet(legBenchmarkPrice)) FixUtils.putFixFloatTag( out, FixTags.LEGBENCHMARKPRICE_INT, legBenchmarkPrice);
		if (FixUtils.isSet(legBenchmarkPriceType)) FixUtils.putFixTag( out, FixTags.LEGBENCHMARKPRICETYPE_INT, legBenchmarkPriceType);
	}
	/**
	 * If you use toString for any other purpose than administrative printout.
	 * You will end up in nifelheim!
	**/
	@Override
	public String toString() {
		char sep = '\n';
		if (Boolean.getBoolean("fix.useOneLiner")) sep = ( byte )0x01;

		String s = "";

			if (FixUtils.isSet(legBenchmarkCurveCurrency)) s += "LegBenchmarkCurveCurrency(676)=" + new String(legBenchmarkCurveCurrency) + sep;
			if (FixUtils.isSet(legBenchmarkCurveName)) s += "LegBenchmarkCurveName(677)=" + new String(legBenchmarkCurveName) + sep;
			if (FixUtils.isSet(legBenchmarkCurvePoint)) s += "LegBenchmarkCurvePoint(678)=" + new String(legBenchmarkCurvePoint) + sep;
			if (FixUtils.isSet(legBenchmarkPrice)) s += "LegBenchmarkPrice(679)=" + String.valueOf(legBenchmarkPrice) + sep;
			if (FixUtils.isSet(legBenchmarkPriceType)) s += "LegBenchmarkPriceType(680)=" + String.valueOf(legBenchmarkPriceType) + sep;
		return s;

	}

	@Override
	public boolean equals(Object o) {
		if (! ( o instanceof FixLegBenchmarkCurveData)) return false;

			FixLegBenchmarkCurveData msg = (FixLegBenchmarkCurveData) o;

		if ( ! super.equals(msg) ) return false;

		if (!Utils.equals( legBenchmarkCurveCurrency, msg.legBenchmarkCurveCurrency)) return false;

		if (!Utils.equals( legBenchmarkCurveName, msg.legBenchmarkCurveName)) return false;

		if (!Utils.equals( legBenchmarkCurvePoint, msg.legBenchmarkCurvePoint)) return false;

		if (!( legBenchmarkPrice==msg.legBenchmarkPrice)) return false;

		if (!( legBenchmarkPriceType==msg.legBenchmarkPriceType)) return false;

		return true;
	}
}
