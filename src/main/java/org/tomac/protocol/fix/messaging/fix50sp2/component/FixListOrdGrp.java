package org.tomac.protocol.fix.messaging.fix50sp2.component;

// DO NOT EDIT!!!
// This file is generated by FixMessageGenerator.
// If you need additional functionality, put it in a helper class
// that does not live in this folder!!!  Any java file in this folder 
// will be deleted upon the next run of the FixMessageGenerator!

import java.nio.ByteBuffer;

import org.tomac.protocol.fix.FixUtils;
import org.tomac.protocol.fix.FixSessionException;
import org.tomac.protocol.fix.FixGarbledException;
import org.tomac.utils.Utils;
import org.tomac.protocol.fix.FixConstants;


import org.tomac.protocol.fix.messaging.fix50sp2.FixMessageInfo;
import org.tomac.protocol.fix.messaging.fix50sp2.FixTags;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixParties;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixPreAllocGrp;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixDisplayInstruction;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixTrdgSesGrp;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixInstrument;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixUndInstrmtGrp;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixStipulations;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixOrderQtyData;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixTriggeringInstruction;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixSpreadOrBenchmarkCurveData;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixYieldData;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixCommissionData;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixPegInstructions;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixDiscretionInstructions;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixStrategyParametersGrp;

public class FixListOrdGrp
{

	public int noOrders;
	public ListOrdGrp[] group;

	public void getAll(int noOrders, ByteBuffer buf) throws FixSessionException {
		this.noOrders = noOrders;

		if (noOrders < 1) throw new FixSessionException("asdasd");
		// this will leak memory if we grow the group
		if (group == null || group.length < noOrders) {
			group = new ListOrdGrp[noOrders];

			for ( int i = 0; i < noOrders; i++ ) group[i] = new ListOrdGrp();
	}

		for ( int i = 0; i < noOrders; i++ ) 
			group[i].getAllGroup(buf);
	}

	public void clear() {
		for (int i = 0; i<noOrders; i++)
			group[i].clear();
	}
	public void encode(ByteBuffer out) {
		for (int i = 0; i<noOrders; i++)
			group[i].encode(out);
	}
	public boolean isSet() {
		for (int i = 0; i<noOrders; i++)
			if (group[i].isSet()) return true;
		return false;
	}

	@Override
	public String toString() {
		String s = "";
		for (int i = 0; i<noOrders; i++)
			s += group[i].toString();
		return s;
	}

public class ListOrdGrp implements FixComponent
{

	public byte[] clOrdID;
	public byte[] secondaryClOrdID;
	public long listSeqNo = 0;
	public byte[] clOrdLinkID;
	public byte settlInstMode = (byte)' ';
	public FixParties parties;
	public byte[] tradeOriginationDate;
	public byte[] tradeDate;
	public byte[] account;
	public long acctIDSource = 0;
	public long accountType = 0;
	public byte dayBookingInst = (byte)' ';
	public byte bookingUnit = (byte)' ';
	public byte[] allocID;
	public byte preallocMethod = (byte)' ';
	public FixPreAllocGrp preAllocGrp;
	public byte[] settlType;
	public byte[] settlDate;
	public byte cashMargin = (byte)' ';
	public byte[] clearingFeeIndicator;
	public byte handlInst = (byte)' ';
	public byte[] execInst;
	public long minQty = 0;
	public long matchIncrement = 0;
	public long maxPriceLevels = 0;
	public FixDisplayInstruction displayInstruction;
	public long maxFloor = 0;
	public byte[] exDestination;
	public byte exDestinationIDSource = (byte)' ';
	public FixTrdgSesGrp trdgSesGrp;
	public byte processCode = (byte)' ';
	public FixInstrument instrument;
	public FixUndInstrmtGrp undInstrmtGrp;
	public long prevClosePx = 0;
	public byte side = (byte)' ';
	public long sideValueInd = 0;
	public boolean locateReqd = false;
	public byte[] transactTime;
	public FixStipulations stipulations;
	public long qtyType = 0;
	public FixOrderQtyData orderQtyData;
	public byte ordType = (byte)' ';
	public long priceType = 0;
	public long price = 0;
	public byte priceProtectionScope = (byte)' ';
	public long stopPx = 0;
	public FixTriggeringInstruction triggeringInstruction;
	public FixSpreadOrBenchmarkCurveData spreadOrBenchmarkCurveData;
	public FixYieldData yieldData;
	public byte[] currency;
	public byte[] complianceID;
	public boolean solicitedFlag = false;
	public byte[] iOIID;
	public byte[] quoteID;
	public byte[] refOrderID;
	public byte refOrderIDSource = (byte)' ';
	public byte timeInForce = (byte)' ';
	public byte[] effectiveTime;
	public byte[] expireDate;
	public byte[] expireTime;
	public long gTBookingInst = 0;
	public FixCommissionData commissionData;
	public byte orderCapacity = (byte)' ';
	public byte[] orderRestrictions;
	public boolean preTradeAnonymity = false;
	public long custOrderCapacity = 0;
	public boolean forexReq = false;
	public byte[] settlCurrency;
	public long bookingType = 0;
	public byte[] text;
	public long encodedTextLen = 0;
	public byte[] encodedText;
	public byte[] settlDate2;
	public long orderQty2 = 0;
	public long price2 = 0;
	public byte positionEffect = (byte)' ';
	public long coveredOrUncovered = 0;
	public long maxShow = 0;
	public FixPegInstructions pegInstructions;
	public FixDiscretionInstructions discretionInstructions;
	public long targetStrategy = 0;
	public FixStrategyParametersGrp strategyParametersGrp;
	public byte[] targetStrategyParameters;
	public long participationRate = 0;
	public byte[] designation;

	public ListOrdGrp() {
		super();

		clOrdID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		secondaryClOrdID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		clOrdLinkID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		parties = new FixParties();
		tradeOriginationDate = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		tradeDate = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		account = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		allocID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		preAllocGrp = new FixPreAllocGrp();
		settlType = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		settlDate = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		clearingFeeIndicator = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		execInst = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		displayInstruction = new FixDisplayInstruction();
		exDestination = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		trdgSesGrp = new FixTrdgSesGrp();
		instrument = new FixInstrument();
		undInstrmtGrp = new FixUndInstrmtGrp();
		transactTime = new byte[FixUtils.UTCTIMESTAMP_LENGTH];
		stipulations = new FixStipulations();
		orderQtyData = new FixOrderQtyData();
		triggeringInstruction = new FixTriggeringInstruction();
		spreadOrBenchmarkCurveData = new FixSpreadOrBenchmarkCurveData();
		yieldData = new FixYieldData();
		currency = new byte[FixUtils.CURRENCY_LENGTH];
		complianceID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		iOIID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		quoteID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		refOrderID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		effectiveTime = new byte[FixUtils.UTCTIMESTAMP_LENGTH];
		expireDate = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		expireTime = new byte[FixUtils.UTCTIMESTAMP_LENGTH];
		commissionData = new FixCommissionData();
		orderRestrictions = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		settlCurrency = new byte[FixUtils.CURRENCY_LENGTH];
		text = new byte[FixUtils.FIX_MAX_STRING_TEXT_LENGTH];
		encodedText = new byte[FixUtils.FIX_MAX_STRING_TEXT_LENGTH];
		settlDate2 = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		pegInstructions = new FixPegInstructions();
		discretionInstructions = new FixDiscretionInstructions();
		strategyParametersGrp = new FixStrategyParametersGrp();
		targetStrategyParameters = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		designation = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		this.clear();

	}

	@Override
	public void clear()
	{

		// clear out all the fields that aren't msgType

		Utils.fill( clOrdID, (byte)0 );
		Utils.fill( secondaryClOrdID, (byte)0 );
		listSeqNo = Long.MAX_VALUE;		
		Utils.fill( clOrdLinkID, (byte)0 );
		settlInstMode = Byte.MAX_VALUE;		
		Utils.fill( tradeOriginationDate, (byte)0 );
		Utils.fill( tradeDate, (byte)0 );
		Utils.fill( account, (byte)0 );
		acctIDSource = Long.MAX_VALUE;		
		accountType = Long.MAX_VALUE;		
		dayBookingInst = Byte.MAX_VALUE;		
		bookingUnit = Byte.MAX_VALUE;		
		Utils.fill( allocID, (byte)0 );
		preallocMethod = Byte.MAX_VALUE;		
		Utils.fill( settlType, (byte)0 );
		Utils.fill( settlDate, (byte)0 );
		cashMargin = Byte.MAX_VALUE;		
		Utils.fill( clearingFeeIndicator, (byte)0 );
		handlInst = Byte.MAX_VALUE;		
		Utils.fill( execInst, (byte)0 );
		minQty = Long.MAX_VALUE;		
		matchIncrement = Long.MAX_VALUE;		
		maxPriceLevels = Long.MAX_VALUE;		
		maxFloor = Long.MAX_VALUE;		
		Utils.fill( exDestination, (byte)0 );
		exDestinationIDSource = Byte.MAX_VALUE;		
		processCode = Byte.MAX_VALUE;		
		prevClosePx = Long.MAX_VALUE;		
		side = Byte.MAX_VALUE;		
		sideValueInd = Long.MAX_VALUE;		
		locateReqd = false;		
		Utils.fill( transactTime, (byte)0 );
		qtyType = Long.MAX_VALUE;		
		ordType = Byte.MAX_VALUE;		
		priceType = Long.MAX_VALUE;		
		price = Long.MAX_VALUE;		
		priceProtectionScope = Byte.MAX_VALUE;		
		stopPx = Long.MAX_VALUE;		
		Utils.fill( currency, (byte)0 );
		Utils.fill( complianceID, (byte)0 );
		solicitedFlag = false;		
		Utils.fill( iOIID, (byte)0 );
		Utils.fill( quoteID, (byte)0 );
		Utils.fill( refOrderID, (byte)0 );
		refOrderIDSource = Byte.MAX_VALUE;		
		timeInForce = Byte.MAX_VALUE;		
		Utils.fill( effectiveTime, (byte)0 );
		Utils.fill( expireDate, (byte)0 );
		Utils.fill( expireTime, (byte)0 );
		gTBookingInst = Long.MAX_VALUE;		
		orderCapacity = Byte.MAX_VALUE;		
		Utils.fill( orderRestrictions, (byte)0 );
		preTradeAnonymity = false;		
		custOrderCapacity = Long.MAX_VALUE;		
		forexReq = false;		
		Utils.fill( settlCurrency, (byte)0 );
		bookingType = Long.MAX_VALUE;		
		Utils.fill( text, (byte)0 );
		encodedTextLen = Long.MAX_VALUE;		
		Utils.fill( encodedText, (byte)0 );
		Utils.fill( settlDate2, (byte)0 );
		orderQty2 = Long.MAX_VALUE;		
		price2 = Long.MAX_VALUE;		
		positionEffect = Byte.MAX_VALUE;		
		coveredOrUncovered = Long.MAX_VALUE;		
		maxShow = Long.MAX_VALUE;		
		targetStrategy = Long.MAX_VALUE;		
		Utils.fill( targetStrategyParameters, (byte)0 );
		participationRate = Long.MAX_VALUE;		
		Utils.fill( designation, (byte)0 );
		parties.clear();
		preAllocGrp.clear();
		displayInstruction.clear();
		trdgSesGrp.clear();
		instrument.clear();
		undInstrmtGrp.clear();
		stipulations.clear();
		orderQtyData.clear();
		triggeringInstruction.clear();
		spreadOrBenchmarkCurveData.clear();
		yieldData.clear();
		commissionData.clear();
		pegInstructions.clear();
		discretionInstructions.clear();
		strategyParametersGrp.clear();
	}

	public void getAllGroup(ByteBuffer buf) throws FixSessionException
	{

		int startTagPosition = buf.position();

		int id = FixUtils.getTagId( buf );
		int lastTagPosition = buf.position();
			ByteBuffer value;

			value = buf;

			if(id == FixTags.CLORDID_INT) {
				clOrdID = FixUtils.getTagStringValue(value, clOrdID);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.SECONDARYCLORDID_INT) {
				secondaryClOrdID = FixUtils.getTagStringValue(value, secondaryClOrdID);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.LISTSEQNO_INT) {
				listSeqNo = FixUtils.getTagIntValue( value );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.CLORDLINKID_INT) {
				clOrdLinkID = FixUtils.getTagStringValue(value, clOrdLinkID);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.SETTLINSTMODE_INT) {
				settlInstMode = FixUtils.getTagCharValue( value );
				if (!FixMessageInfo.SettlInstMode.isValid(settlInstMode) ) throw new FixSessionException(buf, "Invalid enumerated value(" + settlInstMode + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.NOPARTYIDS_INT) {
				parties.getAll(FixTags.NOPARTYIDS_INT, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.TRADEORIGINATIONDATE_INT) {
				tradeOriginationDate = FixUtils.getTagStringValue(value, tradeOriginationDate);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.TRADEDATE_INT) {
				tradeDate = FixUtils.getTagStringValue(value, tradeDate);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.ACCOUNT_INT) {
				account = FixUtils.getTagStringValue(value, account);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.ACCTIDSOURCE_INT) {
				acctIDSource = FixUtils.getTagIntValue( value );
				if (!FixMessageInfo.AcctIDSource.isValid(acctIDSource) ) throw new FixSessionException(buf, "Invalid enumerated value(" + acctIDSource + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.ACCOUNTTYPE_INT) {
				accountType = FixUtils.getTagIntValue( value );
				if (!FixMessageInfo.AccountType.isValid(accountType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + accountType + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.DAYBOOKINGINST_INT) {
				dayBookingInst = FixUtils.getTagCharValue( value );
				if (!FixMessageInfo.DayBookingInst.isValid(dayBookingInst) ) throw new FixSessionException(buf, "Invalid enumerated value(" + dayBookingInst + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.BOOKINGUNIT_INT) {
				bookingUnit = FixUtils.getTagCharValue( value );
				if (!FixMessageInfo.BookingUnit.isValid(bookingUnit) ) throw new FixSessionException(buf, "Invalid enumerated value(" + bookingUnit + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.ALLOCID_INT) {
				allocID = FixUtils.getTagStringValue(value, allocID);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.PREALLOCMETHOD_INT) {
				preallocMethod = FixUtils.getTagCharValue( value );
				if (!FixMessageInfo.PreallocMethod.isValid(preallocMethod) ) throw new FixSessionException(buf, "Invalid enumerated value(" + preallocMethod + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.NOALLOCS_INT) {
				preAllocGrp.getAll(FixTags.NOALLOCS_INT, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.SETTLTYPE_INT) {
				settlType = FixUtils.getTagStringValue(value, settlType);
				if (!FixMessageInfo.SettlType.isValid(settlType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + settlType + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.SETTLDATE_INT) {
				settlDate = FixUtils.getTagStringValue(value, settlDate);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.CASHMARGIN_INT) {
				cashMargin = FixUtils.getTagCharValue( value );
				if (!FixMessageInfo.CashMargin.isValid(cashMargin) ) throw new FixSessionException(buf, "Invalid enumerated value(" + cashMargin + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.CLEARINGFEEINDICATOR_INT) {
				clearingFeeIndicator = FixUtils.getTagStringValue(value, clearingFeeIndicator);
				if (!FixMessageInfo.ClearingFeeIndicator.isValid(clearingFeeIndicator) ) throw new FixSessionException(buf, "Invalid enumerated value(" + clearingFeeIndicator + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.HANDLINST_INT) {
				handlInst = FixUtils.getTagCharValue( value );
				if (!FixMessageInfo.HandlInst.isValid(handlInst) ) throw new FixSessionException(buf, "Invalid enumerated value(" + handlInst + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.EXECINST_INT) {
				execInst = FixUtils.getTagStringValue(value, execInst);
				if (!FixMessageInfo.ExecInst.isValid(execInst) ) throw new FixSessionException(buf, "Invalid enumerated value(" + execInst + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.MINQTY_INT) {
				minQty = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.MATCHINCREMENT_INT) {
				matchIncrement = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.MAXPRICELEVELS_INT) {
				maxPriceLevels = FixUtils.getTagIntValue( value );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.DISPLAYQTY_INT) {
				displayInstruction.getAll(FixTags.DISPLAYQTY_INT, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.MAXFLOOR_INT) {
				maxFloor = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.EXDESTINATION_INT) {
				exDestination = FixUtils.getTagStringValue(value, exDestination);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.EXDESTINATIONIDSOURCE_INT) {
				exDestinationIDSource = FixUtils.getTagCharValue( value );
				if (!FixMessageInfo.ExDestinationIDSource.isValid(exDestinationIDSource) ) throw new FixSessionException(buf, "Invalid enumerated value(" + exDestinationIDSource + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.NOTRADINGSESSIONS_INT) {
				trdgSesGrp.getAll(FixTags.NOTRADINGSESSIONS_INT, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.PROCESSCODE_INT) {
				processCode = FixUtils.getTagCharValue( value );
				if (!FixMessageInfo.ProcessCode.isValid(processCode) ) throw new FixSessionException(buf, "Invalid enumerated value(" + processCode + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.SYMBOL_INT) {
				instrument.getAll(FixTags.SYMBOL_INT, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.NOUNDERLYINGS_INT) {
				undInstrmtGrp.getAll(FixTags.NOUNDERLYINGS_INT, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.PREVCLOSEPX_INT) {
				prevClosePx = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.SIDE_INT) {
				side = FixUtils.getTagCharValue( value );
				if (!FixMessageInfo.Side.isValid(side) ) throw new FixSessionException(buf, "Invalid enumerated value(" + side + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.SIDEVALUEIND_INT) {
				sideValueInd = FixUtils.getTagIntValue( value );
				if (!FixMessageInfo.SideValueInd.isValid(sideValueInd) ) throw new FixSessionException(buf, "Invalid enumerated value(" + sideValueInd + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.LOCATEREQD_INT) {
				locateReqd = FixUtils.getTagBooleanValue( value );
				if (!FixMessageInfo.LocateReqd.isValid(locateReqd) ) throw new FixSessionException(buf, "Invalid enumerated value(" + locateReqd + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.TRANSACTTIME_INT) {
				transactTime = FixUtils.getTagStringValue(value, transactTime);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.NOSTIPULATIONS_INT) {
				stipulations.getAll(FixTags.NOSTIPULATIONS_INT, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.QTYTYPE_INT) {
				qtyType = FixUtils.getTagIntValue( value );
				if (!FixMessageInfo.QtyType.isValid(qtyType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + qtyType + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.ORDERQTY_INT) {
				orderQtyData.getAll(FixTags.ORDERQTY_INT, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.ORDTYPE_INT) {
				ordType = FixUtils.getTagCharValue( value );
				if (!FixMessageInfo.OrdType.isValid(ordType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + ordType + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.PRICETYPE_INT) {
				priceType = FixUtils.getTagIntValue( value );
				if (!FixMessageInfo.PriceType.isValid(priceType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + priceType + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.PRICE_INT) {
				price = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.PRICEPROTECTIONSCOPE_INT) {
				priceProtectionScope = FixUtils.getTagCharValue( value );
				if (!FixMessageInfo.PriceProtectionScope.isValid(priceProtectionScope) ) throw new FixSessionException(buf, "Invalid enumerated value(" + priceProtectionScope + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.STOPPX_INT) {
				stopPx = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.TRIGGERTYPE_INT) {
				triggeringInstruction.getAll(FixTags.TRIGGERTYPE_INT, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.SPREAD_INT) {
				spreadOrBenchmarkCurveData.getAll(FixTags.SPREAD_INT, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.YIELDTYPE_INT) {
				yieldData.getAll(FixTags.YIELDTYPE_INT, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.CURRENCY_INT) {
				currency = FixUtils.getTagStringValue(value, currency);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.COMPLIANCEID_INT) {
				complianceID = FixUtils.getTagStringValue(value, complianceID);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.SOLICITEDFLAG_INT) {
				solicitedFlag = FixUtils.getTagBooleanValue( value );
				if (!FixMessageInfo.SolicitedFlag.isValid(solicitedFlag) ) throw new FixSessionException(buf, "Invalid enumerated value(" + solicitedFlag + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.IOIID_INT) {
				iOIID = FixUtils.getTagStringValue(value, iOIID);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.QUOTEID_INT) {
				quoteID = FixUtils.getTagStringValue(value, quoteID);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.REFORDERID_INT) {
				refOrderID = FixUtils.getTagStringValue(value, refOrderID);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.REFORDERIDSOURCE_INT) {
				refOrderIDSource = FixUtils.getTagCharValue( value );
				if (!FixMessageInfo.RefOrderIDSource.isValid(refOrderIDSource) ) throw new FixSessionException(buf, "Invalid enumerated value(" + refOrderIDSource + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.TIMEINFORCE_INT) {
				timeInForce = FixUtils.getTagCharValue( value );
				if (!FixMessageInfo.TimeInForce.isValid(timeInForce) ) throw new FixSessionException(buf, "Invalid enumerated value(" + timeInForce + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.EFFECTIVETIME_INT) {
				effectiveTime = FixUtils.getTagStringValue(value, effectiveTime);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.EXPIREDATE_INT) {
				expireDate = FixUtils.getTagStringValue(value, expireDate);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.EXPIRETIME_INT) {
				expireTime = FixUtils.getTagStringValue(value, expireTime);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.GTBOOKINGINST_INT) {
				gTBookingInst = FixUtils.getTagIntValue( value );
				if (!FixMessageInfo.GTBookingInst.isValid(gTBookingInst) ) throw new FixSessionException(buf, "Invalid enumerated value(" + gTBookingInst + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.COMMISSION_INT) {
				commissionData.getAll(FixTags.COMMISSION_INT, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.ORDERCAPACITY_INT) {
				orderCapacity = FixUtils.getTagCharValue( value );
				if (!FixMessageInfo.OrderCapacity.isValid(orderCapacity) ) throw new FixSessionException(buf, "Invalid enumerated value(" + orderCapacity + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.ORDERRESTRICTIONS_INT) {
				orderRestrictions = FixUtils.getTagStringValue(value, orderRestrictions);
				if (!FixMessageInfo.OrderRestrictions.isValid(orderRestrictions) ) throw new FixSessionException(buf, "Invalid enumerated value(" + orderRestrictions + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.PRETRADEANONYMITY_INT) {
				preTradeAnonymity = FixUtils.getTagBooleanValue( value );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.CUSTORDERCAPACITY_INT) {
				custOrderCapacity = FixUtils.getTagIntValue( value );
				if (!FixMessageInfo.CustOrderCapacity.isValid(custOrderCapacity) ) throw new FixSessionException(buf, "Invalid enumerated value(" + custOrderCapacity + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.FOREXREQ_INT) {
				forexReq = FixUtils.getTagBooleanValue( value );
				if (!FixMessageInfo.ForexReq.isValid(forexReq) ) throw new FixSessionException(buf, "Invalid enumerated value(" + forexReq + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.SETTLCURRENCY_INT) {
				settlCurrency = FixUtils.getTagStringValue(value, settlCurrency);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.BOOKINGTYPE_INT) {
				bookingType = FixUtils.getTagIntValue( value );
				if (!FixMessageInfo.BookingType.isValid(bookingType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + bookingType + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.TEXT_INT) {
				text = FixUtils.getTagStringValue(value, text);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.ENCODEDTEXTLEN_INT) {
				encodedTextLen = FixUtils.getTagIntValue( value );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.ENCODEDTEXT_INT) {
				encodedText = FixUtils.getTagStringValue(value, encodedText);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.SETTLDATE2_INT) {
				settlDate2 = FixUtils.getTagStringValue(value, settlDate2);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.ORDERQTY2_INT) {
				orderQty2 = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.PRICE2_INT) {
				price2 = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.POSITIONEFFECT_INT) {
				positionEffect = FixUtils.getTagCharValue( value );
				if (!FixMessageInfo.PositionEffect.isValid(positionEffect) ) throw new FixSessionException(buf, "Invalid enumerated value(" + positionEffect + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.COVEREDORUNCOVERED_INT) {
				coveredOrUncovered = FixUtils.getTagIntValue( value );
				if (!FixMessageInfo.CoveredOrUncovered.isValid(coveredOrUncovered) ) throw new FixSessionException(buf, "Invalid enumerated value(" + coveredOrUncovered + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.MAXSHOW_INT) {
				maxShow = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.PEGOFFSETVALUE_INT) {
				pegInstructions.getAll(FixTags.PEGOFFSETVALUE_INT, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.DISCRETIONINST_INT) {
				discretionInstructions.getAll(FixTags.DISCRETIONINST_INT, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.TARGETSTRATEGY_INT) {
				targetStrategy = FixUtils.getTagIntValue( value );
				if (!FixMessageInfo.TargetStrategy.isValid(targetStrategy) ) throw new FixSessionException(buf, "Invalid enumerated value(" + targetStrategy + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.NOSTRATEGYPARAMETERS_INT) {
				strategyParametersGrp.getAll(FixTags.NOSTRATEGYPARAMETERS_INT, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.TARGETSTRATEGYPARAMETERS_INT) {
				targetStrategyParameters = FixUtils.getTagStringValue(value, targetStrategyParameters);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.PARTICIPATIONRATE_INT) {
				participationRate = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.DESIGNATION_INT) {
				designation = FixUtils.getTagStringValue(value, designation);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			id = checkRequiredTags();
			if (id > 0) throw new FixSessionException(buf, "Required tag missing: " + id );

			buf.position( lastTagPosition );
			return;

	}

	private int checkRequiredTags() {
		int tag = -1;

		if (! FixUtils.isSet(clOrdID) ) return FixTags.CLORDID_INT;
		if (! FixUtils.isSet(listSeqNo) ) return FixTags.LISTSEQNO_INT;
		if (! FixUtils.isSet(side) ) return FixTags.SIDE_INT;
		if (! instrument.isSet() ) return FixTags.SYMBOL_INT;
		if (! orderQtyData.isSet() ) return FixTags.ORDERQTY_INT;
		return tag;

	}
	@Override
	public boolean isSet()
	{
		if (FixUtils.isSet(secondaryClOrdID)) return true;
		if (FixUtils.isSet(clOrdLinkID)) return true;
		if (FixUtils.isSet(settlInstMode)) return true;
		if (FixUtils.isSet(parties.noPartyIDs)) return true;
		if (FixUtils.isSet(tradeOriginationDate)) return true;
		if (FixUtils.isSet(tradeDate)) return true;
		if (FixUtils.isSet(account)) return true;
		if (FixUtils.isSet(acctIDSource)) return true;
		if (FixUtils.isSet(accountType)) return true;
		if (FixUtils.isSet(dayBookingInst)) return true;
		if (FixUtils.isSet(bookingUnit)) return true;
		if (FixUtils.isSet(allocID)) return true;
		if (FixUtils.isSet(preallocMethod)) return true;
		if (FixUtils.isSet(preAllocGrp.noAllocs)) return true;
		if (FixUtils.isSet(settlType)) return true;
		if (FixUtils.isSet(settlDate)) return true;
		if (FixUtils.isSet(cashMargin)) return true;
		if (FixUtils.isSet(clearingFeeIndicator)) return true;
		if (FixUtils.isSet(handlInst)) return true;
		if (FixUtils.isSet(execInst)) return true;
		if (FixUtils.isSet(minQty)) return true;
		if (FixUtils.isSet(matchIncrement)) return true;
		if (FixUtils.isSet(maxPriceLevels)) return true;
		if (FixUtils.isSet(displayInstruction.displayQty)) return true;
		if (FixUtils.isSet(maxFloor)) return true;
		if (FixUtils.isSet(exDestination)) return true;
		if (FixUtils.isSet(exDestinationIDSource)) return true;
		if (FixUtils.isSet(trdgSesGrp.noTradingSessions)) return true;
		if (FixUtils.isSet(processCode)) return true;
		if (FixUtils.isSet(instrument.symbol)) return true;
		if (FixUtils.isSet(undInstrmtGrp.noUnderlyings)) return true;
		if (FixUtils.isSet(prevClosePx)) return true;
		if (FixUtils.isSet(sideValueInd)) return true;
		if (FixUtils.isSet(locateReqd)) return true;
		if (FixUtils.isSet(transactTime)) return true;
		if (FixUtils.isSet(stipulations.noStipulations)) return true;
		if (FixUtils.isSet(qtyType)) return true;
		if (FixUtils.isSet(orderQtyData.orderQty)) return true;
		if (FixUtils.isSet(ordType)) return true;
		if (FixUtils.isSet(priceType)) return true;
		if (FixUtils.isSet(price)) return true;
		if (FixUtils.isSet(priceProtectionScope)) return true;
		if (FixUtils.isSet(stopPx)) return true;
		if (FixUtils.isSet(triggeringInstruction.triggerType)) return true;
		if (FixUtils.isSet(spreadOrBenchmarkCurveData.spread)) return true;
		if (FixUtils.isSet(yieldData.yieldType)) return true;
		if (FixUtils.isSet(currency)) return true;
		if (FixUtils.isSet(complianceID)) return true;
		if (FixUtils.isSet(solicitedFlag)) return true;
		if (FixUtils.isSet(iOIID)) return true;
		if (FixUtils.isSet(quoteID)) return true;
		if (FixUtils.isSet(refOrderID)) return true;
		if (FixUtils.isSet(refOrderIDSource)) return true;
		if (FixUtils.isSet(timeInForce)) return true;
		if (FixUtils.isSet(effectiveTime)) return true;
		if (FixUtils.isSet(expireDate)) return true;
		if (FixUtils.isSet(expireTime)) return true;
		if (FixUtils.isSet(gTBookingInst)) return true;
		if (FixUtils.isSet(commissionData.commission)) return true;
		if (FixUtils.isSet(orderCapacity)) return true;
		if (FixUtils.isSet(orderRestrictions)) return true;
		if (FixUtils.isSet(preTradeAnonymity)) return true;
		if (FixUtils.isSet(custOrderCapacity)) return true;
		if (FixUtils.isSet(forexReq)) return true;
		if (FixUtils.isSet(settlCurrency)) return true;
		if (FixUtils.isSet(bookingType)) return true;
		if (FixUtils.isSet(text)) return true;
		if (FixUtils.isSet(encodedTextLen)) return true;
		if (FixUtils.isSet(encodedText)) return true;
		if (FixUtils.isSet(settlDate2)) return true;
		if (FixUtils.isSet(orderQty2)) return true;
		if (FixUtils.isSet(price2)) return true;
		if (FixUtils.isSet(positionEffect)) return true;
		if (FixUtils.isSet(coveredOrUncovered)) return true;
		if (FixUtils.isSet(maxShow)) return true;
		if (FixUtils.isSet(pegInstructions.pegOffsetValue)) return true;
		if (FixUtils.isSet(discretionInstructions.discretionInst)) return true;
		if (FixUtils.isSet(targetStrategy)) return true;
		if (FixUtils.isSet(strategyParametersGrp.noStrategyParameters)) return true;
		if (FixUtils.isSet(targetStrategyParameters)) return true;
		if (FixUtils.isSet(participationRate)) return true;
		if (FixUtils.isSet(designation)) return true;
		return false;
	}
	@Override
	public void encode( ByteBuffer out )
	{
		FixUtils.putFixTag( out, FixTags.CLORDID_INT, clOrdID, 0, Utils.lastIndexTrim(clOrdID, (byte)0) );
		if (FixUtils.isSet(secondaryClOrdID)) FixUtils.putFixTag( out, FixTags.SECONDARYCLORDID_INT, secondaryClOrdID, 0, Utils.lastIndexTrim(secondaryClOrdID, (byte)0) );
		FixUtils.putFixTag( out, FixTags.LISTSEQNO_INT, listSeqNo);
		if (FixUtils.isSet(clOrdLinkID)) FixUtils.putFixTag( out, FixTags.CLORDLINKID_INT, clOrdLinkID, 0, Utils.lastIndexTrim(clOrdLinkID, (byte)0) );
		if (FixUtils.isSet(settlInstMode)) FixUtils.putFixTag( out, FixTags.SETTLINSTMODE_INT, settlInstMode );
		if (FixUtils.isSet(parties.noPartyIDs)) parties.encode( out );
		if (FixUtils.isSet(tradeOriginationDate)) FixUtils.putFixTag( out, FixTags.TRADEORIGINATIONDATE_INT, tradeOriginationDate);
		if (FixUtils.isSet(tradeDate)) FixUtils.putFixTag( out, FixTags.TRADEDATE_INT, tradeDate);
		if (FixUtils.isSet(account)) FixUtils.putFixTag( out, FixTags.ACCOUNT_INT, account, 0, Utils.lastIndexTrim(account, (byte)0) );
		if (FixUtils.isSet(acctIDSource)) FixUtils.putFixTag( out, FixTags.ACCTIDSOURCE_INT, acctIDSource);
		if (FixUtils.isSet(accountType)) FixUtils.putFixTag( out, FixTags.ACCOUNTTYPE_INT, accountType);
		if (FixUtils.isSet(dayBookingInst)) FixUtils.putFixTag( out, FixTags.DAYBOOKINGINST_INT, dayBookingInst );
		if (FixUtils.isSet(bookingUnit)) FixUtils.putFixTag( out, FixTags.BOOKINGUNIT_INT, bookingUnit );
		if (FixUtils.isSet(allocID)) FixUtils.putFixTag( out, FixTags.ALLOCID_INT, allocID, 0, Utils.lastIndexTrim(allocID, (byte)0) );
		if (FixUtils.isSet(preallocMethod)) FixUtils.putFixTag( out, FixTags.PREALLOCMETHOD_INT, preallocMethod );
		if (FixUtils.isSet(preAllocGrp.noAllocs)) preAllocGrp.encode( out );
		if (FixUtils.isSet(settlType)) FixUtils.putFixTag( out, FixTags.SETTLTYPE_INT, settlType, 0, Utils.lastIndexTrim(settlType, (byte)0) );
		if (FixUtils.isSet(settlDate)) FixUtils.putFixTag( out, FixTags.SETTLDATE_INT, settlDate);
		if (FixUtils.isSet(cashMargin)) FixUtils.putFixTag( out, FixTags.CASHMARGIN_INT, cashMargin );
		if (FixUtils.isSet(clearingFeeIndicator)) FixUtils.putFixTag( out, FixTags.CLEARINGFEEINDICATOR_INT, clearingFeeIndicator, 0, Utils.lastIndexTrim(clearingFeeIndicator, (byte)0) );
		if (FixUtils.isSet(handlInst)) FixUtils.putFixTag( out, FixTags.HANDLINST_INT, handlInst );
		if (FixUtils.isSet(execInst)) FixUtils.putFixTag( out, FixTags.EXECINST_INT, execInst, 0, Utils.lastIndexTrim(execInst, (byte)0) );
		if (FixUtils.isSet(minQty)) FixUtils.putFixFloatTag( out, FixTags.MINQTY_INT, minQty);
		if (FixUtils.isSet(matchIncrement)) FixUtils.putFixFloatTag( out, FixTags.MATCHINCREMENT_INT, matchIncrement);
		if (FixUtils.isSet(maxPriceLevels)) FixUtils.putFixTag( out, FixTags.MAXPRICELEVELS_INT, maxPriceLevels);
		if (FixUtils.isSet(displayInstruction.displayQty)) displayInstruction.encode( out );
		if (FixUtils.isSet(maxFloor)) FixUtils.putFixFloatTag( out, FixTags.MAXFLOOR_INT, maxFloor);
		if (FixUtils.isSet(exDestination)) FixUtils.putFixTag( out, FixTags.EXDESTINATION_INT, exDestination, 0, Utils.lastIndexTrim(exDestination, (byte)0) );
		if (FixUtils.isSet(exDestinationIDSource)) FixUtils.putFixTag( out, FixTags.EXDESTINATIONIDSOURCE_INT, exDestinationIDSource );
		if (FixUtils.isSet(trdgSesGrp.noTradingSessions)) trdgSesGrp.encode( out );
		if (FixUtils.isSet(processCode)) FixUtils.putFixTag( out, FixTags.PROCESSCODE_INT, processCode );
		if (FixUtils.isSet(instrument.symbol)) instrument.encode( out );
		if (FixUtils.isSet(undInstrmtGrp.noUnderlyings)) undInstrmtGrp.encode( out );
		if (FixUtils.isSet(prevClosePx)) FixUtils.putFixFloatTag( out, FixTags.PREVCLOSEPX_INT, prevClosePx);
		FixUtils.putFixTag( out, FixTags.SIDE_INT, side );
		if (FixUtils.isSet(sideValueInd)) FixUtils.putFixTag( out, FixTags.SIDEVALUEIND_INT, sideValueInd);
		if (FixUtils.isSet(locateReqd)) FixUtils.putFixTag( out, FixTags.LOCATEREQD_INT, locateReqd?(byte)'Y':(byte)'N' );
		if (FixUtils.isSet(transactTime)) FixUtils.putFixTag( out, FixTags.TRANSACTTIME_INT, transactTime);
		if (FixUtils.isSet(stipulations.noStipulations)) stipulations.encode( out );
		if (FixUtils.isSet(qtyType)) FixUtils.putFixTag( out, FixTags.QTYTYPE_INT, qtyType);
		if (FixUtils.isSet(orderQtyData.orderQty)) orderQtyData.encode( out );
		if (FixUtils.isSet(ordType)) FixUtils.putFixTag( out, FixTags.ORDTYPE_INT, ordType );
		if (FixUtils.isSet(priceType)) FixUtils.putFixTag( out, FixTags.PRICETYPE_INT, priceType);
		if (FixUtils.isSet(price)) FixUtils.putFixFloatTag( out, FixTags.PRICE_INT, price);
		if (FixUtils.isSet(priceProtectionScope)) FixUtils.putFixTag( out, FixTags.PRICEPROTECTIONSCOPE_INT, priceProtectionScope );
		if (FixUtils.isSet(stopPx)) FixUtils.putFixFloatTag( out, FixTags.STOPPX_INT, stopPx);
		if (FixUtils.isSet(triggeringInstruction.triggerType)) triggeringInstruction.encode( out );
		if (FixUtils.isSet(spreadOrBenchmarkCurveData.spread)) spreadOrBenchmarkCurveData.encode( out );
		if (FixUtils.isSet(yieldData.yieldType)) yieldData.encode( out );
		if (FixUtils.isSet(currency)) FixUtils.putFixTag( out, FixTags.CURRENCY_INT, currency, 0, Utils.lastIndexTrim(currency, (byte)0) );
		if (FixUtils.isSet(complianceID)) FixUtils.putFixTag( out, FixTags.COMPLIANCEID_INT, complianceID, 0, Utils.lastIndexTrim(complianceID, (byte)0) );
		if (FixUtils.isSet(solicitedFlag)) FixUtils.putFixTag( out, FixTags.SOLICITEDFLAG_INT, solicitedFlag?(byte)'Y':(byte)'N' );
		if (FixUtils.isSet(iOIID)) FixUtils.putFixTag( out, FixTags.IOIID_INT, iOIID, 0, Utils.lastIndexTrim(iOIID, (byte)0) );
		if (FixUtils.isSet(quoteID)) FixUtils.putFixTag( out, FixTags.QUOTEID_INT, quoteID, 0, Utils.lastIndexTrim(quoteID, (byte)0) );
		if (FixUtils.isSet(refOrderID)) FixUtils.putFixTag( out, FixTags.REFORDERID_INT, refOrderID, 0, Utils.lastIndexTrim(refOrderID, (byte)0) );
		if (FixUtils.isSet(refOrderIDSource)) FixUtils.putFixTag( out, FixTags.REFORDERIDSOURCE_INT, refOrderIDSource );
		if (FixUtils.isSet(timeInForce)) FixUtils.putFixTag( out, FixTags.TIMEINFORCE_INT, timeInForce );
		if (FixUtils.isSet(effectiveTime)) FixUtils.putFixTag( out, FixTags.EFFECTIVETIME_INT, effectiveTime);
		if (FixUtils.isSet(expireDate)) FixUtils.putFixTag( out, FixTags.EXPIREDATE_INT, expireDate);
		if (FixUtils.isSet(expireTime)) FixUtils.putFixTag( out, FixTags.EXPIRETIME_INT, expireTime);
		if (FixUtils.isSet(gTBookingInst)) FixUtils.putFixTag( out, FixTags.GTBOOKINGINST_INT, gTBookingInst);
		if (FixUtils.isSet(commissionData.commission)) commissionData.encode( out );
		if (FixUtils.isSet(orderCapacity)) FixUtils.putFixTag( out, FixTags.ORDERCAPACITY_INT, orderCapacity );
		if (FixUtils.isSet(orderRestrictions)) FixUtils.putFixTag( out, FixTags.ORDERRESTRICTIONS_INT, orderRestrictions, 0, Utils.lastIndexTrim(orderRestrictions, (byte)0) );
		if (FixUtils.isSet(preTradeAnonymity)) FixUtils.putFixTag( out, FixTags.PRETRADEANONYMITY_INT, preTradeAnonymity?(byte)'Y':(byte)'N' );
		if (FixUtils.isSet(custOrderCapacity)) FixUtils.putFixTag( out, FixTags.CUSTORDERCAPACITY_INT, custOrderCapacity);
		if (FixUtils.isSet(forexReq)) FixUtils.putFixTag( out, FixTags.FOREXREQ_INT, forexReq?(byte)'Y':(byte)'N' );
		if (FixUtils.isSet(settlCurrency)) FixUtils.putFixTag( out, FixTags.SETTLCURRENCY_INT, settlCurrency, 0, Utils.lastIndexTrim(settlCurrency, (byte)0) );
		if (FixUtils.isSet(bookingType)) FixUtils.putFixTag( out, FixTags.BOOKINGTYPE_INT, bookingType);
		if (FixUtils.isSet(text)) FixUtils.putFixTag( out, FixTags.TEXT_INT, text, 0, Utils.lastIndexTrim(text, (byte)0) );
		if (FixUtils.isSet(encodedTextLen)) FixUtils.putFixTag( out, FixTags.ENCODEDTEXTLEN_INT, encodedTextLen);
		if (FixUtils.isSet(encodedText)) FixUtils.putFixTag( out, FixTags.ENCODEDTEXT_INT, encodedText, 0, Utils.lastIndexTrim(encodedText, (byte)0) );
		if (FixUtils.isSet(settlDate2)) FixUtils.putFixTag( out, FixTags.SETTLDATE2_INT, settlDate2);
		if (FixUtils.isSet(orderQty2)) FixUtils.putFixFloatTag( out, FixTags.ORDERQTY2_INT, orderQty2);
		if (FixUtils.isSet(price2)) FixUtils.putFixFloatTag( out, FixTags.PRICE2_INT, price2);
		if (FixUtils.isSet(positionEffect)) FixUtils.putFixTag( out, FixTags.POSITIONEFFECT_INT, positionEffect );
		if (FixUtils.isSet(coveredOrUncovered)) FixUtils.putFixTag( out, FixTags.COVEREDORUNCOVERED_INT, coveredOrUncovered);
		if (FixUtils.isSet(maxShow)) FixUtils.putFixFloatTag( out, FixTags.MAXSHOW_INT, maxShow);
		if (FixUtils.isSet(pegInstructions.pegOffsetValue)) pegInstructions.encode( out );
		if (FixUtils.isSet(discretionInstructions.discretionInst)) discretionInstructions.encode( out );
		if (FixUtils.isSet(targetStrategy)) FixUtils.putFixTag( out, FixTags.TARGETSTRATEGY_INT, targetStrategy);
		if (FixUtils.isSet(strategyParametersGrp.noStrategyParameters)) strategyParametersGrp.encode( out );
		if (FixUtils.isSet(targetStrategyParameters)) FixUtils.putFixTag( out, FixTags.TARGETSTRATEGYPARAMETERS_INT, targetStrategyParameters, 0, Utils.lastIndexTrim(targetStrategyParameters, (byte)0) );
		if (FixUtils.isSet(participationRate)) FixUtils.putFixFloatTag( out, FixTags.PARTICIPATIONRATE_INT, participationRate);
		if (FixUtils.isSet(designation)) FixUtils.putFixTag( out, FixTags.DESIGNATION_INT, designation, 0, Utils.lastIndexTrim(designation, (byte)0) );
	}
	/**
	 * If you use toString for any other purpose than administrative printout.
	 * You will end up in nifelheim!
	**/
	@Override
	public String toString() {
		char sep = '\n';
		if (Boolean.getBoolean("fix.useOneLiner")) sep = ( byte )0x01;

		String s = "";

			 s += "ClOrdID(11)=" + new String(clOrdID) + sep;
			if (FixUtils.isSet(secondaryClOrdID)) s += "SecondaryClOrdID(526)=" + new String(secondaryClOrdID) + sep;
			 s += "ListSeqNo(67)=" + String.valueOf(listSeqNo) + sep;
			if (FixUtils.isSet(clOrdLinkID)) s += "ClOrdLinkID(583)=" + new String(clOrdLinkID) + sep;
			if (FixUtils.isSet(settlInstMode)) s += "SettlInstMode(160)=" + String.valueOf(settlInstMode) + sep;
			if (FixUtils.isSet(parties.noPartyIDs)) s += parties.toString();
			if (FixUtils.isSet(tradeOriginationDate)) s += "TradeOriginationDate(229)=" + new String(tradeOriginationDate) + sep;
			if (FixUtils.isSet(tradeDate)) s += "TradeDate(75)=" + new String(tradeDate) + sep;
			if (FixUtils.isSet(account)) s += "Account(1)=" + new String(account) + sep;
			if (FixUtils.isSet(acctIDSource)) s += "AcctIDSource(660)=" + String.valueOf(acctIDSource) + sep;
			if (FixUtils.isSet(accountType)) s += "AccountType(581)=" + String.valueOf(accountType) + sep;
			if (FixUtils.isSet(dayBookingInst)) s += "DayBookingInst(589)=" + String.valueOf(dayBookingInst) + sep;
			if (FixUtils.isSet(bookingUnit)) s += "BookingUnit(590)=" + String.valueOf(bookingUnit) + sep;
			if (FixUtils.isSet(allocID)) s += "AllocID(70)=" + new String(allocID) + sep;
			if (FixUtils.isSet(preallocMethod)) s += "PreallocMethod(591)=" + String.valueOf(preallocMethod) + sep;
			if (FixUtils.isSet(preAllocGrp.noAllocs)) s += preAllocGrp.toString();
			if (FixUtils.isSet(settlType)) s += "SettlType(63)=" + new String(settlType) + sep;
			if (FixUtils.isSet(settlDate)) s += "SettlDate(64)=" + new String(settlDate) + sep;
			if (FixUtils.isSet(cashMargin)) s += "CashMargin(544)=" + String.valueOf(cashMargin) + sep;
			if (FixUtils.isSet(clearingFeeIndicator)) s += "ClearingFeeIndicator(635)=" + new String(clearingFeeIndicator) + sep;
			if (FixUtils.isSet(handlInst)) s += "HandlInst(21)=" + String.valueOf(handlInst) + sep;
			if (FixUtils.isSet(execInst)) s += "ExecInst(18)=" + new String(execInst) + sep;
			if (FixUtils.isSet(minQty)) s += "MinQty(110)=" + String.valueOf(minQty) + sep;
			if (FixUtils.isSet(matchIncrement)) s += "MatchIncrement(1089)=" + String.valueOf(matchIncrement) + sep;
			if (FixUtils.isSet(maxPriceLevels)) s += "MaxPriceLevels(1090)=" + String.valueOf(maxPriceLevels) + sep;
			if (FixUtils.isSet(displayInstruction.displayQty)) s += displayInstruction.toString();
			if (FixUtils.isSet(maxFloor)) s += "MaxFloor(111)=" + String.valueOf(maxFloor) + sep;
			if (FixUtils.isSet(exDestination)) s += "ExDestination(100)=" + new String(exDestination) + sep;
			if (FixUtils.isSet(exDestinationIDSource)) s += "ExDestinationIDSource(1133)=" + String.valueOf(exDestinationIDSource) + sep;
			if (FixUtils.isSet(trdgSesGrp.noTradingSessions)) s += trdgSesGrp.toString();
			if (FixUtils.isSet(processCode)) s += "ProcessCode(81)=" + String.valueOf(processCode) + sep;
			if (FixUtils.isSet(instrument.symbol)) s += instrument.toString();
			if (FixUtils.isSet(undInstrmtGrp.noUnderlyings)) s += undInstrmtGrp.toString();
			if (FixUtils.isSet(prevClosePx)) s += "PrevClosePx(140)=" + String.valueOf(prevClosePx) + sep;
			 s += "Side(54)=" + String.valueOf(side) + sep;
			if (FixUtils.isSet(sideValueInd)) s += "SideValueInd(401)=" + String.valueOf(sideValueInd) + sep;
			if (FixUtils.isSet(locateReqd)) s += "LocateReqd(114)=" + String.valueOf(locateReqd) + sep;
			if (FixUtils.isSet(transactTime)) s += "TransactTime(60)=" + new String(transactTime) + sep;
			if (FixUtils.isSet(stipulations.noStipulations)) s += stipulations.toString();
			if (FixUtils.isSet(qtyType)) s += "QtyType(854)=" + String.valueOf(qtyType) + sep;
			if (FixUtils.isSet(orderQtyData.orderQty)) s += orderQtyData.toString();
			if (FixUtils.isSet(ordType)) s += "OrdType(40)=" + String.valueOf(ordType) + sep;
			if (FixUtils.isSet(priceType)) s += "PriceType(423)=" + String.valueOf(priceType) + sep;
			if (FixUtils.isSet(price)) s += "Price(44)=" + String.valueOf(price) + sep;
			if (FixUtils.isSet(priceProtectionScope)) s += "PriceProtectionScope(1092)=" + String.valueOf(priceProtectionScope) + sep;
			if (FixUtils.isSet(stopPx)) s += "StopPx(99)=" + String.valueOf(stopPx) + sep;
			if (FixUtils.isSet(triggeringInstruction.triggerType)) s += triggeringInstruction.toString();
			if (FixUtils.isSet(spreadOrBenchmarkCurveData.spread)) s += spreadOrBenchmarkCurveData.toString();
			if (FixUtils.isSet(yieldData.yieldType)) s += yieldData.toString();
			if (FixUtils.isSet(currency)) s += "Currency(15)=" + new String(currency) + sep;
			if (FixUtils.isSet(complianceID)) s += "ComplianceID(376)=" + new String(complianceID) + sep;
			if (FixUtils.isSet(solicitedFlag)) s += "SolicitedFlag(377)=" + String.valueOf(solicitedFlag) + sep;
			if (FixUtils.isSet(iOIID)) s += "IOIID(23)=" + new String(iOIID) + sep;
			if (FixUtils.isSet(quoteID)) s += "QuoteID(117)=" + new String(quoteID) + sep;
			if (FixUtils.isSet(refOrderID)) s += "RefOrderID(1080)=" + new String(refOrderID) + sep;
			if (FixUtils.isSet(refOrderIDSource)) s += "RefOrderIDSource(1081)=" + String.valueOf(refOrderIDSource) + sep;
			if (FixUtils.isSet(timeInForce)) s += "TimeInForce(59)=" + String.valueOf(timeInForce) + sep;
			if (FixUtils.isSet(effectiveTime)) s += "EffectiveTime(168)=" + new String(effectiveTime) + sep;
			if (FixUtils.isSet(expireDate)) s += "ExpireDate(432)=" + new String(expireDate) + sep;
			if (FixUtils.isSet(expireTime)) s += "ExpireTime(126)=" + new String(expireTime) + sep;
			if (FixUtils.isSet(gTBookingInst)) s += "GTBookingInst(427)=" + String.valueOf(gTBookingInst) + sep;
			if (FixUtils.isSet(commissionData.commission)) s += commissionData.toString();
			if (FixUtils.isSet(orderCapacity)) s += "OrderCapacity(528)=" + String.valueOf(orderCapacity) + sep;
			if (FixUtils.isSet(orderRestrictions)) s += "OrderRestrictions(529)=" + new String(orderRestrictions) + sep;
			if (FixUtils.isSet(preTradeAnonymity)) s += "PreTradeAnonymity(1091)=" + String.valueOf(preTradeAnonymity) + sep;
			if (FixUtils.isSet(custOrderCapacity)) s += "CustOrderCapacity(582)=" + String.valueOf(custOrderCapacity) + sep;
			if (FixUtils.isSet(forexReq)) s += "ForexReq(121)=" + String.valueOf(forexReq) + sep;
			if (FixUtils.isSet(settlCurrency)) s += "SettlCurrency(120)=" + new String(settlCurrency) + sep;
			if (FixUtils.isSet(bookingType)) s += "BookingType(775)=" + String.valueOf(bookingType) + sep;
			if (FixUtils.isSet(text)) s += "Text(58)=" + new String(text) + sep;
			if (FixUtils.isSet(encodedTextLen)) s += "EncodedTextLen(354)=" + String.valueOf(encodedTextLen) + sep;
			if (FixUtils.isSet(encodedText)) s += "EncodedText(355)=" + new String(encodedText) + sep;
			if (FixUtils.isSet(settlDate2)) s += "SettlDate2(193)=" + new String(settlDate2) + sep;
			if (FixUtils.isSet(orderQty2)) s += "OrderQty2(192)=" + String.valueOf(orderQty2) + sep;
			if (FixUtils.isSet(price2)) s += "Price2(640)=" + String.valueOf(price2) + sep;
			if (FixUtils.isSet(positionEffect)) s += "PositionEffect(77)=" + String.valueOf(positionEffect) + sep;
			if (FixUtils.isSet(coveredOrUncovered)) s += "CoveredOrUncovered(203)=" + String.valueOf(coveredOrUncovered) + sep;
			if (FixUtils.isSet(maxShow)) s += "MaxShow(210)=" + String.valueOf(maxShow) + sep;
			if (FixUtils.isSet(pegInstructions.pegOffsetValue)) s += pegInstructions.toString();
			if (FixUtils.isSet(discretionInstructions.discretionInst)) s += discretionInstructions.toString();
			if (FixUtils.isSet(targetStrategy)) s += "TargetStrategy(847)=" + String.valueOf(targetStrategy) + sep;
			if (FixUtils.isSet(strategyParametersGrp.noStrategyParameters)) s += strategyParametersGrp.toString();
			if (FixUtils.isSet(targetStrategyParameters)) s += "TargetStrategyParameters(848)=" + new String(targetStrategyParameters) + sep;
			if (FixUtils.isSet(participationRate)) s += "ParticipationRate(849)=" + String.valueOf(participationRate) + sep;
			if (FixUtils.isSet(designation)) s += "Designation(494)=" + new String(designation) + sep;
		return s;

	}

	@Override
	public boolean equals(Object o) {
		if (! ( o instanceof ListOrdGrp)) return false;

			ListOrdGrp msg = (ListOrdGrp) o;

		if ( ! super.equals(msg) ) return false;

		if (!Utils.equals( clOrdID, msg.clOrdID)) return false;

		if (!Utils.equals( secondaryClOrdID, msg.secondaryClOrdID)) return false;

		if (!( listSeqNo==msg.listSeqNo)) return false;

		if (!Utils.equals( clOrdLinkID, msg.clOrdLinkID)) return false;

		if (!( settlInstMode==msg.settlInstMode)) return false;

		if (!parties.equals(msg.parties)) return false;

		if (!Utils.equals( account, msg.account)) return false;

		if (!( acctIDSource==msg.acctIDSource)) return false;

		if (!( accountType==msg.accountType)) return false;

		if (!( dayBookingInst==msg.dayBookingInst)) return false;

		if (!( bookingUnit==msg.bookingUnit)) return false;

		if (!Utils.equals( allocID, msg.allocID)) return false;

		if (!( preallocMethod==msg.preallocMethod)) return false;

		if (!preAllocGrp.equals(msg.preAllocGrp)) return false;

		if (!Utils.equals( settlType, msg.settlType)) return false;

		if (!( cashMargin==msg.cashMargin)) return false;

		if (!Utils.equals( clearingFeeIndicator, msg.clearingFeeIndicator)) return false;

		if (!( handlInst==msg.handlInst)) return false;

		if (!Utils.equals( execInst, msg.execInst)) return false;

		if (!( minQty==msg.minQty)) return false;

		if (!( matchIncrement==msg.matchIncrement)) return false;

		if (!( maxPriceLevels==msg.maxPriceLevels)) return false;

		if (!displayInstruction.equals(msg.displayInstruction)) return false;

		if (!( maxFloor==msg.maxFloor)) return false;

		if (!Utils.equals( exDestination, msg.exDestination)) return false;

		if (!( exDestinationIDSource==msg.exDestinationIDSource)) return false;

		if (!trdgSesGrp.equals(msg.trdgSesGrp)) return false;

		if (!( processCode==msg.processCode)) return false;

		if (!instrument.equals(msg.instrument)) return false;

		if (!undInstrmtGrp.equals(msg.undInstrmtGrp)) return false;

		if (!( prevClosePx==msg.prevClosePx)) return false;

		if (!( side==msg.side)) return false;

		if (!( sideValueInd==msg.sideValueInd)) return false;

		if (!( locateReqd==msg.locateReqd)) return false;

		if (!stipulations.equals(msg.stipulations)) return false;

		if (!( qtyType==msg.qtyType)) return false;

		if (!orderQtyData.equals(msg.orderQtyData)) return false;

		if (!( ordType==msg.ordType)) return false;

		if (!( priceType==msg.priceType)) return false;

		if (!( price==msg.price)) return false;

		if (!( priceProtectionScope==msg.priceProtectionScope)) return false;

		if (!( stopPx==msg.stopPx)) return false;

		if (!triggeringInstruction.equals(msg.triggeringInstruction)) return false;

		if (!spreadOrBenchmarkCurveData.equals(msg.spreadOrBenchmarkCurveData)) return false;

		if (!yieldData.equals(msg.yieldData)) return false;

		if (!Utils.equals( currency, msg.currency)) return false;

		if (!Utils.equals( complianceID, msg.complianceID)) return false;

		if (!( solicitedFlag==msg.solicitedFlag)) return false;

		if (!Utils.equals( iOIID, msg.iOIID)) return false;

		if (!Utils.equals( quoteID, msg.quoteID)) return false;

		if (!Utils.equals( refOrderID, msg.refOrderID)) return false;

		if (!( refOrderIDSource==msg.refOrderIDSource)) return false;

		if (!( timeInForce==msg.timeInForce)) return false;

		if (!( gTBookingInst==msg.gTBookingInst)) return false;

		if (!commissionData.equals(msg.commissionData)) return false;

		if (!( orderCapacity==msg.orderCapacity)) return false;

		if (!Utils.equals( orderRestrictions, msg.orderRestrictions)) return false;

		if (!( preTradeAnonymity==msg.preTradeAnonymity)) return false;

		if (!( custOrderCapacity==msg.custOrderCapacity)) return false;

		if (!( forexReq==msg.forexReq)) return false;

		if (!Utils.equals( settlCurrency, msg.settlCurrency)) return false;

		if (!( bookingType==msg.bookingType)) return false;

		if (!Utils.equals( text, msg.text)) return false;

		if (!( encodedTextLen==msg.encodedTextLen)) return false;

		if (!Utils.equals( encodedText, msg.encodedText)) return false;

		if (!( orderQty2==msg.orderQty2)) return false;

		if (!( price2==msg.price2)) return false;

		if (!( positionEffect==msg.positionEffect)) return false;

		if (!( coveredOrUncovered==msg.coveredOrUncovered)) return false;

		if (!( maxShow==msg.maxShow)) return false;

		if (!pegInstructions.equals(msg.pegInstructions)) return false;

		if (!discretionInstructions.equals(msg.discretionInstructions)) return false;

		if (!( targetStrategy==msg.targetStrategy)) return false;

		if (!strategyParametersGrp.equals(msg.strategyParametersGrp)) return false;

		if (!Utils.equals( targetStrategyParameters, msg.targetStrategyParameters)) return false;

		if (!( participationRate==msg.participationRate)) return false;

		if (!Utils.equals( designation, msg.designation)) return false;

		return true;
	}
}
}
