package org.tomac.protocol.fix.messaging.fix50sp2;

// DO NOT EDIT!!!
// This file is generated by FixMessageGenerator.
// If you need additional functionality, put it in a helper class
// that does not live in this folder!!!  Any java file in this folder 
// will be deleted upon the next run of the FixMessageGenerator!

import org.tomac.utils.Utils;

public interface FixMessageInfo
{

	public static final byte[] BEGINSTRING_VALUE = "FIXT.1.1".getBytes();
	public static final byte[] BEGINSTRING_VALUE_WITH_TAG = "8=FIXT.1.1".getBytes();
	public static final byte[] FLAVOUR = " fixprotocol.org FIX.5.0SP2".getBytes();
	public static final byte SOH = ( byte )0x01;
	public static final byte EQUALS = ( byte )'=';
	public static final byte DECIMAL = ( byte )'.';

	public static class MsgTypes
	{
		public static final byte[] UNKNOWN = "U0".getBytes();
		public static final byte[] HEARTBEAT = "0".getBytes();
		public static final byte[] TESTREQUEST = "1".getBytes();
		public static final byte[] RESENDREQUEST = "2".getBytes();
		public static final byte[] REJECT = "3".getBytes();
		public static final byte[] SEQUENCERESET = "4".getBytes();
		public static final byte[] LOGOUT = "5".getBytes();
		public static final byte[] IOI = "6".getBytes();
		public static final byte[] ADVERTISEMENT = "7".getBytes();
		public static final byte[] EXECUTIONREPORT = "8".getBytes();
		public static final byte[] ORDERCANCELREJECT = "9".getBytes();
		public static final byte[] LOGON = "A".getBytes();
		public static final byte[] NEWS = "B".getBytes();
		public static final byte[] EMAIL = "C".getBytes();
		public static final byte[] NEWORDERSINGLE = "D".getBytes();
		public static final byte[] NEWORDERLIST = "E".getBytes();
		public static final byte[] ORDERCANCELREQUEST = "F".getBytes();
		public static final byte[] ORDERCANCELREPLACEREQUEST = "G".getBytes();
		public static final byte[] ORDERSTATUSREQUEST = "H".getBytes();
		public static final byte[] ALLOCATIONINSTRUCTION = "J".getBytes();
		public static final byte[] LISTCANCELREQUEST = "K".getBytes();
		public static final byte[] LISTEXECUTE = "L".getBytes();
		public static final byte[] LISTSTATUSREQUEST = "M".getBytes();
		public static final byte[] LISTSTATUS = "N".getBytes();
		public static final byte[] ALLOCATIONINSTRUCTIONACK = "P".getBytes();
		public static final byte[] DONTKNOWTRADEDK = "Q".getBytes();
		public static final byte[] QUOTEREQUEST = "R".getBytes();
		public static final byte[] QUOTE = "S".getBytes();
		public static final byte[] SETTLEMENTINSTRUCTIONS = "T".getBytes();
		public static final byte[] MARKETDATAREQUEST = "V".getBytes();
		public static final byte[] MARKETDATASNAPSHOTFULLREFRESH = "W".getBytes();
		public static final byte[] MARKETDATAINCREMENTALREFRESH = "X".getBytes();
		public static final byte[] MARKETDATAREQUESTREJECT = "Y".getBytes();
		public static final byte[] QUOTECANCEL = "Z".getBytes();
		public static final byte[] QUOTESTATUSREQUEST = "a".getBytes();
		public static final byte[] MASSQUOTEACKNOWLEDGEMENT = "b".getBytes();
		public static final byte[] SECURITYDEFINITIONREQUEST = "c".getBytes();
		public static final byte[] SECURITYDEFINITION = "d".getBytes();
		public static final byte[] SECURITYSTATUSREQUEST = "e".getBytes();
		public static final byte[] SECURITYSTATUS = "f".getBytes();
		public static final byte[] TRADINGSESSIONSTATUSREQUEST = "g".getBytes();
		public static final byte[] TRADINGSESSIONSTATUS = "h".getBytes();
		public static final byte[] MASSQUOTE = "i".getBytes();
		public static final byte[] BUSINESSMESSAGEREJECT = "j".getBytes();
		public static final byte[] BIDREQUEST = "k".getBytes();
		public static final byte[] BIDRESPONSE = "l".getBytes();
		public static final byte[] LISTSTRIKEPRICE = "m".getBytes();
		public static final byte[] REGISTRATIONINSTRUCTIONS = "o".getBytes();
		public static final byte[] REGISTRATIONINSTRUCTIONSRESPONSE = "p".getBytes();
		public static final byte[] ORDERMASSCANCELREQUEST = "q".getBytes();
		public static final byte[] ORDERMASSCANCELREPORT = "r".getBytes();
		public static final byte[] NEWORDERCROSS = "s".getBytes();
		public static final byte[] CROSSORDERCANCELREPLACEREQUEST = "t".getBytes();
		public static final byte[] CROSSORDERCANCELREQUEST = "u".getBytes();
		public static final byte[] SECURITYTYPEREQUEST = "v".getBytes();
		public static final byte[] SECURITYTYPES = "w".getBytes();
		public static final byte[] SECURITYLISTREQUEST = "x".getBytes();
		public static final byte[] SECURITYLIST = "y".getBytes();
		public static final byte[] DERIVATIVESECURITYLISTREQUEST = "z".getBytes();
		public static final byte[] DERIVATIVESECURITYLIST = "AA".getBytes();
		public static final byte[] NEWORDERMULTILEG = "AB".getBytes();
		public static final byte[] MULTILEGORDERCANCELREPLACE = "AC".getBytes();
		public static final byte[] TRADECAPTUREREPORTREQUEST = "AD".getBytes();
		public static final byte[] TRADECAPTUREREPORT = "AE".getBytes();
		public static final byte[] ORDERMASSSTATUSREQUEST = "AF".getBytes();
		public static final byte[] QUOTEREQUESTREJECT = "AG".getBytes();
		public static final byte[] RFQREQUEST = "AH".getBytes();
		public static final byte[] QUOTESTATUSREPORT = "AI".getBytes();
		public static final byte[] QUOTERESPONSE = "AJ".getBytes();
		public static final byte[] CONFIRMATION = "AK".getBytes();
		public static final byte[] POSITIONMAINTENANCEREQUEST = "AL".getBytes();
		public static final byte[] POSITIONMAINTENANCEREPORT = "AM".getBytes();
		public static final byte[] REQUESTFORPOSITIONS = "AN".getBytes();
		public static final byte[] REQUESTFORPOSITIONSACK = "AO".getBytes();
		public static final byte[] POSITIONREPORT = "AP".getBytes();
		public static final byte[] TRADECAPTUREREPORTREQUESTACK = "AQ".getBytes();
		public static final byte[] TRADECAPTUREREPORTACK = "AR".getBytes();
		public static final byte[] ALLOCATIONREPORT = "AS".getBytes();
		public static final byte[] ALLOCATIONREPORTACK = "AT".getBytes();
		public static final byte[] CONFIRMATION_ACK = "AU".getBytes();
		public static final byte[] SETTLEMENTINSTRUCTIONREQUEST = "AV".getBytes();
		public static final byte[] ASSIGNMENTREPORT = "AW".getBytes();
		public static final byte[] COLLATERALREQUEST = "AX".getBytes();
		public static final byte[] COLLATERALASSIGNMENT = "AY".getBytes();
		public static final byte[] COLLATERALRESPONSE = "AZ".getBytes();
		public static final byte[] COLLATERALREPORT = "BA".getBytes();
		public static final byte[] COLLATERALINQUIRY = "BB".getBytes();
		public static final byte[] NETWORKCOUNTERPARTYSYSTEMSTATUSREQUEST = "BC".getBytes();
		public static final byte[] NETWORKCOUNTERPARTYSYSTEMSTATUSRESPONSE = "BD".getBytes();
		public static final byte[] USERREQUEST = "BE".getBytes();
		public static final byte[] USERRESPONSE = "BF".getBytes();
		public static final byte[] COLLATERALINQUIRYACK = "BG".getBytes();
		public static final byte[] CONFIRMATIONREQUEST = "BH".getBytes();
		public static final byte[] CONTRARYINTENTIONREPORT = "BO".getBytes();
		public static final byte[] SECURITYDEFINITIONUPDATEREPORT = "BP".getBytes();
		public static final byte[] SECURITYLISTUPDATEREPORT = "BK".getBytes();
		public static final byte[] ADJUSTEDPOSITIONREPORT = "BL".getBytes();
		public static final byte[] ALLOCATIONINSTRUCTIONALERT = "BM".getBytes();
		public static final byte[] EXECUTIONACKNOWLEDGEMENT = "BN".getBytes();
		public static final byte[] TRADINGSESSIONLIST = "BJ".getBytes();
		public static final byte[] TRADINGSESSIONLISTREQUEST = "BI".getBytes();
		public static final byte[] SETTLEMENTOBLIGATIONREPORT = "BQ".getBytes();
		public static final byte[] DERIVATIVESECURITYLISTUPDATEREPORT = "BR".getBytes();
		public static final byte[] TRADINGSESSIONLISTUPDATEREPORT = "BS".getBytes();
		public static final byte[] MARKETDEFINITIONREQUEST = "BT".getBytes();
		public static final byte[] MARKETDEFINITION = "BU".getBytes();
		public static final byte[] MARKETDEFINITIONUPDATEREPORT = "BV".getBytes();
		public static final byte[] USERNOTIFICATION = "CB".getBytes();
		public static final byte[] ORDERMASSACTIONREPORT = "BZ".getBytes();
		public static final byte[] ORDERMASSACTIONREQUEST = "CA".getBytes();
		public static final byte[] APPLICATIONMESSAGEREQUEST = "BW".getBytes();
		public static final byte[] APPLICATIONMESSAGEREQUESTACK = "BX".getBytes();
		public static final byte[] APPLICATIONMESSAGEREPORT = "BY".getBytes();
		public static final byte[] STREAMASSIGNMENTREQUEST = "CC".getBytes();
		public static final byte[] STREAMASSIGNMENTREPORT = "CD".getBytes();
		public static final byte[] STREAMASSIGNMENTREPORTACK = "CE".getBytes();
		public static final byte[] PARTYDETAILSLISTREQUEST = "CF".getBytes();
		public static final byte[] PARTYDETAILSLISTREPORT = "CG".getBytes();

		public static final int UNKNOWN_INT = 21808;
		public static final int HEARTBEAT_INT = 48;
		public static final int TESTREQUEST_INT = 49;
		public static final int RESENDREQUEST_INT = 50;
		public static final int REJECT_INT = 51;
		public static final int SEQUENCERESET_INT = 52;
		public static final int LOGOUT_INT = 53;
		public static final int IOI_INT = 54;
		public static final int ADVERTISEMENT_INT = 55;
		public static final int EXECUTIONREPORT_INT = 56;
		public static final int ORDERCANCELREJECT_INT = 57;
		public static final int LOGON_INT = 65;
		public static final int NEWS_INT = 66;
		public static final int EMAIL_INT = 67;
		public static final int NEWORDERSINGLE_INT = 68;
		public static final int NEWORDERLIST_INT = 69;
		public static final int ORDERCANCELREQUEST_INT = 70;
		public static final int ORDERCANCELREPLACEREQUEST_INT = 71;
		public static final int ORDERSTATUSREQUEST_INT = 72;
		public static final int ALLOCATIONINSTRUCTION_INT = 74;
		public static final int LISTCANCELREQUEST_INT = 75;
		public static final int LISTEXECUTE_INT = 76;
		public static final int LISTSTATUSREQUEST_INT = 77;
		public static final int LISTSTATUS_INT = 78;
		public static final int ALLOCATIONINSTRUCTIONACK_INT = 80;
		public static final int DONTKNOWTRADEDK_INT = 81;
		public static final int QUOTEREQUEST_INT = 82;
		public static final int QUOTE_INT = 83;
		public static final int SETTLEMENTINSTRUCTIONS_INT = 84;
		public static final int MARKETDATAREQUEST_INT = 86;
		public static final int MARKETDATASNAPSHOTFULLREFRESH_INT = 87;
		public static final int MARKETDATAINCREMENTALREFRESH_INT = 88;
		public static final int MARKETDATAREQUESTREJECT_INT = 89;
		public static final int QUOTECANCEL_INT = 90;
		public static final int QUOTESTATUSREQUEST_INT = 97;
		public static final int MASSQUOTEACKNOWLEDGEMENT_INT = 98;
		public static final int SECURITYDEFINITIONREQUEST_INT = 99;
		public static final int SECURITYDEFINITION_INT = 100;
		public static final int SECURITYSTATUSREQUEST_INT = 101;
		public static final int SECURITYSTATUS_INT = 102;
		public static final int TRADINGSESSIONSTATUSREQUEST_INT = 103;
		public static final int TRADINGSESSIONSTATUS_INT = 104;
		public static final int MASSQUOTE_INT = 105;
		public static final int BUSINESSMESSAGEREJECT_INT = 106;
		public static final int BIDREQUEST_INT = 107;
		public static final int BIDRESPONSE_INT = 108;
		public static final int LISTSTRIKEPRICE_INT = 109;
		public static final int REGISTRATIONINSTRUCTIONS_INT = 111;
		public static final int REGISTRATIONINSTRUCTIONSRESPONSE_INT = 112;
		public static final int ORDERMASSCANCELREQUEST_INT = 113;
		public static final int ORDERMASSCANCELREPORT_INT = 114;
		public static final int NEWORDERCROSS_INT = 115;
		public static final int CROSSORDERCANCELREPLACEREQUEST_INT = 116;
		public static final int CROSSORDERCANCELREQUEST_INT = 117;
		public static final int SECURITYTYPEREQUEST_INT = 118;
		public static final int SECURITYTYPES_INT = 119;
		public static final int SECURITYLISTREQUEST_INT = 120;
		public static final int SECURITYLIST_INT = 121;
		public static final int DERIVATIVESECURITYLISTREQUEST_INT = 122;
		public static final int DERIVATIVESECURITYLIST_INT = 16705;
		public static final int NEWORDERMULTILEG_INT = 16706;
		public static final int MULTILEGORDERCANCELREPLACE_INT = 16707;
		public static final int TRADECAPTUREREPORTREQUEST_INT = 16708;
		public static final int TRADECAPTUREREPORT_INT = 16709;
		public static final int ORDERMASSSTATUSREQUEST_INT = 16710;
		public static final int QUOTEREQUESTREJECT_INT = 16711;
		public static final int RFQREQUEST_INT = 16712;
		public static final int QUOTESTATUSREPORT_INT = 16713;
		public static final int QUOTERESPONSE_INT = 16714;
		public static final int CONFIRMATION_INT = 16715;
		public static final int POSITIONMAINTENANCEREQUEST_INT = 16716;
		public static final int POSITIONMAINTENANCEREPORT_INT = 16717;
		public static final int REQUESTFORPOSITIONS_INT = 16718;
		public static final int REQUESTFORPOSITIONSACK_INT = 16719;
		public static final int POSITIONREPORT_INT = 16720;
		public static final int TRADECAPTUREREPORTREQUESTACK_INT = 16721;
		public static final int TRADECAPTUREREPORTACK_INT = 16722;
		public static final int ALLOCATIONREPORT_INT = 16723;
		public static final int ALLOCATIONREPORTACK_INT = 16724;
		public static final int CONFIRMATION_ACK_INT = 16725;
		public static final int SETTLEMENTINSTRUCTIONREQUEST_INT = 16726;
		public static final int ASSIGNMENTREPORT_INT = 16727;
		public static final int COLLATERALREQUEST_INT = 16728;
		public static final int COLLATERALASSIGNMENT_INT = 16729;
		public static final int COLLATERALRESPONSE_INT = 16730;
		public static final int COLLATERALREPORT_INT = 16961;
		public static final int COLLATERALINQUIRY_INT = 16962;
		public static final int NETWORKCOUNTERPARTYSYSTEMSTATUSREQUEST_INT = 16963;
		public static final int NETWORKCOUNTERPARTYSYSTEMSTATUSRESPONSE_INT = 16964;
		public static final int USERREQUEST_INT = 16965;
		public static final int USERRESPONSE_INT = 16966;
		public static final int COLLATERALINQUIRYACK_INT = 16967;
		public static final int CONFIRMATIONREQUEST_INT = 16968;
		public static final int CONTRARYINTENTIONREPORT_INT = 16975;
		public static final int SECURITYDEFINITIONUPDATEREPORT_INT = 16976;
		public static final int SECURITYLISTUPDATEREPORT_INT = 16971;
		public static final int ADJUSTEDPOSITIONREPORT_INT = 16972;
		public static final int ALLOCATIONINSTRUCTIONALERT_INT = 16973;
		public static final int EXECUTIONACKNOWLEDGEMENT_INT = 16974;
		public static final int TRADINGSESSIONLIST_INT = 16970;
		public static final int TRADINGSESSIONLISTREQUEST_INT = 16969;
		public static final int SETTLEMENTOBLIGATIONREPORT_INT = 16977;
		public static final int DERIVATIVESECURITYLISTUPDATEREPORT_INT = 16978;
		public static final int TRADINGSESSIONLISTUPDATEREPORT_INT = 16979;
		public static final int MARKETDEFINITIONREQUEST_INT = 16980;
		public static final int MARKETDEFINITION_INT = 16981;
		public static final int MARKETDEFINITIONUPDATEREPORT_INT = 16982;
		public static final int USERNOTIFICATION_INT = 17218;
		public static final int ORDERMASSACTIONREPORT_INT = 16986;
		public static final int ORDERMASSACTIONREQUEST_INT = 17217;
		public static final int APPLICATIONMESSAGEREQUEST_INT = 16983;
		public static final int APPLICATIONMESSAGEREQUESTACK_INT = 16984;
		public static final int APPLICATIONMESSAGEREPORT_INT = 16985;
		public static final int STREAMASSIGNMENTREQUEST_INT = 17219;
		public static final int STREAMASSIGNMENTREPORT_INT = 17220;
		public static final int STREAMASSIGNMENTREPORTACK_INT = 17221;
		public static final int PARTYDETAILSLISTREQUEST_INT = 17222;
		public static final int PARTYDETAILSLISTREPORT_INT = 17223;
	}

	public static class AdvSide {
		public static final byte TRADE = 'T';
		public static final byte SELL = 'S';
		public static final byte BUY = 'B';
		public static final byte CROSS = 'X';
		public static boolean isValid(byte val) {
			if (( TRADE==val)) return true;
			if (( SELL==val)) return true;
			if (( BUY==val)) return true;
			if (( CROSS==val)) return true;
			return false;
		}
	}

	public static class AdvTransType {
		public static final byte[] REPLACE = "R".getBytes();
		public static final byte[] CANCEL = "C".getBytes();
		public static final byte[] NEW = "N".getBytes();
		public static boolean isValid(byte[] val) {
			if (Utils.equals( REPLACE, val)) return true;
			if (Utils.equals( CANCEL, val)) return true;
			if (Utils.equals( NEW, val)) return true;
			return false;
		}
	}

	public static class CommType {
		public static final byte ABSOLUTE_TOTAL_MONETARY_AMOUNT = '3';
		public static final byte PERCENT = '2';
		public static final byte PER_UNIT_IMPLYING_SHARES_PAR_CURRENCY_ETC = '1';
		public static final byte POINTS_PER_BOND_OR_CONTRACT_SUPPLY_CONTRACTMULTIPLIER_231_IN_THE = '6';
		public static final byte PERCENTAGE_WAIVED__ENHANCED_UNITS_FOR_CIV_BUY_ORDERS = '5';
		public static final byte PERCENTAGE_WAIVED__CASH_DISCOUNT_FOR_CIV_BUY_ORDERS = '4';
		public static boolean isValid(byte val) {
			if (( ABSOLUTE_TOTAL_MONETARY_AMOUNT==val)) return true;
			if (( PERCENT==val)) return true;
			if (( PER_UNIT_IMPLYING_SHARES_PAR_CURRENCY_ETC==val)) return true;
			if (( POINTS_PER_BOND_OR_CONTRACT_SUPPLY_CONTRACTMULTIPLIER_231_IN_THE==val)) return true;
			if (( PERCENTAGE_WAIVED__ENHANCED_UNITS_FOR_CIV_BUY_ORDERS==val)) return true;
			if (( PERCENTAGE_WAIVED__CASH_DISCOUNT_FOR_CIV_BUY_ORDERS==val)) return true;
			return false;
		}
	}

	public static class ExecInst {
		public static final byte[] GO_ALONG = "3".getBytes();
		public static final byte[] WORK = "2".getBytes();
		public static final byte[] NOT_HELD = "1".getBytes();
		public static final byte[] STAY_ON_OFFER_SIDE = "0".getBytes();
		public static final byte[] STRICT_SCALE = "7".getBytes();
		public static final byte[] PARTICIPANT_DONT_INITIATE = "6".getBytes();
		public static final byte[] HELD = "5".getBytes();
		public static final byte[] OVER_THE_DAY = "4".getBytes();
		public static final byte[] STAY_ON_BID_SIDE = "9".getBytes();
		public static final byte[] TRY_TO_SCALE = "8".getBytes();
		public static final byte[] PERCENT_OF_VOLUME_INDICATES_THAT_THE_SENDER_DOES_NOT_WANT_TO_BE_ = "D".getBytes();
		public static final byte[] DO_NOT_INCREASE__DNI = "E".getBytes();
		public static final byte[] DO_NOT_REDUCE__DNR = "F".getBytes();
		public static final byte[] ALL_OR_NONE__AON = "G".getBytes();
		public static final byte[] NO_CROSS_CROSS_IS_FORBIDDEN = "A".getBytes();
		public static final byte[] OK_TO_CROSS = "B".getBytes();
		public static final byte[] CALL_FIRST = "C".getBytes();
		public static final byte[] LAST_PEG_LAST_SALE = "L".getBytes();
		public static final byte[] MIDPRICE_PEG_MIDPRICE_OF_INSIDE_QUOTE = "M".getBytes();
		public static final byte[] NONNEGOTIABLE = "N".getBytes();
		public static final byte[] OPENING_PEG = "O".getBytes();
		public static final byte[] REINSTATE_ON_SYSTEM_FAILURE_MUTUALLY_EXCLUSIVE_WITH_Q_AND_L = "H".getBytes();
		public static final byte[] INSTITUTIONS_ONLY = "I".getBytes();
		public static final byte[] REINSTATE_ON_TRADING_HALT_MUTUALLY_EXCLUSIVE_WITH_K_AND_M = "J".getBytes();
		public static final byte[] CANCEL_ON_TRADING_HALT_MUTUALLY_EXCLUSIVE_WITH_J_AND_M = "K".getBytes();
		public static final byte[] CUSTOMER_DISPLAY_INSTRUCTION_RULE_11AC114 = "U".getBytes();
		public static final byte[] FIXED_PEG_TO_LOCAL_BEST_BID_OR_OFFER_AT_TIME_OF_ORDER = "T".getBytes();
		public static final byte[] PEG_TO_VWAP = "W".getBytes();
		public static final byte[] NETTING_FOR_FOREX = "V".getBytes();
		public static final byte[] CANCEL_ON_SYSTEM_FAILURE_MUTUALLY_EXCLUSIVE_WITH_H_AND_L = "Q".getBytes();
		public static final byte[] MARKET_PEG = "P".getBytes();
		public static final byte[] SUSPEND = "S".getBytes();
		public static final byte[] PRIMARY_PEG_PRIMARY_MARKET__BUY_AT_BIDSELL_AT_OFFER = "R".getBytes();
		public static final byte[] TRY_TO_STOP = "Y".getBytes();
		public static final byte[] TRADE_ALONG = "X".getBytes();
		public static final byte[] CANCEL_IF_NOT_BEST = "Z".getBytes();
		public static final byte[] INTERMARKET_SWEEP = "f".getBytes();
		public static final byte[] EXTERNAL_ROUTING_ALLOWED = "g".getBytes();
		public static final byte[] PEG_TO_LIMIT_PRICE = "d".getBytes();
		public static final byte[] WORK_TO_TARGET_STRATEGY = "e".getBytes();
		public static final byte[] STRICT_LIMIT_NO_PRICE_IMPROVEMENT = "b".getBytes();
		public static final byte[] IGNORE_PRICE_VALIDITY_CHECKS = "c".getBytes();
		public static final byte[] TRAILING_STOP_PEG = "a".getBytes();
		public static final byte[] REINSTATE_ON_CONNECTION_LOSS_MUTUALLY_EXCLUSIVE_WITH_O_AND_P = "n".getBytes();
		public static final byte[] CANCEL_ON_CONNECTION_LOSS_MUTUALLY_EXCLUSIVE_WITH_N_AND_P = "o".getBytes();
		public static final byte[] SUSPEND_ON_SYSTEM_FAILURE_MUTUALLY_EXCLUSIVE_WITH_H_AND_Q = "l".getBytes();
		public static final byte[] SUSPEND_ON_TRADING_HALT_MUTUALLY_EXCLUSIVE_WITH_J_AND_K = "m".getBytes();
		public static final byte[] SINGLE_EXECUTION_REQUESTED_FOR_BLOCK_TRADE = "j".getBytes();
		public static final byte[] BEST_EXECUTION = "k".getBytes();
		public static final byte[] EXTERNAL_ROUTING_NOT_ALLOWED = "h".getBytes();
		public static final byte[] IMBALANCE_ONLY = "i".getBytes();
		public static final byte[] EXECUTE_AS_FX_NEUTRAL = "t".getBytes();
		public static final byte[] EXECUTE_AS_DURATION_NEUTRAL = "s".getBytes();
		public static final byte[] EXECUTE_AS_DELTA_NEUTRAL_USING_VOLATILITY_PROVIDED = "r".getBytes();
		public static final byte[] RELEASE_FROM_SUSPENSION_MUTUALLY_EXCLUSIVE_WITH_S = "q".getBytes();
		public static final byte[] SUSPEND_ON_CONNECTION_LOSS_MUTUALLY_EXCLUSIVE_WITH_N_AND_O = "p".getBytes();
		public static boolean isValid(byte[] val) {
			if (Utils.equals( GO_ALONG, val)) return true;
			if (Utils.equals( WORK, val)) return true;
			if (Utils.equals( NOT_HELD, val)) return true;
			if (Utils.equals( STAY_ON_OFFER_SIDE, val)) return true;
			if (Utils.equals( STRICT_SCALE, val)) return true;
			if (Utils.equals( PARTICIPANT_DONT_INITIATE, val)) return true;
			if (Utils.equals( HELD, val)) return true;
			if (Utils.equals( OVER_THE_DAY, val)) return true;
			if (Utils.equals( STAY_ON_BID_SIDE, val)) return true;
			if (Utils.equals( TRY_TO_SCALE, val)) return true;
			if (Utils.equals( PERCENT_OF_VOLUME_INDICATES_THAT_THE_SENDER_DOES_NOT_WANT_TO_BE_, val)) return true;
			if (Utils.equals( DO_NOT_INCREASE__DNI, val)) return true;
			if (Utils.equals( DO_NOT_REDUCE__DNR, val)) return true;
			if (Utils.equals( ALL_OR_NONE__AON, val)) return true;
			if (Utils.equals( NO_CROSS_CROSS_IS_FORBIDDEN, val)) return true;
			if (Utils.equals( OK_TO_CROSS, val)) return true;
			if (Utils.equals( CALL_FIRST, val)) return true;
			if (Utils.equals( LAST_PEG_LAST_SALE, val)) return true;
			if (Utils.equals( MIDPRICE_PEG_MIDPRICE_OF_INSIDE_QUOTE, val)) return true;
			if (Utils.equals( NONNEGOTIABLE, val)) return true;
			if (Utils.equals( OPENING_PEG, val)) return true;
			if (Utils.equals( REINSTATE_ON_SYSTEM_FAILURE_MUTUALLY_EXCLUSIVE_WITH_Q_AND_L, val)) return true;
			if (Utils.equals( INSTITUTIONS_ONLY, val)) return true;
			if (Utils.equals( REINSTATE_ON_TRADING_HALT_MUTUALLY_EXCLUSIVE_WITH_K_AND_M, val)) return true;
			if (Utils.equals( CANCEL_ON_TRADING_HALT_MUTUALLY_EXCLUSIVE_WITH_J_AND_M, val)) return true;
			if (Utils.equals( CUSTOMER_DISPLAY_INSTRUCTION_RULE_11AC114, val)) return true;
			if (Utils.equals( FIXED_PEG_TO_LOCAL_BEST_BID_OR_OFFER_AT_TIME_OF_ORDER, val)) return true;
			if (Utils.equals( PEG_TO_VWAP, val)) return true;
			if (Utils.equals( NETTING_FOR_FOREX, val)) return true;
			if (Utils.equals( CANCEL_ON_SYSTEM_FAILURE_MUTUALLY_EXCLUSIVE_WITH_H_AND_L, val)) return true;
			if (Utils.equals( MARKET_PEG, val)) return true;
			if (Utils.equals( SUSPEND, val)) return true;
			if (Utils.equals( PRIMARY_PEG_PRIMARY_MARKET__BUY_AT_BIDSELL_AT_OFFER, val)) return true;
			if (Utils.equals( TRY_TO_STOP, val)) return true;
			if (Utils.equals( TRADE_ALONG, val)) return true;
			if (Utils.equals( CANCEL_IF_NOT_BEST, val)) return true;
			if (Utils.equals( INTERMARKET_SWEEP, val)) return true;
			if (Utils.equals( EXTERNAL_ROUTING_ALLOWED, val)) return true;
			if (Utils.equals( PEG_TO_LIMIT_PRICE, val)) return true;
			if (Utils.equals( WORK_TO_TARGET_STRATEGY, val)) return true;
			if (Utils.equals( STRICT_LIMIT_NO_PRICE_IMPROVEMENT, val)) return true;
			if (Utils.equals( IGNORE_PRICE_VALIDITY_CHECKS, val)) return true;
			if (Utils.equals( TRAILING_STOP_PEG, val)) return true;
			if (Utils.equals( REINSTATE_ON_CONNECTION_LOSS_MUTUALLY_EXCLUSIVE_WITH_O_AND_P, val)) return true;
			if (Utils.equals( CANCEL_ON_CONNECTION_LOSS_MUTUALLY_EXCLUSIVE_WITH_N_AND_P, val)) return true;
			if (Utils.equals( SUSPEND_ON_SYSTEM_FAILURE_MUTUALLY_EXCLUSIVE_WITH_H_AND_Q, val)) return true;
			if (Utils.equals( SUSPEND_ON_TRADING_HALT_MUTUALLY_EXCLUSIVE_WITH_J_AND_K, val)) return true;
			if (Utils.equals( SINGLE_EXECUTION_REQUESTED_FOR_BLOCK_TRADE, val)) return true;
			if (Utils.equals( BEST_EXECUTION, val)) return true;
			if (Utils.equals( EXTERNAL_ROUTING_NOT_ALLOWED, val)) return true;
			if (Utils.equals( IMBALANCE_ONLY, val)) return true;
			if (Utils.equals( EXECUTE_AS_FX_NEUTRAL, val)) return true;
			if (Utils.equals( EXECUTE_AS_DURATION_NEUTRAL, val)) return true;
			if (Utils.equals( EXECUTE_AS_DELTA_NEUTRAL_USING_VOLATILITY_PROVIDED, val)) return true;
			if (Utils.equals( RELEASE_FROM_SUSPENSION_MUTUALLY_EXCLUSIVE_WITH_S, val)) return true;
			if (Utils.equals( SUSPEND_ON_CONNECTION_LOSS_MUTUALLY_EXCLUSIVE_WITH_N_AND_O, val)) return true;
			return false;
		}
	}

	public static class ExecTransType {
		public static final byte STATUS = '3';
		public static final byte CORRECT = '2';
		public static final byte CANCEL = '1';
		public static final byte NEW = '0';
		public static boolean isValid(byte val) {
			if (( STATUS==val)) return true;
			if (( CORRECT==val)) return true;
			if (( CANCEL==val)) return true;
			if (( NEW==val)) return true;
			return false;
		}
	}

	public static class HandlInst {
		public static final byte MANUAL_ORDER_BEST_EXECUTION = '3';
		public static final byte AUTOMATED_EXECUTION_ORDER_PUBLIC_BROKER_INTERVENTION_OK = '2';
		public static final byte AUTOMATED_EXECUTION_ORDER_PRIVATE_NO_BROKER_INTERVENTION = '1';
		public static boolean isValid(byte val) {
			if (( MANUAL_ORDER_BEST_EXECUTION==val)) return true;
			if (( AUTOMATED_EXECUTION_ORDER_PUBLIC_BROKER_INTERVENTION_OK==val)) return true;
			if (( AUTOMATED_EXECUTION_ORDER_PRIVATE_NO_BROKER_INTERVENTION==val)) return true;
			return false;
		}
	}

	public static class SecurityIDSource {
		public static final byte[] VALOREN = "D".getBytes();
		public static final byte[] SICOVAM = "E".getBytes();
		public static final byte[] BELGIAN = "F".getBytes();
		public static final byte[] COMMON_CLEARSTREAM_AND_EUROCLEAR = "G".getBytes();
		public static final byte[] BLOOMBERG_SYMBOL = "A".getBytes();
		public static final byte[] WERTPAPIER = "B".getBytes();
		public static final byte[] DUTCH = "C".getBytes();
		public static final byte[] LETTER_OF_CREDIT = "L".getBytes();
		public static final byte[] MARKETPLACEASSIGNED_IDENTIFIER = "M".getBytes();
		public static final byte[] CLEARING_HOUSE__CLEARING_ORGANIZATION = "H".getBytes();
		public static final byte[] ISDAFPML_PRODUCT_SPECIFICATION_XML_IN_ENCODEDSECURITYDESC = "I".getBytes();
		public static final byte[] OPTION_PRICE_REPORTING_AUTHORITY = "J".getBytes();
		public static final byte[] ISDAFPML_PRODUCT_URL_URL_IN_SECURITYID = "K".getBytes();
		public static final byte[] QUIK = "3".getBytes();
		public static final byte[] SEDOL = "2".getBytes();
		public static final byte[] CUSIP = "1".getBytes();
		public static final byte[] ISO_COUNTRY_CODE = "7".getBytes();
		public static final byte[] ISO_CURRENCY_CODE = "6".getBytes();
		public static final byte[] RIC_CODE = "5".getBytes();
		public static final byte[] ISIN_NUMBER = "4".getBytes();
		public static final byte[] CONSOLIDATED_TAPE_ASSOCIATION_CTA_SYMBOL_SIAC_CTSCQS_LINE_FORMAT = "9".getBytes();
		public static final byte[] EXCHANGE_SYMBOL = "8".getBytes();
		public static boolean isValid(byte[] val) {
			if (Utils.equals( VALOREN, val)) return true;
			if (Utils.equals( SICOVAM, val)) return true;
			if (Utils.equals( BELGIAN, val)) return true;
			if (Utils.equals( COMMON_CLEARSTREAM_AND_EUROCLEAR, val)) return true;
			if (Utils.equals( BLOOMBERG_SYMBOL, val)) return true;
			if (Utils.equals( WERTPAPIER, val)) return true;
			if (Utils.equals( DUTCH, val)) return true;
			if (Utils.equals( LETTER_OF_CREDIT, val)) return true;
			if (Utils.equals( MARKETPLACEASSIGNED_IDENTIFIER, val)) return true;
			if (Utils.equals( CLEARING_HOUSE__CLEARING_ORGANIZATION, val)) return true;
			if (Utils.equals( ISDAFPML_PRODUCT_SPECIFICATION_XML_IN_ENCODEDSECURITYDESC, val)) return true;
			if (Utils.equals( OPTION_PRICE_REPORTING_AUTHORITY, val)) return true;
			if (Utils.equals( ISDAFPML_PRODUCT_URL_URL_IN_SECURITYID, val)) return true;
			if (Utils.equals( QUIK, val)) return true;
			if (Utils.equals( SEDOL, val)) return true;
			if (Utils.equals( CUSIP, val)) return true;
			if (Utils.equals( ISO_COUNTRY_CODE, val)) return true;
			if (Utils.equals( ISO_CURRENCY_CODE, val)) return true;
			if (Utils.equals( RIC_CODE, val)) return true;
			if (Utils.equals( ISIN_NUMBER, val)) return true;
			if (Utils.equals( CONSOLIDATED_TAPE_ASSOCIATION_CTA_SYMBOL_SIAC_CTSCQS_LINE_FORMAT, val)) return true;
			if (Utils.equals( EXCHANGE_SYMBOL, val)) return true;
			return false;
		}
	}

	public static class IOIQltyInd {
		public static final byte LOW = 'L';
		public static final byte MEDIUM = 'M';
		public static final byte HIGH = 'H';
		public static boolean isValid(byte val) {
			if (( LOW==val)) return true;
			if (( MEDIUM==val)) return true;
			if (( HIGH==val)) return true;
			return false;
		}
	}

	public static class IOIQty {
		public static final byte[] UNDISCLOSED_QUANTITY = "U".getBytes();
		public static final byte[] I1000000000 = "0".getBytes();
		public static final byte[] SMALL = "S".getBytes();
		public static final byte[] LARGE = "L".getBytes();
		public static final byte[] MEDIUM = "M".getBytes();
		public static boolean isValid(byte[] val) {
			if (Utils.equals( UNDISCLOSED_QUANTITY, val)) return true;
			if (Utils.equals( I1000000000, val)) return true;
			if (Utils.equals( SMALL, val)) return true;
			if (Utils.equals( LARGE, val)) return true;
			if (Utils.equals( MEDIUM, val)) return true;
			return false;
		}
	}

	public static class IOITransType {
		public static final byte REPLACE = 'R';
		public static final byte CANCEL = 'C';
		public static final byte NEW = 'N';
		public static boolean isValid(byte val) {
			if (( REPLACE==val)) return true;
			if (( CANCEL==val)) return true;
			if (( NEW==val)) return true;
			return false;
		}
	}

	public static class LastCapacity {
		public static final byte CROSS_AS_PRINCIPAL = '3';
		public static final byte CROSS_AS_AGENT = '2';
		public static final byte AGENT = '1';
		public static final byte PRINCIPAL = '4';
		public static boolean isValid(byte val) {
			if (( CROSS_AS_PRINCIPAL==val)) return true;
			if (( CROSS_AS_AGENT==val)) return true;
			if (( AGENT==val)) return true;
			if (( PRINCIPAL==val)) return true;
			return false;
		}
	}

	public static class MsgType {
		public static final byte[] REJECT = "3".getBytes();
		public static final byte[] RESENDREQUEST = "2".getBytes();
		public static final byte[] TESTREQUEST = "1".getBytes();
		public static final byte[] HEARTBEAT = "0".getBytes();
		public static final byte[] ADVERTISEMENT = "7".getBytes();
		public static final byte[] IOI = "6".getBytes();
		public static final byte[] LOGOUT = "5".getBytes();
		public static final byte[] SEQUENCERESET = "4".getBytes();
		public static final byte[] ORDERCANCELREJECT = "9".getBytes();
		public static final byte[] EXECUTIONREPORT = "8".getBytes();
		public static final byte[] NEWORDERSINGLE = "D".getBytes();
		public static final byte[] NEWORDERLIST = "E".getBytes();
		public static final byte[] ORDERCANCELREQUEST = "F".getBytes();
		public static final byte[] ORDERCANCELREPLACEREQUEST = "G".getBytes();
		public static final byte[] LOGON = "A".getBytes();
		public static final byte[] NEWS = "B".getBytes();
		public static final byte[] EMAIL = "C".getBytes();
		public static final byte[] LISTEXECUTE = "L".getBytes();
		public static final byte[] LISTSTATUSREQUEST = "M".getBytes();
		public static final byte[] LISTSTATUS = "N".getBytes();
		public static final byte[] ORDERSTATUSREQUEST = "H".getBytes();
		public static final byte[] ALLOCATIONINSTRUCTION = "J".getBytes();
		public static final byte[] LISTCANCELREQUEST = "K".getBytes();
		public static final byte[] SETTLEMENTINSTRUCTIONS = "T".getBytes();
		public static final byte[] MARKETDATASNAPSHOTFULLREFRESH = "W".getBytes();
		public static final byte[] MARKETDATAREQUEST = "V".getBytes();
		public static final byte[] DONTKNOWTRADEDK = "Q".getBytes();
		public static final byte[] ALLOCATIONINSTRUCTIONACK = "P".getBytes();
		public static final byte[] QUOTE = "S".getBytes();
		public static final byte[] QUOTEREQUEST = "R".getBytes();
		public static final byte[] MARKETDATAREQUESTREJECT = "Y".getBytes();
		public static final byte[] MARKETDATAINCREMENTALREFRESH = "X".getBytes();
		public static final byte[] QUOTECANCEL = "Z".getBytes();
		public static final byte[] SECURITYSTATUS = "f".getBytes();
		public static final byte[] TRADINGSESSIONSTATUSREQUEST = "g".getBytes();
		public static final byte[] SECURITYDEFINITION = "d".getBytes();
		public static final byte[] SECURITYSTATUSREQUEST = "e".getBytes();
		public static final byte[] MASSQUOTEACKNOWLEDGEMENT = "b".getBytes();
		public static final byte[] SECURITYDEFINITIONREQUEST = "c".getBytes();
		public static final byte[] QUOTESTATUSREQUEST = "a".getBytes();
		public static final byte[] XML_NON_FIX = "n".getBytes();
		public static final byte[] REGISTRATIONINSTRUCTIONS = "o".getBytes();
		public static final byte[] BIDRESPONSE = "l".getBytes();
		public static final byte[] LISTSTRIKEPRICE = "m".getBytes();
		public static final byte[] BUSINESSMESSAGEREJECT = "j".getBytes();
		public static final byte[] BIDREQUEST = "k".getBytes();
		public static final byte[] TRADINGSESSIONSTATUS = "h".getBytes();
		public static final byte[] MASSQUOTE = "i".getBytes();
		public static final byte[] SECURITYTYPES = "w".getBytes();
		public static final byte[] SECURITYTYPEREQUEST = "v".getBytes();
		public static final byte[] CROSSORDERCANCELREQUEST = "u".getBytes();
		public static final byte[] CROSSORDERCANCELREPLACEREQUEST = "t".getBytes();
		public static final byte[] NEWORDERCROSS = "s".getBytes();
		public static final byte[] ORDERMASSCANCELREPORT = "r".getBytes();
		public static final byte[] ORDERMASSCANCELREQUEST = "q".getBytes();
		public static final byte[] REGISTRATIONINSTRUCTIONSRESPONSE = "p".getBytes();
		public static final byte[] DERIVATIVESECURITYLISTREQUEST = "z".getBytes();
		public static final byte[] SECURITYLIST = "y".getBytes();
		public static final byte[] SECURITYLISTREQUEST = "x".getBytes();
		public static final byte[] ALLOCATIONREPORTACK = "AT".getBytes();
		public static final byte[] ALLOCATIONREPORT = "AS".getBytes();
		public static final byte[] TRADECAPTUREREPORTACK = "AR".getBytes();
		public static final byte[] TRADECAPTUREREPORTREQUESTACK = "AQ".getBytes();
		public static final byte[] COLLATERALREQUEST = "AX".getBytes();
		public static final byte[] ASSIGNMENTREPORT = "AW".getBytes();
		public static final byte[] SETTLEMENTINSTRUCTIONREQUEST = "AV".getBytes();
		public static final byte[] CONFIRMATION_ACK = "AU".getBytes();
		public static final byte[] COLLATERALRESPONSE = "AZ".getBytes();
		public static final byte[] COLLATERALASSIGNMENT = "AY".getBytes();
		public static final byte[] COLLATERALREPORT = "BA".getBytes();
		public static final byte[] MULTILEGORDERCANCELREPLACE = "AC".getBytes();
		public static final byte[] TRADECAPTUREREPORTREQUEST = "AD".getBytes();
		public static final byte[] DERIVATIVESECURITYLIST = "AA".getBytes();
		public static final byte[] NEWORDERMULTILEG = "AB".getBytes();
		public static final byte[] QUOTEREQUESTREJECT = "AG".getBytes();
		public static final byte[] RFQREQUEST = "AH".getBytes();
		public static final byte[] TRADECAPTUREREPORT = "AE".getBytes();
		public static final byte[] ORDERMASSSTATUSREQUEST = "AF".getBytes();
		public static final byte[] CONFIRMATION = "AK".getBytes();
		public static final byte[] POSITIONMAINTENANCEREQUEST = "AL".getBytes();
		public static final byte[] QUOTESTATUSREPORT = "AI".getBytes();
		public static final byte[] QUOTERESPONSE = "AJ".getBytes();
		public static final byte[] REQUESTFORPOSITIONSACK = "AO".getBytes();
		public static final byte[] POSITIONREPORT = "AP".getBytes();
		public static final byte[] POSITIONMAINTENANCEREPORT = "AM".getBytes();
		public static final byte[] REQUESTFORPOSITIONS = "AN".getBytes();
		public static final byte[] APPLICATIONMESSAGEREQUEST = "BW".getBytes();
		public static final byte[] MARKETDEFINITIONUPDATEREPORT = "BV".getBytes();
		public static final byte[] APPLICATIONMESSAGEREPORT = "BY".getBytes();
		public static final byte[] APPLICATIONMESSAGEREQUESTACK = "BX".getBytes();
		public static final byte[] TRADINGSESSIONLISTUPDATEREPORT = "BS".getBytes();
		public static final byte[] DERIVATIVESECURITYLISTUPDATEREPORT = "BR".getBytes();
		public static final byte[] MARKETDEFINITION = "BU".getBytes();
		public static final byte[] MARKETDEFINITIONREQUEST = "BT".getBytes();
		public static final byte[] USERNOTIFICATION = "CB".getBytes();
		public static final byte[] ORDERMASSACTIONREQUEST = "CA".getBytes();
		public static final byte[] ORDERMASSACTIONREPORT = "BZ".getBytes();
		public static final byte[] USERRESPONSE = "BF".getBytes();
		public static final byte[] COLLATERALINQUIRYACK = "BG".getBytes();
		public static final byte[] CONFIRMATIONREQUEST = "BH".getBytes();
		public static final byte[] TRADINGSESSIONLISTREQUEST = "BI".getBytes();
		public static final byte[] COLLATERALINQUIRY = "BB".getBytes();
		public static final byte[] NETWORKCOUNTERPARTYSYSTEMSTATUSREQUEST = "BC".getBytes();
		public static final byte[] NETWORKCOUNTERPARTYSYSTEMSTATUSRESPONSE = "BD".getBytes();
		public static final byte[] USERREQUEST = "BE".getBytes();
		public static final byte[] EXECUTIONACKNOWLEDGEMENT = "BN".getBytes();
		public static final byte[] CONTRARYINTENTIONREPORT = "BO".getBytes();
		public static final byte[] SECURITYDEFINITIONUPDATEREPORT = "BP".getBytes();
		public static final byte[] SETTLEMENTOBLIGATIONREPORT = "BQ".getBytes();
		public static final byte[] TRADINGSESSIONLIST = "BJ".getBytes();
		public static final byte[] SECURITYLISTUPDATEREPORT = "BK".getBytes();
		public static final byte[] ADJUSTEDPOSITIONREPORT = "BL".getBytes();
		public static final byte[] ALLOCATIONINSTRUCTIONALERT = "BM".getBytes();
		public static final byte[] PARTYDETAILSLISTREPORT = "CG".getBytes();
		public static final byte[] STREAMASSIGNMENTREPORTACK = "CE".getBytes();
		public static final byte[] PARTYDETAILSLISTREQUEST = "CF".getBytes();
		public static final byte[] STREAMASSIGNMENTREQUEST = "CC".getBytes();
		public static final byte[] STREAMASSIGNMENTREPORT = "CD".getBytes();
		public static boolean isValid(byte[] val) {
			if (Utils.equals( REJECT, val)) return true;
			if (Utils.equals( RESENDREQUEST, val)) return true;
			if (Utils.equals( TESTREQUEST, val)) return true;
			if (Utils.equals( HEARTBEAT, val)) return true;
			if (Utils.equals( ADVERTISEMENT, val)) return true;
			if (Utils.equals( IOI, val)) return true;
			if (Utils.equals( LOGOUT, val)) return true;
			if (Utils.equals( SEQUENCERESET, val)) return true;
			if (Utils.equals( ORDERCANCELREJECT, val)) return true;
			if (Utils.equals( EXECUTIONREPORT, val)) return true;
			if (Utils.equals( NEWORDERSINGLE, val)) return true;
			if (Utils.equals( NEWORDERLIST, val)) return true;
			if (Utils.equals( ORDERCANCELREQUEST, val)) return true;
			if (Utils.equals( ORDERCANCELREPLACEREQUEST, val)) return true;
			if (Utils.equals( LOGON, val)) return true;
			if (Utils.equals( NEWS, val)) return true;
			if (Utils.equals( EMAIL, val)) return true;
			if (Utils.equals( LISTEXECUTE, val)) return true;
			if (Utils.equals( LISTSTATUSREQUEST, val)) return true;
			if (Utils.equals( LISTSTATUS, val)) return true;
			if (Utils.equals( ORDERSTATUSREQUEST, val)) return true;
			if (Utils.equals( ALLOCATIONINSTRUCTION, val)) return true;
			if (Utils.equals( LISTCANCELREQUEST, val)) return true;
			if (Utils.equals( SETTLEMENTINSTRUCTIONS, val)) return true;
			if (Utils.equals( MARKETDATASNAPSHOTFULLREFRESH, val)) return true;
			if (Utils.equals( MARKETDATAREQUEST, val)) return true;
			if (Utils.equals( DONTKNOWTRADEDK, val)) return true;
			if (Utils.equals( ALLOCATIONINSTRUCTIONACK, val)) return true;
			if (Utils.equals( QUOTE, val)) return true;
			if (Utils.equals( QUOTEREQUEST, val)) return true;
			if (Utils.equals( MARKETDATAREQUESTREJECT, val)) return true;
			if (Utils.equals( MARKETDATAINCREMENTALREFRESH, val)) return true;
			if (Utils.equals( QUOTECANCEL, val)) return true;
			if (Utils.equals( SECURITYSTATUS, val)) return true;
			if (Utils.equals( TRADINGSESSIONSTATUSREQUEST, val)) return true;
			if (Utils.equals( SECURITYDEFINITION, val)) return true;
			if (Utils.equals( SECURITYSTATUSREQUEST, val)) return true;
			if (Utils.equals( MASSQUOTEACKNOWLEDGEMENT, val)) return true;
			if (Utils.equals( SECURITYDEFINITIONREQUEST, val)) return true;
			if (Utils.equals( QUOTESTATUSREQUEST, val)) return true;
			if (Utils.equals( XML_NON_FIX, val)) return true;
			if (Utils.equals( REGISTRATIONINSTRUCTIONS, val)) return true;
			if (Utils.equals( BIDRESPONSE, val)) return true;
			if (Utils.equals( LISTSTRIKEPRICE, val)) return true;
			if (Utils.equals( BUSINESSMESSAGEREJECT, val)) return true;
			if (Utils.equals( BIDREQUEST, val)) return true;
			if (Utils.equals( TRADINGSESSIONSTATUS, val)) return true;
			if (Utils.equals( MASSQUOTE, val)) return true;
			if (Utils.equals( SECURITYTYPES, val)) return true;
			if (Utils.equals( SECURITYTYPEREQUEST, val)) return true;
			if (Utils.equals( CROSSORDERCANCELREQUEST, val)) return true;
			if (Utils.equals( CROSSORDERCANCELREPLACEREQUEST, val)) return true;
			if (Utils.equals( NEWORDERCROSS, val)) return true;
			if (Utils.equals( ORDERMASSCANCELREPORT, val)) return true;
			if (Utils.equals( ORDERMASSCANCELREQUEST, val)) return true;
			if (Utils.equals( REGISTRATIONINSTRUCTIONSRESPONSE, val)) return true;
			if (Utils.equals( DERIVATIVESECURITYLISTREQUEST, val)) return true;
			if (Utils.equals( SECURITYLIST, val)) return true;
			if (Utils.equals( SECURITYLISTREQUEST, val)) return true;
			if (Utils.equals( ALLOCATIONREPORTACK, val)) return true;
			if (Utils.equals( ALLOCATIONREPORT, val)) return true;
			if (Utils.equals( TRADECAPTUREREPORTACK, val)) return true;
			if (Utils.equals( TRADECAPTUREREPORTREQUESTACK, val)) return true;
			if (Utils.equals( COLLATERALREQUEST, val)) return true;
			if (Utils.equals( ASSIGNMENTREPORT, val)) return true;
			if (Utils.equals( SETTLEMENTINSTRUCTIONREQUEST, val)) return true;
			if (Utils.equals( CONFIRMATION_ACK, val)) return true;
			if (Utils.equals( COLLATERALRESPONSE, val)) return true;
			if (Utils.equals( COLLATERALASSIGNMENT, val)) return true;
			if (Utils.equals( COLLATERALREPORT, val)) return true;
			if (Utils.equals( MULTILEGORDERCANCELREPLACE, val)) return true;
			if (Utils.equals( TRADECAPTUREREPORTREQUEST, val)) return true;
			if (Utils.equals( DERIVATIVESECURITYLIST, val)) return true;
			if (Utils.equals( NEWORDERMULTILEG, val)) return true;
			if (Utils.equals( QUOTEREQUESTREJECT, val)) return true;
			if (Utils.equals( RFQREQUEST, val)) return true;
			if (Utils.equals( TRADECAPTUREREPORT, val)) return true;
			if (Utils.equals( ORDERMASSSTATUSREQUEST, val)) return true;
			if (Utils.equals( CONFIRMATION, val)) return true;
			if (Utils.equals( POSITIONMAINTENANCEREQUEST, val)) return true;
			if (Utils.equals( QUOTESTATUSREPORT, val)) return true;
			if (Utils.equals( QUOTERESPONSE, val)) return true;
			if (Utils.equals( REQUESTFORPOSITIONSACK, val)) return true;
			if (Utils.equals( POSITIONREPORT, val)) return true;
			if (Utils.equals( POSITIONMAINTENANCEREPORT, val)) return true;
			if (Utils.equals( REQUESTFORPOSITIONS, val)) return true;
			if (Utils.equals( APPLICATIONMESSAGEREQUEST, val)) return true;
			if (Utils.equals( MARKETDEFINITIONUPDATEREPORT, val)) return true;
			if (Utils.equals( APPLICATIONMESSAGEREPORT, val)) return true;
			if (Utils.equals( APPLICATIONMESSAGEREQUESTACK, val)) return true;
			if (Utils.equals( TRADINGSESSIONLISTUPDATEREPORT, val)) return true;
			if (Utils.equals( DERIVATIVESECURITYLISTUPDATEREPORT, val)) return true;
			if (Utils.equals( MARKETDEFINITION, val)) return true;
			if (Utils.equals( MARKETDEFINITIONREQUEST, val)) return true;
			if (Utils.equals( USERNOTIFICATION, val)) return true;
			if (Utils.equals( ORDERMASSACTIONREQUEST, val)) return true;
			if (Utils.equals( ORDERMASSACTIONREPORT, val)) return true;
			if (Utils.equals( USERRESPONSE, val)) return true;
			if (Utils.equals( COLLATERALINQUIRYACK, val)) return true;
			if (Utils.equals( CONFIRMATIONREQUEST, val)) return true;
			if (Utils.equals( TRADINGSESSIONLISTREQUEST, val)) return true;
			if (Utils.equals( COLLATERALINQUIRY, val)) return true;
			if (Utils.equals( NETWORKCOUNTERPARTYSYSTEMSTATUSREQUEST, val)) return true;
			if (Utils.equals( NETWORKCOUNTERPARTYSYSTEMSTATUSRESPONSE, val)) return true;
			if (Utils.equals( USERREQUEST, val)) return true;
			if (Utils.equals( EXECUTIONACKNOWLEDGEMENT, val)) return true;
			if (Utils.equals( CONTRARYINTENTIONREPORT, val)) return true;
			if (Utils.equals( SECURITYDEFINITIONUPDATEREPORT, val)) return true;
			if (Utils.equals( SETTLEMENTOBLIGATIONREPORT, val)) return true;
			if (Utils.equals( TRADINGSESSIONLIST, val)) return true;
			if (Utils.equals( SECURITYLISTUPDATEREPORT, val)) return true;
			if (Utils.equals( ADJUSTEDPOSITIONREPORT, val)) return true;
			if (Utils.equals( ALLOCATIONINSTRUCTIONALERT, val)) return true;
			if (Utils.equals( PARTYDETAILSLISTREPORT, val)) return true;
			if (Utils.equals( STREAMASSIGNMENTREPORTACK, val)) return true;
			if (Utils.equals( PARTYDETAILSLISTREQUEST, val)) return true;
			if (Utils.equals( STREAMASSIGNMENTREQUEST, val)) return true;
			if (Utils.equals( STREAMASSIGNMENTREPORT, val)) return true;
			return false;
		}
	}

	public static class OrdStatus {
		public static final byte ACCEPTED_FOR_BIDDING = 'D';
		public static final byte PENDING_REPLACE_IE_RESULT_OF_ORDER_CANCELREPLACE_REQUEST = 'E';
		public static final byte PENDING_NEW = 'A';
		public static final byte CALCULATED = 'B';
		public static final byte EXPIRED = 'C';
		public static final byte DONE_FOR_DAY = '3';
		public static final byte FILLED = '2';
		public static final byte PARTIALLY_FILLED = '1';
		public static final byte NEW = '0';
		public static final byte STOPPED = '7';
		public static final byte PENDING_CANCEL_IE_RESULT_OF_ORDER_CANCEL_REQUEST = '6';
		public static final byte REPLACED_NO_LONGER_USED = '5';
		public static final byte CANCELED = '4';
		public static final byte SUSPENDED = '9';
		public static final byte REJECTED = '8';
		public static boolean isValid(byte val) {
			if (( ACCEPTED_FOR_BIDDING==val)) return true;
			if (( PENDING_REPLACE_IE_RESULT_OF_ORDER_CANCELREPLACE_REQUEST==val)) return true;
			if (( PENDING_NEW==val)) return true;
			if (( CALCULATED==val)) return true;
			if (( EXPIRED==val)) return true;
			if (( DONE_FOR_DAY==val)) return true;
			if (( FILLED==val)) return true;
			if (( PARTIALLY_FILLED==val)) return true;
			if (( NEW==val)) return true;
			if (( STOPPED==val)) return true;
			if (( PENDING_CANCEL_IE_RESULT_OF_ORDER_CANCEL_REQUEST==val)) return true;
			if (( REPLACED_NO_LONGER_USED==val)) return true;
			if (( CANCELED==val)) return true;
			if (( SUSPENDED==val)) return true;
			if (( REJECTED==val)) return true;
			return false;
		}
	}

	public static class OrdType {
		public static final byte PREVIOUSLY_QUOTED = 'D';
		public static final byte PREVIOUSLY_INDICATED = 'E';
		public static final byte FOREX_LIMIT_NO_LONGER_USED = 'F';
		public static final byte FOREX_SWAP = 'G';
		public static final byte ON_CLOSE_NO_LONGER_USED = 'A';
		public static final byte LIMIT_ON_CLOSE_NO_LONGER_USED = 'B';
		public static final byte FOREX_MARKET_NO_LONGER_USED = 'C';
		public static final byte PREVIOUS_FUND_VALUATION_POINT_HISTORIC_PRICING_FOR_CIV = 'L';
		public static final byte NEXT_FUND_VALUATION_POINT_FORWARD_PRICING_FOR_CIV = 'M';
		public static final byte FOREX_PREVIOUSLY_QUOTED_NO_LONGER_USED = 'H';
		public static final byte FUNARI_LIMIT_DAY_ORDER_WITH_UNEXECUTED_PORTION_HANDLES_AS_MARKET = 'I';
		public static final byte MARKET_IF_TOUCHED_MIT = 'J';
		public static final byte MARKET_WITH_LEFT_OVER_AS_LIMIT_MARKET_ORDER_WITH_UNEXECUTED_QUAN = 'K';
		public static final byte STOP__STOP_LOSS = '3';
		public static final byte LIMIT = '2';
		public static final byte MARKET = '1';
		public static final byte COUNTERORDER_SELECTION = 'Q';
		public static final byte LIMIT_OR_BETTER = '7';
		public static final byte PEGGED = 'P';
		public static final byte WITH_OR_WITHOUT = '6';
		public static final byte MARKET_ON_CLOSE_NO_LONGER_USED = '5';
		public static final byte STOP_LIMIT = '4';
		public static final byte ON_BASIS = '9';
		public static final byte LIMIT_WITH_OR_WITHOUT = '8';
		public static boolean isValid(byte val) {
			if (( PREVIOUSLY_QUOTED==val)) return true;
			if (( PREVIOUSLY_INDICATED==val)) return true;
			if (( FOREX_LIMIT_NO_LONGER_USED==val)) return true;
			if (( FOREX_SWAP==val)) return true;
			if (( ON_CLOSE_NO_LONGER_USED==val)) return true;
			if (( LIMIT_ON_CLOSE_NO_LONGER_USED==val)) return true;
			if (( FOREX_MARKET_NO_LONGER_USED==val)) return true;
			if (( PREVIOUS_FUND_VALUATION_POINT_HISTORIC_PRICING_FOR_CIV==val)) return true;
			if (( NEXT_FUND_VALUATION_POINT_FORWARD_PRICING_FOR_CIV==val)) return true;
			if (( FOREX_PREVIOUSLY_QUOTED_NO_LONGER_USED==val)) return true;
			if (( FUNARI_LIMIT_DAY_ORDER_WITH_UNEXECUTED_PORTION_HANDLES_AS_MARKET==val)) return true;
			if (( MARKET_IF_TOUCHED_MIT==val)) return true;
			if (( MARKET_WITH_LEFT_OVER_AS_LIMIT_MARKET_ORDER_WITH_UNEXECUTED_QUAN==val)) return true;
			if (( STOP__STOP_LOSS==val)) return true;
			if (( LIMIT==val)) return true;
			if (( MARKET==val)) return true;
			if (( COUNTERORDER_SELECTION==val)) return true;
			if (( LIMIT_OR_BETTER==val)) return true;
			if (( PEGGED==val)) return true;
			if (( WITH_OR_WITHOUT==val)) return true;
			if (( MARKET_ON_CLOSE_NO_LONGER_USED==val)) return true;
			if (( STOP_LIMIT==val)) return true;
			if (( ON_BASIS==val)) return true;
			if (( LIMIT_WITH_OR_WITHOUT==val)) return true;
			return false;
		}
	}

	public static class PossDupFlag {
		public static final boolean ORIGINAL_TRANSMISSION = false;
		public static final boolean POSSIBLE_DUPLICATE = true;
		public static boolean isValid(boolean val) {
			if (( ORIGINAL_TRANSMISSION==val)) return true;
			if (( POSSIBLE_DUPLICATE==val)) return true;
			return false;
		}
	}

	public static class Side {
		public static final byte SUBSCRIBE_EG_CIV = 'D';
		public static final byte REDEEM_EG_CIV = 'E';
		public static final byte LEND_FINANCING__IDENTIFIES_DIRECTION_OF_COLLATERAL = 'F';
		public static final byte BORROW_FINANCING__IDENTIFIES_DIRECTION_OF_COLLATERAL = 'G';
		public static final byte CROSS_SHORT_EXEMPT = 'A';
		public static final byte AS_DEFINED_FOR_USE_WITH_MULTILEG_INSTRUMENTS = 'B';
		public static final byte OPPOSITE_FOR_USE_WITH_MULTILEG_INSTRUMENTS = 'C';
		public static final byte BUY_MINUS = '3';
		public static final byte SELL = '2';
		public static final byte BUY = '1';
		public static final byte UNDISCLOSED_VALID_FOR_IOI_AND_LIST_ORDER_MESSAGES_ONLY = '7';
		public static final byte SELL_SHORT_EXEMPT = '6';
		public static final byte SELL_SHORT = '5';
		public static final byte SELL_PLUS = '4';
		public static final byte CROSS_SHORT = '9';
		public static final byte CROSS_ORDERS_WHERE_COUNTERPARTY_IS_AN_EXCHANGE_VALID_FOR_ALL_MES = '8';
		public static boolean isValid(byte val) {
			if (( SUBSCRIBE_EG_CIV==val)) return true;
			if (( REDEEM_EG_CIV==val)) return true;
			if (( LEND_FINANCING__IDENTIFIES_DIRECTION_OF_COLLATERAL==val)) return true;
			if (( BORROW_FINANCING__IDENTIFIES_DIRECTION_OF_COLLATERAL==val)) return true;
			if (( CROSS_SHORT_EXEMPT==val)) return true;
			if (( AS_DEFINED_FOR_USE_WITH_MULTILEG_INSTRUMENTS==val)) return true;
			if (( OPPOSITE_FOR_USE_WITH_MULTILEG_INSTRUMENTS==val)) return true;
			if (( BUY_MINUS==val)) return true;
			if (( SELL==val)) return true;
			if (( BUY==val)) return true;
			if (( UNDISCLOSED_VALID_FOR_IOI_AND_LIST_ORDER_MESSAGES_ONLY==val)) return true;
			if (( SELL_SHORT_EXEMPT==val)) return true;
			if (( SELL_SHORT==val)) return true;
			if (( SELL_PLUS==val)) return true;
			if (( CROSS_SHORT==val)) return true;
			if (( CROSS_ORDERS_WHERE_COUNTERPARTY_IS_AN_EXCHANGE_VALID_FOR_ALL_MES==val)) return true;
			return false;
		}
	}

	public static class TimeInForce {
		public static final byte IMMEDIATE_OR_CANCEL_IOC = '3';
		public static final byte AT_THE_OPENING_OPG = '2';
		public static final byte GOOD_TILL_CANCEL_GTC = '1';
		public static final byte DAY_OR_SESSION = '0';
		public static final byte AT_THE_CLOSE = '7';
		public static final byte GOOD_TILL_DATE_GTD = '6';
		public static final byte GOOD_TILL_CROSSING_GTX = '5';
		public static final byte FILL_OR_KILL_FOK = '4';
		public static final byte AT_CROSSING = '9';
		public static final byte GOOD_THROUGH_CROSSING = '8';
		public static boolean isValid(byte val) {
			if (( IMMEDIATE_OR_CANCEL_IOC==val)) return true;
			if (( AT_THE_OPENING_OPG==val)) return true;
			if (( GOOD_TILL_CANCEL_GTC==val)) return true;
			if (( DAY_OR_SESSION==val)) return true;
			if (( AT_THE_CLOSE==val)) return true;
			if (( GOOD_TILL_DATE_GTD==val)) return true;
			if (( GOOD_TILL_CROSSING_GTX==val)) return true;
			if (( FILL_OR_KILL_FOK==val)) return true;
			if (( AT_CROSSING==val)) return true;
			if (( GOOD_THROUGH_CROSSING==val)) return true;
			return false;
		}
	}

	public static class Urgency {
		public static final byte BACKGROUND = '2';
		public static final byte FLASH = '1';
		public static final byte NORMAL = '0';
		public static boolean isValid(byte val) {
			if (( BACKGROUND==val)) return true;
			if (( FLASH==val)) return true;
			if (( NORMAL==val)) return true;
			return false;
		}
	}

	public static class SettlType {
		public static final byte[] T2 = "3".getBytes();
		public static final byte[] NEXT_DAY_TOM__T1 = "2".getBytes();
		public static final byte[] CASH_TOD__T0 = "1".getBytes();
		public static final byte[] REGULAR__FX_SPOT_SETTLEMENT_T1_OR_T2_DEPENDING_ON_CURRENCY = "0".getBytes();
		public static final byte[] WHEN_AND_IF_ISSUED = "7".getBytes();
		public static final byte[] FUTURE = "6".getBytes();
		public static final byte[] BROKEN_DATE__FOR_FX_EXPRESSING_NONSTANDARD_TENOR_SETTLDATE_64_MU = "B".getBytes();
		public static final byte[] T4 = "5".getBytes();
		public static final byte[] FX_SPOT_NEXT_SETTLEMENT_SPOT1_AKA_NEXT_DAY = "C".getBytes();
		public static final byte[] T3 = "4".getBytes();
		public static final byte[] T5 = "9".getBytes();
		public static final byte[] SELLERS_OPTION = "8".getBytes();
		public static boolean isValid(byte[] val) {
			if (Utils.equals( T2, val)) return true;
			if (Utils.equals( NEXT_DAY_TOM__T1, val)) return true;
			if (Utils.equals( CASH_TOD__T0, val)) return true;
			if (Utils.equals( REGULAR__FX_SPOT_SETTLEMENT_T1_OR_T2_DEPENDING_ON_CURRENCY, val)) return true;
			if (Utils.equals( WHEN_AND_IF_ISSUED, val)) return true;
			if (Utils.equals( FUTURE, val)) return true;
			if (Utils.equals( BROKEN_DATE__FOR_FX_EXPRESSING_NONSTANDARD_TENOR_SETTLDATE_64_MU, val)) return true;
			if (Utils.equals( T4, val)) return true;
			if (Utils.equals( FX_SPOT_NEXT_SETTLEMENT_SPOT1_AKA_NEXT_DAY, val)) return true;
			if (Utils.equals( T3, val)) return true;
			if (Utils.equals( T5, val)) return true;
			if (Utils.equals( SELLERS_OPTION, val)) return true;
			return false;
		}
	}

	public static class SymbolSfx {
		public static final byte[] EUCP_WITH_LUMPSUM_INTEREST_RATHER_THAN_DISCOUNT_PRICE = "CD".getBytes();
		public static final byte[] WHEN_ISSUED_FOR_A_SECURITY_TO_BE_REISSUED_UNDER_AN_OLD_CUSIP_OR_ = "WI".getBytes();
		public static boolean isValid(byte[] val) {
			if (Utils.equals( EUCP_WITH_LUMPSUM_INTEREST_RATHER_THAN_DISCOUNT_PRICE, val)) return true;
			if (Utils.equals( WHEN_ISSUED_FOR_A_SECURITY_TO_BE_REISSUED_UNDER_AN_OLD_CUSIP_OR_, val)) return true;
			return false;
		}
	}

	public static class AllocTransType {
		public static final byte PRELIMINARY_WITHOUT_MISCFEES_AND_NETMONEY_REMOVEDREPLACED = '3';
		public static final byte CANCEL = '2';
		public static final byte REPLACE = '1';
		public static final byte NEW = '0';
		public static final byte REVERSAL = '6';
		public static final byte CALCULATED_WITHOUT_PRELIMINARY_SENT_UNSOLICITED_BY_BROKER_INCLUD = '5';
		public static final byte CALCULATED_INCLUDES_MISCFEES_AND_NETMONEY_REMOVEDREPLACED = '4';
		public static boolean isValid(byte val) {
			if (( PRELIMINARY_WITHOUT_MISCFEES_AND_NETMONEY_REMOVEDREPLACED==val)) return true;
			if (( CANCEL==val)) return true;
			if (( REPLACE==val)) return true;
			if (( NEW==val)) return true;
			if (( REVERSAL==val)) return true;
			if (( CALCULATED_WITHOUT_PRELIMINARY_SENT_UNSOLICITED_BY_BROKER_INCLUD==val)) return true;
			if (( CALCULATED_INCLUDES_MISCFEES_AND_NETMONEY_REMOVEDREPLACED==val)) return true;
			return false;
		}
	}

	public static class PositionEffect {
		public static final byte DEFAULT = 'D';
		public static final byte FIFO = 'F';
		public static final byte ROLLED = 'R';
		public static final byte CLOSE = 'C';
		public static final byte CLOSE_BUT_NOTIFY_ON_OPEN = 'N';
		public static final byte OPEN = 'O';
		public static boolean isValid(byte val) {
			if (( DEFAULT==val)) return true;
			if (( FIFO==val)) return true;
			if (( ROLLED==val)) return true;
			if (( CLOSE==val)) return true;
			if (( CLOSE_BUT_NOTIFY_ON_OPEN==val)) return true;
			if (( OPEN==val)) return true;
			return false;
		}
	}

	public static class ProcessCode {
		public static final byte STEPOUT = '3';
		public static final byte STEPIN = '2';
		public static final byte SOFT_DOLLAR = '1';
		public static final byte REGULAR = '0';
		public static final byte PLAN_SPONSOR = '6';
		public static final byte SOFTDOLLAR_STEPOUT = '5';
		public static final byte SOFTDOLLAR_STEPIN = '4';
		public static boolean isValid(byte val) {
			if (( STEPOUT==val)) return true;
			if (( STEPIN==val)) return true;
			if (( SOFT_DOLLAR==val)) return true;
			if (( REGULAR==val)) return true;
			if (( PLAN_SPONSOR==val)) return true;
			if (( SOFTDOLLAR_STEPOUT==val)) return true;
			if (( SOFTDOLLAR_STEPIN==val)) return true;
			return false;
		}
	}

	public static class AllocStatus {
		public static final long RECEIVED_RECEIVED_NOT_YET_PROCESSED = 3;
		public static final long ACCOUNT_LEVEL_REJECT = 2;
		public static final long BLOCK_LEVEL_REJECT = 1;
		public static final long ACCEPTED_SUCCESSFULLY_PROCESSED = 0;
		public static final long REVERSED = 7;
		public static final long ALLOCATION_PENDING = 6;
		public static final long REJECTED_BY_INTERMEDIARY = 5;
		public static final long INCOMPLETE = 4;
		public static boolean isValid(long val) {
			if (( RECEIVED_RECEIVED_NOT_YET_PROCESSED==val)) return true;
			if (( ACCOUNT_LEVEL_REJECT==val)) return true;
			if (( BLOCK_LEVEL_REJECT==val)) return true;
			if (( ACCEPTED_SUCCESSFULLY_PROCESSED==val)) return true;
			if (( REVERSED==val)) return true;
			if (( ALLOCATION_PENDING==val)) return true;
			if (( REJECTED_BY_INTERMEDIARY==val)) return true;
			if (( INCOMPLETE==val)) return true;
			return false;
		}
	}

	public static class AllocRejCode {
		public static final long WAREHOUSE_REQUEST_REJECTED = 13;
		public static final long MISMATCHED_DATA = 11;
		public static final long UNKNOWN_CLORDID = 12;
		public static final long UNKNOWN_EXECUTING_BROKER_MNEMONIC = 3;
		public static final long INCORRECT_AVERAGEG_PRICE = 2;
		public static final long INCORRECT_QUANTITY = 1;
		public static final long UNKNOWN_OR_STALE_EXECID = 10;
		public static final long UNKNOWN_ACCOUNTS = 0;
		public static final long OTHER_FURTHER_IN_TEXT_58 = 7;
		public static final long UNKNOWN_LISTID_66 = 6;
		public static final long UNKNOWN_ORDERID_37 = 5;
		public static final long COMMISSION_DIFFERENCE = 4;
		public static final long CALCULATION_DIFFERENCE = 9;
		public static final long INCORRECT_ALLOCATED_QUANTITY = 8;
		public static final long OTHER = 99;
		public static boolean isValid(long val) {
			if (( WAREHOUSE_REQUEST_REJECTED==val)) return true;
			if (( MISMATCHED_DATA==val)) return true;
			if (( UNKNOWN_CLORDID==val)) return true;
			if (( UNKNOWN_EXECUTING_BROKER_MNEMONIC==val)) return true;
			if (( INCORRECT_AVERAGEG_PRICE==val)) return true;
			if (( INCORRECT_QUANTITY==val)) return true;
			if (( UNKNOWN_OR_STALE_EXECID==val)) return true;
			if (( UNKNOWN_ACCOUNTS==val)) return true;
			if (( OTHER_FURTHER_IN_TEXT_58==val)) return true;
			if (( UNKNOWN_LISTID_66==val)) return true;
			if (( UNKNOWN_ORDERID_37==val)) return true;
			if (( COMMISSION_DIFFERENCE==val)) return true;
			if (( CALCULATION_DIFFERENCE==val)) return true;
			if (( INCORRECT_ALLOCATED_QUANTITY==val)) return true;
			if (( OTHER==val)) return true;
			return false;
		}
	}

	public static class EmailType {
		public static final byte ADMIN_REPLY = '2';
		public static final byte REPLY = '1';
		public static final byte NEW = '0';
		public static boolean isValid(byte val) {
			if (( ADMIN_REPLY==val)) return true;
			if (( REPLY==val)) return true;
			if (( NEW==val)) return true;
			return false;
		}
	}

	public static class PossResend {
		public static final boolean ORIGINAL_TRANSMISSION = false;
		public static final boolean POSSIBLE_RESEND = true;
		public static boolean isValid(boolean val) {
			if (( ORIGINAL_TRANSMISSION==val)) return true;
			if (( POSSIBLE_RESEND==val)) return true;
			return false;
		}
	}

	public static class EncryptMethod {
		public static final long PKCS__DES_PROPRIETARY = 3;
		public static final long DES_ECB_MODE = 2;
		public static final long PKCS_PROPRIETARY = 1;
		public static final long NONE__OTHER = 0;
		public static final long PEM__DESMD5_SEE_APP_NOTE_ON_FIX_WEB_SITE = 6;
		public static final long PGP__DESMD5_SEE_APP_NOTE_ON_FIX_WEB_SITE = 5;
		public static final long PGP__DES_DEFUNCT = 4;
		public static boolean isValid(long val) {
			if (( PKCS__DES_PROPRIETARY==val)) return true;
			if (( DES_ECB_MODE==val)) return true;
			if (( PKCS_PROPRIETARY==val)) return true;
			if (( NONE__OTHER==val)) return true;
			if (( PEM__DESMD5_SEE_APP_NOTE_ON_FIX_WEB_SITE==val)) return true;
			if (( PGP__DESMD5_SEE_APP_NOTE_ON_FIX_WEB_SITE==val)) return true;
			if (( PGP__DES_DEFUNCT==val)) return true;
			return false;
		}
	}

	public static class CxlRejReason {
		public static final long ORDER_ALREADY_IN_PENDING_CANCEL_OR_PENDING_REPLACE_STATUS = 3;
		public static final long BROKER__EXCHANGE_OPTION = 2;
		public static final long UNKNOWN_ORDER = 1;
		public static final long TOO_LATE_TO_CANCEL = 0;
		public static final long PRICE_EXCEEDS_CURRENT_PRICE = 7;
		public static final long DUPLICATE_CLORDID_11_RECEIVED = 6;
		public static final long ORIGORDMODTIME_586_DID_NOT_MATCH_LAST_TRANSACTTIME_60_OF_ORDER = 5;
		public static final long UNABLE_TO_PROCESS_ORDER_MASS_CANCEL_REQUEST = 4;
		public static final long INVALID_PRICE_INCREMENT = 18;
		public static final long PRICE_EXCEEDS_CURRENT_PRICE_BAND = 8;
		public static final long OTHER = 99;
		public static boolean isValid(long val) {
			if (( ORDER_ALREADY_IN_PENDING_CANCEL_OR_PENDING_REPLACE_STATUS==val)) return true;
			if (( BROKER__EXCHANGE_OPTION==val)) return true;
			if (( UNKNOWN_ORDER==val)) return true;
			if (( TOO_LATE_TO_CANCEL==val)) return true;
			if (( PRICE_EXCEEDS_CURRENT_PRICE==val)) return true;
			if (( DUPLICATE_CLORDID_11_RECEIVED==val)) return true;
			if (( ORIGORDMODTIME_586_DID_NOT_MATCH_LAST_TRANSACTTIME_60_OF_ORDER==val)) return true;
			if (( UNABLE_TO_PROCESS_ORDER_MASS_CANCEL_REQUEST==val)) return true;
			if (( INVALID_PRICE_INCREMENT==val)) return true;
			if (( PRICE_EXCEEDS_CURRENT_PRICE_BAND==val)) return true;
			if (( OTHER==val)) return true;
			return false;
		}
	}

	public static class OrdRejReason {
		public static final long INVALID_PRICE_INCREMENT = 18;
		public static final long UNKNOWN_ACCOUNTS = 15;
		public static final long PRICE_EXCEEDS_CURRENT_PRICE_BAND = 16;
		public static final long INCORRECT_QUANTITY = 13;
		public static final long INCORRECT_ALLOCATED_QUANTITY = 14;
		public static final long UNSUPPORTED_ORDER_CHARACTERISTIC = 11;
		public static final long SURVEILLENCE_OPTION = 12;
		public static final long ORDER_EXCEEDS_LIMIT = 3;
		public static final long EXCHANGE_CLOSED = 2;
		public static final long UNKNOWN_SYMBOL = 1;
		public static final long INVALID_INVESTOR_ID = 10;
		public static final long BROKER__EXCHANGE_OPTION = 0;
		public static final long DUPLICATE_OF_A_VERBALLY_COMMUNICATED_ORDER = 7;
		public static final long DUPLICATE_ORDER_EG_DUPE_CLORDID = 6;
		public static final long UNKNOWN_ORDER = 5;
		public static final long TOO_LATE_TO_ENTER = 4;
		public static final long TRADE_ALONG_REQUIRED = 9;
		public static final long STALE_ORDER = 8;
		public static final long OTHER = 99;
		public static boolean isValid(long val) {
			if (( INVALID_PRICE_INCREMENT==val)) return true;
			if (( UNKNOWN_ACCOUNTS==val)) return true;
			if (( PRICE_EXCEEDS_CURRENT_PRICE_BAND==val)) return true;
			if (( INCORRECT_QUANTITY==val)) return true;
			if (( INCORRECT_ALLOCATED_QUANTITY==val)) return true;
			if (( UNSUPPORTED_ORDER_CHARACTERISTIC==val)) return true;
			if (( SURVEILLENCE_OPTION==val)) return true;
			if (( ORDER_EXCEEDS_LIMIT==val)) return true;
			if (( EXCHANGE_CLOSED==val)) return true;
			if (( UNKNOWN_SYMBOL==val)) return true;
			if (( INVALID_INVESTOR_ID==val)) return true;
			if (( BROKER__EXCHANGE_OPTION==val)) return true;
			if (( DUPLICATE_OF_A_VERBALLY_COMMUNICATED_ORDER==val)) return true;
			if (( DUPLICATE_ORDER_EG_DUPE_CLORDID==val)) return true;
			if (( UNKNOWN_ORDER==val)) return true;
			if (( TOO_LATE_TO_ENTER==val)) return true;
			if (( TRADE_ALONG_REQUIRED==val)) return true;
			if (( STALE_ORDER==val)) return true;
			if (( OTHER==val)) return true;
			return false;
		}
	}

	public static class IOIQualifier {
		public static final byte VWAP_VOLUME_WEIGHTED_AVERAGE_PRICE = 'D';
		public static final byte ALL_OR_NONE_AON = 'A';
		public static final byte MARKET_ON_CLOSE_MOC_HELD_TO_CLOSE = 'B';
		public static final byte AT_THE_CLOSE_AROUNDNOT_HELD_TO_CLOSE = 'C';
		public static final byte LIMIT = 'L';
		public static final byte MORE_BEHIND = 'M';
		public static final byte AT_THE_OPEN = 'O';
		public static final byte IN_TOUCH_WITH = 'I';
		public static final byte THROUGH_THE_DAY = 'T';
		public static final byte INDICATION__WORKING_AWAY = 'W';
		public static final byte VERSUS = 'V';
		public static final byte AT_THE_MARKET_PREVIOUSLY_CALLED_CURRENT_QUOTE = 'Q';
		public static final byte TAKING_A_POSITION = 'P';
		public static final byte PORTFOLIO_SHOWN = 'S';
		public static final byte READY_TO_TRADE = 'R';
		public static final byte AT_THE_MIDPOINT = 'Y';
		public static final byte CROSSING_OPPORTUNITY = 'X';
		public static final byte PREOPEN = 'Z';
		public static boolean isValid(byte val) {
			if (( VWAP_VOLUME_WEIGHTED_AVERAGE_PRICE==val)) return true;
			if (( ALL_OR_NONE_AON==val)) return true;
			if (( MARKET_ON_CLOSE_MOC_HELD_TO_CLOSE==val)) return true;
			if (( AT_THE_CLOSE_AROUNDNOT_HELD_TO_CLOSE==val)) return true;
			if (( LIMIT==val)) return true;
			if (( MORE_BEHIND==val)) return true;
			if (( AT_THE_OPEN==val)) return true;
			if (( IN_TOUCH_WITH==val)) return true;
			if (( THROUGH_THE_DAY==val)) return true;
			if (( INDICATION__WORKING_AWAY==val)) return true;
			if (( VERSUS==val)) return true;
			if (( AT_THE_MARKET_PREVIOUSLY_CALLED_CURRENT_QUOTE==val)) return true;
			if (( TAKING_A_POSITION==val)) return true;
			if (( PORTFOLIO_SHOWN==val)) return true;
			if (( READY_TO_TRADE==val)) return true;
			if (( AT_THE_MIDPOINT==val)) return true;
			if (( CROSSING_OPPORTUNITY==val)) return true;
			if (( PREOPEN==val)) return true;
			return false;
		}
	}

	public static class ReportToExch {
		public static final boolean INDICATES_THE_PARTY_SENDING_MESSAGE_WILL_REPORT_TRADE = false;
		public static final boolean INDICATES_THE_PARTY_RECEIVING_MESSAGE_MUST_REPORT_TRADE = true;
		public static boolean isValid(boolean val) {
			if (( INDICATES_THE_PARTY_SENDING_MESSAGE_WILL_REPORT_TRADE==val)) return true;
			if (( INDICATES_THE_PARTY_RECEIVING_MESSAGE_MUST_REPORT_TRADE==val)) return true;
			return false;
		}
	}

	public static class LocateReqd {
		public static final boolean INDICATES_THE_BROKER_IS_NOT_REQUIRED_TO_LOCATE = false;
		public static final boolean INDICATES_THE_BROKER_IS_RESPONSIBLE_FOR_LOCATING_THE_STOCK = true;
		public static boolean isValid(boolean val) {
			if (( INDICATES_THE_BROKER_IS_NOT_REQUIRED_TO_LOCATE==val)) return true;
			if (( INDICATES_THE_BROKER_IS_RESPONSIBLE_FOR_LOCATING_THE_STOCK==val)) return true;
			return false;
		}
	}

	public static class ForexReq {
		public static final boolean DO_NOT_EXECUTE_FOREX_AFTER_SECURITY_TRADE = false;
		public static final boolean EXECUTE_FOREX_AFTER_SECURITY_TRADE = true;
		public static boolean isValid(boolean val) {
			if (( DO_NOT_EXECUTE_FOREX_AFTER_SECURITY_TRADE==val)) return true;
			if (( EXECUTE_FOREX_AFTER_SECURITY_TRADE==val)) return true;
			return false;
		}
	}

	public static class GapFillFlag {
		public static final boolean SEQUENCE_RESET_IGNORE_MSG_SEQ_NUM_NA_FOR_FIXML__NOT_USED = false;
		public static final boolean GAP_FILL_MESSAGE_MSG_SEQ_NUM_FIELD_VALID = true;
		public static boolean isValid(boolean val) {
			if (( SEQUENCE_RESET_IGNORE_MSG_SEQ_NUM_NA_FOR_FIXML__NOT_USED==val)) return true;
			if (( GAP_FILL_MESSAGE_MSG_SEQ_NUM_FIELD_VALID==val)) return true;
			return false;
		}
	}

	public static class DKReason {
		public static final byte NO_MATCHING_ORDER = 'D';
		public static final byte PRICE_EXCEEDS_LIMIT = 'E';
		public static final byte CALCULATION_DIFFERENCE = 'F';
		public static final byte UNKNOWN_SYMBOL = 'A';
		public static final byte WRONG_SIDE = 'B';
		public static final byte QUANTITY_EXCEEDS_ORDER = 'C';
		public static final byte OTHER = 'Z';
		public static boolean isValid(byte val) {
			if (( NO_MATCHING_ORDER==val)) return true;
			if (( PRICE_EXCEEDS_LIMIT==val)) return true;
			if (( CALCULATION_DIFFERENCE==val)) return true;
			if (( UNKNOWN_SYMBOL==val)) return true;
			if (( WRONG_SIDE==val)) return true;
			if (( QUANTITY_EXCEEDS_ORDER==val)) return true;
			if (( OTHER==val)) return true;
			return false;
		}
	}

	public static class IOINaturalFlag {
		public static final boolean NOT_NATURAL = false;
		public static final boolean NATURAL = true;
		public static boolean isValid(boolean val) {
			if (( NOT_NATURAL==val)) return true;
			if (( NATURAL==val)) return true;
			return false;
		}
	}

	public static class MiscFeeType {
		public static final byte[] TRANSFER_FEE = "13".getBytes();
		public static final byte[] SECURITY_LENDING = "14".getBytes();
		public static final byte[] CONVERSION = "11".getBytes();
		public static final byte[] AGENT = "12".getBytes();
		public static final byte[] LOCAL_COMMISSION = "3".getBytes();
		public static final byte[] TAX = "2".getBytes();
		public static final byte[] REGULATORY_EG_SEC = "1".getBytes();
		public static final byte[] PER_TRANSACTION = "10".getBytes();
		public static final byte[] OTHER = "7".getBytes();
		public static final byte[] LEVY = "6".getBytes();
		public static final byte[] STAMP = "5".getBytes();
		public static final byte[] EXCHANGE_FEES = "4".getBytes();
		public static final byte[] CONSUMPTION_TAX = "9".getBytes();
		public static final byte[] MARKUP = "8".getBytes();
		public static boolean isValid(byte[] val) {
			if (Utils.equals( TRANSFER_FEE, val)) return true;
			if (Utils.equals( SECURITY_LENDING, val)) return true;
			if (Utils.equals( CONVERSION, val)) return true;
			if (Utils.equals( AGENT, val)) return true;
			if (Utils.equals( LOCAL_COMMISSION, val)) return true;
			if (Utils.equals( TAX, val)) return true;
			if (Utils.equals( REGULATORY_EG_SEC, val)) return true;
			if (Utils.equals( PER_TRANSACTION, val)) return true;
			if (Utils.equals( OTHER, val)) return true;
			if (Utils.equals( LEVY, val)) return true;
			if (Utils.equals( STAMP, val)) return true;
			if (Utils.equals( EXCHANGE_FEES, val)) return true;
			if (Utils.equals( CONSUMPTION_TAX, val)) return true;
			if (Utils.equals( MARKUP, val)) return true;
			return false;
		}
	}

	public static class ResetSeqNumFlag {
		public static final boolean NO = false;
		public static final boolean YES_RESET_SEQUENCE_NUMBERS = true;
		public static boolean isValid(boolean val) {
			if (( NO==val)) return true;
			if (( YES_RESET_SEQUENCE_NUMBERS==val)) return true;
			return false;
		}
	}

	public static class ExecType {
		public static final byte RESTATED_EXECUTION_REPORT_SENT_UNSOLICITED_BY_SELLSIDE_WITH_EXEC = 'D';
		public static final byte PENDING_REPLACE_EG_RESULT_OF_ORDER_CANCELREPLACE_REQUEST = 'E';
		public static final byte TRADE_PARTIAL_FILL_OR_FILL = 'F';
		public static final byte TRADE_CORRECT = 'G';
		public static final byte PENDING_NEW = 'A';
		public static final byte CALCULATED = 'B';
		public static final byte EXPIRED = 'C';
		public static final byte TRIGGERED_OR_ACTIVATED_BY_SYSTEM = 'L';
		public static final byte TRADE_CANCEL = 'H';
		public static final byte ORDER_STATUS = 'I';
		public static final byte TRADE_IN_A_CLEARING_HOLD = 'J';
		public static final byte TRADE_HAS_BEEN_RELEASED_TO_CLEARING = 'K';
		public static final byte DONE_FOR_DAY = '3';
		public static final byte NEW = '0';
		public static final byte STOPPED = '7';
		public static final byte PENDING_CANCEL_EG_RESULT_OF_ORDER_CANCEL_REQUEST = '6';
		public static final byte REPLACED = '5';
		public static final byte CANCELED = '4';
		public static final byte SUSPENDED = '9';
		public static final byte REJECTED = '8';
		public static boolean isValid(byte val) {
			if (( RESTATED_EXECUTION_REPORT_SENT_UNSOLICITED_BY_SELLSIDE_WITH_EXEC==val)) return true;
			if (( PENDING_REPLACE_EG_RESULT_OF_ORDER_CANCELREPLACE_REQUEST==val)) return true;
			if (( TRADE_PARTIAL_FILL_OR_FILL==val)) return true;
			if (( TRADE_CORRECT==val)) return true;
			if (( PENDING_NEW==val)) return true;
			if (( CALCULATED==val)) return true;
			if (( EXPIRED==val)) return true;
			if (( TRIGGERED_OR_ACTIVATED_BY_SYSTEM==val)) return true;
			if (( TRADE_CANCEL==val)) return true;
			if (( ORDER_STATUS==val)) return true;
			if (( TRADE_IN_A_CLEARING_HOLD==val)) return true;
			if (( TRADE_HAS_BEEN_RELEASED_TO_CLEARING==val)) return true;
			if (( DONE_FOR_DAY==val)) return true;
			if (( NEW==val)) return true;
			if (( STOPPED==val)) return true;
			if (( PENDING_CANCEL_EG_RESULT_OF_ORDER_CANCEL_REQUEST==val)) return true;
			if (( REPLACED==val)) return true;
			if (( CANCELED==val)) return true;
			if (( SUSPENDED==val)) return true;
			if (( REJECTED==val)) return true;
			return false;
		}
	}

	public static class SettlCurrFxRateCalc {
		public static final byte DIVIDE = 'D';
		public static final byte MULTIPLY = 'M';
		public static boolean isValid(byte val) {
			if (( DIVIDE==val)) return true;
			if (( MULTIPLY==val)) return true;
			return false;
		}
	}

	public static class SettlInstMode {
		public static final byte SPECIFIC_ALLOCATION_ACCOUNT_STANDING_REPLACED = '3';
		public static final byte SPECIFIC_ALLOCATION_ACCOUNT_OVERRIDING_REPLACED = '2';
		public static final byte STANDING_INSTRUCTIONS_PROVIDED = '1';
		public static final byte DEFAULT_REPLACED = '0';
		public static final byte REQUEST_REJECT = '5';
		public static final byte SPECIFIC_ORDER_FOR_A_SINGLE_ACCOUNT_FOR_CIV = '4';
		public static boolean isValid(byte val) {
			if (( SPECIFIC_ALLOCATION_ACCOUNT_STANDING_REPLACED==val)) return true;
			if (( SPECIFIC_ALLOCATION_ACCOUNT_OVERRIDING_REPLACED==val)) return true;
			if (( STANDING_INSTRUCTIONS_PROVIDED==val)) return true;
			if (( DEFAULT_REPLACED==val)) return true;
			if (( REQUEST_REJECT==val)) return true;
			if (( SPECIFIC_ORDER_FOR_A_SINGLE_ACCOUNT_FOR_CIV==val)) return true;
			return false;
		}
	}

	public static class SettlInstTransType {
		public static final byte RESTATE = 'T';
		public static final byte REPLACE = 'R';
		public static final byte CANCEL = 'C';
		public static final byte NEW = 'N';
		public static boolean isValid(byte val) {
			if (( RESTATE==val)) return true;
			if (( REPLACE==val)) return true;
			if (( CANCEL==val)) return true;
			if (( NEW==val)) return true;
			return false;
		}
	}

	public static class SettlInstSource {
		public static final byte INVESTOR_EG_CIV_USE = '3';
		public static final byte INSTITUTIONS_INSTRUCTIONS = '2';
		public static final byte BROKERS_INSTRUCTIONS = '1';
		public static boolean isValid(byte val) {
			if (( INVESTOR_EG_CIV_USE==val)) return true;
			if (( INSTITUTIONS_INSTRUCTIONS==val)) return true;
			if (( BROKERS_INSTRUCTIONS==val)) return true;
			return false;
		}
	}

	public static class SettlLocation {
		public static final byte[] EURO_CLEAR = "EUR".getBytes();
		public static final byte[] PHYSICAL = "PNY".getBytes();
		public static final byte[] CEDEL = "CED".getBytes();
		public static final byte[] DEPOSITORY_TRUST_COMPANY = "DTC".getBytes();
		public static final byte[] PARTICIPANT_TRUST_COMPANY = "PTC".getBytes();
		public static final byte[] FEDERAL_BOOK_ENTRY = "FED".getBytes();
		public static final byte[] LOCAL_MARKET_SETTLE_LOCATION = "ISO_Country_Code".getBytes();
		public static boolean isValid(byte[] val) {
			if (Utils.equals( EURO_CLEAR, val)) return true;
			if (Utils.equals( PHYSICAL, val)) return true;
			if (Utils.equals( CEDEL, val)) return true;
			if (Utils.equals( DEPOSITORY_TRUST_COMPANY, val)) return true;
			if (Utils.equals( PARTICIPANT_TRUST_COMPANY, val)) return true;
			if (Utils.equals( FEDERAL_BOOK_ENTRY, val)) return true;
			if (Utils.equals( LOCAL_MARKET_SETTLE_LOCATION, val)) return true;
			return false;
		}
	}

	public static class SecurityType {
		public static final byte[] CORP_MORTGAGEBACKED_SECURITIES = "CMBS".getBytes();
		public static final byte[] VARIABLE_RATE_DEMAND_NOTE = "VRDN".getBytes();
		public static final byte[] TERM_LIQUIDITY_NOTE = "TLQN".getBytes();
		public static final byte[] PFANDBRIEFE_ = "PFAND".getBytes();
		public static final byte[] FEDERAL_AGENCY_COUPON = "FAC".getBytes();
		public static final byte[] CASH = "CASH".getBytes();
		public static final byte[] TAX_EXEMPT_COMMERCIAL_PAPER = "TECP".getBytes();
		public static final byte[] MUTUAL_FUND = "MF".getBytes();
		public static final byte[] DEPOSIT_NOTES = "DN".getBytes();
		public static final byte[] EURO_CORPORATE_FLOATING_RATE_NOTES = "EUFRN".getBytes();
		public static final byte[] TAX_REVENUE_ANTICIPATION_NOTE = "TRAN".getBytes();
		public static final byte[] REVOLVERTERM_LOAN = "RVLVTRM".getBytes();
		public static final byte[] US_CORPORATE_FLOATING_RATE_NOTES = "FRN".getBytes();
		public static final byte[] REVENUE_BONDS = "REV".getBytes();
		public static final byte[] OPTIONS_ON_PHYSICAL__USE_NOT_RECOMMENDED = "OOP".getBytes();
		public static final byte[] REVENUE_ANTICIPATION_NOTE = "RAN".getBytes();
		public static final byte[] EURO_CERTIFICATE_OF_DEPOSIT = "EUCD".getBytes();
		public static final byte[] WITHDRAWN = "WITHDRN".getBytes();
		public static final byte[] EURO_COMMERCIAL_PAPER = "EUCP".getBytes();
		public static final byte[] TAX_ANTICIPATION_NOTE = "TAN".getBytes();
		public static final byte[] FX_SWAP = "FXSWAP".getBytes();
		public static final byte[] MANDATORY_TENDER = "MT".getBytes();
		public static final byte[] BUY_SELLBACK = "BUYSELL".getBytes();
		public static final byte[] OPTIONS_ON_COMBO = "OOC".getBytes();
		public static final byte[] FX_SPOT = "FXSPOT".getBytes();
		public static final byte[] OPTIONS_ON_FUTURES = "OOF".getBytes();
		public static final byte[] IOETTE_MORTGAGE = "IET".getBytes();
		public static final byte[] TO_BE_ANNOUNCED = "TBA".getBytes();
		public static final byte[] WILDCARD_ENTRY_FOR_USE_ON_SECURITY_DEFINITION_REQUEST = "?".getBytes();
		public static final byte[] LETTER_OF_CREDIT = "LOFC".getBytes();
		public static final byte[] DUAL_CURRENCY = "DUAL".getBytes();
		public static final byte[] US_TREASURY_BILL_DEPRECATED_VALUE_USE_TBILL = "USTB".getBytes();
		public static final byte[] FUTURE = "FUT".getBytes();
		public static final byte[] LIQUIDITY_NOTE = "LQN".getBytes();
		public static final byte[] NONDELIVERABLE_FORWARD = "FXNDF".getBytes();
		public static final byte[] BRIDGE_LOAN = "BRIDGE".getBytes();
		public static final byte[] TREASURY_INFLATION_PROTECTED_SECURITIES = "TIPS".getBytes();
		public static final byte[] CREDIT_DEFAULT_SWAP = "CDS".getBytes();
		public static final byte[] US_TREASURY_NOTE = "TNOTE".getBytes();
		public static final byte[] US_TREASURY_BILL = "TBILL".getBytes();
		public static final byte[] CANADIAN_MORTGAGE_BONDS = "CMB".getBytes();
		public static final byte[] CANADIAN_MONEY_MARKETS = "CAMM".getBytes();
		public static final byte[] USD_SUPRANATIONAL_COUPONS_ = "SUPRA".getBytes();
		public static final byte[] BANK_DEPOSITORY_NOTE = "BDN".getBytes();
		public static final byte[] EXTENDED_COMM_NOTE = "XCN".getBytes();
		public static final byte[] ASSETBACKED_SECURITIES = "ABS".getBytes();
		public static final byte[] RETIRED = "RETIRED".getBytes();
		public static final byte[] SECURITIES_LOAN = "SECLOAN".getBytes();
		public static final byte[] US_TREASURY_NOTE_DEPRECATED_VALUE_USE_TNOTE = "UST".getBytes();
		public static final byte[] DEFAULTED = "DEFLTED".getBytes();
		public static final byte[] COLLATERALIZED_MORTGAGE_OBLIGATION = "CMO".getBytes();
		public static final byte[] NO_SECURITY_TYPE = "NONE".getBytes();
		public static final byte[] SPECIAL_ASSESSMENT = "SPCLA".getBytes();
		public static final byte[] PROMISSORY_NOTE = "PN".getBytes();
		public static final byte[] FX_FORWARD = "FXFWD".getBytes();
		public static final byte[] GENERAL_OBLIGATION_BONDS = "GO".getBytes();
		public static final byte[] CORPORATE_BOND = "CORP".getBytes();
		public static final byte[] MEDIUM_TERM_NOTES = "MTN".getBytes();
		public static final byte[] DEBTOR_IN_POSSESSION = "DINP".getBytes();
		public static final byte[] PRINCIPAL_STRIP_FROM_A_NONCALLABLE_BOND_OR_NOTE = "TPRN".getBytes();
		public static final byte[] TERM_LOAN = "TERM".getBytes();
		public static final byte[] FORWARD = "FORWARD".getBytes();
		public static final byte[] MORTGAGEBACKED_SECURITIES = "MBS".getBytes();
		public static final byte[] SPECIAL_TAX = "SPCLT".getBytes();
		public static final byte[] SECURITIES_PLEDGE = "SECPLEDGE".getBytes();
		public static final byte[] SPECIAL_OBLIGATION = "SPCLO".getBytes();
		public static final byte[] REVOLVER_LOAN = "RVLV".getBytes();
		public static final byte[] FOREIGN_EXCHANGE_CONTRACT = "FOR".getBytes();
		public static final byte[] CANADIAN_PROVINCIAL_BONDS = "PROV".getBytes();
		public static final byte[] INTEREST_STRIP_FROM_ANY_BOND_OR_NOTE = "TINT".getBytes();
		public static final byte[] CANADIAN_TREASURY_NOTES = "CAN".getBytes();
		public static final byte[] SECURED_LIQUIDITY_NOTE = "SLQN".getBytes();
		public static final byte[] BILL_OF_EXCHANGES = "BOX".getBytes();
		public static final byte[] YANKEE_CERTIFICATE_OF_DEPOSIT = "YCD".getBytes();
		public static final byte[] INTEREST_RATE_SWAP = "IRS".getBytes();
		public static final byte[] REPURCHASE = "REPO".getBytes();
		public static final byte[] BANKERS_ACCEPTANCE = "BA".getBytes();
		public static final byte[] REPLACED = "REPLACD".getBytes();
		public static final byte[] WARRANT = "WAR".getBytes();
		public static final byte[] MATURED = "MATURED".getBytes();
		public static final byte[] CANADIAN_TREASURY_BILLS = "CTB".getBytes();
		public static final byte[] YANKEE_CORPORATE_BOND = "YANK".getBytes();
		public static final byte[] PREFERRED_STOCK = "PS".getBytes();
		public static final byte[] SHORT_TERM_LOAN_NOTE = "STN".getBytes();
		public static final byte[] OTHER_ANTICIPATION_NOTES_BAN_GAN_ETC = "AN".getBytes();
		public static final byte[] PRINCIPAL_STRIP_OF_A_CALLABLE_BOND_OR_NOTE = "TCAL".getBytes();
		public static final byte[] CORPORATE_PRIVATE_PLACEMENT = "CPP".getBytes();
		public static final byte[] PLAZOS_FIJOS = "PZFJ".getBytes();
		public static final byte[] TIME_DEPOSIT = "TD".getBytes();
		public static final byte[] MULTILEG_INSTRUMENT = "MLEG".getBytes();
		public static final byte[] PRIVATE_EXPORT_FUNDING_ = "PEF".getBytes();
		public static final byte[] TAXABLE_MUNICIPAL_CP = "TMCP".getBytes();
		public static final byte[] CONVERTIBLE_BOND = "CB".getBytes();
		public static final byte[] BRADY_BOND = "BRADY".getBytes();
		public static final byte[] OPTION = "OPT".getBytes();
		public static final byte[] AMENDED__RESTATED = "AMENDED".getBytes();
		public static final byte[] OVERNIGHT = "ONITE".getBytes();
		public static final byte[] STRUCTURED_NOTES = "STRUCT".getBytes();
		public static final byte[] EURO_CORPORATE_BOND = "EUCORP".getBytes();
		public static final byte[] MORTGAGE_INTEREST_ONLY = "MIO".getBytes();
		public static final byte[] BANK_NOTES = "BN".getBytes();
		public static final byte[] FEDERAL_AGENCY_DISCOUNT_NOTE = "FADN".getBytes();
		public static final byte[] TREASURY_BILL__NON_US = "TB".getBytes();
		public static final byte[] US_TREASURY_BOND = "TBOND".getBytes();
		public static final byte[] EURO_SUPRANATIONAL_COUPONS_ = "EUSUPRA".getBytes();
		public static final byte[] MISCELLANEOUS_PASSTHROUGH = "MPT".getBytes();
		public static final byte[] EURO_SOVEREIGNS_ = "EUSOV".getBytes();
		public static final byte[] COMMON_STOCK = "CS".getBytes();
		public static final byte[] INDEXED_LINKED = "XLINKD".getBytes();
		public static final byte[] CERTIFICATE_OF_DEPOSIT = "CD".getBytes();
		public static final byte[] MORTGAGE_PRIVATE_PLACEMENT = "MPP".getBytes();
		public static final byte[] SWING_LINE_FACILITY = "SWING".getBytes();
		public static final byte[] TAX_ALLOCATION = "TAXA".getBytes();
		public static final byte[] MORTGAGE_PRINCIPAL_ONLY = "MPO".getBytes();
		public static final byte[] COMMERCIAL_PAPER = "CP".getBytes();
		public static final byte[] CERTIFICATE_OF_OBLIGATION = "COFO".getBytes();
		public static final byte[] CERTIFICATE_OF_PARTICIPATION = "COFP".getBytes();
		public static final byte[] CALL_LOANS = "CL".getBytes();
		public static boolean isValid(byte[] val) {
			if (Utils.equals( CORP_MORTGAGEBACKED_SECURITIES, val)) return true;
			if (Utils.equals( VARIABLE_RATE_DEMAND_NOTE, val)) return true;
			if (Utils.equals( TERM_LIQUIDITY_NOTE, val)) return true;
			if (Utils.equals( PFANDBRIEFE_, val)) return true;
			if (Utils.equals( FEDERAL_AGENCY_COUPON, val)) return true;
			if (Utils.equals( CASH, val)) return true;
			if (Utils.equals( TAX_EXEMPT_COMMERCIAL_PAPER, val)) return true;
			if (Utils.equals( MUTUAL_FUND, val)) return true;
			if (Utils.equals( DEPOSIT_NOTES, val)) return true;
			if (Utils.equals( EURO_CORPORATE_FLOATING_RATE_NOTES, val)) return true;
			if (Utils.equals( TAX_REVENUE_ANTICIPATION_NOTE, val)) return true;
			if (Utils.equals( REVOLVERTERM_LOAN, val)) return true;
			if (Utils.equals( US_CORPORATE_FLOATING_RATE_NOTES, val)) return true;
			if (Utils.equals( REVENUE_BONDS, val)) return true;
			if (Utils.equals( OPTIONS_ON_PHYSICAL__USE_NOT_RECOMMENDED, val)) return true;
			if (Utils.equals( REVENUE_ANTICIPATION_NOTE, val)) return true;
			if (Utils.equals( EURO_CERTIFICATE_OF_DEPOSIT, val)) return true;
			if (Utils.equals( WITHDRAWN, val)) return true;
			if (Utils.equals( EURO_COMMERCIAL_PAPER, val)) return true;
			if (Utils.equals( TAX_ANTICIPATION_NOTE, val)) return true;
			if (Utils.equals( FX_SWAP, val)) return true;
			if (Utils.equals( MANDATORY_TENDER, val)) return true;
			if (Utils.equals( BUY_SELLBACK, val)) return true;
			if (Utils.equals( OPTIONS_ON_COMBO, val)) return true;
			if (Utils.equals( FX_SPOT, val)) return true;
			if (Utils.equals( OPTIONS_ON_FUTURES, val)) return true;
			if (Utils.equals( IOETTE_MORTGAGE, val)) return true;
			if (Utils.equals( TO_BE_ANNOUNCED, val)) return true;
			if (Utils.equals( WILDCARD_ENTRY_FOR_USE_ON_SECURITY_DEFINITION_REQUEST, val)) return true;
			if (Utils.equals( LETTER_OF_CREDIT, val)) return true;
			if (Utils.equals( DUAL_CURRENCY, val)) return true;
			if (Utils.equals( US_TREASURY_BILL_DEPRECATED_VALUE_USE_TBILL, val)) return true;
			if (Utils.equals( FUTURE, val)) return true;
			if (Utils.equals( LIQUIDITY_NOTE, val)) return true;
			if (Utils.equals( NONDELIVERABLE_FORWARD, val)) return true;
			if (Utils.equals( BRIDGE_LOAN, val)) return true;
			if (Utils.equals( TREASURY_INFLATION_PROTECTED_SECURITIES, val)) return true;
			if (Utils.equals( CREDIT_DEFAULT_SWAP, val)) return true;
			if (Utils.equals( US_TREASURY_NOTE, val)) return true;
			if (Utils.equals( US_TREASURY_BILL, val)) return true;
			if (Utils.equals( CANADIAN_MORTGAGE_BONDS, val)) return true;
			if (Utils.equals( CANADIAN_MONEY_MARKETS, val)) return true;
			if (Utils.equals( USD_SUPRANATIONAL_COUPONS_, val)) return true;
			if (Utils.equals( BANK_DEPOSITORY_NOTE, val)) return true;
			if (Utils.equals( EXTENDED_COMM_NOTE, val)) return true;
			if (Utils.equals( ASSETBACKED_SECURITIES, val)) return true;
			if (Utils.equals( RETIRED, val)) return true;
			if (Utils.equals( SECURITIES_LOAN, val)) return true;
			if (Utils.equals( US_TREASURY_NOTE_DEPRECATED_VALUE_USE_TNOTE, val)) return true;
			if (Utils.equals( DEFAULTED, val)) return true;
			if (Utils.equals( COLLATERALIZED_MORTGAGE_OBLIGATION, val)) return true;
			if (Utils.equals( NO_SECURITY_TYPE, val)) return true;
			if (Utils.equals( SPECIAL_ASSESSMENT, val)) return true;
			if (Utils.equals( PROMISSORY_NOTE, val)) return true;
			if (Utils.equals( FX_FORWARD, val)) return true;
			if (Utils.equals( GENERAL_OBLIGATION_BONDS, val)) return true;
			if (Utils.equals( CORPORATE_BOND, val)) return true;
			if (Utils.equals( MEDIUM_TERM_NOTES, val)) return true;
			if (Utils.equals( DEBTOR_IN_POSSESSION, val)) return true;
			if (Utils.equals( PRINCIPAL_STRIP_FROM_A_NONCALLABLE_BOND_OR_NOTE, val)) return true;
			if (Utils.equals( TERM_LOAN, val)) return true;
			if (Utils.equals( FORWARD, val)) return true;
			if (Utils.equals( MORTGAGEBACKED_SECURITIES, val)) return true;
			if (Utils.equals( SPECIAL_TAX, val)) return true;
			if (Utils.equals( SECURITIES_PLEDGE, val)) return true;
			if (Utils.equals( SPECIAL_OBLIGATION, val)) return true;
			if (Utils.equals( REVOLVER_LOAN, val)) return true;
			if (Utils.equals( FOREIGN_EXCHANGE_CONTRACT, val)) return true;
			if (Utils.equals( CANADIAN_PROVINCIAL_BONDS, val)) return true;
			if (Utils.equals( INTEREST_STRIP_FROM_ANY_BOND_OR_NOTE, val)) return true;
			if (Utils.equals( CANADIAN_TREASURY_NOTES, val)) return true;
			if (Utils.equals( SECURED_LIQUIDITY_NOTE, val)) return true;
			if (Utils.equals( BILL_OF_EXCHANGES, val)) return true;
			if (Utils.equals( YANKEE_CERTIFICATE_OF_DEPOSIT, val)) return true;
			if (Utils.equals( INTEREST_RATE_SWAP, val)) return true;
			if (Utils.equals( REPURCHASE, val)) return true;
			if (Utils.equals( BANKERS_ACCEPTANCE, val)) return true;
			if (Utils.equals( REPLACED, val)) return true;
			if (Utils.equals( WARRANT, val)) return true;
			if (Utils.equals( MATURED, val)) return true;
			if (Utils.equals( CANADIAN_TREASURY_BILLS, val)) return true;
			if (Utils.equals( YANKEE_CORPORATE_BOND, val)) return true;
			if (Utils.equals( PREFERRED_STOCK, val)) return true;
			if (Utils.equals( SHORT_TERM_LOAN_NOTE, val)) return true;
			if (Utils.equals( OTHER_ANTICIPATION_NOTES_BAN_GAN_ETC, val)) return true;
			if (Utils.equals( PRINCIPAL_STRIP_OF_A_CALLABLE_BOND_OR_NOTE, val)) return true;
			if (Utils.equals( CORPORATE_PRIVATE_PLACEMENT, val)) return true;
			if (Utils.equals( PLAZOS_FIJOS, val)) return true;
			if (Utils.equals( TIME_DEPOSIT, val)) return true;
			if (Utils.equals( MULTILEG_INSTRUMENT, val)) return true;
			if (Utils.equals( PRIVATE_EXPORT_FUNDING_, val)) return true;
			if (Utils.equals( TAXABLE_MUNICIPAL_CP, val)) return true;
			if (Utils.equals( CONVERTIBLE_BOND, val)) return true;
			if (Utils.equals( BRADY_BOND, val)) return true;
			if (Utils.equals( OPTION, val)) return true;
			if (Utils.equals( AMENDED__RESTATED, val)) return true;
			if (Utils.equals( OVERNIGHT, val)) return true;
			if (Utils.equals( STRUCTURED_NOTES, val)) return true;
			if (Utils.equals( EURO_CORPORATE_BOND, val)) return true;
			if (Utils.equals( MORTGAGE_INTEREST_ONLY, val)) return true;
			if (Utils.equals( BANK_NOTES, val)) return true;
			if (Utils.equals( FEDERAL_AGENCY_DISCOUNT_NOTE, val)) return true;
			if (Utils.equals( TREASURY_BILL__NON_US, val)) return true;
			if (Utils.equals( US_TREASURY_BOND, val)) return true;
			if (Utils.equals( EURO_SUPRANATIONAL_COUPONS_, val)) return true;
			if (Utils.equals( MISCELLANEOUS_PASSTHROUGH, val)) return true;
			if (Utils.equals( EURO_SOVEREIGNS_, val)) return true;
			if (Utils.equals( COMMON_STOCK, val)) return true;
			if (Utils.equals( INDEXED_LINKED, val)) return true;
			if (Utils.equals( CERTIFICATE_OF_DEPOSIT, val)) return true;
			if (Utils.equals( MORTGAGE_PRIVATE_PLACEMENT, val)) return true;
			if (Utils.equals( SWING_LINE_FACILITY, val)) return true;
			if (Utils.equals( TAX_ALLOCATION, val)) return true;
			if (Utils.equals( MORTGAGE_PRINCIPAL_ONLY, val)) return true;
			if (Utils.equals( COMMERCIAL_PAPER, val)) return true;
			if (Utils.equals( CERTIFICATE_OF_OBLIGATION, val)) return true;
			if (Utils.equals( CERTIFICATE_OF_PARTICIPATION, val)) return true;
			if (Utils.equals( CALL_LOANS, val)) return true;
			return false;
		}
	}

	public static class StandInstDbType {
		public static final long A_GLOBAL_CUSTODIAN_STANDINSTDBNAME_70_MUST_BE_PROVIDED = 3;
		public static final long THOMSON_ALERT = 2;
		public static final long DTC_SID = 1;
		public static final long OTHER = 0;
		public static final long ACCOUNTNET = 4;
		public static boolean isValid(long val) {
			if (( A_GLOBAL_CUSTODIAN_STANDINSTDBNAME_70_MUST_BE_PROVIDED==val)) return true;
			if (( THOMSON_ALERT==val)) return true;
			if (( DTC_SID==val)) return true;
			if (( OTHER==val)) return true;
			if (( ACCOUNTNET==val)) return true;
			return false;
		}
	}

	public static class SettlDeliveryType {
		public static final long HOLD_IN_CUSTODY = 3;
		public static final long TRIPARTY = 2;
		public static final long FREE_DELIVER_IF_SELL_OR_RECEIVE_IF_BUY_FREE = 1;
		public static final long VERSUS_PAYMENT_DELIVER_IF_SELL_OR_RECEIVE_IF_BUY_VS_AGAINST_PAYM = 0;
		public static boolean isValid(long val) {
			if (( HOLD_IN_CUSTODY==val)) return true;
			if (( TRIPARTY==val)) return true;
			if (( FREE_DELIVER_IF_SELL_OR_RECEIVE_IF_BUY_FREE==val)) return true;
			if (( VERSUS_PAYMENT_DELIVER_IF_SELL_OR_RECEIVE_IF_BUY_VS_AGAINST_PAYM==val)) return true;
			return false;
		}
	}

	public static class AllocLinkType {
		public static final long FX_SWAP = 1;
		public static final long FX_NETTING = 0;
		public static boolean isValid(long val) {
			if (( FX_SWAP==val)) return true;
			if (( FX_NETTING==val)) return true;
			return false;
		}
	}

	public static class PutOrCall {
		public static final long CALL = 1;
		public static final long PUT = 0;
		public static boolean isValid(long val) {
			if (( CALL==val)) return true;
			if (( PUT==val)) return true;
			return false;
		}
	}

	public static class CoveredOrUncovered {
		public static final long UNCOVERED = 1;
		public static final long COVERED = 0;
		public static boolean isValid(long val) {
			if (( UNCOVERED==val)) return true;
			if (( COVERED==val)) return true;
			return false;
		}
	}

	public static class CustomerOrFirm {
		public static final long FIRM = 1;
		public static final long CUSTOMER = 0;
		public static boolean isValid(long val) {
			if (( FIRM==val)) return true;
			if (( CUSTOMER==val)) return true;
			return false;
		}
	}

	public static class NotifyBrokerOfCredit {
		public static final boolean DETAILS_SHOULT_NOT_BE_COMMUNICATED = false;
		public static final boolean DETAILS_SHOULD_BE_COMMUNICATED = true;
		public static boolean isValid(boolean val) {
			if (( DETAILS_SHOULT_NOT_BE_COMMUNICATED==val)) return true;
			if (( DETAILS_SHOULD_BE_COMMUNICATED==val)) return true;
			return false;
		}
	}

	public static class AllocHandlInst {
		public static final long FORWARD_AND_MATCH = 3;
		public static final long FORWARD = 2;
		public static final long MATCH = 1;
		public static boolean isValid(long val) {
			if (( FORWARD_AND_MATCH==val)) return true;
			if (( FORWARD==val)) return true;
			if (( MATCH==val)) return true;
			return false;
		}
	}

	public static class RoutingType {
		public static final long BLOCK_FIRM = 3;
		public static final long TARGET_LIST = 2;
		public static final long TARGET_FIRM = 1;
		public static final long BLOCK_LIST = 4;
		public static boolean isValid(long val) {
			if (( BLOCK_FIRM==val)) return true;
			if (( TARGET_LIST==val)) return true;
			if (( TARGET_FIRM==val)) return true;
			if (( BLOCK_LIST==val)) return true;
			return false;
		}
	}

	public static class Benchmark {
		public static final byte OLD5 = '3';
		public static final byte I5YR = '2';
		public static final byte CURVE = '1';
		public static final byte OLD30 = '7';
		public static final byte I30YR = '6';
		public static final byte OLD10 = '5';
		public static final byte I10YR = '4';
		public static final byte I6MOLIBOR = '9';
		public static final byte I3MOLIBOR = '8';
		public static boolean isValid(byte val) {
			if (( OLD5==val)) return true;
			if (( I5YR==val)) return true;
			if (( CURVE==val)) return true;
			if (( OLD30==val)) return true;
			if (( I30YR==val)) return true;
			if (( OLD10==val)) return true;
			if (( I10YR==val)) return true;
			if (( I6MOLIBOR==val)) return true;
			if (( I3MOLIBOR==val)) return true;
			return false;
		}
	}

	public static class BenchmarkCurveName {
		public static final byte[] SONIA = "SONIA".getBytes();
		public static final byte[] TREASURY = "Treasury".getBytes();
		public static final byte[] OTHER = "OTHER".getBytes();
		public static final byte[] LIBOR_LONDON_INTERBANK_OFFER = "LIBOR".getBytes();
		public static final byte[] PFANDBRIEFE = "Pfandbriefe".getBytes();
		public static final byte[] SWAP = "SWAP".getBytes();
		public static final byte[] LIBID = "LIBID".getBytes();
		public static final byte[] MUNIAAA = "MuniAAA".getBytes();
		public static final byte[] EURIBOR = "Euribor".getBytes();
		public static final byte[] EUREPO = "EUREPO".getBytes();
		public static final byte[] FUTURESWAP = "FutureSWAP".getBytes();
		public static final byte[] EONIA = "EONIA".getBytes();
		public static boolean isValid(byte[] val) {
			if (Utils.equals( SONIA, val)) return true;
			if (Utils.equals( TREASURY, val)) return true;
			if (Utils.equals( OTHER, val)) return true;
			if (Utils.equals( LIBOR_LONDON_INTERBANK_OFFER, val)) return true;
			if (Utils.equals( PFANDBRIEFE, val)) return true;
			if (Utils.equals( SWAP, val)) return true;
			if (Utils.equals( LIBID, val)) return true;
			if (Utils.equals( MUNIAAA, val)) return true;
			if (Utils.equals( EURIBOR, val)) return true;
			if (Utils.equals( EUREPO, val)) return true;
			if (Utils.equals( FUTURESWAP, val)) return true;
			if (Utils.equals( EONIA, val)) return true;
			return false;
		}
	}

	public static class StipulationType {
		public static final byte[] YEAR_OR_YEARMONTH_OF_ISSUE_EX_234200209 = "ISSUE".getBytes();
		public static final byte[] ALTERNATIVE_MINIMUM_TAX_YN = "AMT".getBytes();
		public static final byte[] MARKET_SECTOR = "SECTOR".getBytes();
		public static final byte[] THE_MINIMUM_RESIDUAL_OFFER_QUANTITY = "LEAVEQTY".getBytes();
		public static final byte[] INSURED_YN = "INSURED".getBytes();
		public static final byte[] PAYMENT_FREQUENCY_CALENDAR = "PAYFREQ".getBytes();
		public static final byte[] PERCENT_OF_BMA_PREPAYMENT_CURVE = "PSA".getBytes();
		public static final byte[] SUBSTITUTIONS_LEFT_REPO = "SUBSLEFT".getBytes();
		public static final byte[] WEIGHTED_AVERAGE_LOAN_AGE__VALUE_IN_MONTHS_EXACT_OR_RANGE = "WALA".getBytes();
		public static final byte[] GEOGRAPHICS_AND__RANGE_EX_234CA_080_MINIMUM_OF_80_CALIFORNIA_ASS = "GEOG".getBytes();
		public static final byte[] PRICING_FREQUENCY = "PRICEFREQ".getBytes();
		public static final byte[] LOT_VARIANCE_VALUE_IN_PERCENT_MAXIMUM_OVER_OR_UNDERALLOCATION_AL = "LOTVAR".getBytes();
		public static final byte[] MATURITY_YEAR_AND_MONTH = "MAT".getBytes();
		public static final byte[] PRINCIPAL_OF_ROLLING_OR_CLOSING_TRADE = "REFPRIN".getBytes();
		public static final byte[] EXPLICIT_LOT_IDENTIFIER = "LOT".getBytes();
		public static final byte[] AVERAGE_FICO_SCORE = "AVFICO".getBytes();
		public static final byte[] FINAL_CPR_OF_HOME_EQUITY_PREPAYMENT_CURVE = "HEP".getBytes();
		public static final byte[] MAXIMUM_ORDER_SIZE = "MAXORDQTY".getBytes();
		public static final byte[] MAXIMUM_SUBSTITUTIONS_REPO = "MAXSUBS".getBytes();
		public static final byte[] ORDER_QUANTITY_INCREMENT = "ORDRINCR".getBytes();
		public static final byte[] WEIGHTED_AVERAGE_LIFE_COUPON__VALUE_IN_PERCENT_EXACT_OR_RANGE = "WAL".getBytes();
		public static final byte[] WEIGHTED_AVERAGE_MATURITY__VALUE_IN_MONTHS_EXACT_OR_RANGE = "WAM".getBytes();
		public static final byte[] MINIMUM_INCREMENT = "MININCR".getBytes();
		public static final byte[] LOOKBACK_DAYS = "LOOKBACK".getBytes();
		public static final byte[] PRODUCTION_YEAR = "PROD".getBytes();
		public static final byte[] YIELD_RANGE = "YIELD".getBytes();
		public static final byte[] TYPE_OF_REDEMPTION__VALUES_ARE_NONCALLABLE_PREFUNDED_ESCROWEDTOM = "REDEMPTION".getBytes();
		public static final byte[] REFERENCE_TO_ROLLING_OR_CLOSING_TRADE = "REFTRADE".getBytes();
		public static final byte[] TRADERS_CREDIT = "TRADERCREDIT".getBytes();
		public static final byte[] TRADE_VARIANCE_VALUE_IN_PERCENT_MAXIMUM_OVER_OR_UNDERALLOCATION_ = "TRDVAR".getBytes();
		public static final byte[] CALL_PROTECTION = "PROTECT".getBytes();
		public static final byte[] SECURITY_TYPE_INCLUDED_OR_EXCLUDED = "SECTYPE".getBytes();
		public static final byte[] SINGLE_MONTHLY_MORTALITY = "SMM".getBytes();
		public static final byte[] AVERAGE_LOAN_SIZE = "AVSIZE".getBytes();
		public static final byte[] COUPON_RANGE = "COUPON".getBytes();
		public static final byte[] RATING_SOURCE_AND_RANGE = "RATING".getBytes();
		public static final byte[] YIELD_TO_MATURITY_WHEN_YIELDTYPE235_AND_YIELD236_SHOW_A_DIFFEREN = "YTM".getBytes();
		public static final byte[] INTEREST_OF_ROLLING_OR_CLOSING_TRADE = "REFINT".getBytes();
		public static final byte[] AUTO_REINVESTMENT_AT_RATE_OR_BETTER = "AUTOREINV".getBytes();
		public static final byte[] CONSTANT_PREPAYMENT_PENALTY = "CPP".getBytes();
		public static final byte[] PRICE_RANGE = "PRICE".getBytes();
		public static final byte[] VALUATION_DISCOUNT = "HAIRCUT".getBytes();
		public static final byte[] POOL_IDENTIFIER = "POOL".getBytes();
		public static final byte[] CONSTANT_PREPAYMENT_RATE = "CPR".getBytes();
		public static final byte[] MINIMUM_DENOMINATION = "MINDNOM".getBytes();
		public static final byte[] CONSTANT_PREPAYMENT_YIELD = "CPY".getBytes();
		public static final byte[] POOLS_PER_TRADE = "PPT".getBytes();
		public static final byte[] PURPOSE = "PURPOSE".getBytes();
		public static final byte[] ISSUE_SIZE_RANGE = "ISSUESIZE".getBytes();
		public static final byte[] BANK_QUALIFIED_YN = "BANKQUAL".getBytes();
		public static final byte[] OFFER_QUANTITY_TO_BE_SHOWN_TO_INTERNAL_BROKERS = "INTERNALQTY".getBytes();
		public static final byte[] RESTRICTED_YN = "RESTRICTED".getBytes();
		public static final byte[] STRUCTURE = "STRUCT".getBytes();
		public static final byte[] BROKER_SALES_CREDIT_OVERRIDE = "SALESCREDITOVR".getBytes();
		public static final byte[] PRIMARY_OR_SECONDARY_MARKET_INDICATOR = "PRIMARY".getBytes();
		public static final byte[] BROKERS_SALES_CREDIT = "BROKERCREDIT".getBytes();
		public static final byte[] POOLS_PER_LOT = "PPL".getBytes();
		public static final byte[] FREEFORM_TEXT = "TEXT".getBytes();
		public static final byte[] POOLS_PER_MILLION = "PPM".getBytes();
		public static final byte[] SUBSTITUTIONS_FREQUENCY_REPO = "SUBSFREQ".getBytes();
		public static final byte[] NUMBER_OF_PIECES = "PIECES".getBytes();
		public static final byte[] PERCENT_OF_PROSPECTUS_PREPAYMENT_CURVE = "PPC".getBytes();
		public static final byte[] WEIGHTED_AVERAGE_COUPON__VALUE_IN_PERCENT_EXACT_OR_RANGE_PLUS_GR = "WAC".getBytes();
		public static final byte[] TYPE_OF_ROLL_TRADE = "ROLLTYPE".getBytes();
		public static final byte[] DISCOUNT_RATE_WHEN_PRICE_IS_DENOMINATED_IN_PERCENT_OF_PAR = "DISCOUNT".getBytes();
		public static final byte[] WHOLE_POOL_YN = "WHOLE".getBytes();
		public static final byte[] ISSUERS_TICKER = "ISSUER".getBytes();
		public static final byte[] ABSOLUTE_PREPAYMENT_SPEED = "ABS".getBytes();
		public static final byte[] CUSTOM_STARTEND_DATE = "CUSTOMDATE".getBytes();
		public static final byte[] AVAILABLE_OFFER_QUANTITY_TO_BE_SHOWN_TO_THE_STREET = "AVAILQTY".getBytes();
		public static final byte[] BENCHMARK_PRICE_SOURCE = "PXSOURCE".getBytes();
		public static final byte[] MAXIMUM_LOAN_BALANCE = "MAXBAL".getBytes();
		public static final byte[] BARGAIN_CONDITIONS_SEE_STIPULATIONVALUE_234_FOR_VALUES = "BGNCON".getBytes();
		public static final byte[] POOLS_MAXIMUM = "PMAX".getBytes();
		public static final byte[] PERCENT_OF_MANUFACTURED_HOUSING_PREPAYMENT_CURVE = "MHP".getBytes();
		public static final byte[] ISO_CURRENCY_CODE = "CURRENCY".getBytes();
		public static final byte[] MATURITY_RANGE = "MATURITY".getBytes();
		public static final byte[] MINIMUM_QUANTITY = "MINQTY".getBytes();
		public static final byte[] MONTHLY_PREPAYMENT_RATE = "MPR".getBytes();
		public static final byte[] OFFER_PRICE_TO_BE_SHOWN_TO_INTERNAL_BROKERS = "INTERNALPX".getBytes();
		public static boolean isValid(byte[] val) {
			if (Utils.equals( YEAR_OR_YEARMONTH_OF_ISSUE_EX_234200209, val)) return true;
			if (Utils.equals( ALTERNATIVE_MINIMUM_TAX_YN, val)) return true;
			if (Utils.equals( MARKET_SECTOR, val)) return true;
			if (Utils.equals( THE_MINIMUM_RESIDUAL_OFFER_QUANTITY, val)) return true;
			if (Utils.equals( INSURED_YN, val)) return true;
			if (Utils.equals( PAYMENT_FREQUENCY_CALENDAR, val)) return true;
			if (Utils.equals( PERCENT_OF_BMA_PREPAYMENT_CURVE, val)) return true;
			if (Utils.equals( SUBSTITUTIONS_LEFT_REPO, val)) return true;
			if (Utils.equals( WEIGHTED_AVERAGE_LOAN_AGE__VALUE_IN_MONTHS_EXACT_OR_RANGE, val)) return true;
			if (Utils.equals( GEOGRAPHICS_AND__RANGE_EX_234CA_080_MINIMUM_OF_80_CALIFORNIA_ASS, val)) return true;
			if (Utils.equals( PRICING_FREQUENCY, val)) return true;
			if (Utils.equals( LOT_VARIANCE_VALUE_IN_PERCENT_MAXIMUM_OVER_OR_UNDERALLOCATION_AL, val)) return true;
			if (Utils.equals( MATURITY_YEAR_AND_MONTH, val)) return true;
			if (Utils.equals( PRINCIPAL_OF_ROLLING_OR_CLOSING_TRADE, val)) return true;
			if (Utils.equals( EXPLICIT_LOT_IDENTIFIER, val)) return true;
			if (Utils.equals( AVERAGE_FICO_SCORE, val)) return true;
			if (Utils.equals( FINAL_CPR_OF_HOME_EQUITY_PREPAYMENT_CURVE, val)) return true;
			if (Utils.equals( MAXIMUM_ORDER_SIZE, val)) return true;
			if (Utils.equals( MAXIMUM_SUBSTITUTIONS_REPO, val)) return true;
			if (Utils.equals( ORDER_QUANTITY_INCREMENT, val)) return true;
			if (Utils.equals( WEIGHTED_AVERAGE_LIFE_COUPON__VALUE_IN_PERCENT_EXACT_OR_RANGE, val)) return true;
			if (Utils.equals( WEIGHTED_AVERAGE_MATURITY__VALUE_IN_MONTHS_EXACT_OR_RANGE, val)) return true;
			if (Utils.equals( MINIMUM_INCREMENT, val)) return true;
			if (Utils.equals( LOOKBACK_DAYS, val)) return true;
			if (Utils.equals( PRODUCTION_YEAR, val)) return true;
			if (Utils.equals( YIELD_RANGE, val)) return true;
			if (Utils.equals( TYPE_OF_REDEMPTION__VALUES_ARE_NONCALLABLE_PREFUNDED_ESCROWEDTOM, val)) return true;
			if (Utils.equals( REFERENCE_TO_ROLLING_OR_CLOSING_TRADE, val)) return true;
			if (Utils.equals( TRADERS_CREDIT, val)) return true;
			if (Utils.equals( TRADE_VARIANCE_VALUE_IN_PERCENT_MAXIMUM_OVER_OR_UNDERALLOCATION_, val)) return true;
			if (Utils.equals( CALL_PROTECTION, val)) return true;
			if (Utils.equals( SECURITY_TYPE_INCLUDED_OR_EXCLUDED, val)) return true;
			if (Utils.equals( SINGLE_MONTHLY_MORTALITY, val)) return true;
			if (Utils.equals( AVERAGE_LOAN_SIZE, val)) return true;
			if (Utils.equals( COUPON_RANGE, val)) return true;
			if (Utils.equals( RATING_SOURCE_AND_RANGE, val)) return true;
			if (Utils.equals( YIELD_TO_MATURITY_WHEN_YIELDTYPE235_AND_YIELD236_SHOW_A_DIFFEREN, val)) return true;
			if (Utils.equals( INTEREST_OF_ROLLING_OR_CLOSING_TRADE, val)) return true;
			if (Utils.equals( AUTO_REINVESTMENT_AT_RATE_OR_BETTER, val)) return true;
			if (Utils.equals( CONSTANT_PREPAYMENT_PENALTY, val)) return true;
			if (Utils.equals( PRICE_RANGE, val)) return true;
			if (Utils.equals( VALUATION_DISCOUNT, val)) return true;
			if (Utils.equals( POOL_IDENTIFIER, val)) return true;
			if (Utils.equals( CONSTANT_PREPAYMENT_RATE, val)) return true;
			if (Utils.equals( MINIMUM_DENOMINATION, val)) return true;
			if (Utils.equals( CONSTANT_PREPAYMENT_YIELD, val)) return true;
			if (Utils.equals( POOLS_PER_TRADE, val)) return true;
			if (Utils.equals( PURPOSE, val)) return true;
			if (Utils.equals( ISSUE_SIZE_RANGE, val)) return true;
			if (Utils.equals( BANK_QUALIFIED_YN, val)) return true;
			if (Utils.equals( OFFER_QUANTITY_TO_BE_SHOWN_TO_INTERNAL_BROKERS, val)) return true;
			if (Utils.equals( RESTRICTED_YN, val)) return true;
			if (Utils.equals( STRUCTURE, val)) return true;
			if (Utils.equals( BROKER_SALES_CREDIT_OVERRIDE, val)) return true;
			if (Utils.equals( PRIMARY_OR_SECONDARY_MARKET_INDICATOR, val)) return true;
			if (Utils.equals( BROKERS_SALES_CREDIT, val)) return true;
			if (Utils.equals( POOLS_PER_LOT, val)) return true;
			if (Utils.equals( FREEFORM_TEXT, val)) return true;
			if (Utils.equals( POOLS_PER_MILLION, val)) return true;
			if (Utils.equals( SUBSTITUTIONS_FREQUENCY_REPO, val)) return true;
			if (Utils.equals( NUMBER_OF_PIECES, val)) return true;
			if (Utils.equals( PERCENT_OF_PROSPECTUS_PREPAYMENT_CURVE, val)) return true;
			if (Utils.equals( WEIGHTED_AVERAGE_COUPON__VALUE_IN_PERCENT_EXACT_OR_RANGE_PLUS_GR, val)) return true;
			if (Utils.equals( TYPE_OF_ROLL_TRADE, val)) return true;
			if (Utils.equals( DISCOUNT_RATE_WHEN_PRICE_IS_DENOMINATED_IN_PERCENT_OF_PAR, val)) return true;
			if (Utils.equals( WHOLE_POOL_YN, val)) return true;
			if (Utils.equals( ISSUERS_TICKER, val)) return true;
			if (Utils.equals( ABSOLUTE_PREPAYMENT_SPEED, val)) return true;
			if (Utils.equals( CUSTOM_STARTEND_DATE, val)) return true;
			if (Utils.equals( AVAILABLE_OFFER_QUANTITY_TO_BE_SHOWN_TO_THE_STREET, val)) return true;
			if (Utils.equals( BENCHMARK_PRICE_SOURCE, val)) return true;
			if (Utils.equals( MAXIMUM_LOAN_BALANCE, val)) return true;
			if (Utils.equals( BARGAIN_CONDITIONS_SEE_STIPULATIONVALUE_234_FOR_VALUES, val)) return true;
			if (Utils.equals( POOLS_MAXIMUM, val)) return true;
			if (Utils.equals( PERCENT_OF_MANUFACTURED_HOUSING_PREPAYMENT_CURVE, val)) return true;
			if (Utils.equals( ISO_CURRENCY_CODE, val)) return true;
			if (Utils.equals( MATURITY_RANGE, val)) return true;
			if (Utils.equals( MINIMUM_QUANTITY, val)) return true;
			if (Utils.equals( MONTHLY_PREPAYMENT_RATE, val)) return true;
			if (Utils.equals( OFFER_PRICE_TO_BE_SHOWN_TO_INTERNAL_BROKERS, val)) return true;
			return false;
		}
	}

	public static class YieldType {
		public static final byte[] TAX_EQUIVALENT_YIELD = "TAXEQUIV".getBytes();
		public static final byte[] CLOSING_YIELD_MOST_RECENT_MONTH = "LASTMONTH".getBytes();
		public static final byte[] MARK_TO_MARKET_YIELD = "MARK".getBytes();
		public static final byte[] SEMIANNUAL_YIELD = "SEMIANNUAL".getBytes();
		public static final byte[] CLOSING_YIELD_MOST_RECENT_QUARTER = "LASTQUARTER".getBytes();
		public static final byte[] YIELD_TO_NEXT_REFUND_SINKING_FUND_BONDS = "NEXTREFUND".getBytes();
		public static final byte[] BOOK_YIELD = "BOOK".getBytes();
		public static final byte[] YIELD_TO_TENDER_DATE = "TENDER".getBytes();
		public static final byte[] CLOSING_YIELD_MOST_RECENT_YEAR = "LASTYEAR".getBytes();
		public static final byte[] YIELD_TO_LONGEST_AVERAGE_LIFE = "LONGAVGLIFE".getBytes();
		public static final byte[] PREVIOUS_CLOSE_YIELD = "PREVCLOSE".getBytes();
		public static final byte[] TRUE_YIELD = "TRUE".getBytes();
		public static final byte[] YIELD_TO_WORST = "WORST".getBytes();
		public static final byte[] CURRENT_YIELD = "CURRENT".getBytes();
		public static final byte[] COMPOUND_YIELD = "COMPOUND".getBytes();
		public static final byte[] YIELD_CHANGE_SINCE_CLOSE = "CHANGE".getBytes();
		public static final byte[] AFTER_TAX_YIELD_MUNICIPALS = "AFTERTAX".getBytes();
		public static final byte[] TRUE_GROSS_YIELD = "GROSS".getBytes();
		public static final byte[] ANNUAL_YIELD = "ANNUAL".getBytes();
		public static final byte[] OPEN_AVERAGE_YIELD = "OPENAVG".getBytes();
		public static final byte[] PROCEEDS_YIELD = "PROCEEDS".getBytes();
		public static final byte[] YIELD_TO_SHORTEST_AVERAGE_LIFE = "SHORTAVGLIFE".getBytes();
		public static final byte[] MOST_RECENT_CLOSING_YIELD = "LASTCLOSE".getBytes();
		public static final byte[] CLOSING_YIELD = "CLOSE".getBytes();
		public static final byte[] YIELD_TO_AVG_MATURITY = "AVGMATURITY".getBytes();
		public static final byte[] YIELD_AT_ISSUE_MUNICIPALS = "ATISSUE".getBytes();
		public static final byte[] YIELD_VALUE_OF_132 = "VALUE1_32".getBytes();
		public static final byte[] GVNT_EQUIVALENT_YIELD = "GOVTEQUIV".getBytes();
		public static final byte[] YIELD_TO_NEXT_CALL = "CALL".getBytes();
		public static final byte[] YIELD_TO_MATURITY = "MATURITY".getBytes();
		public static final byte[] YIELD_WITH_INFLATION_ASSUMPTION = "INFLATION".getBytes();
		public static final byte[] INVERSE_FLOATER_BOND_YIELD = "INVERSEFLOATER".getBytes();
		public static final byte[] SIMPLE_YIELD = "SIMPLE".getBytes();
		public static final byte[] YIELD_TO_NEXT_PUT = "PUT".getBytes();
		public static boolean isValid(byte[] val) {
			if (Utils.equals( TAX_EQUIVALENT_YIELD, val)) return true;
			if (Utils.equals( CLOSING_YIELD_MOST_RECENT_MONTH, val)) return true;
			if (Utils.equals( MARK_TO_MARKET_YIELD, val)) return true;
			if (Utils.equals( SEMIANNUAL_YIELD, val)) return true;
			if (Utils.equals( CLOSING_YIELD_MOST_RECENT_QUARTER, val)) return true;
			if (Utils.equals( YIELD_TO_NEXT_REFUND_SINKING_FUND_BONDS, val)) return true;
			if (Utils.equals( BOOK_YIELD, val)) return true;
			if (Utils.equals( YIELD_TO_TENDER_DATE, val)) return true;
			if (Utils.equals( CLOSING_YIELD_MOST_RECENT_YEAR, val)) return true;
			if (Utils.equals( YIELD_TO_LONGEST_AVERAGE_LIFE, val)) return true;
			if (Utils.equals( PREVIOUS_CLOSE_YIELD, val)) return true;
			if (Utils.equals( TRUE_YIELD, val)) return true;
			if (Utils.equals( YIELD_TO_WORST, val)) return true;
			if (Utils.equals( CURRENT_YIELD, val)) return true;
			if (Utils.equals( COMPOUND_YIELD, val)) return true;
			if (Utils.equals( YIELD_CHANGE_SINCE_CLOSE, val)) return true;
			if (Utils.equals( AFTER_TAX_YIELD_MUNICIPALS, val)) return true;
			if (Utils.equals( TRUE_GROSS_YIELD, val)) return true;
			if (Utils.equals( ANNUAL_YIELD, val)) return true;
			if (Utils.equals( OPEN_AVERAGE_YIELD, val)) return true;
			if (Utils.equals( PROCEEDS_YIELD, val)) return true;
			if (Utils.equals( YIELD_TO_SHORTEST_AVERAGE_LIFE, val)) return true;
			if (Utils.equals( MOST_RECENT_CLOSING_YIELD, val)) return true;
			if (Utils.equals( CLOSING_YIELD, val)) return true;
			if (Utils.equals( YIELD_TO_AVG_MATURITY, val)) return true;
			if (Utils.equals( YIELD_AT_ISSUE_MUNICIPALS, val)) return true;
			if (Utils.equals( YIELD_VALUE_OF_132, val)) return true;
			if (Utils.equals( GVNT_EQUIVALENT_YIELD, val)) return true;
			if (Utils.equals( YIELD_TO_NEXT_CALL, val)) return true;
			if (Utils.equals( YIELD_TO_MATURITY, val)) return true;
			if (Utils.equals( YIELD_WITH_INFLATION_ASSUMPTION, val)) return true;
			if (Utils.equals( INVERSE_FLOATER_BOND_YIELD, val)) return true;
			if (Utils.equals( SIMPLE_YIELD, val)) return true;
			if (Utils.equals( YIELD_TO_NEXT_PUT, val)) return true;
			return false;
		}
	}

	public static class TradedFlatSwitch {
		public static final boolean NOT_TRADED_FLAT = false;
		public static final boolean TRADED_FLAT = true;
		public static boolean isValid(boolean val) {
			if (( NOT_TRADED_FLAT==val)) return true;
			if (( TRADED_FLAT==val)) return true;
			return false;
		}
	}

	public static class SubscriptionRequestType {
		public static final byte DISABLE_PREVIOUS_SNAPSHOT__UPDATE_REQUEST_UNSUBSCRIBE = '2';
		public static final byte SNAPSHOT__UPDATES_SUBSCRIBE = '1';
		public static final byte SNAPSHOT = '0';
		public static boolean isValid(byte val) {
			if (( DISABLE_PREVIOUS_SNAPSHOT__UPDATE_REQUEST_UNSUBSCRIBE==val)) return true;
			if (( SNAPSHOT__UPDATES_SUBSCRIBE==val)) return true;
			if (( SNAPSHOT==val)) return true;
			return false;
		}
	}

	public static class MDUpdateType {
		public static final long INCREMENTAL_REFRESH = 1;
		public static final long FULL_REFRESH = 0;
		public static boolean isValid(long val) {
			if (( INCREMENTAL_REFRESH==val)) return true;
			if (( FULL_REFRESH==val)) return true;
			return false;
		}
	}

	public static class AggregatedBook {
		public static final boolean BOOK_ENTRIES_SHOULD_NOT_BE_AGGREGATED = false;
		public static final boolean BOOK_ENTRIES_TO_BE_AGGREGATED = true;
		public static boolean isValid(boolean val) {
			if (( BOOK_ENTRIES_SHOULD_NOT_BE_AGGREGATED==val)) return true;
			if (( BOOK_ENTRIES_TO_BE_AGGREGATED==val)) return true;
			return false;
		}
	}

	public static class MDEntryType {
		public static final byte COMPOSITE_UNDERLYING_PRICE = 'D';
		public static final byte SIMULATED_SELL_PRICE = 'E';
		public static final byte SIMULATED_BUY_PRICE = 'F';
		public static final byte MARGIN_RATE = 'G';
		public static final byte IMBALANCE = 'A';
		public static final byte TRADE_VOLUME = 'B';
		public static final byte OPEN_INTEREST = 'C';
		public static final byte SETTLE_LOW_PRICE = 'L';
		public static final byte PRIOR_SETTLE_PRICE = 'M';
		public static final byte SESSION_HIGH_BID = 'N';
		public static final byte SESSION_LOW_OFFER = 'O';
		public static final byte MID_PRICE = 'H';
		public static final byte EMPTY_BOOK = 'J';
		public static final byte SETTLE_HIGH_PRICE = 'K';
		public static final byte DAILY_VALUE_ADJUSTMENT_FOR_SHORT_POSITIONS = 'U';
		public static final byte CUMULATIVE_VALUE_ADJUSTMENT_FOR_LONG_POSITIONS = 'T';
		public static final byte FIXING_PRICE = 'W';
		public static final byte CUMULATIVE_VALUE_ADJUSTMENT_FOR_SHORT_POSITIONS = 'V';
		public static final byte AUCTION_CLEARING_PRICE = 'Q';
		public static final byte EARLY_PRICES = 'P';
		public static final byte SWAP_VALUE_FACTOR_SVP_FOR_SWAPS_CLEARED_THROUGH_A_CENTRAL_COUNTE = 'S';
		public static final byte DAILY_VALUE_ADJUSTMENT_FOR_LONG_POSITIONS = 'R';
		public static final byte RECOVERY_RATE = 'Y';
		public static final byte CASH_RATE = 'X';
		public static final byte RECOVERY_RATE_FOR_LONG = 'Z';
		public static final byte RECOVERY_RATE_FOR_SHORT = 'a';
		public static final byte INDEX_VALUE = '3';
		public static final byte TRADE = '2';
		public static final byte OFFER = '1';
		public static final byte BID = '0';
		public static final byte TRADING_SESSION_HIGH_PRICE = '7';
		public static final byte SETTLEMENT_PRICE = '6';
		public static final byte CLOSING_PRICE = '5';
		public static final byte OPENING_PRICE = '4';
		public static final byte TRADING_SESSION_VWAP_PRICE = '9';
		public static final byte TRADING_SESSION_LOW_PRICE = '8';
		public static boolean isValid(byte val) {
			if (( COMPOSITE_UNDERLYING_PRICE==val)) return true;
			if (( SIMULATED_SELL_PRICE==val)) return true;
			if (( SIMULATED_BUY_PRICE==val)) return true;
			if (( MARGIN_RATE==val)) return true;
			if (( IMBALANCE==val)) return true;
			if (( TRADE_VOLUME==val)) return true;
			if (( OPEN_INTEREST==val)) return true;
			if (( SETTLE_LOW_PRICE==val)) return true;
			if (( PRIOR_SETTLE_PRICE==val)) return true;
			if (( SESSION_HIGH_BID==val)) return true;
			if (( SESSION_LOW_OFFER==val)) return true;
			if (( MID_PRICE==val)) return true;
			if (( EMPTY_BOOK==val)) return true;
			if (( SETTLE_HIGH_PRICE==val)) return true;
			if (( DAILY_VALUE_ADJUSTMENT_FOR_SHORT_POSITIONS==val)) return true;
			if (( CUMULATIVE_VALUE_ADJUSTMENT_FOR_LONG_POSITIONS==val)) return true;
			if (( FIXING_PRICE==val)) return true;
			if (( CUMULATIVE_VALUE_ADJUSTMENT_FOR_SHORT_POSITIONS==val)) return true;
			if (( AUCTION_CLEARING_PRICE==val)) return true;
			if (( EARLY_PRICES==val)) return true;
			if (( SWAP_VALUE_FACTOR_SVP_FOR_SWAPS_CLEARED_THROUGH_A_CENTRAL_COUNTE==val)) return true;
			if (( DAILY_VALUE_ADJUSTMENT_FOR_LONG_POSITIONS==val)) return true;
			if (( RECOVERY_RATE==val)) return true;
			if (( CASH_RATE==val)) return true;
			if (( RECOVERY_RATE_FOR_LONG==val)) return true;
			if (( RECOVERY_RATE_FOR_SHORT==val)) return true;
			if (( INDEX_VALUE==val)) return true;
			if (( TRADE==val)) return true;
			if (( OFFER==val)) return true;
			if (( BID==val)) return true;
			if (( TRADING_SESSION_HIGH_PRICE==val)) return true;
			if (( SETTLEMENT_PRICE==val)) return true;
			if (( CLOSING_PRICE==val)) return true;
			if (( OPENING_PRICE==val)) return true;
			if (( TRADING_SESSION_VWAP_PRICE==val)) return true;
			if (( TRADING_SESSION_LOW_PRICE==val)) return true;
			return false;
		}
	}

	public static class TickDirection {
		public static final byte ZEROMINUS_TICK = '3';
		public static final byte MINUS_TICK = '2';
		public static final byte ZEROPLUS_TICK = '1';
		public static final byte PLUS_TICK = '0';
		public static boolean isValid(byte val) {
			if (( ZEROMINUS_TICK==val)) return true;
			if (( MINUS_TICK==val)) return true;
			if (( ZEROPLUS_TICK==val)) return true;
			if (( PLUS_TICK==val)) return true;
			return false;
		}
	}

	public static class QuoteCondition {
		public static final byte[] REST_OF_BOOK_VWAP = "3".getBytes();
		public static final byte[] RESTRICTED = "2".getBytes();
		public static final byte[] NO_ACTIVE_SAM = "1".getBytes();
		public static final byte[] RESERVED_SAM = "0".getBytes();
		public static final byte[] FLAT_CURVE = "7".getBytes();
		public static final byte[] FULL_CURVE = "6".getBytes();
		public static final byte[] MEDIAN_PRICE = "5".getBytes();
		public static final byte[] BETTER_PRICES_IN_CONDITIONAL_ORDERS = "4".getBytes();
		public static final byte[] CONSOLIDATED_BEST = "D".getBytes();
		public static final byte[] LOCKED = "E".getBytes();
		public static final byte[] CROSSED = "F".getBytes();
		public static final byte[] DEPTH = "G".getBytes();
		public static final byte[] OPENACTIVE = "A".getBytes();
		public static final byte[] CLOSEDINACTIVE = "B".getBytes();
		public static final byte[] EXCHANGE_BEST = "C".getBytes();
		public static final byte[] MANUALSLOW_QUOTE = "L".getBytes();
		public static final byte[] DEPTH_ON_OFFER = "M".getBytes();
		public static final byte[] DEPTH_ON_BID = "N".getBytes();
		public static final byte[] CLOSING = "O".getBytes();
		public static final byte[] FAST_TRADING = "H".getBytes();
		public static final byte[] NONFIRM = "I".getBytes();
		public static final byte[] OUTRIGHT_PRICE = "J".getBytes();
		public static final byte[] IMPLIED_PRICE = "K".getBytes();
		public static final byte[] ADDITIONAL_INFO = "U".getBytes();
		public static final byte[] NEWS_PENDING = "T".getBytes();
		public static final byte[] RESUME = "W".getBytes();
		public static final byte[] ADDITIONAL_INFO_DUE_TO_RELATED = "V".getBytes();
		public static final byte[] TRADING_RANGE = "Q".getBytes();
		public static final byte[] NEWS_DISSEMINATION = "P".getBytes();
		public static final byte[] DUE_TO_RELATED = "S".getBytes();
		public static final byte[] ORDER_INFLUX = "R".getBytes();
		public static final byte[] VOLUME_ALERT = "Y".getBytes();
		public static final byte[] VIEW_OF_COMMON = "X".getBytes();
		public static final byte[] ORDER_IMBALANCE = "Z".getBytes();
		public static final byte[] FAST_MARKET_ETH = "f".getBytes();
		public static final byte[] INACTIVE_ETH = "g".getBytes();
		public static final byte[] AUTOMATIC_EXECUTION = "d".getBytes();
		public static final byte[] AUTOMATIC_EXECUTION_ETH = "e".getBytes();
		public static final byte[] NO_OPEN__NO_RESUME = "b".getBytes();
		public static final byte[] REGULAR_ETH = "c".getBytes();
		public static final byte[] EQUIPMENT_CHANGEOVER = "a".getBytes();
		public static final byte[] TRADING_RESUME = "n".getBytes();
		public static final byte[] OUT_OF_SEQUENCE = "o".getBytes();
		public static final byte[] DUE_TO_NEWS_DISSEMINATION = "l".getBytes();
		public static final byte[] DUE_TO_NEWS_PENDING = "m".getBytes();
		public static final byte[] HALT = "j".getBytes();
		public static final byte[] HALT_ETH = "k".getBytes();
		public static final byte[] ROTATION = "h".getBytes();
		public static final byte[] ROTATION_ETH = "i".getBytes();
		public static final byte[] OPENING_SAM = "w".getBytes();
		public static final byte[] PREOPENING_SAM = "v".getBytes();
		public static final byte[] FROZEN_SAM = "u".getBytes();
		public static final byte[] FORBIDDEN_SAM = "t".getBytes();
		public static final byte[] END_OF_DAY_SAM = "s".getBytes();
		public static final byte[] BID_OFFER_SPECIALIST = "r".getBytes();
		public static final byte[] OFFER_SPECIALIST = "q".getBytes();
		public static final byte[] BID_SPECIALIST = "p".getBytes();
		public static final byte[] SUSPENDED_SAM = "z".getBytes();
		public static final byte[] SURVEILLANCE_SAM = "y".getBytes();
		public static final byte[] OPEN_SAM = "x".getBytes();
		public static boolean isValid(byte[] val) {
			if (Utils.equals( REST_OF_BOOK_VWAP, val)) return true;
			if (Utils.equals( RESTRICTED, val)) return true;
			if (Utils.equals( NO_ACTIVE_SAM, val)) return true;
			if (Utils.equals( RESERVED_SAM, val)) return true;
			if (Utils.equals( FLAT_CURVE, val)) return true;
			if (Utils.equals( FULL_CURVE, val)) return true;
			if (Utils.equals( MEDIAN_PRICE, val)) return true;
			if (Utils.equals( BETTER_PRICES_IN_CONDITIONAL_ORDERS, val)) return true;
			if (Utils.equals( CONSOLIDATED_BEST, val)) return true;
			if (Utils.equals( LOCKED, val)) return true;
			if (Utils.equals( CROSSED, val)) return true;
			if (Utils.equals( DEPTH, val)) return true;
			if (Utils.equals( OPENACTIVE, val)) return true;
			if (Utils.equals( CLOSEDINACTIVE, val)) return true;
			if (Utils.equals( EXCHANGE_BEST, val)) return true;
			if (Utils.equals( MANUALSLOW_QUOTE, val)) return true;
			if (Utils.equals( DEPTH_ON_OFFER, val)) return true;
			if (Utils.equals( DEPTH_ON_BID, val)) return true;
			if (Utils.equals( CLOSING, val)) return true;
			if (Utils.equals( FAST_TRADING, val)) return true;
			if (Utils.equals( NONFIRM, val)) return true;
			if (Utils.equals( OUTRIGHT_PRICE, val)) return true;
			if (Utils.equals( IMPLIED_PRICE, val)) return true;
			if (Utils.equals( ADDITIONAL_INFO, val)) return true;
			if (Utils.equals( NEWS_PENDING, val)) return true;
			if (Utils.equals( RESUME, val)) return true;
			if (Utils.equals( ADDITIONAL_INFO_DUE_TO_RELATED, val)) return true;
			if (Utils.equals( TRADING_RANGE, val)) return true;
			if (Utils.equals( NEWS_DISSEMINATION, val)) return true;
			if (Utils.equals( DUE_TO_RELATED, val)) return true;
			if (Utils.equals( ORDER_INFLUX, val)) return true;
			if (Utils.equals( VOLUME_ALERT, val)) return true;
			if (Utils.equals( VIEW_OF_COMMON, val)) return true;
			if (Utils.equals( ORDER_IMBALANCE, val)) return true;
			if (Utils.equals( FAST_MARKET_ETH, val)) return true;
			if (Utils.equals( INACTIVE_ETH, val)) return true;
			if (Utils.equals( AUTOMATIC_EXECUTION, val)) return true;
			if (Utils.equals( AUTOMATIC_EXECUTION_ETH, val)) return true;
			if (Utils.equals( NO_OPEN__NO_RESUME, val)) return true;
			if (Utils.equals( REGULAR_ETH, val)) return true;
			if (Utils.equals( EQUIPMENT_CHANGEOVER, val)) return true;
			if (Utils.equals( TRADING_RESUME, val)) return true;
			if (Utils.equals( OUT_OF_SEQUENCE, val)) return true;
			if (Utils.equals( DUE_TO_NEWS_DISSEMINATION, val)) return true;
			if (Utils.equals( DUE_TO_NEWS_PENDING, val)) return true;
			if (Utils.equals( HALT, val)) return true;
			if (Utils.equals( HALT_ETH, val)) return true;
			if (Utils.equals( ROTATION, val)) return true;
			if (Utils.equals( ROTATION_ETH, val)) return true;
			if (Utils.equals( OPENING_SAM, val)) return true;
			if (Utils.equals( PREOPENING_SAM, val)) return true;
			if (Utils.equals( FROZEN_SAM, val)) return true;
			if (Utils.equals( FORBIDDEN_SAM, val)) return true;
			if (Utils.equals( END_OF_DAY_SAM, val)) return true;
			if (Utils.equals( BID_OFFER_SPECIALIST, val)) return true;
			if (Utils.equals( OFFER_SPECIALIST, val)) return true;
			if (Utils.equals( BID_SPECIALIST, val)) return true;
			if (Utils.equals( SUSPENDED_SAM, val)) return true;
			if (Utils.equals( SURVEILLANCE_SAM, val)) return true;
			if (Utils.equals( OPEN_SAM, val)) return true;
			return false;
		}
	}

	public static class TradeCondition {
		public static final byte[] BURST_BASKET = "AT".getBytes();
		public static final byte[] BASKET_INDEX = "AS".getBytes();
		public static final byte[] FORM_T = "AR".getBytes();
		public static final byte[] AUTOMATIC_EXECUTION = "AQ".getBytes();
		public static final byte[] OUTSIDE_SPREAD = "AV".getBytes();
		public static final byte[] MULT_ASSET_CLASS_MULTILEG_TRADE = "3".getBytes();
		public static final byte[] STRADDLE = "AC".getBytes();
		public static final byte[] MARKETPLACE_ENTERED_TRADE = "2".getBytes();
		public static final byte[] STRADDLE_ETH = "AD".getBytes();
		public static final byte[] IMPLIED_TRADE = "1".getBytes();
		public static final byte[] SPREAD = "AA".getBytes();
		public static final byte[] SPREAD_ETH = "AB".getBytes();
		public static final byte[] CANCEL = "0".getBytes();
		public static final byte[] REGULAR_ETH = "AG".getBytes();
		public static final byte[] COMBO = "AH".getBytes();
		public static final byte[] STOPPED = "AE".getBytes();
		public static final byte[] MULTILEGTOMULTILEG_TRADE = "4".getBytes();
		public static final byte[] STOPPED_ETH = "AF".getBytes();
		public static final byte[] PRIOR_REFERENCE_PRICE = "AK".getBytes();
		public static final byte[] STOPPED_SOLD_LAST = "AL".getBytes();
		public static final byte[] COMBO_ETH = "AI".getBytes();
		public static final byte[] OFFICIAL_CLOSING_PRICE = "AJ".getBytes();
		public static final byte[] CROSSED_DUPLICATE_ENUMERATION__USE_X_INSTEAD = "AO".getBytes();
		public static final byte[] FAST_MARKET = "AP".getBytes();
		public static final byte[] STOPPED_OUT_OF_SEQUENCE = "AM".getBytes();
		public static final byte[] OFFICAL_CLOSING_PRICE_DUPLICATE_ENUMERATION__USE_AJ_INSTEAD = "AN".getBytes();
		public static final byte[] NEXT_DAY_ONLYMARKET = "D".getBytes();
		public static final byte[] OPENINGREOPENING_TRADE_DETAIL = "E".getBytes();
		public static final byte[] INTRADAY_TRADE_DETAIL = "F".getBytes();
		public static final byte[] RULE_127_TRADE_NYSE = "G".getBytes();
		public static final byte[] CASH_ONLY_MARKET = "A".getBytes();
		public static final byte[] AVERAGE_PRICE_TRADE = "B".getBytes();
		public static final byte[] CASH_TRADE_SAME_DAY_CLEARING = "C".getBytes();
		public static final byte[] SELLER = "L".getBytes();
		public static final byte[] SOLD_OUT_OF_SEQUENCE = "M".getBytes();
		public static final byte[] STOPPED_STOCK_GUARANTEE_OF_PRICE_BUT_DOES_NOT_EXECUTE_THE_ORDER = "N".getBytes();
		public static final byte[] RULE_155_TRADE_AMEX = "H".getBytes();
		public static final byte[] SOLD_LAST_LATE_REPORTING = "I".getBytes();
		public static final byte[] NEXT_DAY_TRADE_NEXT_DAY_CLEARING = "J".getBytes();
		public static final byte[] OPENED_LATE_REPORT_OF_OPENED_TRADE = "K".getBytes();
		public static final byte[] EXCHANGE_LAST = "U".getBytes();
		public static final byte[] CONVERTED_PRICE_INDICATOR = "T".getBytes();
		public static final byte[] EXPIT = "W".getBytes();
		public static final byte[] FINAL_PRICE_OF_SESSION = "V".getBytes();
		public static final byte[] IMBALANCE_MORE_SELLERS_CANNOT_BE_USED_IN_COMBINATION_WITH_P = "Q".getBytes();
		public static final byte[] IMBALANCE_MORE_BUYERS_CANNOT_BE_USED_IN_COMBINATION_WITH_Q = "P".getBytes();
		public static final byte[] BARGAIN_CONDITION_LSE = "S".getBytes();
		public static final byte[] OPENING_PRICE = "R".getBytes();
		public static final byte[] TRADES_RESULTING_FROM_MANUALSLOW_QUOTE = "Y".getBytes();
		public static final byte[] CROSSED = "X".getBytes();
		public static final byte[] TRADES_RESULTING_FROM_INTERMARKET_SWEEP = "Z".getBytes();
		public static final byte[] BUNCHED_SALE = "f".getBytes();
		public static final byte[] SPLIT_TRADE = "g".getBytes();
		public static final byte[] BUNCHED = "d".getBytes();
		public static final byte[] DISTRIBUTION = "e".getBytes();
		public static final byte[] DIRECT_PLUS = "b".getBytes();
		public static final byte[] ACQUISITION = "c".getBytes();
		public static final byte[] VOLUME_ONLY = "a".getBytes();
		public static final byte[] CANCEL_LAST = "n".getBytes();
		public static final byte[] SOLD_LAST_SALE = "o".getBytes();
		public static final byte[] CANCEL_LAST_ETH = "l".getBytes();
		public static final byte[] SOLD_LAST_SALE_ETH = "m".getBytes();
		public static final byte[] CANCEL_STOPPED_ETH = "j".getBytes();
		public static final byte[] OUT_OF_SEQUENCE_ETH = "k".getBytes();
		public static final byte[] CANCEL_STOPPED = "h".getBytes();
		public static final byte[] CANCEL_ETH = "i".getBytes();
		public static final byte[] REOPEN = "w".getBytes();
		public static final byte[] AUTO_EXECUTION_ETH = "v".getBytes();
		public static final byte[] LATE_OPEN_ETH = "u".getBytes();
		public static final byte[] CANCEL_ONLY_ETH = "t".getBytes();
		public static final byte[] CANCEL_ONLY = "s".getBytes();
		public static final byte[] OPENED_SALE_ETH = "r".getBytes();
		public static final byte[] CANCEL_OPEN_ETH = "q".getBytes();
		public static final byte[] CANCEL_OPEN = "p".getBytes();
		public static final byte[] ADJUSTED_ETH = "z".getBytes();
		public static final byte[] ADJUSTED = "y".getBytes();
		public static final byte[] REOPEN_ETH = "x".getBytes();
		public static boolean isValid(byte[] val) {
			if (Utils.equals( BURST_BASKET, val)) return true;
			if (Utils.equals( BASKET_INDEX, val)) return true;
			if (Utils.equals( FORM_T, val)) return true;
			if (Utils.equals( AUTOMATIC_EXECUTION, val)) return true;
			if (Utils.equals( OUTSIDE_SPREAD, val)) return true;
			if (Utils.equals( MULT_ASSET_CLASS_MULTILEG_TRADE, val)) return true;
			if (Utils.equals( STRADDLE, val)) return true;
			if (Utils.equals( MARKETPLACE_ENTERED_TRADE, val)) return true;
			if (Utils.equals( STRADDLE_ETH, val)) return true;
			if (Utils.equals( IMPLIED_TRADE, val)) return true;
			if (Utils.equals( SPREAD, val)) return true;
			if (Utils.equals( SPREAD_ETH, val)) return true;
			if (Utils.equals( CANCEL, val)) return true;
			if (Utils.equals( REGULAR_ETH, val)) return true;
			if (Utils.equals( COMBO, val)) return true;
			if (Utils.equals( STOPPED, val)) return true;
			if (Utils.equals( MULTILEGTOMULTILEG_TRADE, val)) return true;
			if (Utils.equals( STOPPED_ETH, val)) return true;
			if (Utils.equals( PRIOR_REFERENCE_PRICE, val)) return true;
			if (Utils.equals( STOPPED_SOLD_LAST, val)) return true;
			if (Utils.equals( COMBO_ETH, val)) return true;
			if (Utils.equals( OFFICIAL_CLOSING_PRICE, val)) return true;
			if (Utils.equals( CROSSED_DUPLICATE_ENUMERATION__USE_X_INSTEAD, val)) return true;
			if (Utils.equals( FAST_MARKET, val)) return true;
			if (Utils.equals( STOPPED_OUT_OF_SEQUENCE, val)) return true;
			if (Utils.equals( OFFICAL_CLOSING_PRICE_DUPLICATE_ENUMERATION__USE_AJ_INSTEAD, val)) return true;
			if (Utils.equals( NEXT_DAY_ONLYMARKET, val)) return true;
			if (Utils.equals( OPENINGREOPENING_TRADE_DETAIL, val)) return true;
			if (Utils.equals( INTRADAY_TRADE_DETAIL, val)) return true;
			if (Utils.equals( RULE_127_TRADE_NYSE, val)) return true;
			if (Utils.equals( CASH_ONLY_MARKET, val)) return true;
			if (Utils.equals( AVERAGE_PRICE_TRADE, val)) return true;
			if (Utils.equals( CASH_TRADE_SAME_DAY_CLEARING, val)) return true;
			if (Utils.equals( SELLER, val)) return true;
			if (Utils.equals( SOLD_OUT_OF_SEQUENCE, val)) return true;
			if (Utils.equals( STOPPED_STOCK_GUARANTEE_OF_PRICE_BUT_DOES_NOT_EXECUTE_THE_ORDER, val)) return true;
			if (Utils.equals( RULE_155_TRADE_AMEX, val)) return true;
			if (Utils.equals( SOLD_LAST_LATE_REPORTING, val)) return true;
			if (Utils.equals( NEXT_DAY_TRADE_NEXT_DAY_CLEARING, val)) return true;
			if (Utils.equals( OPENED_LATE_REPORT_OF_OPENED_TRADE, val)) return true;
			if (Utils.equals( EXCHANGE_LAST, val)) return true;
			if (Utils.equals( CONVERTED_PRICE_INDICATOR, val)) return true;
			if (Utils.equals( EXPIT, val)) return true;
			if (Utils.equals( FINAL_PRICE_OF_SESSION, val)) return true;
			if (Utils.equals( IMBALANCE_MORE_SELLERS_CANNOT_BE_USED_IN_COMBINATION_WITH_P, val)) return true;
			if (Utils.equals( IMBALANCE_MORE_BUYERS_CANNOT_BE_USED_IN_COMBINATION_WITH_Q, val)) return true;
			if (Utils.equals( BARGAIN_CONDITION_LSE, val)) return true;
			if (Utils.equals( OPENING_PRICE, val)) return true;
			if (Utils.equals( TRADES_RESULTING_FROM_MANUALSLOW_QUOTE, val)) return true;
			if (Utils.equals( CROSSED, val)) return true;
			if (Utils.equals( TRADES_RESULTING_FROM_INTERMARKET_SWEEP, val)) return true;
			if (Utils.equals( BUNCHED_SALE, val)) return true;
			if (Utils.equals( SPLIT_TRADE, val)) return true;
			if (Utils.equals( BUNCHED, val)) return true;
			if (Utils.equals( DISTRIBUTION, val)) return true;
			if (Utils.equals( DIRECT_PLUS, val)) return true;
			if (Utils.equals( ACQUISITION, val)) return true;
			if (Utils.equals( VOLUME_ONLY, val)) return true;
			if (Utils.equals( CANCEL_LAST, val)) return true;
			if (Utils.equals( SOLD_LAST_SALE, val)) return true;
			if (Utils.equals( CANCEL_LAST_ETH, val)) return true;
			if (Utils.equals( SOLD_LAST_SALE_ETH, val)) return true;
			if (Utils.equals( CANCEL_STOPPED_ETH, val)) return true;
			if (Utils.equals( OUT_OF_SEQUENCE_ETH, val)) return true;
			if (Utils.equals( CANCEL_STOPPED, val)) return true;
			if (Utils.equals( CANCEL_ETH, val)) return true;
			if (Utils.equals( REOPEN, val)) return true;
			if (Utils.equals( AUTO_EXECUTION_ETH, val)) return true;
			if (Utils.equals( LATE_OPEN_ETH, val)) return true;
			if (Utils.equals( CANCEL_ONLY_ETH, val)) return true;
			if (Utils.equals( CANCEL_ONLY, val)) return true;
			if (Utils.equals( OPENED_SALE_ETH, val)) return true;
			if (Utils.equals( CANCEL_OPEN_ETH, val)) return true;
			if (Utils.equals( CANCEL_OPEN, val)) return true;
			if (Utils.equals( ADJUSTED_ETH, val)) return true;
			if (Utils.equals( ADJUSTED, val)) return true;
			if (Utils.equals( REOPEN_ETH, val)) return true;
			return false;
		}
	}

	public static class MDUpdateAction {
		public static final byte DELETE_THRU = '3';
		public static final byte DELETE = '2';
		public static final byte CHANGE = '1';
		public static final byte NEW = '0';
		public static final byte OVERLAY = '5';
		public static final byte DELETE_FROM = '4';
		public static boolean isValid(byte val) {
			if (( DELETE_THRU==val)) return true;
			if (( DELETE==val)) return true;
			if (( CHANGE==val)) return true;
			if (( NEW==val)) return true;
			if (( OVERLAY==val)) return true;
			if (( DELETE_FROM==val)) return true;
			return false;
		}
	}

	public static class MDReqRejReason {
		public static final byte INSUFFICIENT_CREDIT = 'D';
		public static final byte UNSUPPORTED_SCOPE = 'A';
		public static final byte UNSUPPORTED_OPENCLOSESETTLEFLAG = 'B';
		public static final byte UNSUPPORTED_MDIMPLICITDELETE = 'C';
		public static final byte INSUFFICIENT_PERMISSIONS = '3';
		public static final byte INSUFFICIENT_BANDWIDTH = '2';
		public static final byte DUPLICATE_MDREQID = '1';
		public static final byte UNKNOWN_SYMBOL = '0';
		public static final byte UNSUPPORTED_AGGREGATEDBOOK = '7';
		public static final byte UNSUPPORTED_MDUPDATETYPE = '6';
		public static final byte UNSUPPORTED_MARKETDEPTH = '5';
		public static final byte UNSUPPORTED_SUBSCRIPTIONREQUESTTYPE = '4';
		public static final byte UNSUPPORTED_TRADINGSESSIONID = '9';
		public static final byte UNSUPPORTED_MDENTRYTYPE = '8';
		public static boolean isValid(byte val) {
			if (( INSUFFICIENT_CREDIT==val)) return true;
			if (( UNSUPPORTED_SCOPE==val)) return true;
			if (( UNSUPPORTED_OPENCLOSESETTLEFLAG==val)) return true;
			if (( UNSUPPORTED_MDIMPLICITDELETE==val)) return true;
			if (( INSUFFICIENT_PERMISSIONS==val)) return true;
			if (( INSUFFICIENT_BANDWIDTH==val)) return true;
			if (( DUPLICATE_MDREQID==val)) return true;
			if (( UNKNOWN_SYMBOL==val)) return true;
			if (( UNSUPPORTED_AGGREGATEDBOOK==val)) return true;
			if (( UNSUPPORTED_MDUPDATETYPE==val)) return true;
			if (( UNSUPPORTED_MARKETDEPTH==val)) return true;
			if (( UNSUPPORTED_SUBSCRIPTIONREQUESTTYPE==val)) return true;
			if (( UNSUPPORTED_TRADINGSESSIONID==val)) return true;
			if (( UNSUPPORTED_MDENTRYTYPE==val)) return true;
			return false;
		}
	}

	public static class DeleteReason {
		public static final byte ERROR = '1';
		public static final byte CANCELLATION__TRADE_BUST = '0';
		public static boolean isValid(byte val) {
			if (( ERROR==val)) return true;
			if (( CANCELLATION__TRADE_BUST==val)) return true;
			return false;
		}
	}

	public static class OpenCloseSettlFlag {
		public static final byte[] EXPECTED_ENTRY = "3".getBytes();
		public static final byte[] DELIVERY_SETTLEMENT_ENTRY = "2".getBytes();
		public static final byte[] SESSION_OPEN__CLOSE__SETTLEMENT_ENTRY = "1".getBytes();
		public static final byte[] DAILY_OPEN__CLOSE__SETTLEMENT_ENTRY = "0".getBytes();
		public static final byte[] THEORETICAL_PRICE_VALUE = "5".getBytes();
		public static final byte[] ENTRY_FROM_PREVIOUS_BUSINESS_DAY = "4".getBytes();
		public static boolean isValid(byte[] val) {
			if (Utils.equals( EXPECTED_ENTRY, val)) return true;
			if (Utils.equals( DELIVERY_SETTLEMENT_ENTRY, val)) return true;
			if (Utils.equals( SESSION_OPEN__CLOSE__SETTLEMENT_ENTRY, val)) return true;
			if (Utils.equals( DAILY_OPEN__CLOSE__SETTLEMENT_ENTRY, val)) return true;
			if (Utils.equals( THEORETICAL_PRICE_VALUE, val)) return true;
			if (Utils.equals( ENTRY_FROM_PREVIOUS_BUSINESS_DAY, val)) return true;
			return false;
		}
	}

	public static class FinancialStatus {
		public static final byte[] RESTRICTED = "3".getBytes();
		public static final byte[] PENDING_DELISTING = "2".getBytes();
		public static final byte[] BANKRUPT = "1".getBytes();
		public static boolean isValid(byte[] val) {
			if (Utils.equals( RESTRICTED, val)) return true;
			if (Utils.equals( PENDING_DELISTING, val)) return true;
			if (Utils.equals( BANKRUPT, val)) return true;
			return false;
		}
	}

	public static class CorporateAction {
		public static final byte[] NEW = "D".getBytes();
		public static final byte[] EXINTEREST = "E".getBytes();
		public static final byte[] CASH_DIVIDEND = "F".getBytes();
		public static final byte[] STOCK_DIVIDEND = "G".getBytes();
		public static final byte[] EXDIVIDEND = "A".getBytes();
		public static final byte[] EXDISTRIBUTION = "B".getBytes();
		public static final byte[] EXRIGHTS = "C".getBytes();
		public static final byte[] LIQUIDATION_REORGANIZATION = "L".getBytes();
		public static final byte[] MERGER_REORGANIZATION = "M".getBytes();
		public static final byte[] RIGHTS_OFFERING = "N".getBytes();
		public static final byte[] SHAREHOLDER_MEETING = "O".getBytes();
		public static final byte[] NONINTEGER_STOCK_SPLIT = "H".getBytes();
		public static final byte[] REVERSE_STOCK_SPLIT = "I".getBytes();
		public static final byte[] STANDARDINTEGER_STOCK_SPLIT = "J".getBytes();
		public static final byte[] POSITION_CONSOLIDATION = "K".getBytes();
		public static final byte[] CUSIP__NAME_CHANGE = "U".getBytes();
		public static final byte[] SYMBOL_CONVERSION = "T".getBytes();
		public static final byte[] SUCCESSION_EVENT = "W".getBytes();
		public static final byte[] LEAP_ROLLOVER = "V".getBytes();
		public static final byte[] TENDER_OFFER = "Q".getBytes();
		public static final byte[] SPINOFF = "P".getBytes();
		public static final byte[] SPECIAL_ACTION = "S".getBytes();
		public static final byte[] WARRANT = "R".getBytes();
		public static boolean isValid(byte[] val) {
			if (Utils.equals( NEW, val)) return true;
			if (Utils.equals( EXINTEREST, val)) return true;
			if (Utils.equals( CASH_DIVIDEND, val)) return true;
			if (Utils.equals( STOCK_DIVIDEND, val)) return true;
			if (Utils.equals( EXDIVIDEND, val)) return true;
			if (Utils.equals( EXDISTRIBUTION, val)) return true;
			if (Utils.equals( EXRIGHTS, val)) return true;
			if (Utils.equals( LIQUIDATION_REORGANIZATION, val)) return true;
			if (Utils.equals( MERGER_REORGANIZATION, val)) return true;
			if (Utils.equals( RIGHTS_OFFERING, val)) return true;
			if (Utils.equals( SHAREHOLDER_MEETING, val)) return true;
			if (Utils.equals( NONINTEGER_STOCK_SPLIT, val)) return true;
			if (Utils.equals( REVERSE_STOCK_SPLIT, val)) return true;
			if (Utils.equals( STANDARDINTEGER_STOCK_SPLIT, val)) return true;
			if (Utils.equals( POSITION_CONSOLIDATION, val)) return true;
			if (Utils.equals( CUSIP__NAME_CHANGE, val)) return true;
			if (Utils.equals( SYMBOL_CONVERSION, val)) return true;
			if (Utils.equals( SUCCESSION_EVENT, val)) return true;
			if (Utils.equals( LEAP_ROLLOVER, val)) return true;
			if (Utils.equals( TENDER_OFFER, val)) return true;
			if (Utils.equals( SPINOFF, val)) return true;
			if (Utils.equals( SPECIAL_ACTION, val)) return true;
			if (Utils.equals( WARRANT, val)) return true;
			return false;
		}
	}

	public static class QuoteStatus {
		public static final long PENDING_END_TRADE = 19;
		public static final long CANCELED = 17;
		public static final long UNSOLICITED_QUOTE_REPLENISHMENT = 18;
		public static final long CANCELED_DUE_TO_CROSS_MARKET = 15;
		public static final long ACTIVE = 16;
		public static final long CROSS_MARKET_WARNING = 13;
		public static final long CANCELED_DUE_TO_LOCK_MARKET = 14;
		public static final long PASS = 11;
		public static final long LOCKED_MARKET_WARNING = 12;
		public static final long CANCELED_FOR_UNDERLYING = 3;
		public static final long TOO_LATE_TO_END = 20;
		public static final long CANCELED_FOR_SECURITY_TYPES = 2;
		public static final long CANCEL_FOR_SYMBOLS = 1;
		public static final long PENDING = 10;
		public static final long ACCEPTED = 0;
		public static final long EXPIRED = 7;
		public static final long REMOVED_FROM_MARKET = 6;
		public static final long REJECTED = 5;
		public static final long CANCELED_ALL = 4;
		public static final long QUOTE_NOT_FOUND = 9;
		public static final long QUERY = 8;
		public static boolean isValid(long val) {
			if (( PENDING_END_TRADE==val)) return true;
			if (( CANCELED==val)) return true;
			if (( UNSOLICITED_QUOTE_REPLENISHMENT==val)) return true;
			if (( CANCELED_DUE_TO_CROSS_MARKET==val)) return true;
			if (( ACTIVE==val)) return true;
			if (( CROSS_MARKET_WARNING==val)) return true;
			if (( CANCELED_DUE_TO_LOCK_MARKET==val)) return true;
			if (( PASS==val)) return true;
			if (( LOCKED_MARKET_WARNING==val)) return true;
			if (( CANCELED_FOR_UNDERLYING==val)) return true;
			if (( TOO_LATE_TO_END==val)) return true;
			if (( CANCELED_FOR_SECURITY_TYPES==val)) return true;
			if (( CANCEL_FOR_SYMBOLS==val)) return true;
			if (( PENDING==val)) return true;
			if (( ACCEPTED==val)) return true;
			if (( EXPIRED==val)) return true;
			if (( REMOVED_FROM_MARKET==val)) return true;
			if (( REJECTED==val)) return true;
			if (( CANCELED_ALL==val)) return true;
			if (( QUOTE_NOT_FOUND==val)) return true;
			if (( QUERY==val)) return true;
			return false;
		}
	}

	public static class QuoteCancelType {
		public static final long CANCEL_FOR_UNDERLYING_SECURITY = 3;
		public static final long CANCEL_FOR_SECURITY_TYPES = 2;
		public static final long CANCEL_FOR_ONE_OR_MORE_SECURITIES = 1;
		public static final long CANCEL_FOR_SECURITY_ISSUER = 7;
		public static final long CANCEL_BY_QUOTETYPE537 = 6;
		public static final long CANCEL_QUOTE_SPECIFIED_IN_QUOTEID = 5;
		public static final long CANCEL_ALL_QUOTES = 4;
		public static final long CANCEL_FOR_ISSUER_OF_UNDERLYING_SECURITY = 8;
		public static boolean isValid(long val) {
			if (( CANCEL_FOR_UNDERLYING_SECURITY==val)) return true;
			if (( CANCEL_FOR_SECURITY_TYPES==val)) return true;
			if (( CANCEL_FOR_ONE_OR_MORE_SECURITIES==val)) return true;
			if (( CANCEL_FOR_SECURITY_ISSUER==val)) return true;
			if (( CANCEL_BY_QUOTETYPE537==val)) return true;
			if (( CANCEL_QUOTE_SPECIFIED_IN_QUOTEID==val)) return true;
			if (( CANCEL_ALL_QUOTES==val)) return true;
			if (( CANCEL_FOR_ISSUER_OF_UNDERLYING_SECURITY==val)) return true;
			return false;
		}
	}

	public static class QuoteRejectReason {
		public static final long INVALID_OR_UNKNOWN_ISSUER_OF_UNDERLYING_SECURITY = 13;
		public static final long QUOTE_LOCKED__UNABLE_TO_UPDATECANCEL = 11;
		public static final long INVALID_OR_UNKNOWN_SECURITY_ISSUER = 12;
		public static final long QUOTE_REQUEST_EXCEEDS_LIMIT = 3;
		public static final long EXCHANGE_SECURITY_CLOSED = 2;
		public static final long UNKNOWN_SYMBOL_SECURITY = 1;
		public static final long PRICE_EXCEEDS_CURRENT_PRICE_BAND = 10;
		public static final long INVALID_BIDASK_SPREAD = 7;
		public static final long DUPLICATE_QUOTE = 6;
		public static final long UNKNOWN_QUOTE = 5;
		public static final long TOO_LATE_TO_ENTER = 4;
		public static final long NOT_AUTHORIZED_TO_QUOTE_SECURITY = 9;
		public static final long INVALID_PRICE = 8;
		public static final long OTHER = 99;
		public static boolean isValid(long val) {
			if (( INVALID_OR_UNKNOWN_ISSUER_OF_UNDERLYING_SECURITY==val)) return true;
			if (( QUOTE_LOCKED__UNABLE_TO_UPDATECANCEL==val)) return true;
			if (( INVALID_OR_UNKNOWN_SECURITY_ISSUER==val)) return true;
			if (( QUOTE_REQUEST_EXCEEDS_LIMIT==val)) return true;
			if (( EXCHANGE_SECURITY_CLOSED==val)) return true;
			if (( UNKNOWN_SYMBOL_SECURITY==val)) return true;
			if (( PRICE_EXCEEDS_CURRENT_PRICE_BAND==val)) return true;
			if (( INVALID_BIDASK_SPREAD==val)) return true;
			if (( DUPLICATE_QUOTE==val)) return true;
			if (( UNKNOWN_QUOTE==val)) return true;
			if (( TOO_LATE_TO_ENTER==val)) return true;
			if (( NOT_AUTHORIZED_TO_QUOTE_SECURITY==val)) return true;
			if (( INVALID_PRICE==val)) return true;
			if (( OTHER==val)) return true;
			return false;
		}
	}

	public static class QuoteResponseLevel {
		public static final long SUMMARY_ACKNOWLEDGEMENT = 3;
		public static final long ACKNOWLEDGE_EACH_QUOTE_MESSAGE = 2;
		public static final long ACKNOWLEDGE_ONLY_NEGATIVE_OR_ERRONEOUS_QUOTES = 1;
		public static final long NO_ACKNOWLEDGEMENT = 0;
		public static boolean isValid(long val) {
			if (( SUMMARY_ACKNOWLEDGEMENT==val)) return true;
			if (( ACKNOWLEDGE_EACH_QUOTE_MESSAGE==val)) return true;
			if (( ACKNOWLEDGE_ONLY_NEGATIVE_OR_ERRONEOUS_QUOTES==val)) return true;
			if (( NO_ACKNOWLEDGEMENT==val)) return true;
			return false;
		}
	}

	public static class QuoteRequestType {
		public static final long AUTOMATIC = 2;
		public static final long MANUAL = 1;
		public static boolean isValid(long val) {
			if (( AUTOMATIC==val)) return true;
			if (( MANUAL==val)) return true;
			return false;
		}
	}

	public static class SecurityRequestType {
		public static final long REQUEST_LIST_SECURITIES_CAN_BE_QUALIFIED_WITH_SYMBOL_SECURITYTYP = 3;
		public static final long REQUEST_LIST_SECURITY_TYPES = 2;
		public static final long REQUEST_SECURITY_IDENTITY_FOR_THE_SPECIFICATIONS_PROVIDED_NAME_O = 1;
		public static final long REQUEST_SECURITY_IDENTITY_AND_SPECIFICATIONS = 0;
		public static final long TRADINGSESSIONID = 7;
		public static final long PRODUCT = 6;
		public static final long SECURITYTYPE_AND_OR_CFICODE = 5;
		public static final long SYMBOL = 4;
		public static final long MARKETID_OR_MARKETID__MARKETSEGMENTID = 9;
		public static final long ALL_SECURITIES = 8;
		public static boolean isValid(long val) {
			if (( REQUEST_LIST_SECURITIES_CAN_BE_QUALIFIED_WITH_SYMBOL_SECURITYTYP==val)) return true;
			if (( REQUEST_LIST_SECURITY_TYPES==val)) return true;
			if (( REQUEST_SECURITY_IDENTITY_FOR_THE_SPECIFICATIONS_PROVIDED_NAME_O==val)) return true;
			if (( REQUEST_SECURITY_IDENTITY_AND_SPECIFICATIONS==val)) return true;
			if (( TRADINGSESSIONID==val)) return true;
			if (( PRODUCT==val)) return true;
			if (( SECURITYTYPE_AND_OR_CFICODE==val)) return true;
			if (( SYMBOL==val)) return true;
			if (( MARKETID_OR_MARKETID__MARKETSEGMENTID==val)) return true;
			if (( ALL_SECURITIES==val)) return true;
			return false;
		}
	}

	public static class SecurityResponseType {
		public static final long LIST_OF_SECURITY_TYPES_RETURNED_PER_REQUEST = 3;
		public static final long ACCEPT_SECURITY_PROPOSAL_WITH_REVISIONS_AS_INDICATED_IN_THE_MESS = 2;
		public static final long ACCEPT_SECURITY_PROPOSAL_ASIS = 1;
		public static final long CANNOT_MATCH_SELECTION_CRITERIA = 6;
		public static final long REJECT_SECURITY_PROPOSAL = 5;
		public static final long LIST_OF_SECURITIES_RETURNED_PER_REQUEST = 4;
		public static boolean isValid(long val) {
			if (( LIST_OF_SECURITY_TYPES_RETURNED_PER_REQUEST==val)) return true;
			if (( ACCEPT_SECURITY_PROPOSAL_WITH_REVISIONS_AS_INDICATED_IN_THE_MESS==val)) return true;
			if (( ACCEPT_SECURITY_PROPOSAL_ASIS==val)) return true;
			if (( CANNOT_MATCH_SELECTION_CRITERIA==val)) return true;
			if (( REJECT_SECURITY_PROPOSAL==val)) return true;
			if (( LIST_OF_SECURITIES_RETURNED_PER_REQUEST==val)) return true;
			return false;
		}
	}

	public static class UnsolicitedIndicator {
		public static final boolean MESSAGE_IS_BEING_SENT_AS_A_RESULT_OF_A_PRIOR_REQUEST = false;
		public static final boolean MESSAGE_IS_BEING_SENT_UNSOLICITED = true;
		public static boolean isValid(boolean val) {
			if (( MESSAGE_IS_BEING_SENT_AS_A_RESULT_OF_A_PRIOR_REQUEST==val)) return true;
			if (( MESSAGE_IS_BEING_SENT_UNSOLICITED==val)) return true;
			return false;
		}
	}

	public static class SecurityTradingStatus {
		public static final long NOT_TRADED_ON_THIS_MARKET = 19;
		public static final long READY_TO_TRADE_START_OF_SESSION = 17;
		public static final long NOT_AVAILABLE_FOR_TRADING_END_OF_SESSION = 18;
		public static final long NEW_PRICE_INDICATION = 15;
		public static final long TRADE_DISSEMINATION_TIME = 16;
		public static final long NO_MARKET_ON_CLOSE_IMBALANCE = 13;
		public static final long ITS_PREOPENING = 14;
		public static final long NOT_ASSIGNED = 11;
		public static final long NO_MARKET_IMBALANCE = 12;
		public static final long PREOPEN = 21;
		public static final long UNKNOWN_OR_INVALID = 20;
		public static final long OPENING_ROTATION = 22;
		public static final long FAST_MARKET = 23;
		public static final long PRECROSS__SYSTEM_IS_IN_A_PRECROSS_STATE_ALLOWING_MARKET_TO_RESPO = 24;
		public static final long CROSS__SYSTEM_HAS_CROSSED_A_PERCENTAGE_OF_THE_ORDERS_AND_ALLOWS_ = 25;
		public static final long POSTCLOSE = 26;
		public static final long RESUME = 3;
		public static final long TRADING_HALT = 2;
		public static final long MARKET_ON_CLOSE_IMBALANCE_SELL = 10;
		public static final long OPENING_DELAY = 1;
		public static final long MARKET_IMBALANCE_BUY = 7;
		public static final long TRADING_RANGE_INDICATION = 6;
		public static final long PRICE_INDICATION = 5;
		public static final long NO_OPEN__NO_RESUME = 4;
		public static final long MARKET_ON_CLOSE_IMBALANCE_BUY = 9;
		public static final long MARKET_IMBALANCE_SELL = 8;
		public static boolean isValid(long val) {
			if (( NOT_TRADED_ON_THIS_MARKET==val)) return true;
			if (( READY_TO_TRADE_START_OF_SESSION==val)) return true;
			if (( NOT_AVAILABLE_FOR_TRADING_END_OF_SESSION==val)) return true;
			if (( NEW_PRICE_INDICATION==val)) return true;
			if (( TRADE_DISSEMINATION_TIME==val)) return true;
			if (( NO_MARKET_ON_CLOSE_IMBALANCE==val)) return true;
			if (( ITS_PREOPENING==val)) return true;
			if (( NOT_ASSIGNED==val)) return true;
			if (( NO_MARKET_IMBALANCE==val)) return true;
			if (( PREOPEN==val)) return true;
			if (( UNKNOWN_OR_INVALID==val)) return true;
			if (( OPENING_ROTATION==val)) return true;
			if (( FAST_MARKET==val)) return true;
			if (( PRECROSS__SYSTEM_IS_IN_A_PRECROSS_STATE_ALLOWING_MARKET_TO_RESPO==val)) return true;
			if (( CROSS__SYSTEM_HAS_CROSSED_A_PERCENTAGE_OF_THE_ORDERS_AND_ALLOWS_==val)) return true;
			if (( POSTCLOSE==val)) return true;
			if (( RESUME==val)) return true;
			if (( TRADING_HALT==val)) return true;
			if (( MARKET_ON_CLOSE_IMBALANCE_SELL==val)) return true;
			if (( OPENING_DELAY==val)) return true;
			if (( MARKET_IMBALANCE_BUY==val)) return true;
			if (( TRADING_RANGE_INDICATION==val)) return true;
			if (( PRICE_INDICATION==val)) return true;
			if (( NO_OPEN__NO_RESUME==val)) return true;
			if (( MARKET_ON_CLOSE_IMBALANCE_BUY==val)) return true;
			if (( MARKET_IMBALANCE_SELL==val)) return true;
			return false;
		}
	}

	public static class HaltReason {
		public static final long ADDITIONAL_INFORMATION = 3;
		public static final long ORDER_IMBALANCE = 2;
		public static final long ORDER_INFLUX = 1;
		public static final long NEWS_DISSEMINATION = 0;
		public static final long EQUIPMENT_CHANGEOVER = 5;
		public static final long NEWS_PENDING = 4;
		public static boolean isValid(long val) {
			if (( ADDITIONAL_INFORMATION==val)) return true;
			if (( ORDER_IMBALANCE==val)) return true;
			if (( ORDER_INFLUX==val)) return true;
			if (( NEWS_DISSEMINATION==val)) return true;
			if (( EQUIPMENT_CHANGEOVER==val)) return true;
			if (( NEWS_PENDING==val)) return true;
			return false;
		}
	}

	public static class InViewOfCommon {
		public static final boolean HALT_WAS_NOT_RELATED_TO_A_HALT_OF_THE_COMMON_STOCK = false;
		public static final boolean HALT_WAS_DUE_TO_COMMON_STOCK_BEING_HALTED = true;
		public static boolean isValid(boolean val) {
			if (( HALT_WAS_NOT_RELATED_TO_A_HALT_OF_THE_COMMON_STOCK==val)) return true;
			if (( HALT_WAS_DUE_TO_COMMON_STOCK_BEING_HALTED==val)) return true;
			return false;
		}
	}

	public static class DueToRelated {
		public static final boolean HALT_WAS_NOT_RELATED_TO_A_HALT_OF_THE_RELATED_SECURITY = false;
		public static final boolean HALT_WAS_DUE_TO_RELATED_SECURITY_BEING_HALTED = true;
		public static boolean isValid(boolean val) {
			if (( HALT_WAS_NOT_RELATED_TO_A_HALT_OF_THE_RELATED_SECURITY==val)) return true;
			if (( HALT_WAS_DUE_TO_RELATED_SECURITY_BEING_HALTED==val)) return true;
			return false;
		}
	}

	public static class Adjustment {
		public static final long CORRECTION = 3;
		public static final long ERROR = 2;
		public static final long CANCEL = 1;
		public static boolean isValid(long val) {
			if (( CORRECTION==val)) return true;
			if (( ERROR==val)) return true;
			if (( CANCEL==val)) return true;
			return false;
		}
	}

	public static class TradingSessionID {
		public static final byte[] MORNING = "3".getBytes();
		public static final byte[] HALFDAY = "2".getBytes();
		public static final byte[] DAY = "1".getBytes();
		public static final byte[] AFTERHOURS = "6".getBytes();
		public static final byte[] EVENING = "5".getBytes();
		public static final byte[] AFTERNOON = "4".getBytes();
		public static boolean isValid(byte[] val) {
			if (Utils.equals( MORNING, val)) return true;
			if (Utils.equals( HALFDAY, val)) return true;
			if (Utils.equals( DAY, val)) return true;
			if (Utils.equals( AFTERHOURS, val)) return true;
			if (Utils.equals( EVENING, val)) return true;
			if (Utils.equals( AFTERNOON, val)) return true;
			return false;
		}
	}

	public static class TradSesMethod {
		public static final long TWO_PARTY = 3;
		public static final long OPEN_OUTCRY = 2;
		public static final long ELECTRONIC = 1;
		public static boolean isValid(long val) {
			if (( TWO_PARTY==val)) return true;
			if (( OPEN_OUTCRY==val)) return true;
			if (( ELECTRONIC==val)) return true;
			return false;
		}
	}

	public static class TradSesMode {
		public static final long PRODUCTION = 3;
		public static final long SIMULATED = 2;
		public static final long TESTING = 1;
		public static boolean isValid(long val) {
			if (( PRODUCTION==val)) return true;
			if (( SIMULATED==val)) return true;
			if (( TESTING==val)) return true;
			return false;
		}
	}

	public static class TradSesStatus {
		public static final long CLOSED = 3;
		public static final long OPEN = 2;
		public static final long HALTED = 1;
		public static final long UNKNOWN = 0;
		public static final long REQUEST_REJECTED = 6;
		public static final long PRECLOSE = 5;
		public static final long PREOPEN = 4;
		public static boolean isValid(long val) {
			if (( CLOSED==val)) return true;
			if (( OPEN==val)) return true;
			if (( HALTED==val)) return true;
			if (( UNKNOWN==val)) return true;
			if (( REQUEST_REJECTED==val)) return true;
			if (( PRECLOSE==val)) return true;
			if (( PREOPEN==val)) return true;
			return false;
		}
	}

	public static class SessionRejectReason {
		public static final long NON_DATA_VALUE_INCLUDES_FIELD_DELIMITER_SOH_CHARACTER = 17;
		public static final long INVALIDUNSUPPORTED_APPLICATION_VERSION = 18;
		public static final long REPEATING_GROUP_FIELDS_OUT_OF_ORDER = 15;
		public static final long INCORRECT_NUMINGROUP_COUNT_FOR_REPEATING_GROUP = 16;
		public static final long TAG_APPEARS_MORE_THAN_ONCE = 13;
		public static final long TAG_SPECIFIED_OUT_OF_REQUIRED_ORDER = 14;
		public static final long INVALID_MSGTYPE = 11;
		public static final long XML_VALIDATION_ERROR = 12;
		public static final long UNDEFINED_TAG = 3;
		public static final long TAG_NOT_DEFINED_FOR_THIS_MESSAGE_TYPE = 2;
		public static final long REQUIRED_TAG_MISSING = 1;
		public static final long SENDINGTIME_ACCURACY_PROBLEM = 10;
		public static final long INVALID_TAG_NUMBER = 0;
		public static final long DECRYPTION_PROBLEM = 7;
		public static final long INCORRECT_DATA_FORMAT_FOR_VALUE = 6;
		public static final long VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG = 5;
		public static final long TAG_SPECIFIED_WITHOUT_A_VALUE = 4;
		public static final long COMPID_PROBLEM = 9;
		public static final long SIGNATURE_PROBLEM = 8;
		public static final long OTHER = 99;
		public static boolean isValid(long val) {
			if (( NON_DATA_VALUE_INCLUDES_FIELD_DELIMITER_SOH_CHARACTER==val)) return true;
			if (( INVALIDUNSUPPORTED_APPLICATION_VERSION==val)) return true;
			if (( REPEATING_GROUP_FIELDS_OUT_OF_ORDER==val)) return true;
			if (( INCORRECT_NUMINGROUP_COUNT_FOR_REPEATING_GROUP==val)) return true;
			if (( TAG_APPEARS_MORE_THAN_ONCE==val)) return true;
			if (( TAG_SPECIFIED_OUT_OF_REQUIRED_ORDER==val)) return true;
			if (( INVALID_MSGTYPE==val)) return true;
			if (( XML_VALIDATION_ERROR==val)) return true;
			if (( UNDEFINED_TAG==val)) return true;
			if (( TAG_NOT_DEFINED_FOR_THIS_MESSAGE_TYPE==val)) return true;
			if (( REQUIRED_TAG_MISSING==val)) return true;
			if (( SENDINGTIME_ACCURACY_PROBLEM==val)) return true;
			if (( INVALID_TAG_NUMBER==val)) return true;
			if (( DECRYPTION_PROBLEM==val)) return true;
			if (( INCORRECT_DATA_FORMAT_FOR_VALUE==val)) return true;
			if (( VALUE_IS_INCORRECT_OUT_OF_RANGE_FOR_THIS_TAG==val)) return true;
			if (( TAG_SPECIFIED_WITHOUT_A_VALUE==val)) return true;
			if (( COMPID_PROBLEM==val)) return true;
			if (( SIGNATURE_PROBLEM==val)) return true;
			if (( OTHER==val)) return true;
			return false;
		}
	}

	public static class BidRequestTransType {
		public static final byte CANCEL = 'C';
		public static final byte NEW = 'N';
		public static boolean isValid(byte val) {
			if (( CANCEL==val)) return true;
			if (( NEW==val)) return true;
			return false;
		}
	}

	public static class SolicitedFlag {
		public static final boolean WAS_NOT_SOLICITED = false;
		public static final boolean WAS_SOLICITED = true;
		public static boolean isValid(boolean val) {
			if (( WAS_NOT_SOLICITED==val)) return true;
			if (( WAS_SOLICITED==val)) return true;
			return false;
		}
	}

	public static class ExecRestatementReason {
		public static final long PEG_REFRESH = 11;
		public static final long REPRICING_OF_ORDER = 3;
		public static final long VERBAL_CHANGE = 2;
		public static final long GT_RENEWAL__RESTATEMENT_NO_CORPORATE_ACTION = 1;
		public static final long WAREHOUSE_RECAP = 10;
		public static final long GT_CORPORATE_ACTION = 0;
		public static final long CANCEL_ON_SYSTEM_FAILURE = 7;
		public static final long CANCEL_ON_TRADING_HALT = 6;
		public static final long PARTIAL_DECLINE_OF_ORDERQTY_EG_EXCHANGE_INITIATED_PARTIAL_CANCEL = 5;
		public static final long BROKER_OPTION = 4;
		public static final long CANCELED_NOT_BEST = 9;
		public static final long MARKET_EXCHANGE_OPTION = 8;
		public static final long OTHER = 99;
		public static boolean isValid(long val) {
			if (( PEG_REFRESH==val)) return true;
			if (( REPRICING_OF_ORDER==val)) return true;
			if (( VERBAL_CHANGE==val)) return true;
			if (( GT_RENEWAL__RESTATEMENT_NO_CORPORATE_ACTION==val)) return true;
			if (( WAREHOUSE_RECAP==val)) return true;
			if (( GT_CORPORATE_ACTION==val)) return true;
			if (( CANCEL_ON_SYSTEM_FAILURE==val)) return true;
			if (( CANCEL_ON_TRADING_HALT==val)) return true;
			if (( PARTIAL_DECLINE_OF_ORDERQTY_EG_EXCHANGE_INITIATED_PARTIAL_CANCEL==val)) return true;
			if (( BROKER_OPTION==val)) return true;
			if (( CANCELED_NOT_BEST==val)) return true;
			if (( MARKET_EXCHANGE_OPTION==val)) return true;
			if (( OTHER==val)) return true;
			return false;
		}
	}

	public static class BusinessRejectReason {
		public static final long UNSUPPORTED_MESSAGE_TYPE = 3;
		public static final long UNKNOWN_SECURITY = 2;
		public static final long UNKNOWN_ID = 1;
		public static final long OTHER = 0;
		public static final long DELIVERTO_FIRM_NOT_AVAILABLE_AT_THIS_TIME = 7;
		public static final long NOT_AUTHORIZED = 6;
		public static final long CONDITIONALLY_REQUIRED_FIELD_MISSING = 5;
		public static final long APPLICATION_NOT_AVAILABLE = 4;
		public static final long INVALID_PRICE_INCREMENT = 18;
		public static boolean isValid(long val) {
			if (( UNSUPPORTED_MESSAGE_TYPE==val)) return true;
			if (( UNKNOWN_SECURITY==val)) return true;
			if (( UNKNOWN_ID==val)) return true;
			if (( OTHER==val)) return true;
			if (( DELIVERTO_FIRM_NOT_AVAILABLE_AT_THIS_TIME==val)) return true;
			if (( NOT_AUTHORIZED==val)) return true;
			if (( CONDITIONALLY_REQUIRED_FIELD_MISSING==val)) return true;
			if (( APPLICATION_NOT_AVAILABLE==val)) return true;
			if (( INVALID_PRICE_INCREMENT==val)) return true;
			return false;
		}
	}

	public static class MsgDirection {
		public static final byte SEND = 'S';
		public static final byte RECEIVE = 'R';
		public static boolean isValid(byte val) {
			if (( SEND==val)) return true;
			if (( RECEIVE==val)) return true;
			return false;
		}
	}

	public static class DiscretionInst {
		public static final byte RELATED_TO_LOCAL_PRIMARY_PRICE = '3';
		public static final byte RELATED_TO_PRIMARY_PRICE = '2';
		public static final byte RELATED_TO_MARKET_PRICE = '1';
		public static final byte RELATED_TO_DISPLAYED_PRICE = '0';
		public static final byte AVERAGE_PRICE_GUARANTEE = '7';
		public static final byte RELATED_TO_VWAP = '6';
		public static final byte RELATED_TO_LAST_TRADE_PRICE = '5';
		public static final byte RELATED_TO_MIDPOINT_PRICE = '4';
		public static boolean isValid(byte val) {
			if (( RELATED_TO_LOCAL_PRIMARY_PRICE==val)) return true;
			if (( RELATED_TO_PRIMARY_PRICE==val)) return true;
			if (( RELATED_TO_MARKET_PRICE==val)) return true;
			if (( RELATED_TO_DISPLAYED_PRICE==val)) return true;
			if (( AVERAGE_PRICE_GUARANTEE==val)) return true;
			if (( RELATED_TO_VWAP==val)) return true;
			if (( RELATED_TO_LAST_TRADE_PRICE==val)) return true;
			if (( RELATED_TO_MIDPOINT_PRICE==val)) return true;
			return false;
		}
	}

	public static class BidType {
		public static final long NO_BIDDING_PROCESS = 3;
		public static final long DISCLOSED_SYTLE_EG_JAPANESE = 2;
		public static final long NON_DISCLOSED_STYLE_EG_USEUROPEAN = 1;
		public static boolean isValid(long val) {
			if (( NO_BIDDING_PROCESS==val)) return true;
			if (( DISCLOSED_SYTLE_EG_JAPANESE==val)) return true;
			if (( NON_DISCLOSED_STYLE_EG_USEUROPEAN==val)) return true;
			return false;
		}
	}

	public static class BidDescriptorType {
		public static final long INDEX = 3;
		public static final long COUNTRY = 2;
		public static final long SECTOR = 1;
		public static boolean isValid(long val) {
			if (( INDEX==val)) return true;
			if (( COUNTRY==val)) return true;
			if (( SECTOR==val)) return true;
			return false;
		}
	}

	public static class SideValueInd {
		public static final long SIDE_VALUE_2 = 2;
		public static final long SIDE_VALUE_1 = 1;
		public static boolean isValid(long val) {
			if (( SIDE_VALUE_2==val)) return true;
			if (( SIDE_VALUE_1==val)) return true;
			return false;
		}
	}

	public static class LiquidityIndType {
		public static final long NORMAL_MARKET_SIZE = 3;
		public static final long I20DAY_MOVING_AVERAGE = 2;
		public static final long I5DAY_MOVING_AVERAGE = 1;
		public static final long OTHER = 4;
		public static boolean isValid(long val) {
			if (( NORMAL_MARKET_SIZE==val)) return true;
			if (( I20DAY_MOVING_AVERAGE==val)) return true;
			if (( I5DAY_MOVING_AVERAGE==val)) return true;
			if (( OTHER==val)) return true;
			return false;
		}
	}

	public static class ExchangeForPhysical {
		public static final boolean FALSE = false;
		public static final boolean TRUE = true;
		public static boolean isValid(boolean val) {
			if (( FALSE==val)) return true;
			if (( TRUE==val)) return true;
			return false;
		}
	}

	public static class ProgRptReqs {
		public static final long REALTIME_EXECUTION_REPORTS_TO_BE_DISCOURAGE = 3;
		public static final long SELLSIDE_PERIODICALLY_SENDS_STATUS_USING_LIST_STATUS_PERIOD_OPTI = 2;
		public static final long BUYSIDE_EXPLICITLY_REQUESTS_STATUS_USING_STATUE_REQUEST_DEFAULT_ = 1;
		public static boolean isValid(long val) {
			if (( REALTIME_EXECUTION_REPORTS_TO_BE_DISCOURAGE==val)) return true;
			if (( SELLSIDE_PERIODICALLY_SENDS_STATUS_USING_LIST_STATUS_PERIOD_OPTI==val)) return true;
			if (( BUYSIDE_EXPLICITLY_REQUESTS_STATUS_USING_STATUE_REQUEST_DEFAULT_==val)) return true;
			return false;
		}
	}

	public static class IncTaxInd {
		public static final long GROSS = 2;
		public static final long NET = 1;
		public static boolean isValid(long val) {
			if (( GROSS==val)) return true;
			if (( NET==val)) return true;
			return false;
		}
	}

	public static class BidTradeType {
		public static final byte VWAP_GUARANTEE = 'G';
		public static final byte AGENCY = 'A';
		public static final byte RISK_TRADE = 'R';
		public static final byte GUARANTEED_CLOSE = 'J';
		public static boolean isValid(byte val) {
			if (( VWAP_GUARANTEE==val)) return true;
			if (( AGENCY==val)) return true;
			if (( RISK_TRADE==val)) return true;
			if (( GUARANTEED_CLOSE==val)) return true;
			return false;
		}
	}

	public static class BasisPxType {
		public static final byte OPEN = 'D';
		public static final byte VWAP_THROUGH_A_MORNING_SESSION_EXCEPT_YORI_AN_OPENING_AUCTION = 'A';
		public static final byte VWAP_THROUGH_AN_AFTERNOON_SESSION_EXCEPT_YORI_AN_OPENING_AUCTION = 'B';
		public static final byte STRIKE = 'C';
		public static final byte CLOSING_PRICE = '3';
		public static final byte CLOSING_PRICE_AT_MORNINGN_SESSION = '2';
		public static final byte VWAP_THROUGH_A_MORNING_SESSION = '7';
		public static final byte VWAP_THROUGH_A_DAY = '6';
		public static final byte SQ = '5';
		public static final byte CURRENT_PRICE = '4';
		public static final byte VWAP_THROUGH_A_DAY_EXCEPT_YORI_AN_OPENING_AUCTION = '9';
		public static final byte VWAP_THROUGH_AN_AFTERNOON_SESSION = '8';
		public static final byte OTHERS = 'Z';
		public static boolean isValid(byte val) {
			if (( OPEN==val)) return true;
			if (( VWAP_THROUGH_A_MORNING_SESSION_EXCEPT_YORI_AN_OPENING_AUCTION==val)) return true;
			if (( VWAP_THROUGH_AN_AFTERNOON_SESSION_EXCEPT_YORI_AN_OPENING_AUCTION==val)) return true;
			if (( STRIKE==val)) return true;
			if (( CLOSING_PRICE==val)) return true;
			if (( CLOSING_PRICE_AT_MORNINGN_SESSION==val)) return true;
			if (( VWAP_THROUGH_A_MORNING_SESSION==val)) return true;
			if (( VWAP_THROUGH_A_DAY==val)) return true;
			if (( SQ==val)) return true;
			if (( CURRENT_PRICE==val)) return true;
			if (( VWAP_THROUGH_A_DAY_EXCEPT_YORI_AN_OPENING_AUCTION==val)) return true;
			if (( VWAP_THROUGH_AN_AFTERNOON_SESSION==val)) return true;
			if (( OTHERS==val)) return true;
			return false;
		}
	}

	public static class PriceType {
		public static final long PRODUCT_TICKS_IN_ONETWENTYEIGHTS = 19;
		public static final long PRODUCT_TICKS_IN_THIRTYSECONDS = 17;
		public static final long PRODUCT_TICKS_IN_SIXTYFORTHS = 18;
		public static final long PRODUCT_TICKS_IN_EIGHTS = 15;
		public static final long PRODUCT_TICKS_IN_SIXTEENTHS = 16;
		public static final long PRODUCT_TICKS_IN_HALFS = 13;
		public static final long PRODUCT_TICKS_IN_FOURTHS = 14;
		public static final long VARIABLE_CABINET_TRADE_PRICE_PRIMARILY_FOR_LISTED_FUTURES_AND_OP = 11;
		public static final long FIXED_AMOUNT_ABSOLUTE_VALUE = 3;
		public static final long PER_UNIT_IE_PER_SHARE_OR_CONTRACT = 2;
		public static final long PERCENTAGE_IE_PERCENT_OF_PAR_OFTEN_CALLED_DOLLAR_PRICE_FOR_FIXED = 1;
		public static final long FIXED_CABINET_TRADE_PRICE_PRIMARILY_FOR_LISTED_FUTURES_AND_OPTIO = 10;
		public static final long TED_PRICE = 7;
		public static final long SPREAD_BASIS_POINTS_SPREAD = 6;
		public static final long PREMIUM__PERCENTAGE_POINTS_OVER_PAR = 5;
		public static final long DISCOUNT__PERCENTAGE_POINTS_BELOW_PAR = 4;
		public static final long YIELD = 9;
		public static final long TED_YIELD = 8;
		public static boolean isValid(long val) {
			if (( PRODUCT_TICKS_IN_ONETWENTYEIGHTS==val)) return true;
			if (( PRODUCT_TICKS_IN_THIRTYSECONDS==val)) return true;
			if (( PRODUCT_TICKS_IN_SIXTYFORTHS==val)) return true;
			if (( PRODUCT_TICKS_IN_EIGHTS==val)) return true;
			if (( PRODUCT_TICKS_IN_SIXTEENTHS==val)) return true;
			if (( PRODUCT_TICKS_IN_HALFS==val)) return true;
			if (( PRODUCT_TICKS_IN_FOURTHS==val)) return true;
			if (( VARIABLE_CABINET_TRADE_PRICE_PRIMARILY_FOR_LISTED_FUTURES_AND_OP==val)) return true;
			if (( FIXED_AMOUNT_ABSOLUTE_VALUE==val)) return true;
			if (( PER_UNIT_IE_PER_SHARE_OR_CONTRACT==val)) return true;
			if (( PERCENTAGE_IE_PERCENT_OF_PAR_OFTEN_CALLED_DOLLAR_PRICE_FOR_FIXED==val)) return true;
			if (( FIXED_CABINET_TRADE_PRICE_PRIMARILY_FOR_LISTED_FUTURES_AND_OPTIO==val)) return true;
			if (( TED_PRICE==val)) return true;
			if (( SPREAD_BASIS_POINTS_SPREAD==val)) return true;
			if (( PREMIUM__PERCENTAGE_POINTS_OVER_PAR==val)) return true;
			if (( DISCOUNT__PERCENTAGE_POINTS_BELOW_PAR==val)) return true;
			if (( YIELD==val)) return true;
			if (( TED_YIELD==val)) return true;
			return false;
		}
	}

	public static class GTBookingInst {
		public static final long ACCUMULATE_UNTIL_VERBALLLY_NOTIFIED_OTHERWISE = 2;
		public static final long ACCUMULATE_EXECTUIONS_UNTIL_FORDER_IS_FILLED_OR_EXPIRES = 1;
		public static final long BOOK_OUT_ALL_TRADES_ON_DAY_OF_EXECUTION = 0;
		public static boolean isValid(long val) {
			if (( ACCUMULATE_UNTIL_VERBALLLY_NOTIFIED_OTHERWISE==val)) return true;
			if (( ACCUMULATE_EXECTUIONS_UNTIL_FORDER_IS_FILLED_OR_EXPIRES==val)) return true;
			if (( BOOK_OUT_ALL_TRADES_ON_DAY_OF_EXECUTION==val)) return true;
			return false;
		}
	}

	public static class ListStatusType {
		public static final long TIMED = 3;
		public static final long RESPONSE = 2;
		public static final long ACK = 1;
		public static final long ALERT = 6;
		public static final long ALL_DONE = 5;
		public static final long EXEC_STARTED = 4;
		public static boolean isValid(long val) {
			if (( TIMED==val)) return true;
			if (( RESPONSE==val)) return true;
			if (( ACK==val)) return true;
			if (( ALERT==val)) return true;
			if (( ALL_DONE==val)) return true;
			if (( EXEC_STARTED==val)) return true;
			return false;
		}
	}

	public static class NetGrossInd {
		public static final long GROSS = 2;
		public static final long NET = 1;
		public static boolean isValid(long val) {
			if (( GROSS==val)) return true;
			if (( NET==val)) return true;
			return false;
		}
	}

	public static class ListOrderStatus {
		public static final long EXECUTING = 3;
		public static final long RECEIVED_FOR_EXECUTION = 2;
		public static final long IN_BIDDING_PROCESS = 1;
		public static final long REJECT = 7;
		public static final long ALL_DONE = 6;
		public static final long ALERT = 5;
		public static final long CANCELLING = 4;
		public static boolean isValid(long val) {
			if (( EXECUTING==val)) return true;
			if (( RECEIVED_FOR_EXECUTION==val)) return true;
			if (( IN_BIDDING_PROCESS==val)) return true;
			if (( REJECT==val)) return true;
			if (( ALL_DONE==val)) return true;
			if (( ALERT==val)) return true;
			if (( CANCELLING==val)) return true;
			return false;
		}
	}

	public static class ListExecInstType {
		public static final byte EXCHANGESWITCH_CIV_ORDER__SELL_DRIVEN = '3';
		public static final byte WAIT_FOR_EXECUT_INSTRUCTION_IE_A_LIST_EXECUT_MESSAGE_OR_PHONE_CA = '2';
		public static final byte IMMEDIATE = '1';
		public static final byte EXCHANGESWITCH_CIV_ORDER__BUY_DRIVEN_CASH_WITHDRAW_IE_ADDITIONAL = '5';
		public static final byte EXCHANGESWITCH_CIV_ORDER__BUY_DRIVEN_CASH_TOPUP_IE_ADDITIONAL_CA = '4';
		public static boolean isValid(byte val) {
			if (( EXCHANGESWITCH_CIV_ORDER__SELL_DRIVEN==val)) return true;
			if (( WAIT_FOR_EXECUT_INSTRUCTION_IE_A_LIST_EXECUT_MESSAGE_OR_PHONE_CA==val)) return true;
			if (( IMMEDIATE==val)) return true;
			if (( EXCHANGESWITCH_CIV_ORDER__BUY_DRIVEN_CASH_WITHDRAW_IE_ADDITIONAL==val)) return true;
			if (( EXCHANGESWITCH_CIV_ORDER__BUY_DRIVEN_CASH_TOPUP_IE_ADDITIONAL_CA==val)) return true;
			return false;
		}
	}

	public static class CxlRejResponseTo {
		public static final byte ORDER_CANCELREPLACE_REQUEST = '2';
		public static final byte ORDER_CANCEL_REQUEST = '1';
		public static boolean isValid(byte val) {
			if (( ORDER_CANCELREPLACE_REQUEST==val)) return true;
			if (( ORDER_CANCEL_REQUEST==val)) return true;
			return false;
		}
	}

	public static class MultiLegReportingType {
		public static final byte MULTILEG_SECURITY = '3';
		public static final byte INDIVIDUAL_LEG_OF_A_MULTILEG_SECURITY = '2';
		public static final byte SINGLE_SECURITY_DEFAULT_IF_NOT_SPECIFIED = '1';
		public static boolean isValid(byte val) {
			if (( MULTILEG_SECURITY==val)) return true;
			if (( INDIVIDUAL_LEG_OF_A_MULTILEG_SECURITY==val)) return true;
			if (( SINGLE_SECURITY_DEFAULT_IF_NOT_SPECIFIED==val)) return true;
			return false;
		}
	}

	public static class PartyIDSource {
		public static final byte PROPRIETARY__CUSTOM_CODE = 'D';
		public static final byte ISO_COUNTRY_CODE = 'E';
		public static final byte SETTLEMENT_ENTITY_LOCATION_NOTE_IF_LOCAL_MARKET_SETTLEMENT_USE_E = 'F';
		public static final byte MIC_ISO_10383__MARKET_IDENTIFICER_CODE_SEE_APPENDIX_6C = 'G';
		public static final byte AUSTRALIAN_TAX_FILE_NUMBER = 'A';
		public static final byte BIC_BANK_IDENTIFICATION_CODE__SWIFT_MANAGED_CODE_ISO9362__SEE_AP = 'B';
		public static final byte GENERALLY_ACCEPTED_MARKET_PARTICIPANT_IDENTIFIER_EG_NASD_MNEMONI = 'C';
		public static final byte CSD_PARTICIPANTMEMBER_CODE_EG_EUROCLEAR_DTC_CREST_OR_KASSENVEREI = 'H';
		public static final byte DIRECTED_BROKER_THREE_CHARACTER_ACRONYM_AS_DEFINED_IN_ISITC_ETC_ = 'I';
		public static final byte TAIWANESE_TRADING_ACCT = '3';
		public static final byte TAIWANESE_QUALIFIED_FOREIGN_INVESTOR_ID_QFIIFID = '2';
		public static final byte KOREAN_INVESTOR_ID = '1';
		public static final byte US_SOCIAL_SECURITY_NUMBER = '7';
		public static final byte UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER = '6';
		public static final byte CHINESE_INVESTOR_ID = '5';
		public static final byte MALAYSIAN_CENTRAL_DEPOSITORY_MCD_NUMBER = '4';
		public static final byte AUSTRALIAN_BUSINESS_NUMBER = '9';
		public static final byte US_EMPLOYER_OR_TAX_ID_NUMBER = '8';
		public static boolean isValid(byte val) {
			if (( PROPRIETARY__CUSTOM_CODE==val)) return true;
			if (( ISO_COUNTRY_CODE==val)) return true;
			if (( SETTLEMENT_ENTITY_LOCATION_NOTE_IF_LOCAL_MARKET_SETTLEMENT_USE_E==val)) return true;
			if (( MIC_ISO_10383__MARKET_IDENTIFICER_CODE_SEE_APPENDIX_6C==val)) return true;
			if (( AUSTRALIAN_TAX_FILE_NUMBER==val)) return true;
			if (( BIC_BANK_IDENTIFICATION_CODE__SWIFT_MANAGED_CODE_ISO9362__SEE_AP==val)) return true;
			if (( GENERALLY_ACCEPTED_MARKET_PARTICIPANT_IDENTIFIER_EG_NASD_MNEMONI==val)) return true;
			if (( CSD_PARTICIPANTMEMBER_CODE_EG_EUROCLEAR_DTC_CREST_OR_KASSENVEREI==val)) return true;
			if (( DIRECTED_BROKER_THREE_CHARACTER_ACRONYM_AS_DEFINED_IN_ISITC_ETC_==val)) return true;
			if (( TAIWANESE_TRADING_ACCT==val)) return true;
			if (( TAIWANESE_QUALIFIED_FOREIGN_INVESTOR_ID_QFIIFID==val)) return true;
			if (( KOREAN_INVESTOR_ID==val)) return true;
			if (( US_SOCIAL_SECURITY_NUMBER==val)) return true;
			if (( UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER==val)) return true;
			if (( CHINESE_INVESTOR_ID==val)) return true;
			if (( MALAYSIAN_CENTRAL_DEPOSITORY_MCD_NUMBER==val)) return true;
			if (( AUSTRALIAN_BUSINESS_NUMBER==val)) return true;
			if (( US_EMPLOYER_OR_TAX_ID_NUMBER==val)) return true;
			return false;
		}
	}

	public static class PartyRole {
		public static final long PRIME_BROKER_PROVIDING_GENERAL_TRADE_SERVICES = 79;
		public static final long ALLOCATION_ENTITY = 78;
		public static final long MARKET_DATA_MARKET = 77;
		public static final long LIQUIDITY_PROVIDER = 35;
		public static final long ENTERING_TRADER = 36;
		public static final long INTERESTED_PARTY = 33;
		public static final long REGULATORY_BODY = 34;
		public static final long CONTRA_INVESTOR_ID = 39;
		public static final long CONTRA_TRADER = 37;
		public static final long POSITION_ACCOUNT = 38;
		public static final long INTERNAL_CARRY_ACCOUNT = 43;
		public static final long CONTRA_EXCHANGE = 42;
		public static final long CONTRA_POSITION_ACCOUNT = 41;
		public static final long TRANSFER_TO_FIRM = 40;
		public static final long CENTRAL_REGISTRATION_DEPOSITORY_CRD = 82;
		public static final long CLEARING_ACCOUNT = 83;
		public static final long STEPOUT_FIRM_PRIME_BROKER = 80;
		public static final long BROKERCLEARINGID = 81;
		public static final long ACCEPTABLE_SETTLING_COUNTERPARTY = 84;
		public static final long UNACCEPTABLE_SETTLING_COUNTERPARTY = 85;
		public static final long INVESTMENT_FIRM = 67;
		public static final long MARKET_MAKER = 66;
		public static final long HOME_COMPETENT_AUTHORITY_HOME_CA = 69;
		public static final long HOST_COMPETENT_AUTHORITY_HOST_CA = 68;
		public static final long EXCHANGE = 22;
		public static final long CUSTOMER_ACCOUNT = 24;
		public static final long CORRESPONDENT_CLEARING_ORGANIZATION = 25;
		public static final long CORRESPONDENT_BROKER = 26;
		public static final long BUYERSELLER_RECEIVERDELIVERER = 27;
		public static final long CUSTODIAN = 28;
		public static final long INTERMEDIARY = 29;
		public static final long CLIENT_ID_FORMERLY_FIX_42_CLIENTID = 3;
		public static final long BROKER_OF_CREDIT_FORMERLY_FIX_42_BROKEROFCREDIT = 2;
		public static final long EXECUTING_FIRM_FORMERLY_FIX_42_EXECBROKER = 1;
		public static final long AGENT = 30;
		public static final long ENTERING_FIRM = 7;
		public static final long INTRODUCING_FIRM = 6;
		public static final long BENEFICIARY = 32;
		public static final long INVESTOR_ID = 5;
		public static final long SUBCUSTODIAN = 31;
		public static final long CLEARING_FIRM_FORMERLY_FIX_42_CLEARINGFIRM = 4;
		public static final long COMPETENT_AUTHORITY_OF_THE_MOST_RELEVANT_MARKET_IN_TERMS_OF_LIQU = 70;
		public static final long COMPETENT_AUTHORITY_OF_THE_TRANSACTION_EXECUTION_VENUE_CATV = 71;
		public static final long FUND_MANAGER_CLIENT_ID_FOR_CIV = 9;
		public static final long REPORTING_INTERMEDIARY_MEDIUMVENDOR_VIA_WHICH_REPORT_HAS_BEEN_PU = 72;
		public static final long LOCATE__LENDING_FIRM_FOR_SHORTSALES = 8;
		public static final long EXECUTION_VENUE = 73;
		public static final long MARKET_DATA_ENTRY_ORIGINATOR = 74;
		public static final long LOCATION_ID = 75;
		public static final long DESK_ID = 76;
		public static final long EXECUTING_UNIT = 59;
		public static final long ENTERING_UNIT = 58;
		public static final long UNACCEPTABLE_COUNTERPARTY = 57;
		public static final long ACCEPTABLE_COUNTERPARTY = 56;
		public static final long SPONSORING_FIRM = 19;
		public static final long SESSION_ID = 55;
		public static final long CONTRA_FIRM = 17;
		public static final long CONTRA_CLEARING_FIRM = 18;
		public static final long CORRESPONDANT_CLEARING_FIRM = 15;
		public static final long EXECUTING_SYSTEM = 16;
		public static final long ORDER_ORIGINATION_FIRM_EG_BUYSIDE_FIRM = 13;
		public static final long GIVEUP_CLEARING_FIRM_FIRM_TO_WHICH_TRADE_IS_GIVEN_UP = 14;
		public static final long ORDER_ORIGINATION_TRADER_ASSOCIATED_WITH_ORDER_ORIGINATION_FIRM_ = 11;
		public static final long EXECUTING_TRADER_ASSOCIATED_WITH_EXECUTING_FIRM__ACTUALLY_EXECUT = 12;
		public static final long CLEARING_ORGANIZATION = 21;
		public static final long UNDERLYING_CONTRA_FIRM = 20;
		public static final long MULTILATERAL_TRADING_FACILITY_MTF = 64;
		public static final long REGULATED_MARKET_RM = 65;
		public static final long REPORT_ORIGINATOR = 62;
		public static final long SYSTEMATIC_INTERNALISER_SI = 63;
		public static final long INTRODUCING_BROKER = 60;
		public static final long QUOTE_ORIGINATOR = 61;
		public static final long ASSET_MANAGER = 49;
		public static final long CLAIMING_ACCOUNT = 48;
		public static final long SECONDARY_ACCOUNT_NUMBER = 45;
		public static final long ORDER_ENTRY_OPERATOR_ID = 44;
		public static final long THIRD_PARTY_ALLOCATION_FIRM = 47;
		public static final long FOREIGN_FIRM = 46;
		public static final long SETTLEMENT_LOCATION_FORMERLY_FIX_42_SETTLLOCATION = 10;
		public static final long PLEDGEE_ACCOUNT = 51;
		public static final long LARGE_TRADER_REPORTABLE_ACCOUNT = 52;
		public static final long TRADER_MNEMONIC = 53;
		public static final long SENDER_LOCATION = 54;
		public static final long PLEDGOR_ACCOUNT = 50;
		public static boolean isValid(long val) {
			if (( PRIME_BROKER_PROVIDING_GENERAL_TRADE_SERVICES==val)) return true;
			if (( ALLOCATION_ENTITY==val)) return true;
			if (( MARKET_DATA_MARKET==val)) return true;
			if (( LIQUIDITY_PROVIDER==val)) return true;
			if (( ENTERING_TRADER==val)) return true;
			if (( INTERESTED_PARTY==val)) return true;
			if (( REGULATORY_BODY==val)) return true;
			if (( CONTRA_INVESTOR_ID==val)) return true;
			if (( CONTRA_TRADER==val)) return true;
			if (( POSITION_ACCOUNT==val)) return true;
			if (( INTERNAL_CARRY_ACCOUNT==val)) return true;
			if (( CONTRA_EXCHANGE==val)) return true;
			if (( CONTRA_POSITION_ACCOUNT==val)) return true;
			if (( TRANSFER_TO_FIRM==val)) return true;
			if (( CENTRAL_REGISTRATION_DEPOSITORY_CRD==val)) return true;
			if (( CLEARING_ACCOUNT==val)) return true;
			if (( STEPOUT_FIRM_PRIME_BROKER==val)) return true;
			if (( BROKERCLEARINGID==val)) return true;
			if (( ACCEPTABLE_SETTLING_COUNTERPARTY==val)) return true;
			if (( UNACCEPTABLE_SETTLING_COUNTERPARTY==val)) return true;
			if (( INVESTMENT_FIRM==val)) return true;
			if (( MARKET_MAKER==val)) return true;
			if (( HOME_COMPETENT_AUTHORITY_HOME_CA==val)) return true;
			if (( HOST_COMPETENT_AUTHORITY_HOST_CA==val)) return true;
			if (( EXCHANGE==val)) return true;
			if (( CUSTOMER_ACCOUNT==val)) return true;
			if (( CORRESPONDENT_CLEARING_ORGANIZATION==val)) return true;
			if (( CORRESPONDENT_BROKER==val)) return true;
			if (( BUYERSELLER_RECEIVERDELIVERER==val)) return true;
			if (( CUSTODIAN==val)) return true;
			if (( INTERMEDIARY==val)) return true;
			if (( CLIENT_ID_FORMERLY_FIX_42_CLIENTID==val)) return true;
			if (( BROKER_OF_CREDIT_FORMERLY_FIX_42_BROKEROFCREDIT==val)) return true;
			if (( EXECUTING_FIRM_FORMERLY_FIX_42_EXECBROKER==val)) return true;
			if (( AGENT==val)) return true;
			if (( ENTERING_FIRM==val)) return true;
			if (( INTRODUCING_FIRM==val)) return true;
			if (( BENEFICIARY==val)) return true;
			if (( INVESTOR_ID==val)) return true;
			if (( SUBCUSTODIAN==val)) return true;
			if (( CLEARING_FIRM_FORMERLY_FIX_42_CLEARINGFIRM==val)) return true;
			if (( COMPETENT_AUTHORITY_OF_THE_MOST_RELEVANT_MARKET_IN_TERMS_OF_LIQU==val)) return true;
			if (( COMPETENT_AUTHORITY_OF_THE_TRANSACTION_EXECUTION_VENUE_CATV==val)) return true;
			if (( FUND_MANAGER_CLIENT_ID_FOR_CIV==val)) return true;
			if (( REPORTING_INTERMEDIARY_MEDIUMVENDOR_VIA_WHICH_REPORT_HAS_BEEN_PU==val)) return true;
			if (( LOCATE__LENDING_FIRM_FOR_SHORTSALES==val)) return true;
			if (( EXECUTION_VENUE==val)) return true;
			if (( MARKET_DATA_ENTRY_ORIGINATOR==val)) return true;
			if (( LOCATION_ID==val)) return true;
			if (( DESK_ID==val)) return true;
			if (( EXECUTING_UNIT==val)) return true;
			if (( ENTERING_UNIT==val)) return true;
			if (( UNACCEPTABLE_COUNTERPARTY==val)) return true;
			if (( ACCEPTABLE_COUNTERPARTY==val)) return true;
			if (( SPONSORING_FIRM==val)) return true;
			if (( SESSION_ID==val)) return true;
			if (( CONTRA_FIRM==val)) return true;
			if (( CONTRA_CLEARING_FIRM==val)) return true;
			if (( CORRESPONDANT_CLEARING_FIRM==val)) return true;
			if (( EXECUTING_SYSTEM==val)) return true;
			if (( ORDER_ORIGINATION_FIRM_EG_BUYSIDE_FIRM==val)) return true;
			if (( GIVEUP_CLEARING_FIRM_FIRM_TO_WHICH_TRADE_IS_GIVEN_UP==val)) return true;
			if (( ORDER_ORIGINATION_TRADER_ASSOCIATED_WITH_ORDER_ORIGINATION_FIRM_==val)) return true;
			if (( EXECUTING_TRADER_ASSOCIATED_WITH_EXECUTING_FIRM__ACTUALLY_EXECUT==val)) return true;
			if (( CLEARING_ORGANIZATION==val)) return true;
			if (( UNDERLYING_CONTRA_FIRM==val)) return true;
			if (( MULTILATERAL_TRADING_FACILITY_MTF==val)) return true;
			if (( REGULATED_MARKET_RM==val)) return true;
			if (( REPORT_ORIGINATOR==val)) return true;
			if (( SYSTEMATIC_INTERNALISER_SI==val)) return true;
			if (( INTRODUCING_BROKER==val)) return true;
			if (( QUOTE_ORIGINATOR==val)) return true;
			if (( ASSET_MANAGER==val)) return true;
			if (( CLAIMING_ACCOUNT==val)) return true;
			if (( SECONDARY_ACCOUNT_NUMBER==val)) return true;
			if (( ORDER_ENTRY_OPERATOR_ID==val)) return true;
			if (( THIRD_PARTY_ALLOCATION_FIRM==val)) return true;
			if (( FOREIGN_FIRM==val)) return true;
			if (( SETTLEMENT_LOCATION_FORMERLY_FIX_42_SETTLLOCATION==val)) return true;
			if (( PLEDGEE_ACCOUNT==val)) return true;
			if (( LARGE_TRADER_REPORTABLE_ACCOUNT==val)) return true;
			if (( TRADER_MNEMONIC==val)) return true;
			if (( SENDER_LOCATION==val)) return true;
			if (( PLEDGOR_ACCOUNT==val)) return true;
			return false;
		}
	}

	public static class Product {
		public static final long FINANCING = 13;
		public static final long MUNICIPAL = 11;
		public static final long OTHER = 12;
		public static final long CORPORATE = 3;
		public static final long COMMODITY = 2;
		public static final long AGENCY = 1;
		public static final long MORTGAGE = 10;
		public static final long INDEX = 7;
		public static final long GOVERNMENT = 6;
		public static final long EQUITY = 5;
		public static final long CURRENCY = 4;
		public static final long MONEYMARKET = 9;
		public static final long LOAN = 8;
		public static boolean isValid(long val) {
			if (( FINANCING==val)) return true;
			if (( MUNICIPAL==val)) return true;
			if (( OTHER==val)) return true;
			if (( CORPORATE==val)) return true;
			if (( COMMODITY==val)) return true;
			if (( AGENCY==val)) return true;
			if (( MORTGAGE==val)) return true;
			if (( INDEX==val)) return true;
			if (( GOVERNMENT==val)) return true;
			if (( EQUITY==val)) return true;
			if (( CURRENCY==val)) return true;
			if (( MONEYMARKET==val)) return true;
			if (( LOAN==val)) return true;
			return false;
		}
	}

	public static class TestMessageIndicator {
		public static final boolean FALES_PRODUCTION = false;
		public static final boolean TRUE_TEST = true;
		public static boolean isValid(boolean val) {
			if (( FALES_PRODUCTION==val)) return true;
			if (( TRUE_TEST==val)) return true;
			return false;
		}
	}

	public static class QuantityType {
		public static final long CURRENTFACE = 3;
		public static final long BONDS = 2;
		public static final long SHARES = 1;
		public static final long OTHER = 7;
		public static final long CONTRACTS = 6;
		public static final long CURRENCY = 5;
		public static final long ORIGINALFACE = 4;
		public static final long PAR = 8;
		public static boolean isValid(long val) {
			if (( CURRENTFACE==val)) return true;
			if (( BONDS==val)) return true;
			if (( SHARES==val)) return true;
			if (( OTHER==val)) return true;
			if (( CONTRACTS==val)) return true;
			if (( CURRENCY==val)) return true;
			if (( ORIGINALFACE==val)) return true;
			if (( PAR==val)) return true;
			return false;
		}
	}

	public static class RoundingDirection {
		public static final byte ROUND_UP = '2';
		public static final byte ROUND_DOWN = '1';
		public static final byte ROUND_TO_NEAREST = '0';
		public static boolean isValid(byte val) {
			if (( ROUND_UP==val)) return true;
			if (( ROUND_DOWN==val)) return true;
			if (( ROUND_TO_NEAREST==val)) return true;
			return false;
		}
	}

	public static class DistribPaymentMethod {
		public static final long EUROCLEAR = 3;
		public static final long NSCC = 2;
		public static final long BPAY = 10;
		public static final long CREST = 1;
		public static final long FED_WIRE = 7;
		public static final long TELEGRAPHIC_TRANSFER = 6;
		public static final long CHEQUE = 5;
		public static final long CLEARSTREAM = 4;
		public static final long ACH_CREDIT = 9;
		public static final long DIRECT_CREDIT_BECS_BACS = 8;
		public static final long HIGH_VALUE_CLEARING_SYSTEM_HVACS = 11;
		public static final long REINVEST_IN_FUND = 12;
		public static boolean isValid(long val) {
			if (( EUROCLEAR==val)) return true;
			if (( NSCC==val)) return true;
			if (( BPAY==val)) return true;
			if (( CREST==val)) return true;
			if (( FED_WIRE==val)) return true;
			if (( TELEGRAPHIC_TRANSFER==val)) return true;
			if (( CHEQUE==val)) return true;
			if (( CLEARSTREAM==val)) return true;
			if (( ACH_CREDIT==val)) return true;
			if (( DIRECT_CREDIT_BECS_BACS==val)) return true;
			if (( HIGH_VALUE_CLEARING_SYSTEM_HVACS==val)) return true;
			if (( REINVEST_IN_FUND==val)) return true;
			return false;
		}
	}

	public static class CancellationRights {
		public static final byte NO__WAIVER_AGREEMENT = 'M';
		public static final byte NO__EXECUTION_ONLY = 'N';
		public static final byte NO__INSTITUTIONAL = 'O';
		public static final byte YES = 'Y';
		public static boolean isValid(byte val) {
			if (( NO__WAIVER_AGREEMENT==val)) return true;
			if (( NO__EXECUTION_ONLY==val)) return true;
			if (( NO__INSTITUTIONAL==val)) return true;
			if (( YES==val)) return true;
			return false;
		}
	}

	public static class MoneyLaunderingStatus {
		public static final byte EXEMPT__AUTHORISED_CREDIT_OR_FINANCIAL_INSTITUTION = '3';
		public static final byte EXEMPT__CLIENT_MONEY_TYPE_EXEMPTION = '2';
		public static final byte EXEMPT__BELOW_THE_LIMIT = '1';
		public static final byte NOT_CHECKED = 'N';
		public static final byte PASSED = 'Y';
		public static boolean isValid(byte val) {
			if (( EXEMPT__AUTHORISED_CREDIT_OR_FINANCIAL_INSTITUTION==val)) return true;
			if (( EXEMPT__CLIENT_MONEY_TYPE_EXEMPTION==val)) return true;
			if (( EXEMPT__BELOW_THE_LIMIT==val)) return true;
			if (( NOT_CHECKED==val)) return true;
			if (( PASSED==val)) return true;
			return false;
		}
	}

	public static class ExecPriceType {
		public static final byte CREATION_PRICE_PLUS_ADJUSTMENT_PERCENT = 'D';
		public static final byte CREATION_PRICE_PLUS_ADJUSTMENT_AMOUNT = 'E';
		public static final byte OFFER_PRICE_MINUS_ADJUSTMENT_AMOUNT = 'Q';
		public static final byte OFFER_PRICE_MINUS_ADJUSTMENT_PERCENT = 'P';
		public static final byte SINGLE_PRICE = 'S';
		public static final byte BID_PRICE = 'B';
		public static final byte CREATION_PRICE = 'C';
		public static final byte OFFER_PRICE = 'O';
		public static boolean isValid(byte val) {
			if (( CREATION_PRICE_PLUS_ADJUSTMENT_PERCENT==val)) return true;
			if (( CREATION_PRICE_PLUS_ADJUSTMENT_AMOUNT==val)) return true;
			if (( OFFER_PRICE_MINUS_ADJUSTMENT_AMOUNT==val)) return true;
			if (( OFFER_PRICE_MINUS_ADJUSTMENT_PERCENT==val)) return true;
			if (( SINGLE_PRICE==val)) return true;
			if (( BID_PRICE==val)) return true;
			if (( CREATION_PRICE==val)) return true;
			if (( OFFER_PRICE==val)) return true;
			return false;
		}
	}

	public static class TradeReportTransType {
		public static final long RELEASE = 3;
		public static final long REPLACE = 2;
		public static final long CANCEL = 1;
		public static final long NEW = 0;
		public static final long CANCEL_DUE_TO_BACK_OUT_OF_TRADE = 5;
		public static final long REVERSE = 4;
		public static boolean isValid(long val) {
			if (( RELEASE==val)) return true;
			if (( REPLACE==val)) return true;
			if (( CANCEL==val)) return true;
			if (( NEW==val)) return true;
			if (( CANCEL_DUE_TO_BACK_OUT_OF_TRADE==val)) return true;
			if (( REVERSE==val)) return true;
			return false;
		}
	}

	public static class PaymentMethod {
		public static final long HIGH_VALUE_CLEARING_SYSTEM_HVACS = 15;
		public static final long ACH_CREDIT = 13;
		public static final long BPAY = 14;
		public static final long CREDIT_CARD = 11;
		public static final long ACH_DEBIT = 12;
		public static final long EUROCLEAR = 3;
		public static final long NSCC = 2;
		public static final long CREST = 1;
		public static final long DIRECT_CREDIT_BECS = 10;
		public static final long FED_WIRE = 7;
		public static final long TELEGRAPHIC_TRANSFER = 6;
		public static final long CHEQUE = 5;
		public static final long CLEARSTREAM = 4;
		public static final long DIRECT_DEBIT_BECS = 9;
		public static final long DEBIT_CARD = 8;
		public static boolean isValid(long val) {
			if (( HIGH_VALUE_CLEARING_SYSTEM_HVACS==val)) return true;
			if (( ACH_CREDIT==val)) return true;
			if (( BPAY==val)) return true;
			if (( CREDIT_CARD==val)) return true;
			if (( ACH_DEBIT==val)) return true;
			if (( EUROCLEAR==val)) return true;
			if (( NSCC==val)) return true;
			if (( CREST==val)) return true;
			if (( DIRECT_CREDIT_BECS==val)) return true;
			if (( FED_WIRE==val)) return true;
			if (( TELEGRAPHIC_TRANSFER==val)) return true;
			if (( CHEQUE==val)) return true;
			if (( CLEARSTREAM==val)) return true;
			if (( DIRECT_DEBIT_BECS==val)) return true;
			if (( DEBIT_CARD==val)) return true;
			return false;
		}
	}

	public static class TaxAdvantageType {
		public static final long PROFIT_SHARING_PLAN_US = 19;
		public static final long INDIVIDUAL_RETIREMENT_ACCOUNT__ROLLOVER_US = 17;
		public static final long KEOGH_US = 18;
		public static final long DEFINED_CONTRIBUTION_PLAN_US = 15;
		public static final long INDIVIDUAL_RETIREMENT_ACCOUNT_US = 16;
		public static final long NONFUND_PROTOTYPE_IRA_US = 13;
		public static final long NONFUND_QUALIFIED_PLAN_US = 14;
		public static final long EMPLOYER__PRIOR_YEAR_US = 11;
		public static final long EMPLOYER__CURRENT_YEAR_US = 12;
		public static final long SELFDIRECTED_IRA_US = 21;
		public static final long I401K_US = 20;
		public static final long I403B_US = 22;
		public static final long I457_US = 23;
		public static final long ROTH_IRA_FUND_PROTOTYPE_US = 24;
		public static final long ROTH_IRA_NONPROTOTYPE_US = 25;
		public static final long ROTH_CONVERSION_IRA_FUND_PROTOTYPE_US = 26;
		public static final long ROTH_CONVERSION_IRA_NONPROTOTYPE_US = 27;
		public static final long EDUCATION_IRA_FUND_PROTOTYPE_US = 28;
		public static final long EDUCATION_IRA_NONPROTOTYPE_US = 29;
		public static final long MINI_CASH_ISA_UK = 3;
		public static final long TESSA_UK = 2;
		public static final long EMPLOYEE__CURRENT_YEAR_US = 10;
		public static final long MAXI_ISA_UK = 1;
		public static final long NONENOT_APPLICABLE_DEFAULT = 0;
		public static final long PRIOR_YEAR_PAYMENT_US = 7;
		public static final long CURRENT_YEAR_PAYMENT_US = 6;
		public static final long MINI_INSURANCE_ISA_UK = 5;
		public static final long MINI_STOCKS_AND_SHARES_ISA_UK = 4;
		public static final long EMPLOYEE__PRIOR_YEAR_US = 9;
		public static final long ASSET_TRANSFER_US = 8;
		public static final long OTHER = 999;
		public static boolean isValid(long val) {
			if (( PROFIT_SHARING_PLAN_US==val)) return true;
			if (( INDIVIDUAL_RETIREMENT_ACCOUNT__ROLLOVER_US==val)) return true;
			if (( KEOGH_US==val)) return true;
			if (( DEFINED_CONTRIBUTION_PLAN_US==val)) return true;
			if (( INDIVIDUAL_RETIREMENT_ACCOUNT_US==val)) return true;
			if (( NONFUND_PROTOTYPE_IRA_US==val)) return true;
			if (( NONFUND_QUALIFIED_PLAN_US==val)) return true;
			if (( EMPLOYER__PRIOR_YEAR_US==val)) return true;
			if (( EMPLOYER__CURRENT_YEAR_US==val)) return true;
			if (( SELFDIRECTED_IRA_US==val)) return true;
			if (( I401K_US==val)) return true;
			if (( I403B_US==val)) return true;
			if (( I457_US==val)) return true;
			if (( ROTH_IRA_FUND_PROTOTYPE_US==val)) return true;
			if (( ROTH_IRA_NONPROTOTYPE_US==val)) return true;
			if (( ROTH_CONVERSION_IRA_FUND_PROTOTYPE_US==val)) return true;
			if (( ROTH_CONVERSION_IRA_NONPROTOTYPE_US==val)) return true;
			if (( EDUCATION_IRA_FUND_PROTOTYPE_US==val)) return true;
			if (( EDUCATION_IRA_NONPROTOTYPE_US==val)) return true;
			if (( MINI_CASH_ISA_UK==val)) return true;
			if (( TESSA_UK==val)) return true;
			if (( EMPLOYEE__CURRENT_YEAR_US==val)) return true;
			if (( MAXI_ISA_UK==val)) return true;
			if (( NONENOT_APPLICABLE_DEFAULT==val)) return true;
			if (( PRIOR_YEAR_PAYMENT_US==val)) return true;
			if (( CURRENT_YEAR_PAYMENT_US==val)) return true;
			if (( MINI_INSURANCE_ISA_UK==val)) return true;
			if (( MINI_STOCKS_AND_SHARES_ISA_UK==val)) return true;
			if (( EMPLOYEE__PRIOR_YEAR_US==val)) return true;
			if (( ASSET_TRANSFER_US==val)) return true;
			if (( OTHER==val)) return true;
			return false;
		}
	}

	public static class FundRenewWaiv {
		public static final byte NO = 'N';
		public static final byte YES = 'Y';
		public static boolean isValid(byte val) {
			if (( NO==val)) return true;
			if (( YES==val)) return true;
			return false;
		}
	}

	public static class RegistStatus {
		public static final byte ACCEPTED = 'A';
		public static final byte REJECTED = 'R';
		public static final byte REMINDER__IE_REGISTRATION_INSTRUCTIONS_ARE_STILL_OUTSTANDING = 'N';
		public static final byte HELD = 'H';
		public static boolean isValid(byte val) {
			if (( ACCEPTED==val)) return true;
			if (( REJECTED==val)) return true;
			if (( REMINDER__IE_REGISTRATION_INSTRUCTIONS_ARE_STILL_OUTSTANDING==val)) return true;
			if (( HELD==val)) return true;
			return false;
		}
	}

	public static class RegistRejReasonCode {
		public static final long INVALIDUNACCEPTABLE_CASH_DISTRIB_AGENT_CODE = 17;
		public static final long INVALIDUNACCEPTABLE_CASH_DISTRIB_AGENT_ACCT_NUM = 18;
		public static final long INVALIDUNACCEPTABLE_DISTRIB_PAYMENT_METHOD = 15;
		public static final long INVALIDUNACCEPTABLE_CASH_DISTRIB_AGENT_ACCT_NAME = 16;
		public static final long INVALIDUNACCEPTABLE_NO_DISTRIB_INSTNS = 13;
		public static final long INVALIDUNACCEPTABLE_DISTRIB_PERCENTAGE = 14;
		public static final long INVALIDUNACCEPTABLE_DATE_OF_BIRTH = 11;
		public static final long INVALIDUNACCEPTABLE_INVESTOR_COUNTRY_OF_RESIDENCE = 12;
		public static final long INVALIDUNACCEPTABLE_OWNERSHIP_TYPE = 3;
		public static final long INVALIDUNACCEPTABLE_TAX_EXEMPT_TYPE = 2;
		public static final long INVALIDUNACCEPTABLE_ACCOUNT_TYPE = 1;
		public static final long INVALIDUNACEEPTABLE_INVESTOR_ID_SOURCE = 10;
		public static final long INVALIDUNACCEPTABLE_MAILING_DETAILS = 7;
		public static final long INVALIDUNACCEPTABLE_REG_DETAILS = 6;
		public static final long INVALIDUNACCEPTABLE_REG_SEQ_NO = 5;
		public static final long INVALIDUNACCEPTABLE_NO_REG_DETAILS = 4;
		public static final long INVALIDUNACCEPTABLE_INVESTOR_ID = 9;
		public static final long INVALIDUNACCEPTABLE_MAILING_INSTRUCTIONS = 8;
		public static final long OTHER = 99;
		public static boolean isValid(long val) {
			if (( INVALIDUNACCEPTABLE_CASH_DISTRIB_AGENT_CODE==val)) return true;
			if (( INVALIDUNACCEPTABLE_CASH_DISTRIB_AGENT_ACCT_NUM==val)) return true;
			if (( INVALIDUNACCEPTABLE_DISTRIB_PAYMENT_METHOD==val)) return true;
			if (( INVALIDUNACCEPTABLE_CASH_DISTRIB_AGENT_ACCT_NAME==val)) return true;
			if (( INVALIDUNACCEPTABLE_NO_DISTRIB_INSTNS==val)) return true;
			if (( INVALIDUNACCEPTABLE_DISTRIB_PERCENTAGE==val)) return true;
			if (( INVALIDUNACCEPTABLE_DATE_OF_BIRTH==val)) return true;
			if (( INVALIDUNACCEPTABLE_INVESTOR_COUNTRY_OF_RESIDENCE==val)) return true;
			if (( INVALIDUNACCEPTABLE_OWNERSHIP_TYPE==val)) return true;
			if (( INVALIDUNACCEPTABLE_TAX_EXEMPT_TYPE==val)) return true;
			if (( INVALIDUNACCEPTABLE_ACCOUNT_TYPE==val)) return true;
			if (( INVALIDUNACEEPTABLE_INVESTOR_ID_SOURCE==val)) return true;
			if (( INVALIDUNACCEPTABLE_MAILING_DETAILS==val)) return true;
			if (( INVALIDUNACCEPTABLE_REG_DETAILS==val)) return true;
			if (( INVALIDUNACCEPTABLE_REG_SEQ_NO==val)) return true;
			if (( INVALIDUNACCEPTABLE_NO_REG_DETAILS==val)) return true;
			if (( INVALIDUNACCEPTABLE_INVESTOR_ID==val)) return true;
			if (( INVALIDUNACCEPTABLE_MAILING_INSTRUCTIONS==val)) return true;
			if (( OTHER==val)) return true;
			return false;
		}
	}

	public static class RegistTransType {
		public static final byte CANCEL = '2';
		public static final byte REPLACE = '1';
		public static final byte NEW = '0';
		public static boolean isValid(byte val) {
			if (( CANCEL==val)) return true;
			if (( REPLACE==val)) return true;
			if (( NEW==val)) return true;
			return false;
		}
	}

	public static class OwnershipType {
		public static final byte TENANTS_IN_COMMON = 'T';
		public static final byte JOINT_TRUSTEES = '2';
		public static final byte JOINT_INVESTORS = 'J';
		public static boolean isValid(byte val) {
			if (( TENANTS_IN_COMMON==val)) return true;
			if (( JOINT_TRUSTEES==val)) return true;
			if (( JOINT_INVESTORS==val)) return true;
			return false;
		}
	}

	public static class ContAmtType {
		public static final long NET_SETTLEMENT_AMOUNT = 15;
		public static final long FUNDBASED_RENEWAL_COMMISSION_AMOUNT_BASED_ON_ORDER_VALUE = 13;
		public static final long FUNDBASED_RENEWAL_COMMISSION_AMOUNT_BASED_ON_PROJECTED_FUND_VALU = 14;
		public static final long FUNDBASED_RENEWAL_COMMISSION_PERCENT_AKA_TRAIL_COMMISSION = 11;
		public static final long PROJECTED_FUND_VALUE_IE_FOR_INVESTMENTS_INTENDED_TO_REALISE_OR_E = 12;
		public static final long INITIAL_CHARGE_AMOUNT = 3;
		public static final long COMMISSION_PERCENT_ACTUAL = 2;
		public static final long COMMISSION_AMOUNT_ACTUAL = 1;
		public static final long EXIT_CHARGE_PERCENT = 10;
		public static final long DILUTION_LEVY_AMOUNT = 7;
		public static final long DISCOUNT_PERCENT = 6;
		public static final long DISCOUNT_AMOUNT = 5;
		public static final long INITIAL_CHARGE_PERCENT = 4;
		public static final long EXIT_CHARGE_AMOUNT = 9;
		public static final long DILUTION_LEVY_PERCENT = 8;
		public static boolean isValid(long val) {
			if (( NET_SETTLEMENT_AMOUNT==val)) return true;
			if (( FUNDBASED_RENEWAL_COMMISSION_AMOUNT_BASED_ON_ORDER_VALUE==val)) return true;
			if (( FUNDBASED_RENEWAL_COMMISSION_AMOUNT_BASED_ON_PROJECTED_FUND_VALU==val)) return true;
			if (( FUNDBASED_RENEWAL_COMMISSION_PERCENT_AKA_TRAIL_COMMISSION==val)) return true;
			if (( PROJECTED_FUND_VALUE_IE_FOR_INVESTMENTS_INTENDED_TO_REALISE_OR_E==val)) return true;
			if (( INITIAL_CHARGE_AMOUNT==val)) return true;
			if (( COMMISSION_PERCENT_ACTUAL==val)) return true;
			if (( COMMISSION_AMOUNT_ACTUAL==val)) return true;
			if (( EXIT_CHARGE_PERCENT==val)) return true;
			if (( DILUTION_LEVY_AMOUNT==val)) return true;
			if (( DISCOUNT_PERCENT==val)) return true;
			if (( DISCOUNT_AMOUNT==val)) return true;
			if (( INITIAL_CHARGE_PERCENT==val)) return true;
			if (( EXIT_CHARGE_AMOUNT==val)) return true;
			if (( DILUTION_LEVY_PERCENT==val)) return true;
			return false;
		}
	}

	public static class OwnerType {
		public static final long NOMINEE = 13;
		public static final long NONPROFIT_ORGANIZATION = 11;
		public static final long CORPORATE_BODY = 12;
		public static final long PRIVATE_COMPANY = 3;
		public static final long PUBLIC_COMPANY = 2;
		public static final long INDIVIDUAL_INVESTOR = 1;
		public static final long NETWORKING_SUBACCOUNT = 10;
		public static final long CUSTODIAN_UNDER_GIFTS_TO_MINORS_ACT = 7;
		public static final long PENSION_PLAN = 6;
		public static final long COMPANY_TRUSTEE = 5;
		public static final long INDIVIDUAL_TRUSTEE = 4;
		public static final long FIDUCIARIES = 9;
		public static final long TRUSTS = 8;
		public static boolean isValid(long val) {
			if (( NOMINEE==val)) return true;
			if (( NONPROFIT_ORGANIZATION==val)) return true;
			if (( CORPORATE_BODY==val)) return true;
			if (( PRIVATE_COMPANY==val)) return true;
			if (( PUBLIC_COMPANY==val)) return true;
			if (( INDIVIDUAL_INVESTOR==val)) return true;
			if (( NETWORKING_SUBACCOUNT==val)) return true;
			if (( CUSTODIAN_UNDER_GIFTS_TO_MINORS_ACT==val)) return true;
			if (( PENSION_PLAN==val)) return true;
			if (( COMPANY_TRUSTEE==val)) return true;
			if (( INDIVIDUAL_TRUSTEE==val)) return true;
			if (( FIDUCIARIES==val)) return true;
			if (( TRUSTS==val)) return true;
			return false;
		}
	}

	public static class OrderCapacity {
		public static final byte AGENT_FOR_OTHER_MEMBER = 'W';
		public static final byte PROPRIETARY = 'G';
		public static final byte PRINCIPAL_NOTE_FOR_CMS_PURPOSES_PRINCIPAL_INCLUDES_PROPRIETARY = 'P';
		public static final byte AGENCY = 'A';
		public static final byte RISKLESS_PRINCIPAL = 'R';
		public static final byte INDIVIDUAL = 'I';
		public static boolean isValid(byte val) {
			if (( AGENT_FOR_OTHER_MEMBER==val)) return true;
			if (( PROPRIETARY==val)) return true;
			if (( PRINCIPAL_NOTE_FOR_CMS_PURPOSES_PRINCIPAL_INCLUDES_PROPRIETARY==val)) return true;
			if (( AGENCY==val)) return true;
			if (( RISKLESS_PRINCIPAL==val)) return true;
			if (( INDIVIDUAL==val)) return true;
			return false;
		}
	}

	public static class OrderRestrictions {
		public static final byte[] NONALGORITHMIC = "D".getBytes();
		public static final byte[] ALGORITHMIC = "E".getBytes();
		public static final byte[] CROSS = "F".getBytes();
		public static final byte[] RISKLESS_ARBITRAGE = "A".getBytes();
		public static final byte[] ISSUER_HOLDING = "B".getBytes();
		public static final byte[] ISSUE_PRICE_STABILIZATION = "C".getBytes();
		public static final byte[] NONINDEX_ARBITRAGE = "3".getBytes();
		public static final byte[] INDEX_ARBITRAGE = "2".getBytes();
		public static final byte[] PROGRAM_TRADE = "1".getBytes();
		public static final byte[] FOREIGN_ENTITY_OF_FOREIGN_GOVERNMENT_OR_REGULATORY_JURISDICTION = "7".getBytes();
		public static final byte[] ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_THE_UNDERLYING_SECURITY_ = "6".getBytes();
		public static final byte[] ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_THE_SECURITY = "5".getBytes();
		public static final byte[] COMPETING_MARKET_MAKER = "4".getBytes();
		public static final byte[] EXTERNAL_INTERCONNECTED_MARKET_LINKAGE = "9".getBytes();
		public static final byte[] EXTERNAL_MARKET_PARTICIPANT = "8".getBytes();
		public static boolean isValid(byte[] val) {
			if (Utils.equals( NONALGORITHMIC, val)) return true;
			if (Utils.equals( ALGORITHMIC, val)) return true;
			if (Utils.equals( CROSS, val)) return true;
			if (Utils.equals( RISKLESS_ARBITRAGE, val)) return true;
			if (Utils.equals( ISSUER_HOLDING, val)) return true;
			if (Utils.equals( ISSUE_PRICE_STABILIZATION, val)) return true;
			if (Utils.equals( NONINDEX_ARBITRAGE, val)) return true;
			if (Utils.equals( INDEX_ARBITRAGE, val)) return true;
			if (Utils.equals( PROGRAM_TRADE, val)) return true;
			if (Utils.equals( FOREIGN_ENTITY_OF_FOREIGN_GOVERNMENT_OR_REGULATORY_JURISDICTION, val)) return true;
			if (Utils.equals( ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_THE_UNDERLYING_SECURITY_, val)) return true;
			if (Utils.equals( ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_THE_SECURITY, val)) return true;
			if (Utils.equals( COMPETING_MARKET_MAKER, val)) return true;
			if (Utils.equals( EXTERNAL_INTERCONNECTED_MARKET_LINKAGE, val)) return true;
			if (Utils.equals( EXTERNAL_MARKET_PARTICIPANT, val)) return true;
			return false;
		}
	}

	public static class MassCancelRequestType {
		public static final byte CANCEL_ORDERS_FOR_A_PRODUCT = '3';
		public static final byte CANCEL_ORDERS_FOR_AN_UNDERLYING_SECURITY = '2';
		public static final byte CANCEL_ORDERS_FOR_A_SECURITY = '1';
		public static final byte CANCEL_ALL_ORDERS = '7';
		public static final byte CANCEL_ORDERS_FOR_A_SECURITY_GROUP = 'A';
		public static final byte CANCEL_ORDERS_FOR_A_TRADING_SESSION = '6';
		public static final byte CANCEL_FOR_SECURITY_ISSUER = 'B';
		public static final byte CANCEL_ORDERS_FOR_A_SECURITYTYPE = '5';
		public static final byte CANCEL_FOR_ISSUER_OF_UNDERLYING_SECURITY = 'C';
		public static final byte CANCEL_ORDERS_FOR_A_CFICODE = '4';
		public static final byte CANCEL_ORDERS_FOR_A_MARKET_SEGMENT = '9';
		public static final byte CANCEL_ORDERS_FOR_A_MARKET = '8';
		public static boolean isValid(byte val) {
			if (( CANCEL_ORDERS_FOR_A_PRODUCT==val)) return true;
			if (( CANCEL_ORDERS_FOR_AN_UNDERLYING_SECURITY==val)) return true;
			if (( CANCEL_ORDERS_FOR_A_SECURITY==val)) return true;
			if (( CANCEL_ALL_ORDERS==val)) return true;
			if (( CANCEL_ORDERS_FOR_A_SECURITY_GROUP==val)) return true;
			if (( CANCEL_ORDERS_FOR_A_TRADING_SESSION==val)) return true;
			if (( CANCEL_FOR_SECURITY_ISSUER==val)) return true;
			if (( CANCEL_ORDERS_FOR_A_SECURITYTYPE==val)) return true;
			if (( CANCEL_FOR_ISSUER_OF_UNDERLYING_SECURITY==val)) return true;
			if (( CANCEL_ORDERS_FOR_A_CFICODE==val)) return true;
			if (( CANCEL_ORDERS_FOR_A_MARKET_SEGMENT==val)) return true;
			if (( CANCEL_ORDERS_FOR_A_MARKET==val)) return true;
			return false;
		}
	}

	public static class MassCancelResponse {
		public static final byte CANCEL_ORDERS_FOR_A_SECURITY_GROUP = 'A';
		public static final byte CANCEL_ORDERS_FOR_A_SECURITIES_ISSUER = 'B';
		public static final byte CANCEL_ORDERS_FOR_ISSUER_OF_UNDERLYING_SECURITY = 'C';
		public static final byte CANCEL_ORDERS_FOR_A_PRODUCT = '3';
		public static final byte CANCEL_ORDERS_FOR_AN_UNDERLYING_SECURITY = '2';
		public static final byte CANCEL_ORDERS_FOR_A_SECURITY = '1';
		public static final byte CANCEL_REQUEST_REJECTED__SEE_MASSCANCELREJECTREASON_532 = '0';
		public static final byte CANCEL_ALL_ORDERS = '7';
		public static final byte CANCEL_ORDERS_FOR_A_TRADING_SESSION = '6';
		public static final byte CANCEL_ORDERS_FOR_A_SECURITYTYPE = '5';
		public static final byte CANCEL_ORDERS_FOR_A_CFICODE = '4';
		public static final byte CANCEL_ORDERS_FOR_A_MARKET_SEGMENT = '9';
		public static final byte CANCEL_ORDERS_FOR_A_MARKET = '8';
		public static boolean isValid(byte val) {
			if (( CANCEL_ORDERS_FOR_A_SECURITY_GROUP==val)) return true;
			if (( CANCEL_ORDERS_FOR_A_SECURITIES_ISSUER==val)) return true;
			if (( CANCEL_ORDERS_FOR_ISSUER_OF_UNDERLYING_SECURITY==val)) return true;
			if (( CANCEL_ORDERS_FOR_A_PRODUCT==val)) return true;
			if (( CANCEL_ORDERS_FOR_AN_UNDERLYING_SECURITY==val)) return true;
			if (( CANCEL_ORDERS_FOR_A_SECURITY==val)) return true;
			if (( CANCEL_REQUEST_REJECTED__SEE_MASSCANCELREJECTREASON_532==val)) return true;
			if (( CANCEL_ALL_ORDERS==val)) return true;
			if (( CANCEL_ORDERS_FOR_A_TRADING_SESSION==val)) return true;
			if (( CANCEL_ORDERS_FOR_A_SECURITYTYPE==val)) return true;
			if (( CANCEL_ORDERS_FOR_A_CFICODE==val)) return true;
			if (( CANCEL_ORDERS_FOR_A_MARKET_SEGMENT==val)) return true;
			if (( CANCEL_ORDERS_FOR_A_MARKET==val)) return true;
			return false;
		}
	}

	public static class MassCancelRejectReason {
		public static final long INVALID_OR_UNKNOWN_ISSUER_OF_UNDERLYING_SECURITY = 11;
		public static final long INVALID_OR_UNKNOWN_PRODUCT = 3;
		public static final long INVALID_OR_UNKOWN_UNDERLYING_SECURITY = 2;
		public static final long INVALID_OR_UNKNOWN_SECURITY = 1;
		public static final long INVALID_OR_UNKNOWN_SECURITY_ISSUER = 10;
		public static final long MASS_CANCEL_NOT_SUPPORTED = 0;
		public static final long INVALID_OR_UNKNOWN_MARKET = 7;
		public static final long INVALID_OR_UNKNOWN_TRADING_SESSION = 6;
		public static final long INVALID_OR_UNKNOWN_SECURITYTYPE = 5;
		public static final long INVALID_OR_UNKNOWN_CFICODE = 4;
		public static final long INVALID_OR_UNKNOWN_SECURITY_GROUP = 9;
		public static final long INVALID_OR_UNKOWN_MARKET_SEGMENT = 8;
		public static final long OTHER = 99;
		public static boolean isValid(long val) {
			if (( INVALID_OR_UNKNOWN_ISSUER_OF_UNDERLYING_SECURITY==val)) return true;
			if (( INVALID_OR_UNKNOWN_PRODUCT==val)) return true;
			if (( INVALID_OR_UNKOWN_UNDERLYING_SECURITY==val)) return true;
			if (( INVALID_OR_UNKNOWN_SECURITY==val)) return true;
			if (( INVALID_OR_UNKNOWN_SECURITY_ISSUER==val)) return true;
			if (( MASS_CANCEL_NOT_SUPPORTED==val)) return true;
			if (( INVALID_OR_UNKNOWN_MARKET==val)) return true;
			if (( INVALID_OR_UNKNOWN_TRADING_SESSION==val)) return true;
			if (( INVALID_OR_UNKNOWN_SECURITYTYPE==val)) return true;
			if (( INVALID_OR_UNKNOWN_CFICODE==val)) return true;
			if (( INVALID_OR_UNKNOWN_SECURITY_GROUP==val)) return true;
			if (( INVALID_OR_UNKOWN_MARKET_SEGMENT==val)) return true;
			if (( OTHER==val)) return true;
			return false;
		}
	}

	public static class QuoteType {
		public static final long COUNTER_TRADEABLE = 3;
		public static final long RESTRICTED_TRADEABLE = 2;
		public static final long TRADEABLE = 1;
		public static final long INDICATIVE = 0;
		public static boolean isValid(long val) {
			if (( COUNTER_TRADEABLE==val)) return true;
			if (( RESTRICTED_TRADEABLE==val)) return true;
			if (( TRADEABLE==val)) return true;
			if (( INDICATIVE==val)) return true;
			return false;
		}
	}

	public static class CashMargin {
		public static final byte MARGIN_CLOSE = '3';
		public static final byte MARGIN_OPEN = '2';
		public static final byte CASH = '1';
		public static boolean isValid(byte val) {
			if (( MARGIN_CLOSE==val)) return true;
			if (( MARGIN_OPEN==val)) return true;
			if (( CASH==val)) return true;
			return false;
		}
	}

	public static class Scope {
		public static final byte[] GLOBAL = "3".getBytes();
		public static final byte[] NATIONAL = "2".getBytes();
		public static final byte[] LOCAL_MARKET_EXCHANGE_ECN_ATS = "1".getBytes();
		public static boolean isValid(byte[] val) {
			if (Utils.equals( GLOBAL, val)) return true;
			if (Utils.equals( NATIONAL, val)) return true;
			if (Utils.equals( LOCAL_MARKET_EXCHANGE_ECN_ATS, val)) return true;
			return false;
		}
	}

	public static class MDImplicitDelete {
		public static final boolean SERVER_MUST_SEND_AN_EXPLICIT_DELETE_FOR_BIDS_OR_OFFERS_FALLING_O = false;
		public static final boolean CLIENT_HAS_RESPONSIBILITY_FOR_IMPLICITLY_DELETING_BIDS_OR_OFFERS = true;
		public static boolean isValid(boolean val) {
			if (( SERVER_MUST_SEND_AN_EXPLICIT_DELETE_FOR_BIDS_OR_OFFERS_FALLING_O==val)) return true;
			if (( CLIENT_HAS_RESPONSIBILITY_FOR_IMPLICITLY_DELETING_BIDS_OR_OFFERS==val)) return true;
			return false;
		}
	}

	public static class CrossType {
		public static final long CROSS_ONE_SIDE__CROSS_TRADE_WHICH_IS_PARTIALLY_EXECUTED_WITH_THE = 3;
		public static final long CROSS_IOC__CROSS_TRADE_WHICH_IS_EXECUTED_PARTIALLY_AND_THE_REST_ = 2;
		public static final long CROSS_AON__CROSS_TRADE_WHICH_IS_EXECUTED_COMPLETELY_OR_NOT_BOTH_ = 1;
		public static final long CROSS_SAME_PRICE__CROSS_TRADE_IS_EXECUTED_WITH_EXISTING_ORDERS_W = 4;
		public static boolean isValid(long val) {
			if (( CROSS_ONE_SIDE__CROSS_TRADE_WHICH_IS_PARTIALLY_EXECUTED_WITH_THE==val)) return true;
			if (( CROSS_IOC__CROSS_TRADE_WHICH_IS_EXECUTED_PARTIALLY_AND_THE_REST_==val)) return true;
			if (( CROSS_AON__CROSS_TRADE_WHICH_IS_EXECUTED_COMPLETELY_OR_NOT_BOTH_==val)) return true;
			if (( CROSS_SAME_PRICE__CROSS_TRADE_IS_EXECUTED_WITH_EXISTING_ORDERS_W==val)) return true;
			return false;
		}
	}

	public static class CrossPrioritization {
		public static final long SELL_SIDE_IS_PRIORITIZED = 2;
		public static final long BUY_SIDE_IS_PRIORITIZED = 1;
		public static final long NONE = 0;
		public static boolean isValid(long val) {
			if (( SELL_SIDE_IS_PRIORITIZED==val)) return true;
			if (( BUY_SIDE_IS_PRIORITIZED==val)) return true;
			if (( NONE==val)) return true;
			return false;
		}
	}

	public static class NoSides {
		public static final long BOTH_SIDES = 2;
		public static final long ONE_SIDE = 1;
		public static boolean isValid(long val) {
			if (( BOTH_SIDES==val)) return true;
			if (( ONE_SIDE==val)) return true;
			return false;
		}
	}

	public static class SecurityListRequestType {
		public static final long TRADINGSESSIONID = 3;
		public static final long PRODUCT = 2;
		public static final long SECURITYTYPE_ANDOR_CFICODE = 1;
		public static final long SYMBOL = 0;
		public static final long MARKETID_OR_MARKETID__MARKETSEGMENTID = 5;
		public static final long ALL_SECURITIES = 4;
		public static boolean isValid(long val) {
			if (( TRADINGSESSIONID==val)) return true;
			if (( PRODUCT==val)) return true;
			if (( SECURITYTYPE_ANDOR_CFICODE==val)) return true;
			if (( SYMBOL==val)) return true;
			if (( MARKETID_OR_MARKETID__MARKETSEGMENTID==val)) return true;
			if (( ALL_SECURITIES==val)) return true;
			return false;
		}
	}

	public static class SecurityRequestResult {
		public static final long NOT_AUTHORIZED_TO_RETRIEVE_INSTRUMENT_DATA = 3;
		public static final long NO_INSTRUMENTS_FOUND_THAT_MATCH_SELECTION_CRITERIA = 2;
		public static final long INVALID_OR_UNSUPPORTED_REQUEST = 1;
		public static final long VALID_REQUEST = 0;
		public static final long REQUEST_FOR_INSTRUMENT_DATA_NOT_SUPPORTED = 5;
		public static final long INSTRUMENT_DATA_TEMPORARILY_UNAVAILABLE = 4;
		public static boolean isValid(long val) {
			if (( NOT_AUTHORIZED_TO_RETRIEVE_INSTRUMENT_DATA==val)) return true;
			if (( NO_INSTRUMENTS_FOUND_THAT_MATCH_SELECTION_CRITERIA==val)) return true;
			if (( INVALID_OR_UNSUPPORTED_REQUEST==val)) return true;
			if (( VALID_REQUEST==val)) return true;
			if (( REQUEST_FOR_INSTRUMENT_DATA_NOT_SUPPORTED==val)) return true;
			if (( INSTRUMENT_DATA_TEMPORARILY_UNAVAILABLE==val)) return true;
			return false;
		}
	}

	public static class MultiLegRptTypeReq {
		public static final long REPORT_BY_INSTRUMENT_LEGS_BELONGING_TO_THE_MULTILEG_SECURITY_ONL = 2;
		public static final long REPORT_BY_MULTILEG_SECURITY_AND_BY_INSTRUMENT_LEGS_BELONGING_TO_ = 1;
		public static final long REPORT_BY_MULITLEG_SECURITY_ONLY_DO_NOT_REPORT_LEGS = 0;
		public static boolean isValid(long val) {
			if (( REPORT_BY_INSTRUMENT_LEGS_BELONGING_TO_THE_MULTILEG_SECURITY_ONL==val)) return true;
			if (( REPORT_BY_MULTILEG_SECURITY_AND_BY_INSTRUMENT_LEGS_BELONGING_TO_==val)) return true;
			if (( REPORT_BY_MULITLEG_SECURITY_ONLY_DO_NOT_REPORT_LEGS==val)) return true;
			return false;
		}
	}

	public static class TradSesStatusRejReason {
		public static final long UNKNOWN_OR_INVALID_TRADINGSESSIONID = 1;
		public static final long OTHER = 99;
		public static boolean isValid(long val) {
			if (( UNKNOWN_OR_INVALID_TRADINGSESSIONID==val)) return true;
			if (( OTHER==val)) return true;
			return false;
		}
	}

	public static class TradeRequestType {
		public static final long UNREPORTED_TRADES_THAT_MATCH_CRITERIA = 3;
		public static final long UNMATCHED_TRADES_THAT_MATCH_CRITERIA = 2;
		public static final long MATCHED_TRADES_MATCHING_CRITERIA_PROVIDED_ON_REQUEST_PARTIES_EXE = 1;
		public static final long ALL_TRADES = 0;
		public static final long ADVISORIES_THAT_MATCH_CRITERIA = 4;
		public static boolean isValid(long val) {
			if (( UNREPORTED_TRADES_THAT_MATCH_CRITERIA==val)) return true;
			if (( UNMATCHED_TRADES_THAT_MATCH_CRITERIA==val)) return true;
			if (( MATCHED_TRADES_MATCHING_CRITERIA_PROVIDED_ON_REQUEST_PARTIES_EXE==val)) return true;
			if (( ALL_TRADES==val)) return true;
			if (( ADVISORIES_THAT_MATCH_CRITERIA==val)) return true;
			return false;
		}
	}

	public static class PreviouslyReported {
		public static final boolean NOT_REPORTED_TO_COUNTERPARTY = false;
		public static final boolean PERVIOUSLY_REPORTED_TO_COUNTERPARTY = true;
		public static boolean isValid(boolean val) {
			if (( NOT_REPORTED_TO_COUNTERPARTY==val)) return true;
			if (( PERVIOUSLY_REPORTED_TO_COUNTERPARTY==val)) return true;
			return false;
		}
	}

	public static class MatchStatus {
		public static final byte ADVISORY_OR_ALERT = '2';
		public static final byte UNCOMPARED_UNMATCHED_OR_UNAFFIRMED = '1';
		public static final byte COMPARED_MATCHED_OR_AFFIRMED = '0';
		public static boolean isValid(byte val) {
			if (( ADVISORY_OR_ALERT==val)) return true;
			if (( UNCOMPARED_UNMATCHED_OR_UNAFFIRMED==val)) return true;
			if (( COMPARED_MATCHED_OR_AFFIRMED==val)) return true;
			return false;
		}
	}

	public static class MatchType {
		public static final byte[] _PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_FOUR_BADGES = "A2".getBytes();
		public static final byte[] _PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_FOUR_BADGES_A = "A1".getBytes();
		public static final byte[] ACT_M6_MATCH = "M6".getBytes();
		public static final byte[] _PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_TWO_BADGES = "A4".getBytes();
		public static final byte[] ACT_DEFAULT_AFTER_M2 = "M5".getBytes();
		public static final byte[] _PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_TWO_BADGES_AN = "A3".getBytes();
		public static final byte[] _PRICE_TRADETYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_EXECUTION_TIME = "A5".getBytes();
		public static final byte[] SUMMARIZED_MATCH_USING_A2_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_I = "S2".getBytes();
		public static final byte[] SUMMARIZED_MATCH_USING_A1_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_I = "S1".getBytes();
		public static final byte[] ACT_DEFAULT_TRADE = "M4".getBytes();
		public static final byte[] ACT_ACCEPTED_TRADE = "M3".getBytes();
		public static final byte[] SUMMARIZED_MATCH_MINUS_BADGES_AND_TIMES_ACT_M2_MATCH = "M2".getBytes();
		public static final byte[] _PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_MINUS_BADGES_AND_T = "M1".getBytes();
		public static final byte[] COMPARED_RECORDS_RESULTING_FROM_STAMPED_ADVISORIES_OR_SPECIALIST = "AQ".getBytes();
		public static final byte[] OCS_LOCKED_IN_NONACT = "MT".getBytes();
		public static final byte[] SUMMARIZED_MATCH_USING_A3_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_I = "S3".getBytes();
		public static final byte[] CONFIRMED_TRADE_REPORT_REPORTING_FROM_RECOGNIZED_MARKETS = "3".getBytes();
		public static final byte[] SUMMARIZED_MATCH_USING_A4_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_I = "S4".getBytes();
		public static final byte[] TWOPARTY_TRADE_REPORT_PRIVATELY_NEGOTIATED_TRADE = "2".getBytes();
		public static final byte[] SUMMARIZED_MATCH_USING_A5_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_I = "S5".getBytes();
		public static final byte[] ONEPARTY_TRADE_REPORT_PRIVATELY_NEGOTIATED_TRADE = "1".getBytes();
		public static final byte[] CALL_AUCTION = "7".getBytes();
		public static final byte[] COUNTERORDER_SELECTION = "6".getBytes();
		public static final byte[] CROSS_AUCTION = "5".getBytes();
		public static final byte[] AUTOMATCH = "4".getBytes();
		public static final byte[] ISSUINGBUY_BACK_AUCTION = "8".getBytes();
		public static boolean isValid(byte[] val) {
			if (Utils.equals( _PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_FOUR_BADGES, val)) return true;
			if (Utils.equals( _PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_FOUR_BADGES_A, val)) return true;
			if (Utils.equals( ACT_M6_MATCH, val)) return true;
			if (Utils.equals( _PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_TWO_BADGES, val)) return true;
			if (Utils.equals( ACT_DEFAULT_AFTER_M2, val)) return true;
			if (Utils.equals( _PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_TWO_BADGES_AN, val)) return true;
			if (Utils.equals( _PRICE_TRADETYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_EXECUTION_TIME, val)) return true;
			if (Utils.equals( SUMMARIZED_MATCH_USING_A2_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_I, val)) return true;
			if (Utils.equals( SUMMARIZED_MATCH_USING_A1_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_I, val)) return true;
			if (Utils.equals( ACT_DEFAULT_TRADE, val)) return true;
			if (Utils.equals( ACT_ACCEPTED_TRADE, val)) return true;
			if (Utils.equals( SUMMARIZED_MATCH_MINUS_BADGES_AND_TIMES_ACT_M2_MATCH, val)) return true;
			if (Utils.equals( _PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_MINUS_BADGES_AND_T, val)) return true;
			if (Utils.equals( COMPARED_RECORDS_RESULTING_FROM_STAMPED_ADVISORIES_OR_SPECIALIST, val)) return true;
			if (Utils.equals( OCS_LOCKED_IN_NONACT, val)) return true;
			if (Utils.equals( SUMMARIZED_MATCH_USING_A3_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_I, val)) return true;
			if (Utils.equals( CONFIRMED_TRADE_REPORT_REPORTING_FROM_RECOGNIZED_MARKETS, val)) return true;
			if (Utils.equals( SUMMARIZED_MATCH_USING_A4_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_I, val)) return true;
			if (Utils.equals( TWOPARTY_TRADE_REPORT_PRIVATELY_NEGOTIATED_TRADE, val)) return true;
			if (Utils.equals( SUMMARIZED_MATCH_USING_A5_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_I, val)) return true;
			if (Utils.equals( ONEPARTY_TRADE_REPORT_PRIVATELY_NEGOTIATED_TRADE, val)) return true;
			if (Utils.equals( CALL_AUCTION, val)) return true;
			if (Utils.equals( COUNTERORDER_SELECTION, val)) return true;
			if (Utils.equals( CROSS_AUCTION, val)) return true;
			if (Utils.equals( AUTOMATCH, val)) return true;
			if (Utils.equals( ISSUINGBUY_BACK_AUCTION, val)) return true;
			return false;
		}
	}

	public static class OddLot {
		public static final boolean TREAT_AS_ROUND_LOT_DEFAULT = false;
		public static final boolean TREAT_AS_ODD_LOT = true;
		public static boolean isValid(boolean val) {
			if (( TREAT_AS_ROUND_LOT_DEFAULT==val)) return true;
			if (( TREAT_AS_ODD_LOT==val)) return true;
			return false;
		}
	}

	public static class ClearingInstruction {
		public static final long SELF_CLEARING = 13;
		public static final long QUALIFIED_SERVICE_REPRESENTATIVE_QSR = 11;
		public static final long CUSTOMER_TRADE = 12;
		public static final long EX_CLEARING = 3;
		public static final long BILATERAL_NETTING_ONLY = 2;
		public static final long EXCLUDE_FROM_ALL_NETTING = 1;
		public static final long AUTOMATIC_GIVEUP_MODE_TRADE_GIVEUP_TO_THE_GIVEUP_DESTINATION_NUM = 10;
		public static final long PROCESS_NORMALLY = 0;
		public static final long EXCLUDE_FROM_CENTRAL_COUNTERPARTY = 7;
		public static final long CLEAR_AGAINST_CENTRAL_COUNTERPARTY = 6;
		public static final long MULTILATERAL_NETTING = 5;
		public static final long SPECIAL_TRADE = 4;
		public static final long AUTOMATIC_POSTING_MODE_TRADE_POSTING_TO_THE_POSITION_ACCOUNT_NUM = 9;
		public static final long MANUAL_MODE_PREPOSTING_ANDOR_PREGIVEUP = 8;
		public static boolean isValid(long val) {
			if (( SELF_CLEARING==val)) return true;
			if (( QUALIFIED_SERVICE_REPRESENTATIVE_QSR==val)) return true;
			if (( CUSTOMER_TRADE==val)) return true;
			if (( EX_CLEARING==val)) return true;
			if (( BILATERAL_NETTING_ONLY==val)) return true;
			if (( EXCLUDE_FROM_ALL_NETTING==val)) return true;
			if (( AUTOMATIC_GIVEUP_MODE_TRADE_GIVEUP_TO_THE_GIVEUP_DESTINATION_NUM==val)) return true;
			if (( PROCESS_NORMALLY==val)) return true;
			if (( EXCLUDE_FROM_CENTRAL_COUNTERPARTY==val)) return true;
			if (( CLEAR_AGAINST_CENTRAL_COUNTERPARTY==val)) return true;
			if (( MULTILATERAL_NETTING==val)) return true;
			if (( SPECIAL_TRADE==val)) return true;
			if (( AUTOMATIC_POSTING_MODE_TRADE_POSTING_TO_THE_POSITION_ACCOUNT_NUM==val)) return true;
			if (( MANUAL_MODE_PREPOSTING_ANDOR_PREGIVEUP==val)) return true;
			return false;
		}
	}

	public static class AccountType {
		public static final long HOUSE_TRADER = 3;
		public static final long ACCOUNT_IS_CARRIED_ON_NONCUSTOMER_SIDE_OF_BOOKS = 2;
		public static final long ACCOUNT_IS_CARRIED_ON_CUSTOMER_SIDE_OF_THE_BOOKS = 1;
		public static final long ACCOUNT_IS_HOUSE_TRADER_AND_IS_CROSS_MARGINED = 7;
		public static final long ACCOUNT_IS_CARRIED_ON_NONCUSTOMER_SIDE_OF_BOOKS_AND_IS_CROSS_MAR = 6;
		public static final long FLOOR_TRADER = 4;
		public static final long JOINT_BACK_OFFICE_ACCOUNT_JBO = 8;
		public static boolean isValid(long val) {
			if (( HOUSE_TRADER==val)) return true;
			if (( ACCOUNT_IS_CARRIED_ON_NONCUSTOMER_SIDE_OF_BOOKS==val)) return true;
			if (( ACCOUNT_IS_CARRIED_ON_CUSTOMER_SIDE_OF_THE_BOOKS==val)) return true;
			if (( ACCOUNT_IS_HOUSE_TRADER_AND_IS_CROSS_MARGINED==val)) return true;
			if (( ACCOUNT_IS_CARRIED_ON_NONCUSTOMER_SIDE_OF_BOOKS_AND_IS_CROSS_MAR==val)) return true;
			if (( FLOOR_TRADER==val)) return true;
			if (( JOINT_BACK_OFFICE_ACCOUNT_JBO==val)) return true;
			return false;
		}
	}

	public static class CustOrderCapacity {
		public static final long MEMBER_TRADING_FOR_ANOTHER_MEMBER = 3;
		public static final long CLEARING_FIRM_TRADING_FOR_ITS_PROPRIETARY_ACCOUNT = 2;
		public static final long MEMBER_TRADING_FOR_THEIR_OWN_ACCOUNT = 1;
		public static final long ALL_OTHER = 4;
		public static boolean isValid(long val) {
			if (( MEMBER_TRADING_FOR_ANOTHER_MEMBER==val)) return true;
			if (( CLEARING_FIRM_TRADING_FOR_ITS_PROPRIETARY_ACCOUNT==val)) return true;
			if (( MEMBER_TRADING_FOR_THEIR_OWN_ACCOUNT==val)) return true;
			if (( ALL_OTHER==val)) return true;
			return false;
		}
	}

	public static class MassStatusReqType {
		public static final long STATUS_FOR_ORDERS_FOR_A_PRODUCT = 3;
		public static final long STATUS_FOR_ORDERS_FOR_AN_UNDERLYING_SECURITY = 2;
		public static final long STATUS_FOR_ISSUER_OF_UNDERLYING_SECURITY = 10;
		public static final long STATUS_FOR_ORDERS_FOR_A_SECURITY = 1;
		public static final long STATUS_FOR_ALL_ORDERS = 7;
		public static final long STATUS_FOR_ORDERS_FOR_A_TRADING_SESSION = 6;
		public static final long STATUS_FOR_ORDERS_FOR_A_SECURITYTYPE = 5;
		public static final long STATUS_FOR_ORDERS_FOR_A_CFICODE = 4;
		public static final long STATUS_FOR_SECURITY_ISSUER = 9;
		public static final long STATUS_FOR_ORDERS_FOR_A_PARTYID = 8;
		public static boolean isValid(long val) {
			if (( STATUS_FOR_ORDERS_FOR_A_PRODUCT==val)) return true;
			if (( STATUS_FOR_ORDERS_FOR_AN_UNDERLYING_SECURITY==val)) return true;
			if (( STATUS_FOR_ISSUER_OF_UNDERLYING_SECURITY==val)) return true;
			if (( STATUS_FOR_ORDERS_FOR_A_SECURITY==val)) return true;
			if (( STATUS_FOR_ALL_ORDERS==val)) return true;
			if (( STATUS_FOR_ORDERS_FOR_A_TRADING_SESSION==val)) return true;
			if (( STATUS_FOR_ORDERS_FOR_A_SECURITYTYPE==val)) return true;
			if (( STATUS_FOR_ORDERS_FOR_A_CFICODE==val)) return true;
			if (( STATUS_FOR_SECURITY_ISSUER==val)) return true;
			if (( STATUS_FOR_ORDERS_FOR_A_PARTYID==val)) return true;
			return false;
		}
	}

	public static class DayBookingInst {
		public static final byte ACCUMULATE = '2';
		public static final byte SPEAK_WITH_ORDER_INITIATOR_BEFORE_BOOKING_SPEAK_FIRST = '1';
		public static final byte CAN_TRIGGER_BOOKING_WITHOUT_REFERENCE_TO_THE_ORDER_INITIATOR_AUT = '0';
		public static boolean isValid(byte val) {
			if (( ACCUMULATE==val)) return true;
			if (( SPEAK_WITH_ORDER_INITIATOR_BEFORE_BOOKING_SPEAK_FIRST==val)) return true;
			if (( CAN_TRIGGER_BOOKING_WITHOUT_REFERENCE_TO_THE_ORDER_INITIATOR_AUT==val)) return true;
			return false;
		}
	}

	public static class BookingUnit {
		public static final byte AGGREGATE_EXECUTIONS_FOR_THIS_SYMBOL_SIDE_AND_SETTLEMENT_DATE = '2';
		public static final byte AGGREGATE_PARTIAL_EXECUTIONS_ON_THIS_ORDER_AND_BOOK_ONE_TRADE_PE = '1';
		public static final byte EACH_PARTIAL_EXECUTION_IS_A_BOOKABLE_UNIT = '0';
		public static boolean isValid(byte val) {
			if (( AGGREGATE_EXECUTIONS_FOR_THIS_SYMBOL_SIDE_AND_SETTLEMENT_DATE==val)) return true;
			if (( AGGREGATE_PARTIAL_EXECUTIONS_ON_THIS_ORDER_AND_BOOK_ONE_TRADE_PE==val)) return true;
			if (( EACH_PARTIAL_EXECUTION_IS_A_BOOKABLE_UNIT==val)) return true;
			return false;
		}
	}

	public static class PreallocMethod {
		public static final byte DO_NOT_PRORATA__DISCUSS_FIRST = '1';
		public static final byte PRORATA = '0';
		public static boolean isValid(byte val) {
			if (( DO_NOT_PRORATA__DISCUSS_FIRST==val)) return true;
			if (( PRORATA==val)) return true;
			return false;
		}
	}

	public static class TradingSessionSubID {
		public static final byte[] CONTINUOUS_TRADING = "3".getBytes();
		public static final byte[] OPENING_OR_OPENING_AUCTION = "2".getBytes();
		public static final byte[] PRETRADING = "1".getBytes();
		public static final byte[] QUIESCENT = "7".getBytes();
		public static final byte[] INTRADAY_AUCTION = "6".getBytes();
		public static final byte[] POSTTRADING = "5".getBytes();
		public static final byte[] CLOSING_OR_CLOSING_AUCTION = "4".getBytes();
		public static boolean isValid(byte[] val) {
			if (Utils.equals( CONTINUOUS_TRADING, val)) return true;
			if (Utils.equals( OPENING_OR_OPENING_AUCTION, val)) return true;
			if (Utils.equals( PRETRADING, val)) return true;
			if (Utils.equals( QUIESCENT, val)) return true;
			if (Utils.equals( INTRADAY_AUCTION, val)) return true;
			if (Utils.equals( POSTTRADING, val)) return true;
			if (Utils.equals( CLOSING_OR_CLOSING_AUCTION, val)) return true;
			return false;
		}
	}

	public static class AllocType {
		public static final long COMPLETE_GROUP = 13;
		public static final long REVERSAL_PENDING = 14;
		public static final long ACCEPT_PENDING = 11;
		public static final long INCOMPLETE_GROUP = 12;
		public static final long SELLSIDE_CALCULATED_USING_PRELIMINARY_INCLUDES_MISCFEES_AND_NETM = 3;
		public static final long PRELIMINARY_WITHOUT_MISCFEES_AND_NETMONEY = 2;
		public static final long CALCULATED_INCLUDES_MISCFEES_AND_NETMONEY = 1;
		public static final long REJECT = 10;
		public static final long WAREHOUSE_INSTRUCTION = 7;
		public static final long BUYSIDE_READYTOBOOK__COMBINED_SET_OF_ORDERS_REPLACED = 6;
		public static final long READYTOBOOK__SINGLE_ORDER = 5;
		public static final long SELLSIDE_CALCULATED_WITHOUT_PRELIMINARY_SENT_UNSOLICITED_BY_SELL = 4;
		public static final long ACCEPT = 9;
		public static final long REQUEST_TO_INTERMEDIARY = 8;
		public static boolean isValid(long val) {
			if (( COMPLETE_GROUP==val)) return true;
			if (( REVERSAL_PENDING==val)) return true;
			if (( ACCEPT_PENDING==val)) return true;
			if (( INCOMPLETE_GROUP==val)) return true;
			if (( SELLSIDE_CALCULATED_USING_PRELIMINARY_INCLUDES_MISCFEES_AND_NETM==val)) return true;
			if (( PRELIMINARY_WITHOUT_MISCFEES_AND_NETMONEY==val)) return true;
			if (( CALCULATED_INCLUDES_MISCFEES_AND_NETMONEY==val)) return true;
			if (( REJECT==val)) return true;
			if (( WAREHOUSE_INSTRUCTION==val)) return true;
			if (( BUYSIDE_READYTOBOOK__COMBINED_SET_OF_ORDERS_REPLACED==val)) return true;
			if (( READYTOBOOK__SINGLE_ORDER==val)) return true;
			if (( SELLSIDE_CALCULATED_WITHOUT_PRELIMINARY_SENT_UNSOLICITED_BY_SELL==val)) return true;
			if (( ACCEPT==val)) return true;
			if (( REQUEST_TO_INTERMEDIARY==val)) return true;
			return false;
		}
	}

	public static class ClearingFeeIndicator {
		public static final byte[] EQUITY_MEMBER_AND_CLEARING_MEMBER = "E".getBytes();
		public static final byte[] FULL_AND_ASSOCIATE_MEMBER_TRADING_FOR_OWN_ACCOUNT_AND_AS_FLOOR_B = "F".getBytes();
		public static final byte[] CBOE_MEMBER = "B".getBytes();
		public static final byte[] NONMEMBER_AND_CUSTOMER = "C".getBytes();
		public static final byte[] LESSEE_106F_EMPLOYEES = "L".getBytes();
		public static final byte[] ALL_OTHER_OWNERSHIP_TYPES = "M".getBytes();
		public static final byte[] I106H_AND_106J_FIRMS = "H".getBytes();
		public static final byte[] GIM_IDEM_AND_COM_MEMBERSHIP_INTEREST_HOLDERS = "I".getBytes();
		public static final byte[] I3RD_YEAR_DELEGATE_TRADING_FOR_OWN_ACCOUNT = "3".getBytes();
		public static final byte[] I2ND_YEAR_DELEGATE_TRADING_FOR_OWN_ACCOUNT = "2".getBytes();
		public static final byte[] I1ST_YEAR_DELEGATE_TRADING_FOR_OWN_ACCOUNT = "1".getBytes();
		public static final byte[] I5TH_YEAR_DELEGATE_TRADING_FOR_OWN_ACCOUNT = "5".getBytes();
		public static final byte[] I4TH_YEAR_DELEGATE_TRADING_FOR_OWN_ACCOUNT = "4".getBytes();
		public static final byte[] I6TH_YEAR_DELEGATE_TRADING_FOR_OWN_ACCOUNT = "9".getBytes();
		public static boolean isValid(byte[] val) {
			if (Utils.equals( EQUITY_MEMBER_AND_CLEARING_MEMBER, val)) return true;
			if (Utils.equals( FULL_AND_ASSOCIATE_MEMBER_TRADING_FOR_OWN_ACCOUNT_AND_AS_FLOOR_B, val)) return true;
			if (Utils.equals( CBOE_MEMBER, val)) return true;
			if (Utils.equals( NONMEMBER_AND_CUSTOMER, val)) return true;
			if (Utils.equals( LESSEE_106F_EMPLOYEES, val)) return true;
			if (Utils.equals( ALL_OTHER_OWNERSHIP_TYPES, val)) return true;
			if (Utils.equals( I106H_AND_106J_FIRMS, val)) return true;
			if (Utils.equals( GIM_IDEM_AND_COM_MEMBERSHIP_INTEREST_HOLDERS, val)) return true;
			if (Utils.equals( I3RD_YEAR_DELEGATE_TRADING_FOR_OWN_ACCOUNT, val)) return true;
			if (Utils.equals( I2ND_YEAR_DELEGATE_TRADING_FOR_OWN_ACCOUNT, val)) return true;
			if (Utils.equals( I1ST_YEAR_DELEGATE_TRADING_FOR_OWN_ACCOUNT, val)) return true;
			if (Utils.equals( I5TH_YEAR_DELEGATE_TRADING_FOR_OWN_ACCOUNT, val)) return true;
			if (Utils.equals( I4TH_YEAR_DELEGATE_TRADING_FOR_OWN_ACCOUNT, val)) return true;
			if (Utils.equals( I6TH_YEAR_DELEGATE_TRADING_FOR_OWN_ACCOUNT, val)) return true;
			return false;
		}
	}

	public static class WorkingIndicator {
		public static final boolean ORDER_HAS_BEEN_ACCEPTED_BUT_NOT_YET_IN_A_WORKING_STATE = false;
		public static final boolean ORDER_IS_CURRENTLY_BEING_WORKED = true;
		public static boolean isValid(boolean val) {
			if (( ORDER_HAS_BEEN_ACCEPTED_BUT_NOT_YET_IN_A_WORKING_STATE==val)) return true;
			if (( ORDER_IS_CURRENTLY_BEING_WORKED==val)) return true;
			return false;
		}
	}

	public static class PriorityIndicator {
		public static final long LOST_PRIORITY_AS_RESULT_OF_ORDER_CHANGE = 1;
		public static final long PRIORITY_UNCHANGED = 0;
		public static boolean isValid(long val) {
			if (( LOST_PRIORITY_AS_RESULT_OF_ORDER_CHANGE==val)) return true;
			if (( PRIORITY_UNCHANGED==val)) return true;
			return false;
		}
	}

	public static class LegalConfirm {
		public static final boolean DOES_NOT_CONSITUTE_A_LEGAL_CONFIRM = false;
		public static final boolean LEGAL_CONFIRM = true;
		public static boolean isValid(boolean val) {
			if (( DOES_NOT_CONSITUTE_A_LEGAL_CONFIRM==val)) return true;
			if (( LEGAL_CONFIRM==val)) return true;
			return false;
		}
	}

	public static class SecDefStatus {
		public static final long UNAUTHORIZED_REQUEST = 3;
		public static final long REJECTED = 2;
		public static final long APPROVED_ACCEPTED = 1;
		public static final long PENDING_APPROVAL = 0;
		public static final long INVALID_DEFINITION_REQUEST = 4;
		public static boolean isValid(long val) {
			if (( UNAUTHORIZED_REQUEST==val)) return true;
			if (( REJECTED==val)) return true;
			if (( APPROVED_ACCEPTED==val)) return true;
			if (( PENDING_APPROVAL==val)) return true;
			if (( INVALID_DEFINITION_REQUEST==val)) return true;
			return false;
		}
	}

	public static class QuoteRequestRejectReason {
		public static final long QUOTE_REQUEST_EXCEEDS_LIMIT = 3;
		public static final long EXCHANGE_SECURITY_CLOSED = 2;
		public static final long PASS = 10;
		public static final long UNKNOWN_SYMBOL_SECURITY = 1;
		public static final long NO_MATCH_FOR_INQUIRY = 7;
		public static final long NOT_AUTHORIZED_TO_REQUEST_QUOTE = 6;
		public static final long INVALID_PRICE = 5;
		public static final long TOO_LATE_TO_ENTER = 4;
		public static final long NO_INVENTORY = 9;
		public static final long NO_MARKET_FOR_INSTRUMENT = 8;
		public static final long OTHER = 99;
		public static final long INSUFFICIENT_CREDIT = 11;
		public static boolean isValid(long val) {
			if (( QUOTE_REQUEST_EXCEEDS_LIMIT==val)) return true;
			if (( EXCHANGE_SECURITY_CLOSED==val)) return true;
			if (( PASS==val)) return true;
			if (( UNKNOWN_SYMBOL_SECURITY==val)) return true;
			if (( NO_MATCH_FOR_INQUIRY==val)) return true;
			if (( NOT_AUTHORIZED_TO_REQUEST_QUOTE==val)) return true;
			if (( INVALID_PRICE==val)) return true;
			if (( TOO_LATE_TO_ENTER==val)) return true;
			if (( NO_INVENTORY==val)) return true;
			if (( NO_MARKET_FOR_INSTRUMENT==val)) return true;
			if (( OTHER==val)) return true;
			if (( INSUFFICIENT_CREDIT==val)) return true;
			return false;
		}
	}

	public static class AcctIDSource {
		public static final long TFM_GSPTA = 3;
		public static final long SID_CODE = 2;
		public static final long BIC = 1;
		public static final long DTCC_CODE = 5;
		public static final long OMGEO_ALERT_ID = 4;
		public static final long OTHER_CUSTOM_OR_PROPRIETARY = 99;
		public static boolean isValid(long val) {
			if (( TFM_GSPTA==val)) return true;
			if (( SID_CODE==val)) return true;
			if (( BIC==val)) return true;
			if (( DTCC_CODE==val)) return true;
			if (( OMGEO_ALERT_ID==val)) return true;
			if (( OTHER_CUSTOM_OR_PROPRIETARY==val)) return true;
			return false;
		}
	}

	public static class ConfirmStatus {
		public static final long MISSING_SETTLEMENT_INSTRUCTIONS = 3;
		public static final long MISMATCHED_ACCOUNT = 2;
		public static final long RECEIVED = 1;
		public static final long REQUEST_REJECTED = 5;
		public static final long CONFIRMED = 4;
		public static boolean isValid(long val) {
			if (( MISSING_SETTLEMENT_INSTRUCTIONS==val)) return true;
			if (( MISMATCHED_ACCOUNT==val)) return true;
			if (( RECEIVED==val)) return true;
			if (( REQUEST_REJECTED==val)) return true;
			if (( CONFIRMED==val)) return true;
			return false;
		}
	}

	public static class ConfirmTransType {
		public static final long CANCEL = 2;
		public static final long REPLACE = 1;
		public static final long NEW = 0;
		public static boolean isValid(long val) {
			if (( CANCEL==val)) return true;
			if (( REPLACE==val)) return true;
			if (( NEW==val)) return true;
			return false;
		}
	}

	public static class DeliveryForm {
		public static final long BEARER = 2;
		public static final long BOOK_ENTRY_DEFAULT = 1;
		public static boolean isValid(long val) {
			if (( BEARER==val)) return true;
			if (( BOOK_ENTRY_DEFAULT==val)) return true;
			return false;
		}
	}

	public static class LegSwapType {
		public static final long MODIFIED_DURATION = 2;
		public static final long PAR_FOR_PAR = 1;
		public static final long PROCEEDS = 5;
		public static final long RISK = 4;
		public static boolean isValid(long val) {
			if (( MODIFIED_DURATION==val)) return true;
			if (( PAR_FOR_PAR==val)) return true;
			if (( PROCEEDS==val)) return true;
			if (( RISK==val)) return true;
			return false;
		}
	}

	public static class QuotePriceType {
		public static final long FIXED_AMOUNT_ABSOLUTE_VALUE = 3;
		public static final long PER_SHARE_EG_CENTS_PER_SHARE = 2;
		public static final long YIELD = 10;
		public static final long PERCENT_PERCENT_OF_PAR = 1;
		public static final long TED_PRICE = 7;
		public static final long SPREAD__BASIS_POINTS_RELATIVE_TO_BENCHMARK = 6;
		public static final long PREMIUM__PERCENTAGE_POINTS_OVER_PAR = 5;
		public static final long DISCOUNT__PERCENTAGE_POINTS_BELOW_PAR = 4;
		public static final long YIELD_SPREAD_SWAPS = 9;
		public static final long TED_YIELD = 8;
		public static boolean isValid(long val) {
			if (( FIXED_AMOUNT_ABSOLUTE_VALUE==val)) return true;
			if (( PER_SHARE_EG_CENTS_PER_SHARE==val)) return true;
			if (( YIELD==val)) return true;
			if (( PERCENT_PERCENT_OF_PAR==val)) return true;
			if (( TED_PRICE==val)) return true;
			if (( SPREAD__BASIS_POINTS_RELATIVE_TO_BENCHMARK==val)) return true;
			if (( PREMIUM__PERCENTAGE_POINTS_OVER_PAR==val)) return true;
			if (( DISCOUNT__PERCENTAGE_POINTS_BELOW_PAR==val)) return true;
			if (( YIELD_SPREAD_SWAPS==val)) return true;
			if (( TED_YIELD==val)) return true;
			return false;
		}
	}

	public static class QuoteRespType {
		public static final long EXPIRED = 3;
		public static final long COUNTER = 2;
		public static final long HITLIFT = 1;
		public static final long END_TRADE = 7;
		public static final long PASS = 6;
		public static final long DONE_AWAY = 5;
		public static final long COVER = 4;
		public static final long TIMED_OUT = 8;
		public static boolean isValid(long val) {
			if (( EXPIRED==val)) return true;
			if (( COUNTER==val)) return true;
			if (( HITLIFT==val)) return true;
			if (( END_TRADE==val)) return true;
			if (( PASS==val)) return true;
			if (( DONE_AWAY==val)) return true;
			if (( COVER==val)) return true;
			if (( TIMED_OUT==val)) return true;
			return false;
		}
	}

	public static class PosType {
		public static final byte[] NET_DELTA_QTY = "DLT".getBytes();
		public static final byte[] INTEGRAL_SPLIT = "SPL".getBytes();
		public static final byte[] DELIVERY_QTY = "DLV".getBytes();
		public static final byte[] ASOF_TRADE_QTY = "ASF".getBytes();
		public static final byte[] CREDIT_EVENT_ADJUSTMENT = "CEA".getBytes();
		public static final byte[] TRANSACTION_QUANTITY = "TQ".getBytes();
		public static final byte[] TRANSFER_TRADE_QTY = "TRF".getBytes();
		public static final byte[] CROSS_MARGIN_QTY = "XM".getBytes();
		public static final byte[] CORPORATE_ACTION_ADJUSTMENT = "CAA".getBytes();
		public static final byte[] ELECTRONIC_TRADE_QTY = "ETR".getBytes();
		public static final byte[] DELIVERY_NOTICE_QTY = "DN".getBytes();
		public static final byte[] PIT_TRADE_QTY = "PIT".getBytes();
		public static final byte[] PRIVATELY_NEGOTIATED_TRADE_QTY_NONREGULATED = "PNTN".getBytes();
		public static final byte[] ALLOCATION_TRADE_QTY = "ALC".getBytes();
		public static final byte[] ENDOFDAY_QTY = "FIN".getBytes();
		public static final byte[] TRANSACTION_FROM_ASSIGNMENT = "TA".getBytes();
		public static final byte[] OPTION_ASSIGNMENT = "AS".getBytes();
		public static final byte[] STARTOFDAY_QTY = "SOD".getBytes();
		public static final byte[] OPTION_EXERCISE_QTY = "EX".getBytes();
		public static final byte[] RECEIVE_QUANTITY = "RCV".getBytes();
		public static final byte[] EXCHANGE_FOR_PHYSICAL_QTY = "EP".getBytes();
		public static final byte[] TOTAL_TRANSACTION_QTY = "TOT".getBytes();
		public static final byte[] SUCCESSION_EVENT_ADJUSTMENT = "SEA".getBytes();
		public static final byte[] INTERSPREAD_QTY = "IES".getBytes();
		public static final byte[] TRANSACTION_FROM_EXERCISE = "TX".getBytes();
		public static final byte[] INTRASPREAD_QTY = "IAS".getBytes();
		public static final byte[] ADJUSTMENT_QTY = "PA".getBytes();
		public static boolean isValid(byte[] val) {
			if (Utils.equals( NET_DELTA_QTY, val)) return true;
			if (Utils.equals( INTEGRAL_SPLIT, val)) return true;
			if (Utils.equals( DELIVERY_QTY, val)) return true;
			if (Utils.equals( ASOF_TRADE_QTY, val)) return true;
			if (Utils.equals( CREDIT_EVENT_ADJUSTMENT, val)) return true;
			if (Utils.equals( TRANSACTION_QUANTITY, val)) return true;
			if (Utils.equals( TRANSFER_TRADE_QTY, val)) return true;
			if (Utils.equals( CROSS_MARGIN_QTY, val)) return true;
			if (Utils.equals( CORPORATE_ACTION_ADJUSTMENT, val)) return true;
			if (Utils.equals( ELECTRONIC_TRADE_QTY, val)) return true;
			if (Utils.equals( DELIVERY_NOTICE_QTY, val)) return true;
			if (Utils.equals( PIT_TRADE_QTY, val)) return true;
			if (Utils.equals( PRIVATELY_NEGOTIATED_TRADE_QTY_NONREGULATED, val)) return true;
			if (Utils.equals( ALLOCATION_TRADE_QTY, val)) return true;
			if (Utils.equals( ENDOFDAY_QTY, val)) return true;
			if (Utils.equals( TRANSACTION_FROM_ASSIGNMENT, val)) return true;
			if (Utils.equals( OPTION_ASSIGNMENT, val)) return true;
			if (Utils.equals( STARTOFDAY_QTY, val)) return true;
			if (Utils.equals( OPTION_EXERCISE_QTY, val)) return true;
			if (Utils.equals( RECEIVE_QUANTITY, val)) return true;
			if (Utils.equals( EXCHANGE_FOR_PHYSICAL_QTY, val)) return true;
			if (Utils.equals( TOTAL_TRANSACTION_QTY, val)) return true;
			if (Utils.equals( SUCCESSION_EVENT_ADJUSTMENT, val)) return true;
			if (Utils.equals( INTERSPREAD_QTY, val)) return true;
			if (Utils.equals( TRANSACTION_FROM_EXERCISE, val)) return true;
			if (Utils.equals( INTRASPREAD_QTY, val)) return true;
			if (Utils.equals( ADJUSTMENT_QTY, val)) return true;
			return false;
		}
	}

	public static class PosQtyStatus {
		public static final long REJECTED = 2;
		public static final long ACCEPTED = 1;
		public static final long SUBMITTED = 0;
		public static boolean isValid(long val) {
			if (( REJECTED==val)) return true;
			if (( ACCEPTED==val)) return true;
			if (( SUBMITTED==val)) return true;
			return false;
		}
	}

	public static class PosAmtType {
		public static final byte[] INCREMENTAL_MARKTOMARKET_AMOUNT = "IMTM".getBytes();
		public static final byte[] INCREMENTAL_ACCRUED_COUPON = "IACPN".getBytes();
		public static final byte[] COMPENSATION_AMOUNT = "DLV".getBytes();
		public static final byte[] COLLATERALIZED_MARK_TO_MARKET = "CMTM".getBytes();
		public static final byte[] TOTAL_COLLATERALIZED_AMOUNT = "COLAT".getBytes();
		public static final byte[] COUPON_AMOUNT = "CPN".getBytes();
		public static final byte[] INCREMENTAL_COLLATERALIZED_MARK_TO_MARKET = "ICMTM".getBytes();
		public static final byte[] PREMIUM_AMOUNT = "PREM".getBytes();
		public static final byte[] FINAL_MARKTOMARKET_AMOUNT = "FMTM".getBytes();
		public static final byte[] CASH_AMOUNT_CORPORATE_EVENT = "CASH".getBytes();
		public static final byte[] CASH_RESIDUAL_AMOUNT = "CRES".getBytes();
		public static final byte[] ACCRUED_COUPON_AMOUNT = "ACPN".getBytes();
		public static final byte[] TOTAL_BANKED_AMOUNT = "BANK".getBytes();
		public static final byte[] VALUE_ADJUSTED_AMOUNT = "VADJ".getBytes();
		public static final byte[] TRADE_VARIATION_AMOUNT = "TVAR".getBytes();
		public static final byte[] SETTLEMENT_VALUE = "SETL".getBytes();
		public static final byte[] STARTOFDAY_MARKTOMARKET_AMOUNT = "SMTM".getBytes();
		public static final byte[] INITIAL_TRADE_COUPON_AMOUNT = "ICPN".getBytes();
		public static boolean isValid(byte[] val) {
			if (Utils.equals( INCREMENTAL_MARKTOMARKET_AMOUNT, val)) return true;
			if (Utils.equals( INCREMENTAL_ACCRUED_COUPON, val)) return true;
			if (Utils.equals( COMPENSATION_AMOUNT, val)) return true;
			if (Utils.equals( COLLATERALIZED_MARK_TO_MARKET, val)) return true;
			if (Utils.equals( TOTAL_COLLATERALIZED_AMOUNT, val)) return true;
			if (Utils.equals( COUPON_AMOUNT, val)) return true;
			if (Utils.equals( INCREMENTAL_COLLATERALIZED_MARK_TO_MARKET, val)) return true;
			if (Utils.equals( PREMIUM_AMOUNT, val)) return true;
			if (Utils.equals( FINAL_MARKTOMARKET_AMOUNT, val)) return true;
			if (Utils.equals( CASH_AMOUNT_CORPORATE_EVENT, val)) return true;
			if (Utils.equals( CASH_RESIDUAL_AMOUNT, val)) return true;
			if (Utils.equals( ACCRUED_COUPON_AMOUNT, val)) return true;
			if (Utils.equals( TOTAL_BANKED_AMOUNT, val)) return true;
			if (Utils.equals( VALUE_ADJUSTED_AMOUNT, val)) return true;
			if (Utils.equals( TRADE_VARIATION_AMOUNT, val)) return true;
			if (Utils.equals( SETTLEMENT_VALUE, val)) return true;
			if (Utils.equals( STARTOFDAY_MARKTOMARKET_AMOUNT, val)) return true;
			if (Utils.equals( INITIAL_TRADE_COUPON_AMOUNT, val)) return true;
			return false;
		}
	}

	public static class PosTransType {
		public static final long POSITION_ADJUSTMENT = 3;
		public static final long DO_NOT_EXERCISE = 2;
		public static final long EXERCISE = 1;
		public static final long LARGE_TRADER_SUBMISSION = 6;
		public static final long PLEDGE = 5;
		public static final long POSITION_CHANGE_SUBMISSIONMARGIN_DISPOSITION = 4;
		public static boolean isValid(long val) {
			if (( POSITION_ADJUSTMENT==val)) return true;
			if (( DO_NOT_EXERCISE==val)) return true;
			if (( EXERCISE==val)) return true;
			if (( LARGE_TRADER_SUBMISSION==val)) return true;
			if (( PLEDGE==val)) return true;
			if (( POSITION_CHANGE_SUBMISSIONMARGIN_DISPOSITION==val)) return true;
			return false;
		}
	}

	public static class PosMaintAction {
		public static final long CANCEL__USED_TO_REMOVE_THE_OVERALL_TRANSACTION_OR_SPECIFIC_ADD_M = 3;
		public static final long REPLACE__USED_TO_OVERRIDE_THE_OVERALL_TRANSACTION_QUANTITY_OR_SP = 2;
		public static final long NEW__USED_TO_INCREMENT_THE_OVERALL_TRANSACTION_QUANTITY = 1;
		public static final long REVERSE__USED_TO_COMPLETELLY_BACKOUT_THE_TRANSACTION_SUCH_THAT_T = 4;
		public static boolean isValid(long val) {
			if (( CANCEL__USED_TO_REMOVE_THE_OVERALL_TRANSACTION_OR_SPECIFIC_ADD_M==val)) return true;
			if (( REPLACE__USED_TO_OVERRIDE_THE_OVERALL_TRANSACTION_QUANTITY_OR_SP==val)) return true;
			if (( NEW__USED_TO_INCREMENT_THE_OVERALL_TRANSACTION_QUANTITY==val)) return true;
			if (( REVERSE__USED_TO_COMPLETELLY_BACKOUT_THE_TRANSACTION_SUCH_THAT_T==val)) return true;
			return false;
		}
	}

	public static class SettlSessID {
		public static final byte[] ELECTRONIC_TRADING_HOURS = "ETH".getBytes();
		public static final byte[] INTRADAY = "ITD".getBytes();
		public static final byte[] REGULAR_TRADING_HOURS = "RTH".getBytes();
		public static final byte[] END_OF_DAY = "EOD".getBytes();
		public static boolean isValid(byte[] val) {
			if (Utils.equals( ELECTRONIC_TRADING_HOURS, val)) return true;
			if (Utils.equals( INTRADAY, val)) return true;
			if (Utils.equals( REGULAR_TRADING_HOURS, val)) return true;
			if (Utils.equals( END_OF_DAY, val)) return true;
			return false;
		}
	}

	public static class AdjustmentType {
		public static final long FINAL = 3;
		public static final long DELTA_MINUS = 2;
		public static final long DELTA_PLUS = 1;
		public static final long PROCESS_REQUEST_AS_MARGIN_DISPOSITION = 0;
		public static boolean isValid(long val) {
			if (( FINAL==val)) return true;
			if (( DELTA_MINUS==val)) return true;
			if (( DELTA_PLUS==val)) return true;
			if (( PROCESS_REQUEST_AS_MARGIN_DISPOSITION==val)) return true;
			return false;
		}
	}

	public static class PosMaintStatus {
		public static final long COMPLETED = 3;
		public static final long REJECTED = 2;
		public static final long ACCEPTED_WITH_WARNINGS = 1;
		public static final long ACCEPTED = 0;
		public static final long COMPLETED_WITH_WARNINGS = 4;
		public static boolean isValid(long val) {
			if (( COMPLETED==val)) return true;
			if (( REJECTED==val)) return true;
			if (( ACCEPTED_WITH_WARNINGS==val)) return true;
			if (( ACCEPTED==val)) return true;
			if (( COMPLETED_WITH_WARNINGS==val)) return true;
			return false;
		}
	}

	public static class PosMaintResult {
		public static final long REJECTED = 1;
		public static final long SUCCESSFUL_COMPLETION__NO_WARNINGS_OR_ERRORS = 0;
		public static final long OTHER = 99;
		public static boolean isValid(long val) {
			if (( REJECTED==val)) return true;
			if (( SUCCESSFUL_COMPLETION__NO_WARNINGS_OR_ERRORS==val)) return true;
			if (( OTHER==val)) return true;
			return false;
		}
	}

	public static class PosReqType {
		public static final long ASSIGNMENTS = 3;
		public static final long EXERCISES = 2;
		public static final long TRADES = 1;
		public static final long POSITIONS = 0;
		public static final long DELTA_POSITIONS = 6;
		public static final long BACKOUT_MESSAGE = 5;
		public static final long SETTLEMENT_ACTIVITY = 4;
		public static boolean isValid(long val) {
			if (( ASSIGNMENTS==val)) return true;
			if (( EXERCISES==val)) return true;
			if (( TRADES==val)) return true;
			if (( POSITIONS==val)) return true;
			if (( DELTA_POSITIONS==val)) return true;
			if (( BACKOUT_MESSAGE==val)) return true;
			if (( SETTLEMENT_ACTIVITY==val)) return true;
			return false;
		}
	}

	public static class ResponseTransportType {
		public static final long OUT_OF_BAND__PREARRANGED_OUTOFBAND_DELIVERY_MECHANIZM_IE_FTP_HTT = 1;
		public static final long INBAND__TRANSPORT_THE_REQUEST_WAS_SENT_OVER_DEFAULT = 0;
		public static boolean isValid(long val) {
			if (( OUT_OF_BAND__PREARRANGED_OUTOFBAND_DELIVERY_MECHANIZM_IE_FTP_HTT==val)) return true;
			if (( INBAND__TRANSPORT_THE_REQUEST_WAS_SENT_OVER_DEFAULT==val)) return true;
			return false;
		}
	}

	public static class PosReqResult {
		public static final long NOT_AUTHORIZED_TO_REQUEST_POSITIONS = 3;
		public static final long NO_POSITIONS_FOUND_THAT_MATCH_CRITERIA = 2;
		public static final long INVALID_OR_UNSUPPORTED_REQUEST = 1;
		public static final long VALID_REQUEST = 0;
		public static final long REQUEST_FOR_POSITION_NOT_SUPPORTED = 4;
		public static final long OTHER_USE_TEXT_58_IN_CONJUNCTION_WITH_THIS_CODE_FOR_AN_EXPLAINAT = 99;
		public static boolean isValid(long val) {
			if (( NOT_AUTHORIZED_TO_REQUEST_POSITIONS==val)) return true;
			if (( NO_POSITIONS_FOUND_THAT_MATCH_CRITERIA==val)) return true;
			if (( INVALID_OR_UNSUPPORTED_REQUEST==val)) return true;
			if (( VALID_REQUEST==val)) return true;
			if (( REQUEST_FOR_POSITION_NOT_SUPPORTED==val)) return true;
			if (( OTHER_USE_TEXT_58_IN_CONJUNCTION_WITH_THIS_CODE_FOR_AN_EXPLAINAT==val)) return true;
			return false;
		}
	}

	public static class PosReqStatus {
		public static final long REJECTED = 2;
		public static final long COMPLETED_WITH_WARNINGS = 1;
		public static final long COMPLETED = 0;
		public static boolean isValid(long val) {
			if (( REJECTED==val)) return true;
			if (( COMPLETED_WITH_WARNINGS==val)) return true;
			if (( COMPLETED==val)) return true;
			return false;
		}
	}

	public static class SettlPriceType {
		public static final long THEORETICAL = 2;
		public static final long FINAL = 1;
		public static boolean isValid(long val) {
			if (( THEORETICAL==val)) return true;
			if (( FINAL==val)) return true;
			return false;
		}
	}

	public static class AssignmentMethod {
		public static final byte PRORATA = 'P';
		public static final byte RANDOM = 'R';
		public static boolean isValid(byte val) {
			if (( PRORATA==val)) return true;
			if (( RANDOM==val)) return true;
			return false;
		}
	}

	public static class ExerciseMethod {
		public static final byte AUTOMATIC = 'A';
		public static final byte MANUAL = 'M';
		public static boolean isValid(byte val) {
			if (( AUTOMATIC==val)) return true;
			if (( MANUAL==val)) return true;
			return false;
		}
	}

	public static class TradeRequestResult {
		public static final long INVALID_PARTIES = 3;
		public static final long INVALID_TYPE_OF_TRADE_REQUESTED = 2;
		public static final long INVALID_OR_UNKNOWN_INSTRUMENT = 1;
		public static final long SUCCESSFUL_DEFAULT = 0;
		public static final long INVALID_DESTINATION_REQUESTED = 5;
		public static final long INVALID_TRANSPORT_TYPE_REQUESTED = 4;
		public static final long NOT_AUTHORIZED = 9;
		public static final long TRADEREQUESTTYPE_NOT_SUPPORTED = 8;
		public static final long OTHER = 99;
		public static boolean isValid(long val) {
			if (( INVALID_PARTIES==val)) return true;
			if (( INVALID_TYPE_OF_TRADE_REQUESTED==val)) return true;
			if (( INVALID_OR_UNKNOWN_INSTRUMENT==val)) return true;
			if (( SUCCESSFUL_DEFAULT==val)) return true;
			if (( INVALID_DESTINATION_REQUESTED==val)) return true;
			if (( INVALID_TRANSPORT_TYPE_REQUESTED==val)) return true;
			if (( NOT_AUTHORIZED==val)) return true;
			if (( TRADEREQUESTTYPE_NOT_SUPPORTED==val)) return true;
			if (( OTHER==val)) return true;
			return false;
		}
	}

	public static class TradeRequestStatus {
		public static final long REJECTED = 2;
		public static final long COMPLETED = 1;
		public static final long ACCEPTED = 0;
		public static boolean isValid(long val) {
			if (( REJECTED==val)) return true;
			if (( COMPLETED==val)) return true;
			if (( ACCEPTED==val)) return true;
			return false;
		}
	}

	public static class TradeReportRejectReason {
		public static final long UNAUTHORIZED_TO_REPORT_TRADES = 3;
		public static final long UNKNOWN_INSTRUMENT = 2;
		public static final long INVALID_PARTY_ONFORMATION = 1;
		public static final long SUCCESSFUL_DEFAULT = 0;
		public static final long INVALID_TRADE_TYPE = 4;
		public static final long OTHER = 99;
		public static boolean isValid(long val) {
			if (( UNAUTHORIZED_TO_REPORT_TRADES==val)) return true;
			if (( UNKNOWN_INSTRUMENT==val)) return true;
			if (( INVALID_PARTY_ONFORMATION==val)) return true;
			if (( SUCCESSFUL_DEFAULT==val)) return true;
			if (( INVALID_TRADE_TYPE==val)) return true;
			if (( OTHER==val)) return true;
			return false;
		}
	}

	public static class SideMultiLegReportingType {
		public static final long MULTILEG_SECURITY = 3;
		public static final long INDIVIDUAL_LEG_OF_A_MULTILEG_SECURITY = 2;
		public static final long SINGLE_SECURITY_DEFAULT_IF_NOT_SPECIFIED = 1;
		public static boolean isValid(long val) {
			if (( MULTILEG_SECURITY==val)) return true;
			if (( INDIVIDUAL_LEG_OF_A_MULTILEG_SECURITY==val)) return true;
			if (( SINGLE_SECURITY_DEFAULT_IF_NOT_SPECIFIED==val)) return true;
			return false;
		}
	}

	public static class TrdRegTimestampType {
		public static final long TIME_OUT = 3;
		public static final long TIME_IN = 2;
		public static final long EXECUTION_TIME = 1;
		public static final long SUBMISSION_TO_CLEARING = 7;
		public static final long DESK_RECEIPT = 6;
		public static final long BROKER_EXECUTION = 5;
		public static final long BROKER_RECEIPT = 4;
		public static boolean isValid(long val) {
			if (( TIME_OUT==val)) return true;
			if (( TIME_IN==val)) return true;
			if (( EXECUTION_TIME==val)) return true;
			if (( SUBMISSION_TO_CLEARING==val)) return true;
			if (( DESK_RECEIPT==val)) return true;
			if (( BROKER_EXECUTION==val)) return true;
			if (( BROKER_RECEIPT==val)) return true;
			return false;
		}
	}

	public static class ConfirmType {
		public static final long CONFIRMATION_REQUEST_REJECTED_REASON_CAN_BE_STATED_IN_TEXT_58_FI = 3;
		public static final long CONFIRMATION = 2;
		public static final long STATUS = 1;
		public static boolean isValid(long val) {
			if (( CONFIRMATION_REQUEST_REJECTED_REASON_CAN_BE_STATED_IN_TEXT_58_FI==val)) return true;
			if (( CONFIRMATION==val)) return true;
			if (( STATUS==val)) return true;
			return false;
		}
	}

	public static class ConfirmRejReason {
		public static final long MISSING_SETTLEMENT_INSTRUCTIONS = 2;
		public static final long MISMATCHED_ACCOUNT = 1;
		public static final long OTHER = 99;
		public static boolean isValid(long val) {
			if (( MISSING_SETTLEMENT_INSTRUCTIONS==val)) return true;
			if (( MISMATCHED_ACCOUNT==val)) return true;
			if (( OTHER==val)) return true;
			return false;
		}
	}

	public static class BookingType {
		public static final long TOTAL_RETURN_SWAP = 2;
		public static final long CFD_CONTRACT_FOR_DIFFERENCE = 1;
		public static final long REGULAR_BOOKING = 0;
		public static boolean isValid(long val) {
			if (( TOTAL_RETURN_SWAP==val)) return true;
			if (( CFD_CONTRACT_FOR_DIFFERENCE==val)) return true;
			if (( REGULAR_BOOKING==val)) return true;
			return false;
		}
	}

	public static class AllocSettlInstType {
		public static final long SSI_DB_IDS_PROVIDED = 3;
		public static final long FULL_DETAILS_PROVIDED = 2;
		public static final long DERIVE_FROM_PARAMETERS_PROVIDED = 1;
		public static final long USE_DEFAULT_INSTRUCTIONS = 0;
		public static final long PHONE_FOR_INSTRUCTIONS = 4;
		public static boolean isValid(long val) {
			if (( SSI_DB_IDS_PROVIDED==val)) return true;
			if (( FULL_DETAILS_PROVIDED==val)) return true;
			if (( DERIVE_FROM_PARAMETERS_PROVIDED==val)) return true;
			if (( USE_DEFAULT_INSTRUCTIONS==val)) return true;
			if (( PHONE_FOR_INSTRUCTIONS==val)) return true;
			return false;
		}
	}

	public static class DlvyInstType {
		public static final byte SECURITIES = 'S';
		public static final byte CASH = 'C';
		public static boolean isValid(byte val) {
			if (( SECURITIES==val)) return true;
			if (( CASH==val)) return true;
			return false;
		}
	}

	public static class TerminationType {
		public static final long FLEXIBLE = 3;
		public static final long TERM = 2;
		public static final long OVERNIGHT = 1;
		public static final long OPEN = 4;
		public static boolean isValid(long val) {
			if (( FLEXIBLE==val)) return true;
			if (( TERM==val)) return true;
			if (( OVERNIGHT==val)) return true;
			if (( OPEN==val)) return true;
			return false;
		}
	}

	public static class SettlInstReqRejCode {
		public static final long NO_MATCHING_SETTLEMENT_INSTRUCTIONS_FOUND = 2;
		public static final long UNKNOWN_ACCOUNT = 1;
		public static final long UNABLE_TO_PROCESS_REQUEST = 0;
		public static final long OTHER = 99;
		public static boolean isValid(long val) {
			if (( NO_MATCHING_SETTLEMENT_INSTRUCTIONS_FOUND==val)) return true;
			if (( UNKNOWN_ACCOUNT==val)) return true;
			if (( UNABLE_TO_PROCESS_REQUEST==val)) return true;
			if (( OTHER==val)) return true;
			return false;
		}
	}

	public static class AllocReportType {
		public static final long SELLSIDE_CALCULATED_USING_PRELIMINARY_INCLUDES_MISCFEES_AND_NETM = 3;
		public static final long PRELIMINARY_REQUEST_TO_INTERMEDIARY = 2;
		public static final long REJECT = 10;
		public static final long WAREHOUSE_RECAP = 5;
		public static final long SELLSIDE_CALCULATED_WITHOUT_PRELIMINARY_SENT_UNSOLICITED_BY_SELL = 4;
		public static final long ACCEPT = 9;
		public static final long REQUEST_TO_INTERMEDIARY = 8;
		public static final long REVERSE_PENDING = 14;
		public static final long ACCEPT_PENDING = 11;
		public static final long COMPLETE = 12;
		public static boolean isValid(long val) {
			if (( SELLSIDE_CALCULATED_USING_PRELIMINARY_INCLUDES_MISCFEES_AND_NETM==val)) return true;
			if (( PRELIMINARY_REQUEST_TO_INTERMEDIARY==val)) return true;
			if (( REJECT==val)) return true;
			if (( WAREHOUSE_RECAP==val)) return true;
			if (( SELLSIDE_CALCULATED_WITHOUT_PRELIMINARY_SENT_UNSOLICITED_BY_SELL==val)) return true;
			if (( ACCEPT==val)) return true;
			if (( REQUEST_TO_INTERMEDIARY==val)) return true;
			if (( REVERSE_PENDING==val)) return true;
			if (( ACCEPT_PENDING==val)) return true;
			if (( COMPLETE==val)) return true;
			return false;
		}
	}

	public static class AllocCancReplaceReason {
		public static final long CHANGE_IN_UNDERLYING_ORDER_DETAILS = 2;
		public static final long ORIGINAL_DETAILS_INCOMPLETEINCORRECT = 1;
		public static final long OTHER = 99;
		public static boolean isValid(long val) {
			if (( CHANGE_IN_UNDERLYING_ORDER_DETAILS==val)) return true;
			if (( ORIGINAL_DETAILS_INCOMPLETEINCORRECT==val)) return true;
			if (( OTHER==val)) return true;
			return false;
		}
	}

	public static class AllocAccountType {
		public static final long HOUSE_TRADER = 3;
		public static final long ACCOUNT_IS_CARRIED_ON_NONCUSTOMER_SIDE_OF_BOOKS = 2;
		public static final long ACCOUNT_IS_CARRIED_PN_CUSTOMER_SIDE_OF_BOOKS = 1;
		public static final long ACCOUNT_IS_HOUSE_TRADER_AND_IS_CROSS_MARGINED = 7;
		public static final long ACCOUNT_IS_CARRIED_ON_NONCUSTOMER_SIDE_OF_BOOKS_AND_IS_CROSS_MAR = 6;
		public static final long FLOOR_TRADER = 4;
		public static final long JOINT_BACK_OFFICE_ACCOUNT_JBO = 8;
		public static boolean isValid(long val) {
			if (( HOUSE_TRADER==val)) return true;
			if (( ACCOUNT_IS_CARRIED_ON_NONCUSTOMER_SIDE_OF_BOOKS==val)) return true;
			if (( ACCOUNT_IS_CARRIED_PN_CUSTOMER_SIDE_OF_BOOKS==val)) return true;
			if (( ACCOUNT_IS_HOUSE_TRADER_AND_IS_CROSS_MARGINED==val)) return true;
			if (( ACCOUNT_IS_CARRIED_ON_NONCUSTOMER_SIDE_OF_BOOKS_AND_IS_CROSS_MAR==val)) return true;
			if (( FLOOR_TRADER==val)) return true;
			if (( JOINT_BACK_OFFICE_ACCOUNT_JBO==val)) return true;
			return false;
		}
	}

	public static class PartySubIDType {
		public static final long FUND_ACCOUNT_NAME = 19;
		public static final long CSD_PARTICIPANT_MEMBER_CODE = 17;
		public static final long REGISTERED_ADDRESS = 18;
		public static final long CURRENCY_DELIVERY_IDENTIFIER = 33;
		public static final long CASH_ACCOUNT_NUMBER_FOR_SETTLEMENT_INSTRUCTIONS = 15;
		public static final long BIC = 16;
		public static final long REGULATORY_STATUS_FOR_CONFIRMATION_PURPOSES = 13;
		public static final long REGISTRATION_NAME_FOR_SETTLEMENT_INSTRUCTIONS = 14;
		public static final long REGISTRATION_NUMBER_FOR_SETTLEMENT_INSTRUCTIONS_AND_CONFIRMATION = 11;
		public static final long REGISTERED_ADDRESS_FOR_CONFIRMATION_PURPOSES = 12;
		public static final long FAX_NUMBER = 21;
		public static final long TELEX_NUMBER = 20;
		public static final long SECURITIES_ACCOUNT_NAME = 22;
		public static final long CASH_ACCOUNT_NAME = 23;
		public static final long DEPARTMENT = 24;
		public static final long LOCATION_DESK = 25;
		public static final long POSITION_ACCOUNT_TYPE = 26;
		public static final long SECURITY_LOCATE_ID = 27;
		public static final long MARKET_MAKER = 28;
		public static final long ELIGIBLE_COUNTERPARTY = 29;
		public static final long SYSTEM = 3;
		public static final long PERSON = 2;
		public static final long SECURITIES_ACCOUNT_NUMBER_FOR_SETTLEMENT_INSTRUCTIONS = 10;
		public static final long FIRM = 1;
		public static final long PROFESSIONAL_CLIENT = 30;
		public static final long PHONE_NUMBER = 7;
		public static final long POSTAL_ADDRESS = 6;
		public static final long EXECUTION_VENUE = 32;
		public static final long FULL_LEGAL_NAME_OF_FIRM = 5;
		public static final long LOCATION = 31;
		public static final long APPLICATION = 4;
		public static final long CONTACT_NAME = 9;
		public static final long EMAIL_ADDRESS = 8;
		public static boolean isValid(long val) {
			if (( FUND_ACCOUNT_NAME==val)) return true;
			if (( CSD_PARTICIPANT_MEMBER_CODE==val)) return true;
			if (( REGISTERED_ADDRESS==val)) return true;
			if (( CURRENCY_DELIVERY_IDENTIFIER==val)) return true;
			if (( CASH_ACCOUNT_NUMBER_FOR_SETTLEMENT_INSTRUCTIONS==val)) return true;
			if (( BIC==val)) return true;
			if (( REGULATORY_STATUS_FOR_CONFIRMATION_PURPOSES==val)) return true;
			if (( REGISTRATION_NAME_FOR_SETTLEMENT_INSTRUCTIONS==val)) return true;
			if (( REGISTRATION_NUMBER_FOR_SETTLEMENT_INSTRUCTIONS_AND_CONFIRMATION==val)) return true;
			if (( REGISTERED_ADDRESS_FOR_CONFIRMATION_PURPOSES==val)) return true;
			if (( FAX_NUMBER==val)) return true;
			if (( TELEX_NUMBER==val)) return true;
			if (( SECURITIES_ACCOUNT_NAME==val)) return true;
			if (( CASH_ACCOUNT_NAME==val)) return true;
			if (( DEPARTMENT==val)) return true;
			if (( LOCATION_DESK==val)) return true;
			if (( POSITION_ACCOUNT_TYPE==val)) return true;
			if (( SECURITY_LOCATE_ID==val)) return true;
			if (( MARKET_MAKER==val)) return true;
			if (( ELIGIBLE_COUNTERPARTY==val)) return true;
			if (( SYSTEM==val)) return true;
			if (( PERSON==val)) return true;
			if (( SECURITIES_ACCOUNT_NUMBER_FOR_SETTLEMENT_INSTRUCTIONS==val)) return true;
			if (( FIRM==val)) return true;
			if (( PROFESSIONAL_CLIENT==val)) return true;
			if (( PHONE_NUMBER==val)) return true;
			if (( POSTAL_ADDRESS==val)) return true;
			if (( EXECUTION_VENUE==val)) return true;
			if (( FULL_LEGAL_NAME_OF_FIRM==val)) return true;
			if (( LOCATION==val)) return true;
			if (( APPLICATION==val)) return true;
			if (( CONTACT_NAME==val)) return true;
			if (( EMAIL_ADDRESS==val)) return true;
			return false;
		}
	}

	public static class AllocIntermedReqType {
		public static final long PENDING_REVERSAL = 3;
		public static final long PENDING_RELEASE = 2;
		public static final long PENDING_ACCEPT = 1;
		public static final long ACCOUNT_LEVEL_REJECT = 6;
		public static final long BLOCK_LEVEL_REJECT = 5;
		public static final long ACCEPT = 4;
		public static boolean isValid(long val) {
			if (( PENDING_REVERSAL==val)) return true;
			if (( PENDING_RELEASE==val)) return true;
			if (( PENDING_ACCEPT==val)) return true;
			if (( ACCOUNT_LEVEL_REJECT==val)) return true;
			if (( BLOCK_LEVEL_REJECT==val)) return true;
			if (( ACCEPT==val)) return true;
			return false;
		}
	}

	public static class ApplQueueResolution {
		public static final long END_SESSION = 3;
		public static final long OVERLAY_LAST = 2;
		public static final long QUEUE_FLUSHED = 1;
		public static final long NO_ACTION_TAKEN = 0;
		public static boolean isValid(long val) {
			if (( END_SESSION==val)) return true;
			if (( OVERLAY_LAST==val)) return true;
			if (( QUEUE_FLUSHED==val)) return true;
			if (( NO_ACTION_TAKEN==val)) return true;
			return false;
		}
	}

	public static class ApplQueueAction {
		public static final long END_SESSION = 3;
		public static final long OVERLAY_LAST = 2;
		public static final long QUEUE_FLUSHED = 1;
		public static final long NO_ACTION_TAKEN = 0;
		public static boolean isValid(long val) {
			if (( END_SESSION==val)) return true;
			if (( OVERLAY_LAST==val)) return true;
			if (( QUEUE_FLUSHED==val)) return true;
			if (( NO_ACTION_TAKEN==val)) return true;
			return false;
		}
	}

	public static class AvgPxIndicator {
		public static final long LAST_TRADE_IS_THE_AVERAGE_PRICE_GROUP_IDENTIFIED_BY_THE_TRADELIN = 2;
		public static final long TRADE_IS_PART_OF_AN_AVERAGE_PRICE_GROUP_IDENTIFIED_BY_THE_TRADEL = 1;
		public static final long NO_AVERAGE_PRICING = 0;
		public static boolean isValid(long val) {
			if (( LAST_TRADE_IS_THE_AVERAGE_PRICE_GROUP_IDENTIFIED_BY_THE_TRADELIN==val)) return true;
			if (( TRADE_IS_PART_OF_AN_AVERAGE_PRICE_GROUP_IDENTIFIED_BY_THE_TRADEL==val)) return true;
			if (( NO_AVERAGE_PRICING==val)) return true;
			return false;
		}
	}

	public static class TradeAllocIndicator {
		public static final long ALLOCATION_GIVEUP_EXECUTOR = 3;
		public static final long USE_ALLOCATION_PROVIDED_WITH_THE_TRADE = 2;
		public static final long ALLOCATION_REQUIRED_GIVEUP_TRADE_ALLOCATION_INFORMATION_NOT_PROV = 1;
		public static final long ALLOCATION_NOT_REQUIRED = 0;
		public static final long ALLOCATION_TO_CLAIM_ACCOUNT = 5;
		public static final long ALLOCATION_FROM_EXECUTOR = 4;
		public static boolean isValid(long val) {
			if (( ALLOCATION_GIVEUP_EXECUTOR==val)) return true;
			if (( USE_ALLOCATION_PROVIDED_WITH_THE_TRADE==val)) return true;
			if (( ALLOCATION_REQUIRED_GIVEUP_TRADE_ALLOCATION_INFORMATION_NOT_PROV==val)) return true;
			if (( ALLOCATION_NOT_REQUIRED==val)) return true;
			if (( ALLOCATION_TO_CLAIM_ACCOUNT==val)) return true;
			if (( ALLOCATION_FROM_EXECUTOR==val)) return true;
			return false;
		}
	}

	public static class ExpirationCycle {
		public static final long TRADING_ELIGIBILITY_EXPIRATION_SPECIFIED_IN_THE_DATE_AND_TIME_FI = 2;
		public static final long EXPIRE_ON_TRADING_SESSION_OPEN = 1;
		public static final long EXPIRE_ON_TRADING_SESSION_CLOSE_DEFAULT = 0;
		public static boolean isValid(long val) {
			if (( TRADING_ELIGIBILITY_EXPIRATION_SPECIFIED_IN_THE_DATE_AND_TIME_FI==val)) return true;
			if (( EXPIRE_ON_TRADING_SESSION_OPEN==val)) return true;
			if (( EXPIRE_ON_TRADING_SESSION_CLOSE_DEFAULT==val)) return true;
			return false;
		}
	}

	public static class TrdType {
		public static final long SPECIAL_EX_CAPITAL_REPAYMENTS_XP = 35;
		public static final long SPECIAL_CUM_BONUS_CB = 36;
		public static final long SPECIAL_EX_RIGHTS_XR = 33;
		public static final long SPECIAL_CUM_CAPITAL_REPAYMENTS_CP = 34;
		public static final long WORKED_PRINCIPAL_TRADE_UKSPECIFIC = 39;
		public static final long SPECIAL_EX_BONUS_XB = 37;
		public static final long BLOCK_TRADE_SAME_AS_LARGE_TRADE = 38;
		public static final long PROROGATION_BUY__EURONEXT_PARIS_ONLY_IS_USED_TO_DEFER_SETTLEMENT = 43;
		public static final long PORTFOLIO_TRANSFER = 42;
		public static final long NAME_CHANGE = 41;
		public static final long BLOCK_TRADES__AFTER_MARKET = 40;
		public static final long PRIVATELY_NEGOTIATED_TRADES = 22;
		public static final long SUBSTITUTION_OF_FUTURES_FOR_FORWARDS = 23;
		public static final long ERROR_TRADE = 24;
		public static final long SPECIAL_CUM_DIVIDEND_CD = 25;
		public static final long SPECIAL_EX_DIVIDEND_XD = 26;
		public static final long SPECIAL_CUM_COUPON_CC = 27;
		public static final long SPECIAL_EX_COUPON_XC = 28;
		public static final long CASH_SETTLEMENT_CS = 29;
		public static final long TRANSFER = 3;
		public static final long EFP_EXCHANGE_FOR_PHYSICAL = 2;
		public static final long BLOCK_TRADE = 1;
		public static final long REGULAR_TRADE = 0;
		public static final long BUNCHED_TRADE = 7;
		public static final long SPECIAL_PRICE_USUALLY_NET_OR_ALLIN_PRICE_SP = 30;
		public static final long WEIGHTED_AVERAGE_PRICE_TRADE = 6;
		public static final long T_TRADE = 5;
		public static final long SPECIAL_CUM_RIGHTS_CR = 32;
		public static final long LATE_TRADE = 4;
		public static final long GUARANTEED_DELIVERY_GD = 31;
		public static final long PRIOR_REFERENCE_PRICE_TRADE = 9;
		public static final long LATE_BUNCHED_TRADE = 8;
		public static final long OPTION_INTERIM_TRADE = 19;
		public static final long EXCHANGE_BASIS_FACILITY_EBF = 55;
		public static final long FUTURES_LARGE_ORDER_EXECUTION = 17;
		public static final long EXCHANGE_OF_FUTURES_FOR_FUTURES_EXTERNAL_MARKET_EFF = 18;
		public static final long TRADING_AT_SETTLEMENT = 15;
		public static final long ALL_OR_NONE = 16;
		public static final long EXCHANGE_OF_FUTURES_FOR_IN_MARKET_FUTURES_EFM__EG_FULL_SIZED_FOR = 13;
		public static final long EXCHANGE_OF_OPTIONS_FOR_OPTIONS_EOO = 14;
		public static final long EXCHANGE_FOR_RISK_EFR = 11;
		public static final long EXCHANGE_FOR_SWAP_EFS_ = 12;
		public static final long OPTION_CABINET_TRADE = 20;
		public static final long DERIVATIVE_RELATED_TRANSACTION = 49;
		public static final long NONSTANDARD_SETTLEMENT = 48;
		public static final long OPTION_EXERCISE = 45;
		public static final long PROROGATION_SELL__SEE_PROROGATION_BUY = 44;
		public static final long FINANCING_TRANSACTION_INCLUDES_REPO_AND_STOCK_LENDING = 47;
		public static final long DELTA_NEUTRAL_TRANSACTION = 46;
		public static final long AFTER_HOURS_TRADE = 10;
		public static final long VOLUME_WEIGHTED_AVERAGE_TRADE = 51;
		public static final long EXCHANGE_GRANTED_TRADE = 52;
		public static final long REPURCHASE_AGREEMENT = 53;
		public static final long OTC = 54;
		public static final long PORTFOLIO_TRADE = 50;
		public static boolean isValid(long val) {
			if (( SPECIAL_EX_CAPITAL_REPAYMENTS_XP==val)) return true;
			if (( SPECIAL_CUM_BONUS_CB==val)) return true;
			if (( SPECIAL_EX_RIGHTS_XR==val)) return true;
			if (( SPECIAL_CUM_CAPITAL_REPAYMENTS_CP==val)) return true;
			if (( WORKED_PRINCIPAL_TRADE_UKSPECIFIC==val)) return true;
			if (( SPECIAL_EX_BONUS_XB==val)) return true;
			if (( BLOCK_TRADE_SAME_AS_LARGE_TRADE==val)) return true;
			if (( PROROGATION_BUY__EURONEXT_PARIS_ONLY_IS_USED_TO_DEFER_SETTLEMENT==val)) return true;
			if (( PORTFOLIO_TRANSFER==val)) return true;
			if (( NAME_CHANGE==val)) return true;
			if (( BLOCK_TRADES__AFTER_MARKET==val)) return true;
			if (( PRIVATELY_NEGOTIATED_TRADES==val)) return true;
			if (( SUBSTITUTION_OF_FUTURES_FOR_FORWARDS==val)) return true;
			if (( ERROR_TRADE==val)) return true;
			if (( SPECIAL_CUM_DIVIDEND_CD==val)) return true;
			if (( SPECIAL_EX_DIVIDEND_XD==val)) return true;
			if (( SPECIAL_CUM_COUPON_CC==val)) return true;
			if (( SPECIAL_EX_COUPON_XC==val)) return true;
			if (( CASH_SETTLEMENT_CS==val)) return true;
			if (( TRANSFER==val)) return true;
			if (( EFP_EXCHANGE_FOR_PHYSICAL==val)) return true;
			if (( BLOCK_TRADE==val)) return true;
			if (( REGULAR_TRADE==val)) return true;
			if (( BUNCHED_TRADE==val)) return true;
			if (( SPECIAL_PRICE_USUALLY_NET_OR_ALLIN_PRICE_SP==val)) return true;
			if (( WEIGHTED_AVERAGE_PRICE_TRADE==val)) return true;
			if (( T_TRADE==val)) return true;
			if (( SPECIAL_CUM_RIGHTS_CR==val)) return true;
			if (( LATE_TRADE==val)) return true;
			if (( GUARANTEED_DELIVERY_GD==val)) return true;
			if (( PRIOR_REFERENCE_PRICE_TRADE==val)) return true;
			if (( LATE_BUNCHED_TRADE==val)) return true;
			if (( OPTION_INTERIM_TRADE==val)) return true;
			if (( EXCHANGE_BASIS_FACILITY_EBF==val)) return true;
			if (( FUTURES_LARGE_ORDER_EXECUTION==val)) return true;
			if (( EXCHANGE_OF_FUTURES_FOR_FUTURES_EXTERNAL_MARKET_EFF==val)) return true;
			if (( TRADING_AT_SETTLEMENT==val)) return true;
			if (( ALL_OR_NONE==val)) return true;
			if (( EXCHANGE_OF_FUTURES_FOR_IN_MARKET_FUTURES_EFM__EG_FULL_SIZED_FOR==val)) return true;
			if (( EXCHANGE_OF_OPTIONS_FOR_OPTIONS_EOO==val)) return true;
			if (( EXCHANGE_FOR_RISK_EFR==val)) return true;
			if (( EXCHANGE_FOR_SWAP_EFS_==val)) return true;
			if (( OPTION_CABINET_TRADE==val)) return true;
			if (( DERIVATIVE_RELATED_TRANSACTION==val)) return true;
			if (( NONSTANDARD_SETTLEMENT==val)) return true;
			if (( OPTION_EXERCISE==val)) return true;
			if (( PROROGATION_SELL__SEE_PROROGATION_BUY==val)) return true;
			if (( FINANCING_TRANSACTION_INCLUDES_REPO_AND_STOCK_LENDING==val)) return true;
			if (( DELTA_NEUTRAL_TRANSACTION==val)) return true;
			if (( AFTER_HOURS_TRADE==val)) return true;
			if (( VOLUME_WEIGHTED_AVERAGE_TRADE==val)) return true;
			if (( EXCHANGE_GRANTED_TRADE==val)) return true;
			if (( REPURCHASE_AGREEMENT==val)) return true;
			if (( OTC==val)) return true;
			if (( PORTFOLIO_TRADE==val)) return true;
			return false;
		}
	}

	public static class TrdSubType {
		public static final long N_NONPROTECTED_PORTFOLIO_TRANSACTION_OR_A_FULLY_DISCLOSED_PORTFO = 19;
		public static final long OTC_QUOTE = 35;
		public static final long LC_CORRECTION_SUBMITTED_MORE_THAN_THREE_DAYS_AFTER_PUBLICATION_O = 17;
		public static final long CONVERTED_SWAP = 36;
		public static final long M_TRANSACTION_OTHER_THAN_A_TRANSACTION_RESULTING_FROM_A_STOCK_SW = 18;
		public static final long OFF_HOURS_TRADE = 33;
		public static final long B_TRANSACTION_BETWEEN_TWO_MEMBER_FIRMS_WHERE_NEITHER_MEMBER_FIRM = 15;
		public static final long ON_HOURS_TRADE = 34;
		public static final long K_TRANSACTION_USING_BLOCK_TRADE_FACILITY = 16;
		public static final long LARGE_IN_SCALE_L = 39;
		public static final long AI_AUTOMATED_INPUT_FACILITY_DISABLED_IN_RESPONSE_TO_AN_EXCHANGE_ = 14;
		public static final long CROSSED_TRADE_X = 37;
		public static final long ACATS = 11;
		public static final long INTERIM_PROTECTED_TRADE_I = 38;
		public static final long NR_NONRISK_TRANSACTION_IN_A_SEATS_SECURITY_OTHER_THAN_AN_AIM_SEC = 21;
		public static final long NM__I_TRANSACTION_WHERE_EXCHANGE_HAS_GRANTED_PERMISSION_FOR_NONP = 20;
		public static final long P_PROTECTED_PORTFOLIO_TRANSACTION_OR_A_WORKED_PRINCIPAL_AGREEMEN = 22;
		public static final long PA_PROTECTED_TRANSACTION_NOTIFICATION = 23;
		public static final long PC_CONTRA_TRADE_FOR_TRANSACTION_WHICH_TOOK_PLACE_ON_A_PREVIOUS_D = 24;
		public static final long PN_WORKED_PRINCIPAL_NOTIFICATION_FOR_A_PORTFOLIO_TRANSACTION_WHI = 25;
		public static final long R__I_RISKLESS_PRINCIPAL_TRANSACTION_BETWEEN_NONMEMBERS_WHERE_THE = 26;
		public static final long RO_TRANSACTION_WHICH_RESULTED_FROM_THE_EXERCISE_OF_A_TRADITIONAL = 27;
		public static final long RT_RISK_TRANSACTION_IN_A_SEATS_SECURITY_EXCLUDING_AIM_SECURITY_R = 28;
		public static final long SW_TRANSACTIONS_RESULTING_FROM_STOCK_SWAP_OR_A_STOCK_SWITCH_ONE_ = 29;
		public static final long REJECT_FOR_SUBMITTING_SIDE = 3;
		public static final long EXTERNAL_TRANSFER_OR_TRANSFER_OF_ACCOUNT = 2;
		public static final long TRANSACTION_FROM_ASSIGNMENT = 10;
		public static final long INTERNAL_TRANSFER_OR_ADJUSTMENT = 1;
		public static final long CMTA = 0;
		public static final long T_IF_REPORTING_A_SINGLE_PROTECTED_TRANSACTION = 30;
		public static final long DIFFERENTIAL_SPREAD = 7;
		public static final long ONSET_DUE_TO_AN_ALLOCATION = 6;
		public static final long WT_WORKED_PRINCIPAL_TRANSACTION_OTHER_THAN_A_PORTFOLIO_TRANSACTI = 32;
		public static final long OFFSET_DUE_TO_AN_ALLOCATION = 5;
		public static final long WN_WORKED_PRINCIPAL_NOTIFICATION_FOR_A_SINGLE_ORDER_BOOK_SECURIT = 31;
		public static final long ADVISORY_FOR_CONTRA_SIDE = 4;
		public static final long TRANSACTION_FROM_EXERCISE = 9;
		public static final long IMPLIED_SPREAD_LEG_EXECUTED_AGAINST_AN_OUTRIGHT = 8;
		public static boolean isValid(long val) {
			if (( N_NONPROTECTED_PORTFOLIO_TRANSACTION_OR_A_FULLY_DISCLOSED_PORTFO==val)) return true;
			if (( OTC_QUOTE==val)) return true;
			if (( LC_CORRECTION_SUBMITTED_MORE_THAN_THREE_DAYS_AFTER_PUBLICATION_O==val)) return true;
			if (( CONVERTED_SWAP==val)) return true;
			if (( M_TRANSACTION_OTHER_THAN_A_TRANSACTION_RESULTING_FROM_A_STOCK_SW==val)) return true;
			if (( OFF_HOURS_TRADE==val)) return true;
			if (( B_TRANSACTION_BETWEEN_TWO_MEMBER_FIRMS_WHERE_NEITHER_MEMBER_FIRM==val)) return true;
			if (( ON_HOURS_TRADE==val)) return true;
			if (( K_TRANSACTION_USING_BLOCK_TRADE_FACILITY==val)) return true;
			if (( LARGE_IN_SCALE_L==val)) return true;
			if (( AI_AUTOMATED_INPUT_FACILITY_DISABLED_IN_RESPONSE_TO_AN_EXCHANGE_==val)) return true;
			if (( CROSSED_TRADE_X==val)) return true;
			if (( ACATS==val)) return true;
			if (( INTERIM_PROTECTED_TRADE_I==val)) return true;
			if (( NR_NONRISK_TRANSACTION_IN_A_SEATS_SECURITY_OTHER_THAN_AN_AIM_SEC==val)) return true;
			if (( NM__I_TRANSACTION_WHERE_EXCHANGE_HAS_GRANTED_PERMISSION_FOR_NONP==val)) return true;
			if (( P_PROTECTED_PORTFOLIO_TRANSACTION_OR_A_WORKED_PRINCIPAL_AGREEMEN==val)) return true;
			if (( PA_PROTECTED_TRANSACTION_NOTIFICATION==val)) return true;
			if (( PC_CONTRA_TRADE_FOR_TRANSACTION_WHICH_TOOK_PLACE_ON_A_PREVIOUS_D==val)) return true;
			if (( PN_WORKED_PRINCIPAL_NOTIFICATION_FOR_A_PORTFOLIO_TRANSACTION_WHI==val)) return true;
			if (( R__I_RISKLESS_PRINCIPAL_TRANSACTION_BETWEEN_NONMEMBERS_WHERE_THE==val)) return true;
			if (( RO_TRANSACTION_WHICH_RESULTED_FROM_THE_EXERCISE_OF_A_TRADITIONAL==val)) return true;
			if (( RT_RISK_TRANSACTION_IN_A_SEATS_SECURITY_EXCLUDING_AIM_SECURITY_R==val)) return true;
			if (( SW_TRANSACTIONS_RESULTING_FROM_STOCK_SWAP_OR_A_STOCK_SWITCH_ONE_==val)) return true;
			if (( REJECT_FOR_SUBMITTING_SIDE==val)) return true;
			if (( EXTERNAL_TRANSFER_OR_TRANSFER_OF_ACCOUNT==val)) return true;
			if (( TRANSACTION_FROM_ASSIGNMENT==val)) return true;
			if (( INTERNAL_TRANSFER_OR_ADJUSTMENT==val)) return true;
			if (( CMTA==val)) return true;
			if (( T_IF_REPORTING_A_SINGLE_PROTECTED_TRANSACTION==val)) return true;
			if (( DIFFERENTIAL_SPREAD==val)) return true;
			if (( ONSET_DUE_TO_AN_ALLOCATION==val)) return true;
			if (( WT_WORKED_PRINCIPAL_TRANSACTION_OTHER_THAN_A_PORTFOLIO_TRANSACTI==val)) return true;
			if (( OFFSET_DUE_TO_AN_ALLOCATION==val)) return true;
			if (( WN_WORKED_PRINCIPAL_NOTIFICATION_FOR_A_SINGLE_ORDER_BOOK_SECURIT==val)) return true;
			if (( ADVISORY_FOR_CONTRA_SIDE==val)) return true;
			if (( TRANSACTION_FROM_EXERCISE==val)) return true;
			if (( IMPLIED_SPREAD_LEG_EXECUTED_AGAINST_AN_OUTRIGHT==val)) return true;
			return false;
		}
	}

	public static class PegMoveType {
		public static final long FIXED = 1;
		public static final long FLOATING_DEFAULT = 0;
		public static boolean isValid(long val) {
			if (( FIXED==val)) return true;
			if (( FLOATING_DEFAULT==val)) return true;
			return false;
		}
	}

	public static class PegOffsetType {
		public static final long PRICE_TIER__LEVEL = 3;
		public static final long TICKS = 2;
		public static final long BASIS_POINTS = 1;
		public static final long PRICE_DEFAULT = 0;
		public static boolean isValid(long val) {
			if (( PRICE_TIER__LEVEL==val)) return true;
			if (( TICKS==val)) return true;
			if (( BASIS_POINTS==val)) return true;
			if (( PRICE_DEFAULT==val)) return true;
			return false;
		}
	}

	public static class PegLimitType {
		public static final long OR_WORSE__FOR_A_BUY_THE_PEG_LIMIT_IS_A_MINIMUM_AND_FOR_A_SELL_TH = 2;
		public static final long STRICT__LIMIT_IS_A_STRICT_LIMIT = 1;
		public static final long OR_BETTER_DEFAULT__PRICE_IMPROVEMENT_ALLOWED = 0;
		public static boolean isValid(long val) {
			if (( OR_WORSE__FOR_A_BUY_THE_PEG_LIMIT_IS_A_MINIMUM_AND_FOR_A_SELL_TH==val)) return true;
			if (( STRICT__LIMIT_IS_A_STRICT_LIMIT==val)) return true;
			if (( OR_BETTER_DEFAULT__PRICE_IMPROVEMENT_ALLOWED==val)) return true;
			return false;
		}
	}

	public static class PegRoundDirection {
		public static final long MORE_PASSIVE__ON_A_BUY_ORDER_ROUND_DOWN_TO_THE_NEAREST_TICK_ON_A = 2;
		public static final long MORE_AGGRESSIVE__ON_A_BUY_ORDER_ROUND_THE_PRICE_UP_TO_THE_NEARES = 1;
		public static boolean isValid(long val) {
			if (( MORE_PASSIVE__ON_A_BUY_ORDER_ROUND_DOWN_TO_THE_NEAREST_TICK_ON_A==val)) return true;
			if (( MORE_AGGRESSIVE__ON_A_BUY_ORDER_ROUND_THE_PRICE_UP_TO_THE_NEARES==val)) return true;
			return false;
		}
	}

	public static class PegScope {
		public static final long GLOBAL = 3;
		public static final long NATIONAL = 2;
		public static final long LOCAL_EXCHANGE_ECN_ATS = 1;
		public static final long NATIONAL_EXCLUDING_LOCAL = 4;
		public static boolean isValid(long val) {
			if (( GLOBAL==val)) return true;
			if (( NATIONAL==val)) return true;
			if (( LOCAL_EXCHANGE_ECN_ATS==val)) return true;
			if (( NATIONAL_EXCLUDING_LOCAL==val)) return true;
			return false;
		}
	}

	public static class DiscretionMoveType {
		public static final long FIXED = 1;
		public static final long FLOATING_DEFAULT = 0;
		public static boolean isValid(long val) {
			if (( FIXED==val)) return true;
			if (( FLOATING_DEFAULT==val)) return true;
			return false;
		}
	}

	public static class DiscretionOffsetType {
		public static final long PRICE_TIER__LEVEL = 3;
		public static final long TICKS = 2;
		public static final long BASIS_POINTS = 1;
		public static final long PRICE_DEFAULT = 0;
		public static boolean isValid(long val) {
			if (( PRICE_TIER__LEVEL==val)) return true;
			if (( TICKS==val)) return true;
			if (( BASIS_POINTS==val)) return true;
			if (( PRICE_DEFAULT==val)) return true;
			return false;
		}
	}

	public static class DiscretionLimitType {
		public static final long OR_WORSE__FOR_A_BUY_THE_DISCRETION_PRICE_IS_A_MINIMUM_AND_FOR_A_ = 2;
		public static final long STRICT__LIMIT_IS_A_STRICT_LIMIT = 1;
		public static final long OR_BETTER_DEFAULT__PRICE_IMPROVEMENT_ALLOWED = 0;
		public static boolean isValid(long val) {
			if (( OR_WORSE__FOR_A_BUY_THE_DISCRETION_PRICE_IS_A_MINIMUM_AND_FOR_A_==val)) return true;
			if (( STRICT__LIMIT_IS_A_STRICT_LIMIT==val)) return true;
			if (( OR_BETTER_DEFAULT__PRICE_IMPROVEMENT_ALLOWED==val)) return true;
			return false;
		}
	}

	public static class DiscretionRoundDirection {
		public static final long MORE_PASSIVE__ON_A_BUY_ORDER_ROUND_DOWN_TO_THE_NEAREST_TICK_ON_A = 2;
		public static final long MORE_AGGRESSIVE__ON_A_BUY_ORDER_ROUND_THE_PRICE_UP_TO_THE_NEARES = 1;
		public static boolean isValid(long val) {
			if (( MORE_PASSIVE__ON_A_BUY_ORDER_ROUND_DOWN_TO_THE_NEAREST_TICK_ON_A==val)) return true;
			if (( MORE_AGGRESSIVE__ON_A_BUY_ORDER_ROUND_THE_PRICE_UP_TO_THE_NEARES==val)) return true;
			return false;
		}
	}

	public static class DiscretionScope {
		public static final long GLOBAL = 3;
		public static final long NATIONAL = 2;
		public static final long LOCAL_EXCHANGE_ECN_ATS = 1;
		public static final long NATIONAL_EXCLUDING_LOCAL = 4;
		public static boolean isValid(long val) {
			if (( GLOBAL==val)) return true;
			if (( NATIONAL==val)) return true;
			if (( LOCAL_EXCHANGE_ECN_ATS==val)) return true;
			if (( NATIONAL_EXCLUDING_LOCAL==val)) return true;
			return false;
		}
	}

	public static class TargetStrategy {
		public static final long MININIZE_MARKET_IMPACT = 3;
		public static final long PARTICIPATE_IE_AIM_TO_BE_X_PERCENT_OF_THE_MARKET_VOLUME = 2;
		public static final long VWAP = 1;
		public static boolean isValid(long val) {
			if (( MININIZE_MARKET_IMPACT==val)) return true;
			if (( PARTICIPATE_IE_AIM_TO_BE_X_PERCENT_OF_THE_MARKET_VOLUME==val)) return true;
			if (( VWAP==val)) return true;
			return false;
		}
	}

	public static class LastLiquidityInd {
		public static final long LIQUIDITY_ROUTED_OUT = 3;
		public static final long REMOVED_LIQUIDITY = 2;
		public static final long ADDED_LIQUIDITY = 1;
		public static final long AUCTION = 4;
		public static boolean isValid(long val) {
			if (( LIQUIDITY_ROUTED_OUT==val)) return true;
			if (( REMOVED_LIQUIDITY==val)) return true;
			if (( ADDED_LIQUIDITY==val)) return true;
			if (( AUCTION==val)) return true;
			return false;
		}
	}

	public static class PublishTrdIndicator {
		public static final boolean DO_NOT_REPORT_TRADE = false;
		public static final boolean REPORT_TRADE = true;
		public static boolean isValid(boolean val) {
			if (( DO_NOT_REPORT_TRADE==val)) return true;
			if (( REPORT_TRADE==val)) return true;
			return false;
		}
	}

	public static class ShortSaleReason {
		public static final long SELLING_CUSTOMER_SOLD_SHORT_EXEMPT = 3;
		public static final long SELLING_CUSTOMER_SOLD_SHORT = 2;
		public static final long DEALER_SOLD_SHORT_EXEMPT = 1;
		public static final long DEALER_SOLD_SHORT = 0;
		public static final long QSR_OR_AGU_CONTRA_SIDE_SOLD_SHORT_EXEMPT = 5;
		public static final long QUALIFIED_SERVICE_REPRESENTATIVE_QSR_OR_AUTOMATIC_GIVEUP_AGU_CON = 4;
		public static boolean isValid(long val) {
			if (( SELLING_CUSTOMER_SOLD_SHORT_EXEMPT==val)) return true;
			if (( SELLING_CUSTOMER_SOLD_SHORT==val)) return true;
			if (( DEALER_SOLD_SHORT_EXEMPT==val)) return true;
			if (( DEALER_SOLD_SHORT==val)) return true;
			if (( QSR_OR_AGU_CONTRA_SIDE_SOLD_SHORT_EXEMPT==val)) return true;
			if (( QUALIFIED_SERVICE_REPRESENTATIVE_QSR_OR_AUTOMATIC_GIVEUP_AGU_CON==val)) return true;
			return false;
		}
	}

	public static class QtyType {
		public static final long UNITS_OF_MEASURE_PER_TIME_UNIT_IF_USED__MUST_SPECIFY_UNITOFMEASU = 2;
		public static final long CONTRACTS_IF_USED__MUST_SPECIFY_CONTRACTMULTIPLIER_TAG_231 = 1;
		public static final long UNITS_SHARES_PAR_CURRENCY = 0;
		public static boolean isValid(long val) {
			if (( UNITS_OF_MEASURE_PER_TIME_UNIT_IF_USED__MUST_SPECIFY_UNITOFMEASU==val)) return true;
			if (( CONTRACTS_IF_USED__MUST_SPECIFY_CONTRACTMULTIPLIER_TAG_231==val)) return true;
			if (( UNITS_SHARES_PAR_CURRENCY==val)) return true;
			return false;
		}
	}

	public static class TradeReportType {
		public static final long ALLEGED_LOCKEDIN_TRADE_BREAK = 15;
		public static final long ALLEGED_NOWAS = 13;
		public static final long ALLEGED_TRADE_REPORT_CANCEL = 14;
		public static final long ALLEGED_NEW = 11;
		public static final long ALLEGED_ADDENDUM = 12;
		public static final long DECLINE = 3;
		public static final long ACCEPT = 2;
		public static final long ALLEGED = 1;
		public static final long PENDED = 10;
		public static final long SUBMIT = 0;
		public static final long LOCKEDIN_TRADE_BREAK = 7;
		public static final long TRADE_REPORT_CANCEL = 6;
		public static final long NOWAS = 5;
		public static final long ADDENDUM = 4;
		public static final long INVALID_CMTA = 9;
		public static final long DEFAULTED = 8;
		public static boolean isValid(long val) {
			if (( ALLEGED_LOCKEDIN_TRADE_BREAK==val)) return true;
			if (( ALLEGED_NOWAS==val)) return true;
			if (( ALLEGED_TRADE_REPORT_CANCEL==val)) return true;
			if (( ALLEGED_NEW==val)) return true;
			if (( ALLEGED_ADDENDUM==val)) return true;
			if (( DECLINE==val)) return true;
			if (( ACCEPT==val)) return true;
			if (( ALLEGED==val)) return true;
			if (( PENDED==val)) return true;
			if (( SUBMIT==val)) return true;
			if (( LOCKEDIN_TRADE_BREAK==val)) return true;
			if (( TRADE_REPORT_CANCEL==val)) return true;
			if (( NOWAS==val)) return true;
			if (( ADDENDUM==val)) return true;
			if (( INVALID_CMTA==val)) return true;
			if (( DEFAULTED==val)) return true;
			return false;
		}
	}

	public static class AllocNoOrdersType {
		public static final long EXPLICIT_LIST_PROVIDED = 1;
		public static final long NOT_SPECIFIED = 0;
		public static boolean isValid(long val) {
			if (( EXPLICIT_LIST_PROVIDED==val)) return true;
			if (( NOT_SPECIFIED==val)) return true;
			return false;
		}
	}

	public static class EventType {
		public static final long POSITION_REMOVAL_DATE = 19;
		public static final long FIRST_INTENT_DATE = 17;
		public static final long LAST_INTENT_DATE = 18;
		public static final long INITIAL_INVENTORY_DUE_DATE = 15;
		public static final long FINAL_INVENTORY_DUE_DATE = 16;
		public static final long FIRST_DELIVERY_DATE = 13;
		public static final long LAST_DELIVERY_DATE = 14;
		public static final long SWAP_NEXT_START_DATE = 11;
		public static final long SWAP_NEXT_ROLL_DATE = 12;
		public static final long TENDER = 3;
		public static final long CALL = 2;
		public static final long PUT = 1;
		public static final long SWAP_ROLL_DATE = 10;
		public static final long LAST_ELIGIBLE_TRADE_DATE = 7;
		public static final long INACTIVIATION = 6;
		public static final long ACTIVATION = 5;
		public static final long SINKING_FUND_CALL = 4;
		public static final long SWAP_END_DATE = 9;
		public static final long SWAP_START_DATE = 8;
		public static final long OTHER = 99;
		public static boolean isValid(long val) {
			if (( POSITION_REMOVAL_DATE==val)) return true;
			if (( FIRST_INTENT_DATE==val)) return true;
			if (( LAST_INTENT_DATE==val)) return true;
			if (( INITIAL_INVENTORY_DUE_DATE==val)) return true;
			if (( FINAL_INVENTORY_DUE_DATE==val)) return true;
			if (( FIRST_DELIVERY_DATE==val)) return true;
			if (( LAST_DELIVERY_DATE==val)) return true;
			if (( SWAP_NEXT_START_DATE==val)) return true;
			if (( SWAP_NEXT_ROLL_DATE==val)) return true;
			if (( TENDER==val)) return true;
			if (( CALL==val)) return true;
			if (( PUT==val)) return true;
			if (( SWAP_ROLL_DATE==val)) return true;
			if (( LAST_ELIGIBLE_TRADE_DATE==val)) return true;
			if (( INACTIVIATION==val)) return true;
			if (( ACTIVATION==val)) return true;
			if (( SINKING_FUND_CALL==val)) return true;
			if (( SWAP_END_DATE==val)) return true;
			if (( SWAP_START_DATE==val)) return true;
			if (( OTHER==val)) return true;
			return false;
		}
	}

	public static class InstrAttribType {
		public static final long SUBJECT_TO_ALTERNATIVE_MINIMUM_TAX = 19;
		public static final long TAXABLE = 17;
		public static final long INDEXED = 18;
		public static final long IN_DEFAULT = 15;
		public static final long UNRATED = 16;
		public static final long ESCROWED_TO_REDEMPTION_DATE__CALLABLE_SUPPLY_REDEMPTION_DATE_IN_ = 13;
		public static final long PREREFUNDED = 14;
		public static final long CALLABLE_PUTTABLE = 11;
		public static final long ESCROWED_TO_MATURITY = 12;
		public static final long CALLABLE_BELOW_MATURITY_VALUE = 21;
		public static final long ORIGINAL_ISSUE_DISCOUNT_PRICE_SUPPLY_PRICE_IN_THE_INSTRATTRIBVAL = 20;
		public static final long TEXT_SUPPLY_THE_TEXT_OF_THE_ATTRIBUTE_OR_DISCLAIMER_IN_THE_INSTR = 99;
		public static final long CALLABLE_WITHOUT_NOTICE_BY_MAIL_TO_HOLDER_UNLESS_REGISTERED = 22;
		public static final long PRICE_TICK_RULES_FOR_SECURITY = 23;
		public static final long TRADE_TYPE_ELIGIBILITY_DETAILS_FOR_SECURITY = 24;
		public static final long INSTRUMENT_DENOMINATOR = 25;
		public static final long INSTRUMENT_NUMERATOR = 26;
		public static final long INSTRUMENT_PRICE_PRECISION = 27;
		public static final long INSTRUMENT_STRIKE_PRICE = 28;
		public static final long TRADEABLE_INDICATOR = 29;
		public static final long INTEREST_BEARING_FOR_EURO_COMMERCIAL_PAPER_WHEN_NOT_ISSUED_AT_DI = 3;
		public static final long ZERO_COUPON = 2;
		public static final long ORIGINAL_ISSUE_DISCOUNT = 10;
		public static final long FLAT_SECURITIES_PAY_INTEREST_ON_A_CURRENT_BASIS_BUT_ARE_TRADED_W = 1;
		public static final long STEPPED_COUPON = 7;
		public static final long LESS_FEE_FOR_PUT = 6;
		public static final long VARIABLE_RATE = 5;
		public static final long NO_PERIODIC_PAYMENTS = 4;
		public static final long WHEN_AND_IF_ISSUED = 9;
		public static final long COUPON_PERIOD_IF_NOT_SEMIANNUAL_SUPPLY_REDEMPTION_DATE_IN_THE_IN = 8;
		public static boolean isValid(long val) {
			if (( SUBJECT_TO_ALTERNATIVE_MINIMUM_TAX==val)) return true;
			if (( TAXABLE==val)) return true;
			if (( INDEXED==val)) return true;
			if (( IN_DEFAULT==val)) return true;
			if (( UNRATED==val)) return true;
			if (( ESCROWED_TO_REDEMPTION_DATE__CALLABLE_SUPPLY_REDEMPTION_DATE_IN_==val)) return true;
			if (( PREREFUNDED==val)) return true;
			if (( CALLABLE_PUTTABLE==val)) return true;
			if (( ESCROWED_TO_MATURITY==val)) return true;
			if (( CALLABLE_BELOW_MATURITY_VALUE==val)) return true;
			if (( ORIGINAL_ISSUE_DISCOUNT_PRICE_SUPPLY_PRICE_IN_THE_INSTRATTRIBVAL==val)) return true;
			if (( TEXT_SUPPLY_THE_TEXT_OF_THE_ATTRIBUTE_OR_DISCLAIMER_IN_THE_INSTR==val)) return true;
			if (( CALLABLE_WITHOUT_NOTICE_BY_MAIL_TO_HOLDER_UNLESS_REGISTERED==val)) return true;
			if (( PRICE_TICK_RULES_FOR_SECURITY==val)) return true;
			if (( TRADE_TYPE_ELIGIBILITY_DETAILS_FOR_SECURITY==val)) return true;
			if (( INSTRUMENT_DENOMINATOR==val)) return true;
			if (( INSTRUMENT_NUMERATOR==val)) return true;
			if (( INSTRUMENT_PRICE_PRECISION==val)) return true;
			if (( INSTRUMENT_STRIKE_PRICE==val)) return true;
			if (( TRADEABLE_INDICATOR==val)) return true;
			if (( INTEREST_BEARING_FOR_EURO_COMMERCIAL_PAPER_WHEN_NOT_ISSUED_AT_DI==val)) return true;
			if (( ZERO_COUPON==val)) return true;
			if (( ORIGINAL_ISSUE_DISCOUNT==val)) return true;
			if (( FLAT_SECURITIES_PAY_INTEREST_ON_A_CURRENT_BASIS_BUT_ARE_TRADED_W==val)) return true;
			if (( STEPPED_COUPON==val)) return true;
			if (( LESS_FEE_FOR_PUT==val)) return true;
			if (( VARIABLE_RATE==val)) return true;
			if (( NO_PERIODIC_PAYMENTS==val)) return true;
			if (( WHEN_AND_IF_ISSUED==val)) return true;
			if (( COUPON_PERIOD_IF_NOT_SEMIANNUAL_SUPPLY_REDEMPTION_DATE_IN_THE_IN==val)) return true;
			return false;
		}
	}

	public static class CPProgram {
		public static final long I42 = 2;
		public static final long I3A3 = 1;
		public static final long OTHER = 99;
		public static boolean isValid(long val) {
			if (( I42==val)) return true;
			if (( I3A3==val)) return true;
			if (( OTHER==val)) return true;
			return false;
		}
	}

	public static class MiscFeeBasis {
		public static final long PERCENTAGE = 2;
		public static final long PER_UNIT = 1;
		public static final long ABSOLUTE = 0;
		public static boolean isValid(long val) {
			if (( PERCENTAGE==val)) return true;
			if (( PER_UNIT==val)) return true;
			if (( ABSOLUTE==val)) return true;
			return false;
		}
	}

	public static class LastFragment {
		public static final boolean NOT_LAST_MESSAGE = false;
		public static final boolean LAST_MESSAGE = true;
		public static boolean isValid(boolean val) {
			if (( NOT_LAST_MESSAGE==val)) return true;
			if (( LAST_MESSAGE==val)) return true;
			return false;
		}
	}

	public static class CollAsgnReason {
		public static final long MARGIN_DEFICIENCY = 3;
		public static final long TIME_WARNING = 2;
		public static final long SCHEDULED = 1;
		public static final long INITIAL = 0;
		public static final long ADVERSE_TAX_EVENT = 7;
		public static final long EVENT_OF_DEFAULT = 6;
		public static final long FORWARD_COLLATERAL_DEMAND = 5;
		public static final long MARGIN_EXCESS = 4;
		public static boolean isValid(long val) {
			if (( MARGIN_DEFICIENCY==val)) return true;
			if (( TIME_WARNING==val)) return true;
			if (( SCHEDULED==val)) return true;
			if (( INITIAL==val)) return true;
			if (( ADVERSE_TAX_EVENT==val)) return true;
			if (( EVENT_OF_DEFAULT==val)) return true;
			if (( FORWARD_COLLATERAL_DEMAND==val)) return true;
			if (( MARGIN_EXCESS==val)) return true;
			return false;
		}
	}

	public static class CollInquiryQualifier {
		public static final long SUBSTITUTION_ELIGIBLE = 3;
		public static final long COLLATERAL_INSTRUMENT = 2;
		public static final long GC_INSTRUMENT = 1;
		public static final long TRADE_DATE = 0;
		public static final long OUTSTANDING_TRADES_TODAY__END_DATE = 7;
		public static final long FULLY_ASSIGNED = 6;
		public static final long PARTIALLY_ASSIGNED = 5;
		public static final long NOT_ASSIGNED = 4;
		public static boolean isValid(long val) {
			if (( SUBSTITUTION_ELIGIBLE==val)) return true;
			if (( COLLATERAL_INSTRUMENT==val)) return true;
			if (( GC_INSTRUMENT==val)) return true;
			if (( TRADE_DATE==val)) return true;
			if (( OUTSTANDING_TRADES_TODAY__END_DATE==val)) return true;
			if (( FULLY_ASSIGNED==val)) return true;
			if (( PARTIALLY_ASSIGNED==val)) return true;
			if (( NOT_ASSIGNED==val)) return true;
			return false;
		}
	}

	public static class CollAsgnTransType {
		public static final long RELEASE = 3;
		public static final long CANCEL = 2;
		public static final long REPLACE = 1;
		public static final long NEW = 0;
		public static final long REVERSE = 4;
		public static boolean isValid(long val) {
			if (( RELEASE==val)) return true;
			if (( CANCEL==val)) return true;
			if (( REPLACE==val)) return true;
			if (( NEW==val)) return true;
			if (( REVERSE==val)) return true;
			return false;
		}
	}

	public static class CollAsgnRespType {
		public static final long REJECTED = 3;
		public static final long DECLINED = 2;
		public static final long ACCEPTED = 1;
		public static final long RECEIVED = 0;
		public static boolean isValid(long val) {
			if (( REJECTED==val)) return true;
			if (( DECLINED==val)) return true;
			if (( ACCEPTED==val)) return true;
			if (( RECEIVED==val)) return true;
			return false;
		}
	}

	public static class CollAsgnRejectReason {
		public static final long INSUFFICIENT_COLLATERAL = 3;
		public static final long UNAUTHORIZED_TRANSACTION = 2;
		public static final long UNKNOWN_OR_INVALID_INSTRUMENT = 1;
		public static final long UNKNOWN_DEAL_ORDER__TRADE = 0;
		public static final long EXCESSIVE_SUBSTITUTION = 5;
		public static final long INVALID_TYPE_OF_COLLATERAL = 4;
		public static final long OTHER = 99;
		public static boolean isValid(long val) {
			if (( INSUFFICIENT_COLLATERAL==val)) return true;
			if (( UNAUTHORIZED_TRANSACTION==val)) return true;
			if (( UNKNOWN_OR_INVALID_INSTRUMENT==val)) return true;
			if (( UNKNOWN_DEAL_ORDER__TRADE==val)) return true;
			if (( EXCESSIVE_SUBSTITUTION==val)) return true;
			if (( INVALID_TYPE_OF_COLLATERAL==val)) return true;
			if (( OTHER==val)) return true;
			return false;
		}
	}

	public static class CollStatus {
		public static final long ASSIGNED_ACCEPTED = 3;
		public static final long ASSIGNMENT_PROPOSED = 2;
		public static final long PARTIALLY_ASSIGNED = 1;
		public static final long UNASSIGNED = 0;
		public static final long CHALLENGED = 4;
		public static boolean isValid(long val) {
			if (( ASSIGNED_ACCEPTED==val)) return true;
			if (( ASSIGNMENT_PROPOSED==val)) return true;
			if (( PARTIALLY_ASSIGNED==val)) return true;
			if (( UNASSIGNED==val)) return true;
			if (( CHALLENGED==val)) return true;
			return false;
		}
	}

	public static class LastRptRequested {
		public static final boolean NOT_LAST_MESSAGE = false;
		public static final boolean LAST_MESSAGE = true;
		public static boolean isValid(boolean val) {
			if (( NOT_LAST_MESSAGE==val)) return true;
			if (( LAST_MESSAGE==val)) return true;
			return false;
		}
	}

	public static class DeliveryType {
		public static final long HOLD_IN_CUSTODY = 3;
		public static final long TRIPARTY = 2;
		public static final long FREE_DELIVER_IF_SELL_OR_RECEIVE_IF_BUY_FREE = 1;
		public static final long VERSUS_PAYMENT_DELIVER_IF_SELL_OR_RECEIVE_IF_BUY_VS_AGAINST_PAYM = 0;
		public static boolean isValid(long val) {
			if (( HOLD_IN_CUSTODY==val)) return true;
			if (( TRIPARTY==val)) return true;
			if (( FREE_DELIVER_IF_SELL_OR_RECEIVE_IF_BUY_FREE==val)) return true;
			if (( VERSUS_PAYMENT_DELIVER_IF_SELL_OR_RECEIVE_IF_BUY_VS_AGAINST_PAYM==val)) return true;
			return false;
		}
	}

	public static class UserRequestType {
		public static final long CHANGE_PASSWORD_FOR_USER = 3;
		public static final long LOG_OFF_USER = 2;
		public static final long LOG_ON_USER = 1;
		public static final long REQUEST_INDIVIDUAL_USER_STATUS = 4;
		public static boolean isValid(long val) {
			if (( CHANGE_PASSWORD_FOR_USER==val)) return true;
			if (( LOG_OFF_USER==val)) return true;
			if (( LOG_ON_USER==val)) return true;
			if (( REQUEST_INDIVIDUAL_USER_STATUS==val)) return true;
			return false;
		}
	}

	public static class UserStatus {
		public static final long USER_NOT_RECOGNISED = 3;
		public static final long NOT_LOGGED_IN = 2;
		public static final long LOGGED_IN = 1;
		public static final long FORCED_USER_LOGOUT_BY_EXCHANGE = 7;
		public static final long OTHER = 6;
		public static final long PASSWORD_CHANGED = 5;
		public static final long PASSWORD_INCORRECT = 4;
		public static final long SESSION_SHUTDOWN_WARNING = 8;
		public static boolean isValid(long val) {
			if (( USER_NOT_RECOGNISED==val)) return true;
			if (( NOT_LOGGED_IN==val)) return true;
			if (( LOGGED_IN==val)) return true;
			if (( FORCED_USER_LOGOUT_BY_EXCHANGE==val)) return true;
			if (( OTHER==val)) return true;
			if (( PASSWORD_CHANGED==val)) return true;
			if (( PASSWORD_INCORRECT==val)) return true;
			if (( SESSION_SHUTDOWN_WARNING==val)) return true;
			return false;
		}
	}

	public static class StatusValue {
		public static final long NOT_CONNECTED__DOWN_EXPECTED_DOWN = 3;
		public static final long NOT_CONNECTED__DOWN_EXPECTED_UP = 2;
		public static final long CONNECTED = 1;
		public static final long IN_PROCESS = 4;
		public static boolean isValid(long val) {
			if (( NOT_CONNECTED__DOWN_EXPECTED_DOWN==val)) return true;
			if (( NOT_CONNECTED__DOWN_EXPECTED_UP==val)) return true;
			if (( CONNECTED==val)) return true;
			if (( IN_PROCESS==val)) return true;
			return false;
		}
	}

	public static class NetworkRequestType {
		public static final long SUBSCRIBE = 2;
		public static final long SNAPSHOT = 1;
		public static final long STOP_SUBSCRIBING = 4;
		public static final long LEVEL_OF_DETAIL_THEN_NOCOMPIDS_BECOMES_REQUIRED = 8;
		public static boolean isValid(long val) {
			if (( SUBSCRIBE==val)) return true;
			if (( SNAPSHOT==val)) return true;
			if (( STOP_SUBSCRIBING==val)) return true;
			if (( LEVEL_OF_DETAIL_THEN_NOCOMPIDS_BECOMES_REQUIRED==val)) return true;
			return false;
		}
	}

	public static class NetworkStatusResponseType {
		public static final long INCREMENTAL_UPDATE = 2;
		public static final long FULL = 1;
		public static boolean isValid(long val) {
			if (( INCREMENTAL_UPDATE==val)) return true;
			if (( FULL==val)) return true;
			return false;
		}
	}

	public static class TrdRptStatus {
		public static final long ACCEPTED_WITH_ERRORS = 3;
		public static final long REJECTED = 1;
		public static final long ACCEPTED = 0;
		public static boolean isValid(long val) {
			if (( ACCEPTED_WITH_ERRORS==val)) return true;
			if (( REJECTED==val)) return true;
			if (( ACCEPTED==val)) return true;
			return false;
		}
	}

	public static class AffirmStatus {
		public static final long AFFIRMED = 3;
		public static final long CONFIRM_REJECTED_IE_NOT_AFFIRMED = 2;
		public static final long RECEIVED = 1;
		public static boolean isValid(long val) {
			if (( AFFIRMED==val)) return true;
			if (( CONFIRM_REJECTED_IE_NOT_AFFIRMED==val)) return true;
			if (( RECEIVED==val)) return true;
			return false;
		}
	}

	public static class CollAction {
		public static final long REMOVE = 2;
		public static final long ADD = 1;
		public static final long RETAIN = 0;
		public static boolean isValid(long val) {
			if (( REMOVE==val)) return true;
			if (( ADD==val)) return true;
			if (( RETAIN==val)) return true;
			return false;
		}
	}

	public static class CollInquiryStatus {
		public static final long COMPLETED_WITH_WARNINGS = 3;
		public static final long COMPLETED = 2;
		public static final long ACCEPTED_WITH_WARNINGS = 1;
		public static final long ACCEPTED = 0;
		public static final long REJECTED = 4;
		public static boolean isValid(long val) {
			if (( COMPLETED_WITH_WARNINGS==val)) return true;
			if (( COMPLETED==val)) return true;
			if (( ACCEPTED_WITH_WARNINGS==val)) return true;
			if (( ACCEPTED==val)) return true;
			if (( REJECTED==val)) return true;
			return false;
		}
	}

	public static class CollInquiryResult {
		public static final long INVALID_PARTIES = 3;
		public static final long INVALID_OR_UNKNOWN_COLLATERAL_TYPE = 2;
		public static final long INVALID_OR_UNKNOWN_INSTRUMENT = 1;
		public static final long SUCCESSFUL_DEFAULT = 0;
		public static final long NO_COLLATERAL_FOUND_FOR_THE_ORDER_SPECIFIED = 7;
		public static final long NO_COLLATERAL_FOUND_FOR_THE_TRADE_SPECIFIED = 6;
		public static final long INVALID_DESTINATION_REQUESTED = 5;
		public static final long INVALID_TRANSPORT_TYPE_REQUESTED = 4;
		public static final long UNAUTHORIZED_FOR_COLLATERAL_INQUIRY = 9;
		public static final long COLLATERAL_INQUIRY_TYPE_NOT_SUPPORTED = 8;
		public static final long OTHER_FURTHER_INFORMATION_IN_TEXT_58_FIELD = 99;
		public static boolean isValid(long val) {
			if (( INVALID_PARTIES==val)) return true;
			if (( INVALID_OR_UNKNOWN_COLLATERAL_TYPE==val)) return true;
			if (( INVALID_OR_UNKNOWN_INSTRUMENT==val)) return true;
			if (( SUCCESSFUL_DEFAULT==val)) return true;
			if (( NO_COLLATERAL_FOUND_FOR_THE_ORDER_SPECIFIED==val)) return true;
			if (( NO_COLLATERAL_FOUND_FOR_THE_TRADE_SPECIFIED==val)) return true;
			if (( INVALID_DESTINATION_REQUESTED==val)) return true;
			if (( INVALID_TRANSPORT_TYPE_REQUESTED==val)) return true;
			if (( UNAUTHORIZED_FOR_COLLATERAL_INQUIRY==val)) return true;
			if (( COLLATERAL_INQUIRY_TYPE_NOT_SUPPORTED==val)) return true;
			if (( OTHER_FURTHER_INFORMATION_IN_TEXT_58_FIELD==val)) return true;
			return false;
		}
	}

	public static class StrategyParameterType {
		public static final long UTCTIMESTAMP = 19;
		public static final long EXCHANGE = 17;
		public static final long MONTHYEAR = 18;
		public static final long MULTIPLECHARVALUE = 15;
		public static final long CURRENCY = 16;
		public static final long BOOLEAN = 13;
		public static final long STRING = 14;
		public static final long PERCENTAGE = 11;
		public static final long CHAR = 12;
		public static final long LOCALMKTDATE = 21;
		public static final long UTCTIMEONLY = 20;
		public static final long UTCDATEONLY = 22;
		public static final long DATA = 23;
		public static final long MULTIPLESTRINGVALUE = 24;
		public static final long COUNTRY = 25;
		public static final long LANGUAGE = 26;
		public static final long TZTIMEONLY = 27;
		public static final long TZTIMESTAMP = 28;
		public static final long TENOR = 29;
		public static final long NUMINGROUP = 3;
		public static final long LENGTH = 2;
		public static final long AMT = 10;
		public static final long INT = 1;
		public static final long QTY = 7;
		public static final long FLOAT = 6;
		public static final long TAGNUM = 5;
		public static final long SEQNUM = 4;
		public static final long PRICEOFFSET = 9;
		public static final long PRICE = 8;
		public static boolean isValid(long val) {
			if (( UTCTIMESTAMP==val)) return true;
			if (( EXCHANGE==val)) return true;
			if (( MONTHYEAR==val)) return true;
			if (( MULTIPLECHARVALUE==val)) return true;
			if (( CURRENCY==val)) return true;
			if (( BOOLEAN==val)) return true;
			if (( STRING==val)) return true;
			if (( PERCENTAGE==val)) return true;
			if (( CHAR==val)) return true;
			if (( LOCALMKTDATE==val)) return true;
			if (( UTCTIMEONLY==val)) return true;
			if (( UTCDATEONLY==val)) return true;
			if (( DATA==val)) return true;
			if (( MULTIPLESTRINGVALUE==val)) return true;
			if (( COUNTRY==val)) return true;
			if (( LANGUAGE==val)) return true;
			if (( TZTIMEONLY==val)) return true;
			if (( TZTIMESTAMP==val)) return true;
			if (( TENOR==val)) return true;
			if (( NUMINGROUP==val)) return true;
			if (( LENGTH==val)) return true;
			if (( AMT==val)) return true;
			if (( INT==val)) return true;
			if (( QTY==val)) return true;
			if (( FLOAT==val)) return true;
			if (( TAGNUM==val)) return true;
			if (( SEQNUM==val)) return true;
			if (( PRICEOFFSET==val)) return true;
			if (( PRICE==val)) return true;
			return false;
		}
	}

	public static class SecurityStatus {
		public static final byte[] INACTIVE = "2".getBytes();
		public static final byte[] ACTIVE = "1".getBytes();
		public static boolean isValid(byte[] val) {
			if (Utils.equals( INACTIVE, val)) return true;
			if (Utils.equals( ACTIVE, val)) return true;
			return false;
		}
	}

	public static class UnderlyingCashType {
		public static final byte[] DIFF = "DIFF".getBytes();
		public static final byte[] FIXED = "FIXED".getBytes();
		public static boolean isValid(byte[] val) {
			if (Utils.equals( DIFF, val)) return true;
			if (Utils.equals( FIXED, val)) return true;
			return false;
		}
	}

	public static class UnderlyingSettlementType {
		public static final long T1 = 2;
		public static final long T4 = 5;
		public static final long T3 = 4;
		public static boolean isValid(long val) {
			if (( T1==val)) return true;
			if (( T4==val)) return true;
			if (( T3==val)) return true;
			return false;
		}
	}

	public static class SecurityUpdateAction {
		public static final byte DELETE = 'D';
		public static final byte ADD = 'A';
		public static final byte MODIFY = 'M';
		public static boolean isValid(byte val) {
			if (( DELETE==val)) return true;
			if (( ADD==val)) return true;
			if (( MODIFY==val)) return true;
			return false;
		}
	}

	public static class ExpirationQtyType {
		public static final long FINAL_WILL_BE_EXERCISED = 3;
		public static final long NON_AUTO_EXERCISE = 2;
		public static final long AUTO_EXERCISE = 1;
		public static final long DIFFERENCE = 5;
		public static final long CONTRARY_INTENTION = 4;
		public static boolean isValid(long val) {
			if (( FINAL_WILL_BE_EXERCISED==val)) return true;
			if (( NON_AUTO_EXERCISE==val)) return true;
			if (( AUTO_EXERCISE==val)) return true;
			if (( DIFFERENCE==val)) return true;
			if (( CONTRARY_INTENTION==val)) return true;
			return false;
		}
	}

	public static class IndividualAllocType {
		public static final long THIRD_PARTY_ALLOCATION = 2;
		public static final long SUB_ALLOCATE = 1;
		public static boolean isValid(long val) {
			if (( THIRD_PARTY_ALLOCATION==val)) return true;
			if (( SUB_ALLOCATE==val)) return true;
			return false;
		}
	}

	public static class UnitOfMeasure {
		public static final byte[] TONS_US = "tn".getBytes();
		public static final byte[] GALLONS = "Gal".getBytes();
		public static final byte[] BUSHELS = "Bu".getBytes();
		public static final byte[] MEGAWATT_HOURS = "MWh".getBytes();
		public static final byte[] ONE_MILLION_BTU = "MMBtu".getBytes();
		public static final byte[] ALLOWANCES = "Alw".getBytes();
		public static final byte[] MILLION_BARRELS = "MMbbl".getBytes();
		public static final byte[] METRIC_TONS_AKA_TONNE = "t".getBytes();
		public static final byte[] BARRELS = "Bbl".getBytes();
		public static final byte[] US_DOLLARS = "USD".getBytes();
		public static final byte[] TROY_OUNCES = "oz_tr".getBytes();
		public static final byte[] POUNDS = "lbs".getBytes();
		public static final byte[] BILLION_CUBIC_FEET = "Bcf".getBytes();
		public static boolean isValid(byte[] val) {
			if (Utils.equals( TONS_US, val)) return true;
			if (Utils.equals( GALLONS, val)) return true;
			if (Utils.equals( BUSHELS, val)) return true;
			if (Utils.equals( MEGAWATT_HOURS, val)) return true;
			if (Utils.equals( ONE_MILLION_BTU, val)) return true;
			if (Utils.equals( ALLOWANCES, val)) return true;
			if (Utils.equals( MILLION_BARRELS, val)) return true;
			if (Utils.equals( METRIC_TONS_AKA_TONNE, val)) return true;
			if (Utils.equals( BARRELS, val)) return true;
			if (Utils.equals( US_DOLLARS, val)) return true;
			if (Utils.equals( TROY_OUNCES, val)) return true;
			if (Utils.equals( POUNDS, val)) return true;
			if (Utils.equals( BILLION_CUBIC_FEET, val)) return true;
			return false;
		}
	}

	public static class TimeUnit {
		public static final byte[] DAY = "D".getBytes();
		public static final byte[] SECOND = "S".getBytes();
		public static final byte[] YEAR = "Yr".getBytes();
		public static final byte[] HOUR = "H".getBytes();
		public static final byte[] MONTH = "Mo".getBytes();
		public static final byte[] WEEK = "Wk".getBytes();
		public static final byte[] MINUTE = "Min".getBytes();
		public static boolean isValid(byte[] val) {
			if (Utils.equals( DAY, val)) return true;
			if (Utils.equals( SECOND, val)) return true;
			if (Utils.equals( YEAR, val)) return true;
			if (Utils.equals( HOUR, val)) return true;
			if (Utils.equals( MONTH, val)) return true;
			if (Utils.equals( WEEK, val)) return true;
			if (Utils.equals( MINUTE, val)) return true;
			return false;
		}
	}

	public static class AllocMethod {
		public static final long MANUAL = 3;
		public static final long GUARANTOR = 2;
		public static final long AUTOMATIC = 1;
		public static boolean isValid(long val) {
			if (( MANUAL==val)) return true;
			if (( GUARANTOR==val)) return true;
			if (( AUTOMATIC==val)) return true;
			return false;
		}
	}

	public static class AsOfIndicator {
		public static final byte TRUE__TRADE_IS_AN_ASOF_TRADE = '1';
		public static final byte FALSE__TRADE_IS_NOT_AN_ASOF_TRADE = '0';
		public static boolean isValid(byte val) {
			if (( TRUE__TRADE_IS_AN_ASOF_TRADE==val)) return true;
			if (( FALSE__TRADE_IS_NOT_AN_ASOF_TRADE==val)) return true;
			return false;
		}
	}

	public static class MDBookType {
		public static final long ORDER_DEPTH = 3;
		public static final long PRICE_DEPTH = 2;
		public static final long TOP_OF_BOOK = 1;
		public static boolean isValid(long val) {
			if (( ORDER_DEPTH==val)) return true;
			if (( PRICE_DEPTH==val)) return true;
			if (( TOP_OF_BOOK==val)) return true;
			return false;
		}
	}

	public static class MDOriginType {
		public static final long CROSS = 2;
		public static final long OFFBOOK = 1;
		public static final long BOOK = 0;
		public static boolean isValid(long val) {
			if (( CROSS==val)) return true;
			if (( OFFBOOK==val)) return true;
			if (( BOOK==val)) return true;
			return false;
		}
	}

	public static class CustOrderHandlingInst {
		public static final byte[] EXCHANGE_FOR_PHYSICAL_TRANSACTION = "E.W".getBytes();
		public static final byte[] STOP_STOCK_TRANSACTION = "S.W".getBytes();
		public static final byte[] LIMIT_ON_OPEN = "LOO".getBytes();
		public static final byte[] TIME_ORDER = "TMO".getBytes();
		public static final byte[] MARKET_ON_OPEN = "MOO".getBytes();
		public static final byte[] PEGGED = "PEG".getBytes();
		public static final byte[] MINIMUM_QUANTITY = "MQT".getBytes();
		public static final byte[] IMBALANCE_ONLY = "IO".getBytes();
		public static final byte[] IMMEDIATE_OR_CANCEL = "IOC".getBytes();
		public static final byte[] WORK = "WRK".getBytes();
		public static final byte[] MARKET_ON_CLOSE = "MOC".getBytes();
		public static final byte[] MARKET_AT_OPEN = "MAO".getBytes();
		public static final byte[] ALL_OR_NONE = "AON".getBytes();
		public static final byte[] DIRECTED_ORDER = "DIR".getBytes();
		public static final byte[] TRAILING_STOP = "TS".getBytes();
		public static final byte[] SCALE = "SCL".getBytes();
		public static final byte[] LIMIT_ON_CLOSE = "LOC".getBytes();
		public static final byte[] NOT_HELD = "NH".getBytes();
		public static final byte[] CASH_NOT_HELD = "CNH".getBytes();
		public static final byte[] RESERVE_SIZE_ORDER = "RSV".getBytes();
		public static final byte[] FILL_OR_KILL = "FOK".getBytes();
		public static final byte[] OVER_THE_DAY = "OVD".getBytes();
		public static final byte[] MARKET_AT_CLOSE = "MAC".getBytes();
		public static final byte[] ADDON_ORDER = "ADD".getBytes();
		public static boolean isValid(byte[] val) {
			if (Utils.equals( EXCHANGE_FOR_PHYSICAL_TRANSACTION, val)) return true;
			if (Utils.equals( STOP_STOCK_TRANSACTION, val)) return true;
			if (Utils.equals( LIMIT_ON_OPEN, val)) return true;
			if (Utils.equals( TIME_ORDER, val)) return true;
			if (Utils.equals( MARKET_ON_OPEN, val)) return true;
			if (Utils.equals( PEGGED, val)) return true;
			if (Utils.equals( MINIMUM_QUANTITY, val)) return true;
			if (Utils.equals( IMBALANCE_ONLY, val)) return true;
			if (Utils.equals( IMMEDIATE_OR_CANCEL, val)) return true;
			if (Utils.equals( WORK, val)) return true;
			if (Utils.equals( MARKET_ON_CLOSE, val)) return true;
			if (Utils.equals( MARKET_AT_OPEN, val)) return true;
			if (Utils.equals( ALL_OR_NONE, val)) return true;
			if (Utils.equals( DIRECTED_ORDER, val)) return true;
			if (Utils.equals( TRAILING_STOP, val)) return true;
			if (Utils.equals( SCALE, val)) return true;
			if (Utils.equals( LIMIT_ON_CLOSE, val)) return true;
			if (Utils.equals( NOT_HELD, val)) return true;
			if (Utils.equals( CASH_NOT_HELD, val)) return true;
			if (Utils.equals( RESERVE_SIZE_ORDER, val)) return true;
			if (Utils.equals( FILL_OR_KILL, val)) return true;
			if (Utils.equals( OVER_THE_DAY, val)) return true;
			if (Utils.equals( MARKET_AT_CLOSE, val)) return true;
			if (Utils.equals( ADDON_ORDER, val)) return true;
			return false;
		}
	}

	public static class OrderHandlingInstSource {
		public static final long NASD_OATS = 1;
		public static boolean isValid(long val) {
			if (( NASD_OATS==val)) return true;
			return false;
		}
	}

	public static class DeskType {
		public static final byte[] PROGRAM_TRADING = "PT".getBytes();
		public static final byte[] DERIVATIVES = "D".getBytes();
		public static final byte[] TRADING = "T".getBytes();
		public static final byte[] ARBITRAGE = "AR".getBytes();
		public static final byte[] INTERNATIONAL = "IN".getBytes();
		public static final byte[] AGENCY = "A".getBytes();
		public static final byte[] SALES = "S".getBytes();
		public static final byte[] PROPRIETARY = "PR".getBytes();
		public static final byte[] PREFERRED_TRADING = "PF".getBytes();
		public static final byte[] INSTITUTIONAL = "IS".getBytes();
		public static final byte[] OTHER = "O".getBytes();
		public static boolean isValid(byte[] val) {
			if (Utils.equals( PROGRAM_TRADING, val)) return true;
			if (Utils.equals( DERIVATIVES, val)) return true;
			if (Utils.equals( TRADING, val)) return true;
			if (Utils.equals( ARBITRAGE, val)) return true;
			if (Utils.equals( INTERNATIONAL, val)) return true;
			if (Utils.equals( AGENCY, val)) return true;
			if (Utils.equals( SALES, val)) return true;
			if (Utils.equals( PROPRIETARY, val)) return true;
			if (Utils.equals( PREFERRED_TRADING, val)) return true;
			if (Utils.equals( INSTITUTIONAL, val)) return true;
			if (Utils.equals( OTHER, val)) return true;
			return false;
		}
	}

	public static class DeskTypeSource {
		public static final long NASD_OATS = 1;
		public static boolean isValid(long val) {
			if (( NASD_OATS==val)) return true;
			return false;
		}
	}

	public static class DeskOrderHandlingInst {
		public static final byte[] EXCHANGE_FOR_PHYSICAL_TRANSACTION = "E.W".getBytes();
		public static final byte[] STOP_STOCK_TRANSACTION = "S.W".getBytes();
		public static final byte[] LIMIT_ON_OPEN = "LOO".getBytes();
		public static final byte[] TIME_ORDER = "TMO".getBytes();
		public static final byte[] MARKET_ON_OPEN = "MOO".getBytes();
		public static final byte[] PEGGED = "PEG".getBytes();
		public static final byte[] MINIMUM_QUANTITY = "MQT".getBytes();
		public static final byte[] IMBALANCE_ONLY = "IO".getBytes();
		public static final byte[] IMMEDIATE_OR_CANCEL = "IOC".getBytes();
		public static final byte[] WORK = "WRK".getBytes();
		public static final byte[] MARKET_ON_CLOSE = "MOC".getBytes();
		public static final byte[] MARKET_AT_OPEN = "MAO".getBytes();
		public static final byte[] ALL_OR_NONE = "AON".getBytes();
		public static final byte[] DIRECTED_ORDER = "DIR".getBytes();
		public static final byte[] TRAILING_STOP = "TS".getBytes();
		public static final byte[] SCALE = "SCL".getBytes();
		public static final byte[] LIMIT_ON_CLOSE = "LOC".getBytes();
		public static final byte[] NOT_HELD = "NH".getBytes();
		public static final byte[] CASH_NOT_HELD = "CNH".getBytes();
		public static final byte[] RESERVE_SIZE_ORDER = "RSV".getBytes();
		public static final byte[] FILL_OR_KILL = "FOK".getBytes();
		public static final byte[] OVER_THE_DAY = "OVD".getBytes();
		public static final byte[] MARKET_AT_CLOSE = "MAC".getBytes();
		public static final byte[] ADDON_ORDER = "ADD".getBytes();
		public static boolean isValid(byte[] val) {
			if (Utils.equals( EXCHANGE_FOR_PHYSICAL_TRANSACTION, val)) return true;
			if (Utils.equals( STOP_STOCK_TRANSACTION, val)) return true;
			if (Utils.equals( LIMIT_ON_OPEN, val)) return true;
			if (Utils.equals( TIME_ORDER, val)) return true;
			if (Utils.equals( MARKET_ON_OPEN, val)) return true;
			if (Utils.equals( PEGGED, val)) return true;
			if (Utils.equals( MINIMUM_QUANTITY, val)) return true;
			if (Utils.equals( IMBALANCE_ONLY, val)) return true;
			if (Utils.equals( IMMEDIATE_OR_CANCEL, val)) return true;
			if (Utils.equals( WORK, val)) return true;
			if (Utils.equals( MARKET_ON_CLOSE, val)) return true;
			if (Utils.equals( MARKET_AT_OPEN, val)) return true;
			if (Utils.equals( ALL_OR_NONE, val)) return true;
			if (Utils.equals( DIRECTED_ORDER, val)) return true;
			if (Utils.equals( TRAILING_STOP, val)) return true;
			if (Utils.equals( SCALE, val)) return true;
			if (Utils.equals( LIMIT_ON_CLOSE, val)) return true;
			if (Utils.equals( NOT_HELD, val)) return true;
			if (Utils.equals( CASH_NOT_HELD, val)) return true;
			if (Utils.equals( RESERVE_SIZE_ORDER, val)) return true;
			if (Utils.equals( FILL_OR_KILL, val)) return true;
			if (Utils.equals( OVER_THE_DAY, val)) return true;
			if (Utils.equals( MARKET_AT_CLOSE, val)) return true;
			if (Utils.equals( ADDON_ORDER, val)) return true;
			return false;
		}
	}

	public static class ExecAckStatus {
		public static final byte DONT_KNOW__REJECTED = '2';
		public static final byte ACCEPTED = '1';
		public static final byte RECEIVED_NOT_YET_PROCESSED = '0';
		public static boolean isValid(byte val) {
			if (( DONT_KNOW__REJECTED==val)) return true;
			if (( ACCEPTED==val)) return true;
			if (( RECEIVED_NOT_YET_PROCESSED==val)) return true;
			return false;
		}
	}

	public static class CollApplType {
		public static final long GENERAL = 1;
		public static final long SPECIFIC_DEPOSIT = 0;
		public static boolean isValid(long val) {
			if (( GENERAL==val)) return true;
			if (( SPECIFIC_DEPOSIT==val)) return true;
			return false;
		}
	}

	public static class UnderlyingFXRateCalc {
		public static final byte DIVIDE = 'D';
		public static final byte MULTIPLY = 'M';
		public static boolean isValid(byte val) {
			if (( DIVIDE==val)) return true;
			if (( MULTIPLY==val)) return true;
			return false;
		}
	}

	public static class AllocPositionEffect {
		public static final byte FIFO = 'F';
		public static final byte ROLLED = 'R';
		public static final byte CLOSE = 'C';
		public static final byte OPEN = 'O';
		public static boolean isValid(byte val) {
			if (( FIFO==val)) return true;
			if (( ROLLED==val)) return true;
			if (( CLOSE==val)) return true;
			if (( OPEN==val)) return true;
			return false;
		}
	}

	public static class DealingCapacity {
		public static final byte PRINCIPAL = 'P';
		public static final byte AGENT = 'A';
		public static final byte RISKLESS_PRINCIPAL = 'R';
		public static boolean isValid(byte val) {
			if (( PRINCIPAL==val)) return true;
			if (( AGENT==val)) return true;
			if (( RISKLESS_PRINCIPAL==val)) return true;
			return false;
		}
	}

	public static class AggressorIndicator {
		public static final boolean ORDER_INITIATOR_IS_PASSIVE = false;
		public static final boolean ORDER_INITIATOR_IS_AGGRESSOR = true;
		public static boolean isValid(boolean val) {
			if (( ORDER_INITIATOR_IS_PASSIVE==val)) return true;
			if (( ORDER_INITIATOR_IS_AGGRESSOR==val)) return true;
			return false;
		}
	}

	public static class MDQuoteType {
		public static final long COUNTER = 3;
		public static final long RESTRICTED_TRADEABLE = 2;
		public static final long TRADEABLE = 1;
		public static final long INDICATIVE = 0;
		public static final long INDICATIVE_AND_TRADEABLE = 4;
		public static boolean isValid(long val) {
			if (( COUNTER==val)) return true;
			if (( RESTRICTED_TRADEABLE==val)) return true;
			if (( TRADEABLE==val)) return true;
			if (( INDICATIVE==val)) return true;
			if (( INDICATIVE_AND_TRADEABLE==val)) return true;
			return false;
		}
	}

	public static class RefOrderIDSource {
		public static final byte QUOTEENTRYID299 = '3';
		public static final byte MDENTRYID278 = '2';
		public static final byte ORDERID37 = '1';
		public static final byte SECONDARYORDERID198 = '0';
		public static final byte ORIGINAL_ORDER_ID = '4';
		public static boolean isValid(byte val) {
			if (( QUOTEENTRYID299==val)) return true;
			if (( MDENTRYID278==val)) return true;
			if (( ORDERID37==val)) return true;
			if (( SECONDARYORDERID198==val)) return true;
			if (( ORIGINAL_ORDER_ID==val)) return true;
			return false;
		}
	}

	public static class DisplayWhen {
		public static final byte EXHAUST_WHEN_DISPLAYQTY__0 = '2';
		public static final byte IMMEDIATE_AFTER_EACH_FILL = '1';
		public static boolean isValid(byte val) {
			if (( EXHAUST_WHEN_DISPLAYQTY__0==val)) return true;
			if (( IMMEDIATE_AFTER_EACH_FILL==val)) return true;
			return false;
		}
	}

	public static class DisplayMethod {
		public static final byte RANDOM_RANDOMIZE_VALUE = '3';
		public static final byte NEW_USE_REFRESHQTY = '2';
		public static final byte INITIAL_USE_ORIGINAL_DISPLAYQTY = '1';
		public static final byte UNDISCLOSED_INVISIBLE_ORDER = '4';
		public static boolean isValid(byte val) {
			if (( RANDOM_RANDOMIZE_VALUE==val)) return true;
			if (( NEW_USE_REFRESHQTY==val)) return true;
			if (( INITIAL_USE_ORIGINAL_DISPLAYQTY==val)) return true;
			if (( UNDISCLOSED_INVISIBLE_ORDER==val)) return true;
			return false;
		}
	}

	public static class PriceProtectionScope {
		public static final byte GLOBAL_ACROSS_ALL_MARKETS = '3';
		public static final byte NATIONAL_ACROSS_ALL_NATIONAL_MARKETS = '2';
		public static final byte LOCAL_EXCHANGE_ECN_ATS = '1';
		public static final byte NONE = '0';
		public static boolean isValid(byte val) {
			if (( GLOBAL_ACROSS_ALL_MARKETS==val)) return true;
			if (( NATIONAL_ACROSS_ALL_NATIONAL_MARKETS==val)) return true;
			if (( LOCAL_EXCHANGE_ECN_ATS==val)) return true;
			if (( NONE==val)) return true;
			return false;
		}
	}

	public static class LotType {
		public static final byte BLOCK_LOT = '3';
		public static final byte ROUND_LOT = '2';
		public static final byte ODD_LOT = '1';
		public static final byte ROUND_LOT_BASED_UPON_UNITOFMEASURE996 = '4';
		public static boolean isValid(byte val) {
			if (( BLOCK_LOT==val)) return true;
			if (( ROUND_LOT==val)) return true;
			if (( ODD_LOT==val)) return true;
			if (( ROUND_LOT_BASED_UPON_UNITOFMEASURE996==val)) return true;
			return false;
		}
	}

	public static class PegPriceType {
		public static final long OPENING_PEG = 3;
		public static final long MIDPRICE_PEG_MIDPRICE_OF_INSIDE_QUOTE = 2;
		public static final long LAST_PEG_LAST_SALE = 1;
		public static final long PEG_TO_VWAP = 7;
		public static final long PRIMARY_PEG_PRIMARY_MARKET__BUY_AT_BID_OR_SELL_AT_OFFER = 5;
		public static final long MARKET_PEG = 4;
		public static final long PEG_TO_LIMIT_PRICE = 9;
		public static final long TRAILING_STOP_PEG = 8;
		public static boolean isValid(long val) {
			if (( OPENING_PEG==val)) return true;
			if (( MIDPRICE_PEG_MIDPRICE_OF_INSIDE_QUOTE==val)) return true;
			if (( LAST_PEG_LAST_SALE==val)) return true;
			if (( PEG_TO_VWAP==val)) return true;
			if (( PRIMARY_PEG_PRIMARY_MARKET__BUY_AT_BID_OR_SELL_AT_OFFER==val)) return true;
			if (( MARKET_PEG==val)) return true;
			if (( PEG_TO_LIMIT_PRICE==val)) return true;
			if (( TRAILING_STOP_PEG==val)) return true;
			return false;
		}
	}

	public static class TriggerType {
		public static final byte NEXT_AUCTION = '3';
		public static final byte SPECIFIED_TRADING_SESSION = '2';
		public static final byte PARTIAL_EXECUTION = '1';
		public static final byte PRICE_MOVEMENT = '4';
		public static boolean isValid(byte val) {
			if (( NEXT_AUCTION==val)) return true;
			if (( SPECIFIED_TRADING_SESSION==val)) return true;
			if (( PARTIAL_EXECUTION==val)) return true;
			if (( PRICE_MOVEMENT==val)) return true;
			return false;
		}
	}

	public static class TriggerAction {
		public static final byte CANCEL = '3';
		public static final byte MODIFY = '2';
		public static final byte ACTIVATE = '1';
		public static boolean isValid(byte val) {
			if (( CANCEL==val)) return true;
			if (( MODIFY==val)) return true;
			if (( ACTIVATE==val)) return true;
			return false;
		}
	}

	public static class TriggerPriceType {
		public static final byte BEST_BID = '3';
		public static final byte LAST_TRADE = '2';
		public static final byte BEST_OFFER = '1';
		public static final byte BEST_MID = '6';
		public static final byte BEST_OFFER_OR_LAST_TRADE = '5';
		public static final byte BEST_BID_OR_LAST_TRADE = '4';
		public static boolean isValid(byte val) {
			if (( BEST_BID==val)) return true;
			if (( LAST_TRADE==val)) return true;
			if (( BEST_OFFER==val)) return true;
			if (( BEST_MID==val)) return true;
			if (( BEST_OFFER_OR_LAST_TRADE==val)) return true;
			if (( BEST_BID_OR_LAST_TRADE==val)) return true;
			return false;
		}
	}

	public static class TriggerPriceTypeScope {
		public static final byte GLOBAL_ACROSS_ALL_MARKETS = '3';
		public static final byte NATIONAL_ACROSS_ALL_NATIONAL_MARKETS = '2';
		public static final byte LOCAL_EXCHANGE_ECN_ATS = '1';
		public static final byte NONE = '0';
		public static boolean isValid(byte val) {
			if (( GLOBAL_ACROSS_ALL_MARKETS==val)) return true;
			if (( NATIONAL_ACROSS_ALL_NATIONAL_MARKETS==val)) return true;
			if (( LOCAL_EXCHANGE_ECN_ATS==val)) return true;
			if (( NONE==val)) return true;
			return false;
		}
	}

	public static class TriggerPriceDirection {
		public static final byte TRIGGER_IF_THE_PRICE_OF_THE_SPECIFIED_TYPE_GOES_DOWN_TO_OR_THROU = 'D';
		public static final byte TRIGGER_IF_THE_PRICE_OF_THE_SPECIFIED_TYPE_GOES_UP_TO_OR_THROUGH = 'U';
		public static boolean isValid(byte val) {
			if (( TRIGGER_IF_THE_PRICE_OF_THE_SPECIFIED_TYPE_GOES_DOWN_TO_OR_THROU==val)) return true;
			if (( TRIGGER_IF_THE_PRICE_OF_THE_SPECIFIED_TYPE_GOES_UP_TO_OR_THROUGH==val)) return true;
			return false;
		}
	}

	public static class TriggerOrderType {
		public static final byte LIMIT = '2';
		public static final byte MARKET = '1';
		public static boolean isValid(byte val) {
			if (( LIMIT==val)) return true;
			if (( MARKET==val)) return true;
			return false;
		}
	}

	public static class OrderCategory {
		public static final byte PRIVATELY_NEGOTIATED_TRADE = '3';
		public static final byte QUOTE = '2';
		public static final byte ORDER = '1';
		public static final byte IMPLIED_ORDER = '7';
		public static final byte QUOTE_REQUEST = '6';
		public static final byte LINKED_ORDER = '5';
		public static final byte MULTILEG_ORDER = '4';
		public static final byte STREAMING_PRICE_QUOTE = '9';
		public static final byte CROSS_ORDER = '8';
		public static boolean isValid(byte val) {
			if (( PRIVATELY_NEGOTIATED_TRADE==val)) return true;
			if (( QUOTE==val)) return true;
			if (( ORDER==val)) return true;
			if (( IMPLIED_ORDER==val)) return true;
			if (( QUOTE_REQUEST==val)) return true;
			if (( LINKED_ORDER==val)) return true;
			if (( MULTILEG_ORDER==val)) return true;
			if (( STREAMING_PRICE_QUOTE==val)) return true;
			if (( CROSS_ORDER==val)) return true;
			return false;
		}
	}

	public static class TradeHandlingInstr {
		public static final byte ONEPARTY_REPORT_FOR_PASS_THROUGH = '3';
		public static final byte ONEPARTY_REPORT_FOR_MATCHING = '2';
		public static final byte TWOPARTY_REPORT = '1';
		public static final byte TRADE_CONFIRMATION = '0';
		public static final byte TWO_PARTY_REPORT_FOR_CLAIM = '5';
		public static final byte AUTOMATED_FLOOR_ORDER_ROUTING = '4';
		public static boolean isValid(byte val) {
			if (( ONEPARTY_REPORT_FOR_PASS_THROUGH==val)) return true;
			if (( ONEPARTY_REPORT_FOR_MATCHING==val)) return true;
			if (( TWOPARTY_REPORT==val)) return true;
			if (( TRADE_CONFIRMATION==val)) return true;
			if (( TWO_PARTY_REPORT_FOR_CLAIM==val)) return true;
			if (( AUTOMATED_FLOOR_ORDER_ROUTING==val)) return true;
			return false;
		}
	}

	public static class ApplVerID {
		public static final byte[] FIX41 = "3".getBytes();
		public static final byte[] FIX40 = "2".getBytes();
		public static final byte[] FIX30 = "1".getBytes();
		public static final byte[] FIX27 = "0".getBytes();
		public static final byte[] FIX50 = "7".getBytes();
		public static final byte[] FIX44 = "6".getBytes();
		public static final byte[] FIX43 = "5".getBytes();
		public static final byte[] FIX42 = "4".getBytes();
		public static final byte[] FIX50SP2 = "9".getBytes();
		public static final byte[] FIX50SP1 = "8".getBytes();
		public static boolean isValid(byte[] val) {
			if (Utils.equals( FIX41, val)) return true;
			if (Utils.equals( FIX40, val)) return true;
			if (Utils.equals( FIX30, val)) return true;
			if (Utils.equals( FIX27, val)) return true;
			if (Utils.equals( FIX50, val)) return true;
			if (Utils.equals( FIX44, val)) return true;
			if (Utils.equals( FIX43, val)) return true;
			if (Utils.equals( FIX42, val)) return true;
			if (Utils.equals( FIX50SP2, val)) return true;
			if (Utils.equals( FIX50SP1, val)) return true;
			return false;
		}
	}

	public static class ExDestinationIDSource {
		public static final byte PROPRIETARY__CUSTOM_CODE = 'D';
		public static final byte ISO_COUNTRY_CODE = 'E';
		public static final byte MIC_ISO_10383__MARKET_IDENTIFIER_CODE = 'G';
		public static final byte BIC_BANK_IDENTIFICATION_CODE_ISO_9362 = 'B';
		public static final byte GENERALLY_ACCEPTED_MARKET_PARTICIPANT_IDENTIFIER_EG_NASD_MNEMONI = 'C';
		public static boolean isValid(byte val) {
			if (( PROPRIETARY__CUSTOM_CODE==val)) return true;
			if (( ISO_COUNTRY_CODE==val)) return true;
			if (( MIC_ISO_10383__MARKET_IDENTIFIER_CODE==val)) return true;
			if (( BIC_BANK_IDENTIFICATION_CODE_ISO_9362==val)) return true;
			if (( GENERALLY_ACCEPTED_MARKET_PARTICIPANT_IDENTIFIER_EG_NASD_MNEMONI==val)) return true;
			return false;
		}
	}

	public static class ImpliedMarketIndicator {
		public static final long BOTH_IMPLIEDIN_AND_IMPLIEDOUT = 3;
		public static final long IMPLIEDOUT__THE_EXISTENCE_OF_THE_UNDERLYING_LEGS_ARE_IMPLIED_BY_ = 2;
		public static final long IMPLIEDIN__THE_EXISTENCE_OF_A_MULTILEG_INSTRUMENT_IS_IMPLIED_BY_ = 1;
		public static final long NOT_IMPLIED = 0;
		public static boolean isValid(long val) {
			if (( BOTH_IMPLIEDIN_AND_IMPLIEDOUT==val)) return true;
			if (( IMPLIEDOUT__THE_EXISTENCE_OF_THE_UNDERLYING_LEGS_ARE_IMPLIED_BY_==val)) return true;
			if (( IMPLIEDIN__THE_EXISTENCE_OF_A_MULTILEG_INSTRUMENT_IS_IMPLIED_BY_==val)) return true;
			if (( NOT_IMPLIED==val)) return true;
			return false;
		}
	}

	public static class SettlObligMode {
		public static final long FINAL = 2;
		public static final long PRELIMINARY = 1;
		public static boolean isValid(long val) {
			if (( FINAL==val)) return true;
			if (( PRELIMINARY==val)) return true;
			return false;
		}
	}

	public static class SettlObligTransType {
		public static final byte RESTATE = 'T';
		public static final byte REPLACE = 'R';
		public static final byte CANCEL = 'C';
		public static final byte NEW = 'N';
		public static boolean isValid(byte val) {
			if (( RESTATE==val)) return true;
			if (( REPLACE==val)) return true;
			if (( CANCEL==val)) return true;
			if (( NEW==val)) return true;
			return false;
		}
	}

	public static class SettlObligSource {
		public static final byte INVESTOR = '3';
		public static final byte INSTRUCTIONS_FOR_INSTITUTION = '2';
		public static final byte INSTRUCTIONS_OF_BROKER = '1';
		public static boolean isValid(byte val) {
			if (( INVESTOR==val)) return true;
			if (( INSTRUCTIONS_FOR_INSTITUTION==val)) return true;
			if (( INSTRUCTIONS_OF_BROKER==val)) return true;
			return false;
		}
	}

	public static class QuoteEntryStatus {
		public static final long ACCEPTED = 0;
		public static final long EXPIRED = 7;
		public static final long REMOVED_FROM_MARKET = 6;
		public static final long REJECTED = 5;
		public static final long CANCELED_DUE_TO_CROSS_MARKET = 15;
		public static final long ACTIVE = 16;
		public static final long CROSS_MARKET_WARNING = 13;
		public static final long CANCELED_DUE_TO_LOCK_MARKET = 14;
		public static final long LOCKED_MARKET_WARNING = 12;
		public static boolean isValid(long val) {
			if (( ACCEPTED==val)) return true;
			if (( EXPIRED==val)) return true;
			if (( REMOVED_FROM_MARKET==val)) return true;
			if (( REJECTED==val)) return true;
			if (( CANCELED_DUE_TO_CROSS_MARKET==val)) return true;
			if (( ACTIVE==val)) return true;
			if (( CROSS_MARKET_WARNING==val)) return true;
			if (( CANCELED_DUE_TO_LOCK_MARKET==val)) return true;
			if (( LOCKED_MARKET_WARNING==val)) return true;
			return false;
		}
	}

	public static class RespondentType {
		public static final long ALL_MARKET_MAKERS = 3;
		public static final long SPECIFIED_MARKET_PARTICIPANTS = 2;
		public static final long ALL_MARKET_PARTICIPANTS = 1;
		public static final long PRIMARY_MARKET_MAKERS = 4;
		public static boolean isValid(long val) {
			if (( ALL_MARKET_MAKERS==val)) return true;
			if (( SPECIFIED_MARKET_PARTICIPANTS==val)) return true;
			if (( ALL_MARKET_PARTICIPANTS==val)) return true;
			if (( PRIMARY_MARKET_MAKERS==val)) return true;
			return false;
		}
	}

	public static class SecurityTradingEvent {
		public static final long PRICE_VOLATILITY_INTERRUPTION = 3;
		public static final long TRADING_RESUMES_AFTER_HALT = 2;
		public static final long ORDER_IMBALANCE_AUCTION_IS_EXTENDED = 1;
		public static final long CHANGE_OF_BOOK_TYPE = 7;
		public static final long CHANGE_OF_SECURITY_TRADING_STATUS = 6;
		public static final long CHANGE_OF_TRADING_SUBSESSION = 5;
		public static final long CHANGE_OF_TRADING_SESSION = 4;
		public static final long CHANGE_OF_MARKET_DEPTH = 8;
		public static boolean isValid(long val) {
			if (( PRICE_VOLATILITY_INTERRUPTION==val)) return true;
			if (( TRADING_RESUMES_AFTER_HALT==val)) return true;
			if (( ORDER_IMBALANCE_AUCTION_IS_EXTENDED==val)) return true;
			if (( CHANGE_OF_BOOK_TYPE==val)) return true;
			if (( CHANGE_OF_SECURITY_TRADING_STATUS==val)) return true;
			if (( CHANGE_OF_TRADING_SUBSESSION==val)) return true;
			if (( CHANGE_OF_TRADING_SESSION==val)) return true;
			if (( CHANGE_OF_MARKET_DEPTH==val)) return true;
			return false;
		}
	}

	public static class StatsType {
		public static final long AVERAGE_PRICE_VWAP_TWAP__ = 3;
		public static final long HIGH__LOW_PRICE = 2;
		public static final long EXCHANGE_LAST = 1;
		public static final long TURNOVER_PRICE__QTY = 4;
		public static boolean isValid(long val) {
			if (( AVERAGE_PRICE_VWAP_TWAP__==val)) return true;
			if (( HIGH__LOW_PRICE==val)) return true;
			if (( EXCHANGE_LAST==val)) return true;
			if (( TURNOVER_PRICE__QTY==val)) return true;
			return false;
		}
	}

	public static class MDSecSizeType {
		public static final long CUSTOMER = 1;
		public static boolean isValid(long val) {
			if (( CUSTOMER==val)) return true;
			return false;
		}
	}

	public static class SettlMethod {
		public static final byte PHYSICAL_SETTLEMENT_REQUIRED = 'P';
		public static final byte CASH_SETTLEMENT_REQUIRED = 'C';
		public static boolean isValid(byte val) {
			if (( PHYSICAL_SETTLEMENT_REQUIRED==val)) return true;
			if (( CASH_SETTLEMENT_REQUIRED==val)) return true;
			return false;
		}
	}

	public static class ExerciseStyle {
		public static final long BERMUDA = 2;
		public static final long AMERICAN = 1;
		public static final long EUROPEAN = 0;
		public static boolean isValid(long val) {
			if (( BERMUDA==val)) return true;
			if (( AMERICAN==val)) return true;
			if (( EUROPEAN==val)) return true;
			return false;
		}
	}

	public static class PriceQuoteMethod {
		public static final byte[] PERCENT_OF_PAR = "PCTPAR".getBytes();
		public static final byte[] STANDARD_MONEY_PER_UNIT_OF_A_PHYSICAL = "STD".getBytes();
		public static final byte[] INTEREST_RATE_INDEX = "INT".getBytes();
		public static final byte[] INDEX = "INX".getBytes();
		public static boolean isValid(byte[] val) {
			if (Utils.equals( PERCENT_OF_PAR, val)) return true;
			if (Utils.equals( STANDARD_MONEY_PER_UNIT_OF_A_PHYSICAL, val)) return true;
			if (Utils.equals( INTEREST_RATE_INDEX, val)) return true;
			if (Utils.equals( INDEX, val)) return true;
			return false;
		}
	}

	public static class ValuationMethod {
		public static final byte[] FUTURES_STYLE_MARKTOMARKET = "FUT".getBytes();
		public static final byte[] FUTURES_STYLE_WITH_AN_ATTACHED_CASH_ADJUSTMENT = "FUTDA".getBytes();
		public static final byte[] CDS_IN_DELIVERY__USE_RECOVERY_RATE_TO_CALCULATE_OBLIGATION = "CDSD".getBytes();
		public static final byte[] CDS_STYLE_COLLATERALIZATION_OF_MARKET_TO_MARKET_AND_COUPON = "CDS".getBytes();
		public static final byte[] PREMIUM_STYLE = "EQTY".getBytes();
		public static boolean isValid(byte[] val) {
			if (Utils.equals( FUTURES_STYLE_MARKTOMARKET, val)) return true;
			if (Utils.equals( FUTURES_STYLE_WITH_AN_ATTACHED_CASH_ADJUSTMENT, val)) return true;
			if (Utils.equals( CDS_IN_DELIVERY__USE_RECOVERY_RATE_TO_CALCULATE_OBLIGATION, val)) return true;
			if (Utils.equals( CDS_STYLE_COLLATERALIZATION_OF_MARKET_TO_MARKET_AND_COUPON, val)) return true;
			if (Utils.equals( PREMIUM_STYLE, val)) return true;
			return false;
		}
	}

	public static class ListMethod {
		public static final long USER_REQUESTED = 1;
		public static final long PRELISTED_ONLY = 0;
		public static boolean isValid(long val) {
			if (( USER_REQUESTED==val)) return true;
			if (( PRELISTED_ONLY==val)) return true;
			return false;
		}
	}

	public static class TickRuleType {
		public static final long TRADED_AS_A_SPREAD_LEG = 3;
		public static final long FIXED = 2;
		public static final long VARIABLE = 1;
		public static final long REGULAR = 0;
		public static final long SETTLED_AS_A_SPREAD_LEG = 4;
		public static boolean isValid(long val) {
			if (( TRADED_AS_A_SPREAD_LEG==val)) return true;
			if (( FIXED==val)) return true;
			if (( VARIABLE==val)) return true;
			if (( REGULAR==val)) return true;
			if (( SETTLED_AS_A_SPREAD_LEG==val)) return true;
			return false;
		}
	}

	public static class MaturityMonthYearIncrementUnits {
		public static final long YEARS = 3;
		public static final long WEEKS = 2;
		public static final long DAYS = 1;
		public static final long MONTHS = 0;
		public static boolean isValid(long val) {
			if (( YEARS==val)) return true;
			if (( WEEKS==val)) return true;
			if (( DAYS==val)) return true;
			if (( MONTHS==val)) return true;
			return false;
		}
	}

	public static class MaturityMonthYearFormat {
		public static final long YEARMONTHWEEK = 2;
		public static final long YEARMONTHDAY = 1;
		public static final long YEARMONTH_ONLY_DEFAULT = 0;
		public static boolean isValid(long val) {
			if (( YEARMONTHWEEK==val)) return true;
			if (( YEARMONTHDAY==val)) return true;
			if (( YEARMONTH_ONLY_DEFAULT==val)) return true;
			return false;
		}
	}

	public static class PriceLimitType {
		public static final long PERCENTAGE = 2;
		public static final long TICKS = 1;
		public static final long PRICE = 0;
		public static boolean isValid(long val) {
			if (( PERCENTAGE==val)) return true;
			if (( TICKS==val)) return true;
			if (( PRICE==val)) return true;
			return false;
		}
	}

	public static class DerivativeSecurityListRequestType {
		public static final long TRADINGSESSIONID = 3;
		public static final long PRODUCT = 2;
		public static final long SECURITYTYPE_AND_OR_CFICODE = 1;
		public static final long SYMBOL = 0;
		public static final long UNDERLYING_PRODUCT = 7;
		public static final long UNDERLYING_SECURITYTYPE_AND_OR_CFICODE = 6;
		public static final long UNDELYINGSYMBOL = 5;
		public static final long ALL_SECURITIES = 4;
		public static final long MARKETID_OR_MARKETID__MARKETSEGMENTID = 8;
		public static boolean isValid(long val) {
			if (( TRADINGSESSIONID==val)) return true;
			if (( PRODUCT==val)) return true;
			if (( SECURITYTYPE_AND_OR_CFICODE==val)) return true;
			if (( SYMBOL==val)) return true;
			if (( UNDERLYING_PRODUCT==val)) return true;
			if (( UNDERLYING_SECURITYTYPE_AND_OR_CFICODE==val)) return true;
			if (( UNDELYINGSYMBOL==val)) return true;
			if (( ALL_SECURITIES==val)) return true;
			if (( MARKETID_OR_MARKETID__MARKETSEGMENTID==val)) return true;
			return false;
		}
	}

	public static class MarketUpdateAction {
		public static final byte DELETE = 'D';
		public static final byte ADD = 'A';
		public static final byte MODIFY = 'M';
		public static boolean isValid(byte val) {
			if (( DELETE==val)) return true;
			if (( ADD==val)) return true;
			if (( MODIFY==val)) return true;
			return false;
		}
	}

	public static class SessionStatus {
		public static final long NEW_SESSION_PASSWORD_DOES_NOT_COMPLY_WITH_POLICY = 3;
		public static final long SESSION_PASSWORD_DUE_TO_EXPIRE = 2;
		public static final long SESSION_PASSWORD_CHANGED = 1;
		public static final long SESSION_ACTIVE = 0;
		public static final long LOGONS_ARE_NOT_ALLOWED_AT_THIS_TIME = 7;
		public static final long ACCOUNT_LOCKED = 6;
		public static final long INVALID_USERNAME_OR_PASSWORD = 5;
		public static final long SESSION_LOGOUT_COMPLETE = 4;
		public static final long PASSWORD_EXPIRED = 8;
		public static boolean isValid(long val) {
			if (( NEW_SESSION_PASSWORD_DOES_NOT_COMPLY_WITH_POLICY==val)) return true;
			if (( SESSION_PASSWORD_DUE_TO_EXPIRE==val)) return true;
			if (( SESSION_PASSWORD_CHANGED==val)) return true;
			if (( SESSION_ACTIVE==val)) return true;
			if (( LOGONS_ARE_NOT_ALLOWED_AT_THIS_TIME==val)) return true;
			if (( ACCOUNT_LOCKED==val)) return true;
			if (( INVALID_USERNAME_OR_PASSWORD==val)) return true;
			if (( SESSION_LOGOUT_COMPLETE==val)) return true;
			if (( PASSWORD_EXPIRED==val)) return true;
			return false;
		}
	}

	public static class TradSesEvent {
		public static final long CHANGE_OF_TRADING_STATUS = 3;
		public static final long CHANGE_OF_TRADING_SUBSESSION = 2;
		public static final long CHANGE_OF_TRADING_SESSION = 1;
		public static final long TRADING_RESUMES_AFTER_HALT = 0;
		public static boolean isValid(long val) {
			if (( CHANGE_OF_TRADING_STATUS==val)) return true;
			if (( CHANGE_OF_TRADING_SUBSESSION==val)) return true;
			if (( CHANGE_OF_TRADING_SESSION==val)) return true;
			if (( TRADING_RESUMES_AFTER_HALT==val)) return true;
			return false;
		}
	}

	public static class MassActionType {
		public static final long CANCEL_ORDERS = 3;
		public static final long RELEASE_ORDERS_FROM_SUSPENSION = 2;
		public static final long SUSPEND_ORDERS = 1;
		public static boolean isValid(long val) {
			if (( CANCEL_ORDERS==val)) return true;
			if (( RELEASE_ORDERS_FROM_SUSPENSION==val)) return true;
			if (( SUSPEND_ORDERS==val)) return true;
			return false;
		}
	}

	public static class MassActionScope {
		public static final long ALL_ORDERS_FOR_A_PRODUCT = 3;
		public static final long ALL_ORDERS_FOR_AN_UNDERLYING_SECURITY = 2;
		public static final long ALL_ORDERS_FOR_A_SECURITY_GROUP = 10;
		public static final long ALL_ORDERS_FOR_A_SECURITY = 1;
		public static final long ALL_ORDERS = 7;
		public static final long ALL_ORDERS_FOR_A_TRADING_SESSION = 6;
		public static final long ALL_ORDERS_FOR_A_SECURITYTYPE = 5;
		public static final long ALL_ORDERS_FOR_A_CFICODE = 4;
		public static final long ALL_ORDERS_FOR_A_MARKET_SEGMENT = 9;
		public static final long ALL_ORDERS_FOR_A_MARKET = 8;
		public static final long CANCEL_FOR_SECURITY_ISSUER = 11;
		public static final long CANCEL_FOR_ISSUER_OF_UNDERLYING_SECURITY = 12;
		public static boolean isValid(long val) {
			if (( ALL_ORDERS_FOR_A_PRODUCT==val)) return true;
			if (( ALL_ORDERS_FOR_AN_UNDERLYING_SECURITY==val)) return true;
			if (( ALL_ORDERS_FOR_A_SECURITY_GROUP==val)) return true;
			if (( ALL_ORDERS_FOR_A_SECURITY==val)) return true;
			if (( ALL_ORDERS==val)) return true;
			if (( ALL_ORDERS_FOR_A_TRADING_SESSION==val)) return true;
			if (( ALL_ORDERS_FOR_A_SECURITYTYPE==val)) return true;
			if (( ALL_ORDERS_FOR_A_CFICODE==val)) return true;
			if (( ALL_ORDERS_FOR_A_MARKET_SEGMENT==val)) return true;
			if (( ALL_ORDERS_FOR_A_MARKET==val)) return true;
			if (( CANCEL_FOR_SECURITY_ISSUER==val)) return true;
			if (( CANCEL_FOR_ISSUER_OF_UNDERLYING_SECURITY==val)) return true;
			return false;
		}
	}

	public static class MassActionResponse {
		public static final long ACCEPTED = 1;
		public static final long REJECTED__SEE_MASSACTIONREJECTREASON1376 = 0;
		public static boolean isValid(long val) {
			if (( ACCEPTED==val)) return true;
			if (( REJECTED__SEE_MASSACTIONREJECTREASON1376==val)) return true;
			return false;
		}
	}

	public static class MassActionRejectReason {
		public static final long INVALID_OR_UNKNOWN_ISSUER_OF_UNDERLYING_SECURITY = 11;
		public static final long INVALID_OR_UNKNOWN_PRODUCT = 3;
		public static final long INVALID_OR_UNKNOWN_UNDERLYING_SECURITY = 2;
		public static final long INVALID_OR_UNKNOWN_SECURITY = 1;
		public static final long INVALID_OR_UNKNOWN_SECURITY_ISSUER = 10;
		public static final long MASS_ACTION_NOT_SUPPORTED = 0;
		public static final long INVALID_OR_UNKNOWN_MARKET = 7;
		public static final long INVALID_OR_UNKNOWN_TRADING_SESSION = 6;
		public static final long INVALID_OR_UNKNOWN_SECURITYTYPE = 5;
		public static final long INVALID_OR_UNKNOWN_CFICODE = 4;
		public static final long INVALID_OR_UNKNOWN_SECURITY_GROUP = 9;
		public static final long INVALID_OR_UNKNOWN_MARKET_SEGMENT = 8;
		public static final long OTHER = 99;
		public static boolean isValid(long val) {
			if (( INVALID_OR_UNKNOWN_ISSUER_OF_UNDERLYING_SECURITY==val)) return true;
			if (( INVALID_OR_UNKNOWN_PRODUCT==val)) return true;
			if (( INVALID_OR_UNKNOWN_UNDERLYING_SECURITY==val)) return true;
			if (( INVALID_OR_UNKNOWN_SECURITY==val)) return true;
			if (( INVALID_OR_UNKNOWN_SECURITY_ISSUER==val)) return true;
			if (( MASS_ACTION_NOT_SUPPORTED==val)) return true;
			if (( INVALID_OR_UNKNOWN_MARKET==val)) return true;
			if (( INVALID_OR_UNKNOWN_TRADING_SESSION==val)) return true;
			if (( INVALID_OR_UNKNOWN_SECURITYTYPE==val)) return true;
			if (( INVALID_OR_UNKNOWN_CFICODE==val)) return true;
			if (( INVALID_OR_UNKNOWN_SECURITY_GROUP==val)) return true;
			if (( INVALID_OR_UNKNOWN_MARKET_SEGMENT==val)) return true;
			if (( OTHER==val)) return true;
			return false;
		}
	}

	public static class MultilegModel {
		public static final long USERDEFINED_NONSECURITIZED_MULTILEG = 2;
		public static final long USERDEFINED_MULTLEG_SECURITY = 1;
		public static final long PREDEFINED_MULTILEG_SECURITY = 0;
		public static boolean isValid(long val) {
			if (( USERDEFINED_NONSECURITIZED_MULTILEG==val)) return true;
			if (( USERDEFINED_MULTLEG_SECURITY==val)) return true;
			if (( PREDEFINED_MULTILEG_SECURITY==val)) return true;
			return false;
		}
	}

	public static class MultilegPriceMethod {
		public static final long INDIVIDUAL = 3;
		public static final long YIELD_DIFFERENCE = 2;
		public static final long REVERSED_NET_PRICE = 1;
		public static final long NET_PRICE = 0;
		public static final long MULTIPLIED_PRICE = 5;
		public static final long CONTRACT_WEIGHTED_AVERAGE_PRICE = 4;
		public static boolean isValid(long val) {
			if (( INDIVIDUAL==val)) return true;
			if (( YIELD_DIFFERENCE==val)) return true;
			if (( REVERSED_NET_PRICE==val)) return true;
			if (( NET_PRICE==val)) return true;
			if (( MULTIPLIED_PRICE==val)) return true;
			if (( CONTRACT_WEIGHTED_AVERAGE_PRICE==val)) return true;
			return false;
		}
	}

	public static class ContingencyType {
		public static final long ONE_UPDATES_THE_OTHER_OUO__ABSOLUTE_QUANTITY_REDUCTION = 3;
		public static final long ONE_TRIGGERS_THE_OTHER_OTO = 2;
		public static final long ONE_CANCELS_THE_OTHER_OCO = 1;
		public static final long ONE_UPDATES_THE_OTHER_OUO__PROPORTIONAL_QUANTITY_REDUCTION = 4;
		public static boolean isValid(long val) {
			if (( ONE_UPDATES_THE_OTHER_OUO__ABSOLUTE_QUANTITY_REDUCTION==val)) return true;
			if (( ONE_TRIGGERS_THE_OTHER_OTO==val)) return true;
			if (( ONE_CANCELS_THE_OTHER_OCO==val)) return true;
			if (( ONE_UPDATES_THE_OTHER_OUO__PROPORTIONAL_QUANTITY_REDUCTION==val)) return true;
			return false;
		}
	}

	public static class ListRejectReason {
		public static final long EXCHANGE_CLOSED = 2;
		public static final long BROKER__EXCHANGE_OPTION = 0;
		public static final long DUPLICATE_ORDER_EG_DUPE_CLORDID = 6;
		public static final long UNKNOWN_ORDER = 5;
		public static final long TOO_LATE_TO_ENTER = 4;
		public static final long OTHER = 99;
		public static final long UNSUPPORTED_ORDER_CHARACTERISTIC = 11;
		public static boolean isValid(long val) {
			if (( EXCHANGE_CLOSED==val)) return true;
			if (( BROKER__EXCHANGE_OPTION==val)) return true;
			if (( DUPLICATE_ORDER_EG_DUPE_CLORDID==val)) return true;
			if (( UNKNOWN_ORDER==val)) return true;
			if (( TOO_LATE_TO_ENTER==val)) return true;
			if (( OTHER==val)) return true;
			if (( UNSUPPORTED_ORDER_CHARACTERISTIC==val)) return true;
			return false;
		}
	}

	public static class TradePublishIndicator {
		public static final long DEFERRED_PUBLICATION = 2;
		public static final long PUBLISH_TRADE = 1;
		public static final long DO_NOT_PUBLISH_TRADE = 0;
		public static boolean isValid(long val) {
			if (( DEFERRED_PUBLICATION==val)) return true;
			if (( PUBLISH_TRADE==val)) return true;
			if (( DO_NOT_PUBLISH_TRADE==val)) return true;
			return false;
		}
	}

	public static class ApplReqType {
		public static final long REQUEST_VALID_SET_OF_APPLICATIONS = 3;
		public static final long REQUEST_FOR_THE_LAST_APPLLASTSEQNUM_PUBLISHED_FOR_THE_SPECIFIED_ = 2;
		public static final long SUBSCRIPTION_TO_THE_SPECIFIED_APPLICATIONS = 1;
		public static final long RETRANSMISSION_OF_APPLICATION_MESSAGES_FOR_THE_SPECIFIED_APPLICA = 0;
		public static final long CANCEL_RETRANSMISSION_AND_UNSUBSCRIBE_TO_THE_SPECIFIED_APPLICATI = 6;
		public static final long CANCEL_RETRANSMISSION = 5;
		public static final long UNSUBSCRIBE_TO_THE_SPECIFIED_APPLICATIONS = 4;
		public static boolean isValid(long val) {
			if (( REQUEST_VALID_SET_OF_APPLICATIONS==val)) return true;
			if (( REQUEST_FOR_THE_LAST_APPLLASTSEQNUM_PUBLISHED_FOR_THE_SPECIFIED_==val)) return true;
			if (( SUBSCRIPTION_TO_THE_SPECIFIED_APPLICATIONS==val)) return true;
			if (( RETRANSMISSION_OF_APPLICATION_MESSAGES_FOR_THE_SPECIFIED_APPLICA==val)) return true;
			if (( CANCEL_RETRANSMISSION_AND_UNSUBSCRIBE_TO_THE_SPECIFIED_APPLICATI==val)) return true;
			if (( CANCEL_RETRANSMISSION==val)) return true;
			if (( UNSUBSCRIBE_TO_THE_SPECIFIED_APPLICATIONS==val)) return true;
			return false;
		}
	}

	public static class ApplResponseType {
		public static final long MESSAGES_NOT_AVAILABLE = 2;
		public static final long APPLICATION_DOES_NOT_EXIST = 1;
		public static final long REQUEST_SUCCESSFULLY_PROCESSED = 0;
		public static boolean isValid(long val) {
			if (( MESSAGES_NOT_AVAILABLE==val)) return true;
			if (( APPLICATION_DOES_NOT_EXIST==val)) return true;
			if (( REQUEST_SUCCESSFULLY_PROCESSED==val)) return true;
			return false;
		}
	}

	public static class ApplResponseError {
		public static final long USER_NOT_AUTHORIZED_FOR_APPLICATION = 2;
		public static final long MESSAGES_REQUESTED_ARE_NOT_AVAILABLE = 1;
		public static final long APPLICATION_DOES_NOT_EXIST = 0;
		public static boolean isValid(long val) {
			if (( USER_NOT_AUTHORIZED_FOR_APPLICATION==val)) return true;
			if (( MESSAGES_REQUESTED_ARE_NOT_AVAILABLE==val)) return true;
			if (( APPLICATION_DOES_NOT_EXIST==val)) return true;
			return false;
		}
	}

	public static class ApplReportType {
		public static final long APPLICATION_MESSAGE_RESEND_COMPLETED = 3;
		public static final long HEARTBEAT_MESSAGE_INDICATING_THAT_APPLICATION_IDENTIFIED_BY_REFA = 2;
		public static final long REPORTS_THAT_THE_LAST_MESSAGE_HAS_BEEN_SENT_FOR_THE_APPLIDS_REFE = 1;
		public static final long RESET_APPLSEQNUM_TO_NEW_VALUE_SPECIFIED_IN_APPLNEWSEQNUM1399 = 0;
		public static boolean isValid(long val) {
			if (( APPLICATION_MESSAGE_RESEND_COMPLETED==val)) return true;
			if (( HEARTBEAT_MESSAGE_INDICATING_THAT_APPLICATION_IDENTIFIED_BY_REFA==val)) return true;
			if (( REPORTS_THAT_THE_LAST_MESSAGE_HAS_BEEN_SENT_FOR_THE_APPLIDS_REFE==val)) return true;
			if (( RESET_APPLSEQNUM_TO_NEW_VALUE_SPECIFIED_IN_APPLNEWSEQNUM1399==val)) return true;
			return false;
		}
	}

	public static class OrderDelayUnit {
		public static final long MILLISECONDS = 3;
		public static final long HUNDREDTHS_OF_A_SECOND = 2;
		public static final long MINUTES = 10;
		public static final long TENTHS_OF_A_SECOND = 1;
		public static final long SECONDS_DEFAULT_IF_NOT_SPECIFIED = 0;
		public static final long NANOSECONDS = 5;
		public static final long MICROSECONDS = 4;
		public static final long YEARS = 15;
		public static final long WEEKS = 13;
		public static final long MONTHS = 14;
		public static final long HOURS = 11;
		public static final long DAYS = 12;
		public static boolean isValid(long val) {
			if (( MILLISECONDS==val)) return true;
			if (( HUNDREDTHS_OF_A_SECOND==val)) return true;
			if (( MINUTES==val)) return true;
			if (( TENTHS_OF_A_SECOND==val)) return true;
			if (( SECONDS_DEFAULT_IF_NOT_SPECIFIED==val)) return true;
			if (( NANOSECONDS==val)) return true;
			if (( MICROSECONDS==val)) return true;
			if (( YEARS==val)) return true;
			if (( WEEKS==val)) return true;
			if (( MONTHS==val)) return true;
			if (( HOURS==val)) return true;
			if (( DAYS==val)) return true;
			return false;
		}
	}

	public static class VenueType {
		public static final byte ELECTRONIC = 'E';
		public static final byte PIT = 'P';
		public static final byte EXPIT = 'X';
		public static boolean isValid(byte val) {
			if (( ELECTRONIC==val)) return true;
			if (( PIT==val)) return true;
			if (( EXPIT==val)) return true;
			return false;
		}
	}

	public static class RefOrdIDReason {
		public static final long ORDER_CHANGED = 2;
		public static final long PARTIAL_FILL_REMAINING = 1;
		public static final long GTC_FROM_PREVIOUS_DAY = 0;
		public static boolean isValid(long val) {
			if (( ORDER_CHANGED==val)) return true;
			if (( PARTIAL_FILL_REMAINING==val)) return true;
			if (( GTC_FROM_PREVIOUS_DAY==val)) return true;
			return false;
		}
	}

	public static class OrigCustOrderCapacity {
		public static final long MEMBER_TRADING_FOR_ANOTHER_MEMBER = 3;
		public static final long CLEARING_FIRM_TRADING_FOR_ITS_PROPRIETARY_ACCOUNT = 2;
		public static final long MEMBER_TRADING_FOR_THEIR_OWN_ACCOUNT = 1;
		public static final long ALL_OTHER = 4;
		public static boolean isValid(long val) {
			if (( MEMBER_TRADING_FOR_ANOTHER_MEMBER==val)) return true;
			if (( CLEARING_FIRM_TRADING_FOR_ITS_PROPRIETARY_ACCOUNT==val)) return true;
			if (( MEMBER_TRADING_FOR_THEIR_OWN_ACCOUNT==val)) return true;
			if (( ALL_OTHER==val)) return true;
			return false;
		}
	}

	public static class ModelType {
		public static final long PROPRIETARY_USER_SUPPLIED_MODEL = 1;
		public static final long UTILITY_PROVIDED_STANDARD_MODEL = 0;
		public static boolean isValid(long val) {
			if (( PROPRIETARY_USER_SUPPLIED_MODEL==val)) return true;
			if (( UTILITY_PROVIDED_STANDARD_MODEL==val)) return true;
			return false;
		}
	}

	public static class ContractMultiplierUnit {
		public static final long DAYS = 2;
		public static final long HOURS = 1;
		public static final long SHARES = 0;
		public static boolean isValid(long val) {
			if (( DAYS==val)) return true;
			if (( HOURS==val)) return true;
			if (( SHARES==val)) return true;
			return false;
		}
	}

	public static class FlowScheduleType {
		public static final long NERC_EASTERN_PEAK = 3;
		public static final long NERC_CALENDARALL_DAYS_IN_MONTH = 2;
		public static final long NERC_WESTERN_OFFPEAK = 1;
		public static final long NERC_EASTERN_OFFPEAK = 0;
		public static final long NERC_WESTERN_PEAK = 4;
		public static boolean isValid(long val) {
			if (( NERC_EASTERN_PEAK==val)) return true;
			if (( NERC_CALENDARALL_DAYS_IN_MONTH==val)) return true;
			if (( NERC_WESTERN_OFFPEAK==val)) return true;
			if (( NERC_EASTERN_OFFPEAK==val)) return true;
			if (( NERC_WESTERN_PEAK==val)) return true;
			return false;
		}
	}

	public static class RateSource {
		public static final long TELERATE = 2;
		public static final long REUTERS = 1;
		public static final long BLOOMBERG = 0;
		public static final long OTHER = 99;
		public static boolean isValid(long val) {
			if (( TELERATE==val)) return true;
			if (( REUTERS==val)) return true;
			if (( BLOOMBERG==val)) return true;
			if (( OTHER==val)) return true;
			return false;
		}
	}

	public static class RateSourceType {
		public static final long SECONDARY = 1;
		public static final long PRIMARY = 0;
		public static boolean isValid(long val) {
			if (( SECONDARY==val)) return true;
			if (( PRIMARY==val)) return true;
			return false;
		}
	}

	public static class RestructuringType {
		public static final byte[] NO_RESTRUCTURING_SPECIFIED = "XR".getBytes();
		public static final byte[] FULL_RESTRUCTURING = "FR".getBytes();
		public static final byte[] MODIFIED_MOD_RESTRUCTURING = "MM".getBytes();
		public static final byte[] MODIFIED_RESTRUCTURING = "MR".getBytes();
		public static boolean isValid(byte[] val) {
			if (Utils.equals( NO_RESTRUCTURING_SPECIFIED, val)) return true;
			if (Utils.equals( FULL_RESTRUCTURING, val)) return true;
			if (Utils.equals( MODIFIED_MOD_RESTRUCTURING, val)) return true;
			if (Utils.equals( MODIFIED_RESTRUCTURING, val)) return true;
			return false;
		}
	}

	public static class Seniority {
		public static final byte[] SENIOR_SECURED = "SD".getBytes();
		public static final byte[] SENIOR = "SR".getBytes();
		public static final byte[] SUBORDINATED = "SB".getBytes();
		public static boolean isValid(byte[] val) {
			if (Utils.equals( SENIOR_SECURED, val)) return true;
			if (Utils.equals( SENIOR, val)) return true;
			if (Utils.equals( SUBORDINATED, val)) return true;
			return false;
		}
	}

	public static class SecurityListType {
		public static final long MARKET__MARKET_SEGMENT_LIST = 3;
		public static final long TRADING_LIST = 2;
		public static final long INDUSTRY_CLASSIFICATION = 1;
		public static final long NEWSPAPER_LIST = 4;
		public static boolean isValid(long val) {
			if (( MARKET__MARKET_SEGMENT_LIST==val)) return true;
			if (( TRADING_LIST==val)) return true;
			if (( INDUSTRY_CLASSIFICATION==val)) return true;
			if (( NEWSPAPER_LIST==val)) return true;
			return false;
		}
	}

	public static class SecurityListTypeSource {
		public static final long GICS_GLOBAL_INDUSTRY_CLASSIFICATION_STANDARD_PUBLISHED_BY_STANDA = 3;
		public static final long NAICS_NORTH_AMERICAN_INDUSTRY_CLASSIFICATION_SYSTEM_REPLACED_SIC = 2;
		public static final long ICB_INDUSTRY_CLASSIFICATION_BENCHMARK_PUBLISHED_BY_DOW_JONES_AND = 1;
		public static boolean isValid(long val) {
			if (( GICS_GLOBAL_INDUSTRY_CLASSIFICATION_STANDARD_PUBLISHED_BY_STANDA==val)) return true;
			if (( NAICS_NORTH_AMERICAN_INDUSTRY_CLASSIFICATION_SYSTEM_REPLACED_SIC==val)) return true;
			if (( ICB_INDUSTRY_CLASSIFICATION_BENCHMARK_PUBLISHED_BY_DOW_JONES_AND==val)) return true;
			return false;
		}
	}

	public static class NewsCategory {
		public static final long TECHNICAL_NEWS = 3;
		public static final long FINANCIAL_MARKET_NEWS = 2;
		public static final long MARKETPLACE_NEWS = 1;
		public static final long COMPANY_NEWS = 0;
		public static final long OTHER_NEWS = 99;
		public static boolean isValid(long val) {
			if (( TECHNICAL_NEWS==val)) return true;
			if (( FINANCIAL_MARKET_NEWS==val)) return true;
			if (( MARKETPLACE_NEWS==val)) return true;
			if (( COMPANY_NEWS==val)) return true;
			if (( OTHER_NEWS==val)) return true;
			return false;
		}
	}

	public static class NewsRefType {
		public static final long COMPLIMENTARY = 2;
		public static final long OTHER_LANGUAGE = 1;
		public static final long REPLACEMENT = 0;
		public static boolean isValid(long val) {
			if (( COMPLIMENTARY==val)) return true;
			if (( OTHER_LANGUAGE==val)) return true;
			if (( REPLACEMENT==val)) return true;
			return false;
		}
	}

	public static class StrikePriceDeterminationMethod {
		public static final long STRIKE_SET_TO_AVERAGE_OF_UNDERLYING_SETTLEMENT_PRICE_ACROSS_THE_ = 3;
		public static final long STRIKE_SET_AT_EXPIRATION_TO_UNDERLYING_OR_OTHER_VALUE_LOOKBACK_F = 2;
		public static final long FIXED_STRIKE = 1;
		public static final long STRIKE_SET_TO_OPTIMAL_VALUE = 4;
		public static boolean isValid(long val) {
			if (( STRIKE_SET_TO_AVERAGE_OF_UNDERLYING_SETTLEMENT_PRICE_ACROSS_THE_==val)) return true;
			if (( STRIKE_SET_AT_EXPIRATION_TO_UNDERLYING_OR_OTHER_VALUE_LOOKBACK_F==val)) return true;
			if (( FIXED_STRIKE==val)) return true;
			if (( STRIKE_SET_TO_OPTIMAL_VALUE==val)) return true;
			return false;
		}
	}

	public static class StrikePriceBoundaryMethod {
		public static final long EQUAL_TO_THE_UNDERLYING_PRICE_IS_INTHEMONEYITM = 3;
		public static final long LESS_THAN_OR_EQUAL_TO_THE_UNDERLYING_PRICE_IS_INTHEMONEYITM = 2;
		public static final long LESS_THAN_UNDERLYING_PRICE_IS_INTHEMONEY_ITM = 1;
		public static final long GREATER_THAN_UNDERLYING_IS_INTHEMONEYITM = 5;
		public static final long GREATER_THAN_OR_EQUAL_TO_UNDERLYING_PRICE_IS_INTHEMONEYITM = 4;
		public static boolean isValid(long val) {
			if (( EQUAL_TO_THE_UNDERLYING_PRICE_IS_INTHEMONEYITM==val)) return true;
			if (( LESS_THAN_OR_EQUAL_TO_THE_UNDERLYING_PRICE_IS_INTHEMONEYITM==val)) return true;
			if (( LESS_THAN_UNDERLYING_PRICE_IS_INTHEMONEY_ITM==val)) return true;
			if (( GREATER_THAN_UNDERLYING_IS_INTHEMONEYITM==val)) return true;
			if (( GREATER_THAN_OR_EQUAL_TO_UNDERLYING_PRICE_IS_INTHEMONEYITM==val)) return true;
			return false;
		}
	}

	public static class UnderlyingPriceDeterminationMethod {
		public static final long OPTIMAL_VALUE_LOOKBACK = 3;
		public static final long SPECIAL_REFERENCE = 2;
		public static final long REGULAR = 1;
		public static final long AVERAGE_VALUE_ASIAN_OPTION = 4;
		public static boolean isValid(long val) {
			if (( OPTIMAL_VALUE_LOOKBACK==val)) return true;
			if (( SPECIAL_REFERENCE==val)) return true;
			if (( REGULAR==val)) return true;
			if (( AVERAGE_VALUE_ASIAN_OPTION==val)) return true;
			return false;
		}
	}

	public static class OptPayoutType {
		public static final long BINARY = 3;
		public static final long CAPPED = 2;
		public static final long VANILLA = 1;
		public static boolean isValid(long val) {
			if (( BINARY==val)) return true;
			if (( CAPPED==val)) return true;
			if (( VANILLA==val)) return true;
			return false;
		}
	}

	public static class ComplexEventType {
		public static final long KNOCKIN_UP = 3;
		public static final long TRIGGER = 2;
		public static final long CAPPED = 1;
		public static final long UNDERLYING = 7;
		public static final long KNOCKOUT_DOWN = 6;
		public static final long KNOCKOUT_UP = 5;
		public static final long KOCKIN_DOWN = 4;
		public static final long ROLLING_BARRIER = 9;
		public static final long RESET_BARRIER = 8;
		public static boolean isValid(long val) {
			if (( KNOCKIN_UP==val)) return true;
			if (( TRIGGER==val)) return true;
			if (( CAPPED==val)) return true;
			if (( UNDERLYING==val)) return true;
			if (( KNOCKOUT_DOWN==val)) return true;
			if (( KNOCKOUT_UP==val)) return true;
			if (( KOCKIN_DOWN==val)) return true;
			if (( ROLLING_BARRIER==val)) return true;
			if (( RESET_BARRIER==val)) return true;
			return false;
		}
	}

	public static class ComplexEventPriceBoundaryMethod {
		public static final long EQUAL_TO_COMPLEXEVENTPRICE1486 = 3;
		public static final long LESS_THAN_OR_EQUAL_TO_COMPLEXEVENTPRICE1486 = 2;
		public static final long LESS_THAN_COMPLEXEVENTPRICE1486 = 1;
		public static final long GREATER_THAN_COMPLEXEVENTPRICE1486 = 5;
		public static final long GREATER_THAN_OR_EQUAL_TO_COMPLEXEVENTPRICE1486 = 4;
		public static boolean isValid(long val) {
			if (( EQUAL_TO_COMPLEXEVENTPRICE1486==val)) return true;
			if (( LESS_THAN_OR_EQUAL_TO_COMPLEXEVENTPRICE1486==val)) return true;
			if (( LESS_THAN_COMPLEXEVENTPRICE1486==val)) return true;
			if (( GREATER_THAN_COMPLEXEVENTPRICE1486==val)) return true;
			if (( GREATER_THAN_OR_EQUAL_TO_COMPLEXEVENTPRICE1486==val)) return true;
			return false;
		}
	}

	public static class ComplexEventPriceTimeType {
		public static final long SPECIFIED_DATETIME = 3;
		public static final long IMMEDIATE_AT_ANY_TIME = 2;
		public static final long EXPIRATION = 1;
		public static boolean isValid(long val) {
			if (( SPECIFIED_DATETIME==val)) return true;
			if (( IMMEDIATE_AT_ANY_TIME==val)) return true;
			if (( EXPIRATION==val)) return true;
			return false;
		}
	}

	public static class ComplexEventCondition {
		public static final long OR = 2;
		public static final long AND = 1;
		public static boolean isValid(long val) {
			if (( OR==val)) return true;
			if (( AND==val)) return true;
			return false;
		}
	}

	public static class StreamAsgnReqType {
		public static final long STREAM_ASSIGNMENT_FOR_EXISTING_CUSTOMERS = 2;
		public static final long STREAM_ASSIGNMENT_FOR_NEW_CUSTOMERS = 1;
		public static boolean isValid(long val) {
			if (( STREAM_ASSIGNMENT_FOR_EXISTING_CUSTOMERS==val)) return true;
			if (( STREAM_ASSIGNMENT_FOR_NEW_CUSTOMERS==val)) return true;
			return false;
		}
	}

	public static class StreamAsgnRejReason {
		public static final long NO_AVAILABLE_STREAM = 3;
		public static final long UNKNOWN_OR_INVALID_CURRENCY_PAIR = 2;
		public static final long EXCEEDS_MAXIMUM_SIZE = 1;
		public static final long UNKNOWN_CLIENT = 0;
		public static final long OTHER = 99;
		public static boolean isValid(long val) {
			if (( NO_AVAILABLE_STREAM==val)) return true;
			if (( UNKNOWN_OR_INVALID_CURRENCY_PAIR==val)) return true;
			if (( EXCEEDS_MAXIMUM_SIZE==val)) return true;
			if (( UNKNOWN_CLIENT==val)) return true;
			if (( OTHER==val)) return true;
			return false;
		}
	}

	public static class StreamAsgnAckType {
		public static final long ASSIGNMENT_REJECTED = 1;
		public static final long ASSIGNMENT_ACCEPTED = 0;
		public static boolean isValid(long val) {
			if (( ASSIGNMENT_REJECTED==val)) return true;
			if (( ASSIGNMENT_ACCEPTED==val)) return true;
			return false;
		}
	}

	public static class StreamAsgnType {
		public static final long TERMINATEUNASSIGN = 3;
		public static final long REJECTED = 2;
		public static final long ASSIGNMENT = 1;
		public static boolean isValid(long val) {
			if (( TERMINATEUNASSIGN==val)) return true;
			if (( REJECTED==val)) return true;
			if (( ASSIGNMENT==val)) return true;
			return false;
		}
	}

	public static class PartyListResponseType {
		public static final long INCLUDE_RISK_LIMIT_INFORMATION = 3;
		public static final long INCLUDE_INFORMATION_ON_RELATED_PARTIES = 2;
		public static final long RETURN_ONLY_PARTY_INFORMATION_EXCLUDES_INFORMATION_LIKE_RISK_LIM = 1;
		public static final long RETURN_ALL_AVAILABLE_INFORMATION_ON_PARTIES_AND_RELATED_PARTIES_ = 0;
		public static boolean isValid(long val) {
			if (( INCLUDE_RISK_LIMIT_INFORMATION==val)) return true;
			if (( INCLUDE_INFORMATION_ON_RELATED_PARTIES==val)) return true;
			if (( RETURN_ONLY_PARTY_INFORMATION_EXCLUDES_INFORMATION_LIKE_RISK_LIM==val)) return true;
			if (( RETURN_ALL_AVAILABLE_INFORMATION_ON_PARTIES_AND_RELATED_PARTIES_==val)) return true;
			return false;
		}
	}

	public static class PartyDetailsRequestResult {
		public static final long UNSUPPORTED_PARTYLISTRESPONSETYPE = 3;
		public static final long NO_PARTIES_OR_PARTY_DETAILS_FOUND_THAT_MATCH_SELECTION_CRITERIA = 2;
		public static final long INVALID_OR_UNSUPPORTED_REQUEST = 1;
		public static final long VALID_REQUEST = 0;
		public static final long REQUEST_FOR_PARTIES_DATA_NOT_SUPPORTED = 6;
		public static final long PARTIES_OR_PARTY_DETAILS_DATA_TEMPORARILY_UNAVAILABLE = 5;
		public static final long NOT_AUTHORIZED_TO_RETRIEVE_PARTIES_OR_PARTY_DETAILS_DATA = 4;
		public static final long OTHER_FURTHER_INFORMATION_IN_TEXT_58_FIELD = 99;
		public static boolean isValid(long val) {
			if (( UNSUPPORTED_PARTYLISTRESPONSETYPE==val)) return true;
			if (( NO_PARTIES_OR_PARTY_DETAILS_FOUND_THAT_MATCH_SELECTION_CRITERIA==val)) return true;
			if (( INVALID_OR_UNSUPPORTED_REQUEST==val)) return true;
			if (( VALID_REQUEST==val)) return true;
			if (( REQUEST_FOR_PARTIES_DATA_NOT_SUPPORTED==val)) return true;
			if (( PARTIES_OR_PARTY_DETAILS_DATA_TEMPORARILY_UNAVAILABLE==val)) return true;
			if (( NOT_AUTHORIZED_TO_RETRIEVE_PARTIES_OR_PARTY_DETAILS_DATA==val)) return true;
			if (( OTHER_FURTHER_INFORMATION_IN_TEXT_58_FIELD==val)) return true;
			return false;
		}
	}

	public static class PartyRelationship {
		public static final long INVESTS_FOR = 19;
		public static final long BENEFICIAL_OWNER_OF = 35;
		public static final long PROVIDES_QUOTES_TO = 17;
		public static final long OWNED_BY_BENEFICIAL = 36;
		public static final long REQUESTS_QUOTES_FROM = 18;
		public static final long LEGAL__TITLED_OWNER_OF = 33;
		public static final long ENTERS_TRADES_FOR = 15;
		public static final long OWNED_BY_LEGAL__TITLE = 34;
		public static final long ENTERS_TRADES_THROUGH = 16;
		public static final long CARRIES_POSITIONS_FOR = 13;
		public static final long POSTS_TRADES_TO = 14;
		public static final long PROVIDES_MARKETPLACE_FOR = 11;
		public static final long PARTICIPANT_OF_MARKETPLACE = 12;
		public static final long BROKERS_TRADES_FOR = 21;
		public static final long INVESTS_THROUGH = 20;
		public static final long BROKERS_TRADES_THROUGH = 22;
		public static final long PROVIDES_TRADING_SERVICES_FOR = 23;
		public static final long USES_TRADING_SERVICES_OF = 24;
		public static final long APPROVES_OF = 25;
		public static final long APPROVED_BY = 26;
		public static final long PARENT_FIRM_FOR = 27;
		public static final long SUBSIDIARY_OF = 28;
		public static final long REGULATORY_OWNER_OF = 29;
		public static final long TRADES_FOR = 3;
		public static final long CLEARS_THROUGH = 2;
		public static final long HAS_MEMBERS = 10;
		public static final long CLEARS_FOR = 1;
		public static final long IS_ALSO = 0;
		public static final long OWNED_BY_REGULATORY = 30;
		public static final long PROVIDES_GUARANTEE_FOR = 7;
		public static final long SPONSORED_THROUGH = 6;
		public static final long IS_CONTROLLED_BY = 32;
		public static final long SPONSORS = 5;
		public static final long CONTROLS = 31;
		public static final long TRADES_THROUGH = 4;
		public static final long MEMBER_OF = 9;
		public static final long IS_GUARANTEED_BY = 8;
		public static boolean isValid(long val) {
			if (( INVESTS_FOR==val)) return true;
			if (( BENEFICIAL_OWNER_OF==val)) return true;
			if (( PROVIDES_QUOTES_TO==val)) return true;
			if (( OWNED_BY_BENEFICIAL==val)) return true;
			if (( REQUESTS_QUOTES_FROM==val)) return true;
			if (( LEGAL__TITLED_OWNER_OF==val)) return true;
			if (( ENTERS_TRADES_FOR==val)) return true;
			if (( OWNED_BY_LEGAL__TITLE==val)) return true;
			if (( ENTERS_TRADES_THROUGH==val)) return true;
			if (( CARRIES_POSITIONS_FOR==val)) return true;
			if (( POSTS_TRADES_TO==val)) return true;
			if (( PROVIDES_MARKETPLACE_FOR==val)) return true;
			if (( PARTICIPANT_OF_MARKETPLACE==val)) return true;
			if (( BROKERS_TRADES_FOR==val)) return true;
			if (( INVESTS_THROUGH==val)) return true;
			if (( BROKERS_TRADES_THROUGH==val)) return true;
			if (( PROVIDES_TRADING_SERVICES_FOR==val)) return true;
			if (( USES_TRADING_SERVICES_OF==val)) return true;
			if (( APPROVES_OF==val)) return true;
			if (( APPROVED_BY==val)) return true;
			if (( PARENT_FIRM_FOR==val)) return true;
			if (( SUBSIDIARY_OF==val)) return true;
			if (( REGULATORY_OWNER_OF==val)) return true;
			if (( TRADES_FOR==val)) return true;
			if (( CLEARS_THROUGH==val)) return true;
			if (( HAS_MEMBERS==val)) return true;
			if (( CLEARS_FOR==val)) return true;
			if (( IS_ALSO==val)) return true;
			if (( OWNED_BY_REGULATORY==val)) return true;
			if (( PROVIDES_GUARANTEE_FOR==val)) return true;
			if (( SPONSORED_THROUGH==val)) return true;
			if (( IS_CONTROLLED_BY==val)) return true;
			if (( SPONSORS==val)) return true;
			if (( CONTROLS==val)) return true;
			if (( TRADES_THROUGH==val)) return true;
			if (( MEMBER_OF==val)) return true;
			if (( IS_GUARANTEED_BY==val)) return true;
			return false;
		}
	}

	public static class RiskLimitType {
		public static final long EXPOSURE = 3;
		public static final long NET_LIMIT = 2;
		public static final long GROSS_LIMIT = 1;
		public static final long SHORT_LIMIT = 5;
		public static final long LONG_LIMIT = 4;
		public static boolean isValid(long val) {
			if (( EXPOSURE==val)) return true;
			if (( NET_LIMIT==val)) return true;
			if (( GROSS_LIMIT==val)) return true;
			if (( SHORT_LIMIT==val)) return true;
			if (( LONG_LIMIT==val)) return true;
			return false;
		}
	}

	public static class RiskInstrumentOperator {
		public static final long EXCLUDE = 2;
		public static final long INCLUDE = 1;
		public static boolean isValid(long val) {
			if (( EXCLUDE==val)) return true;
			if (( INCLUDE==val)) return true;
			return false;
		}
	}

}
