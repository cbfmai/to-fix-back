package org.tomac.protocol.fix.messaging.fix50sp2.component;

// DO NOT EDIT!!!
// This file is generated by FixMessageGenerator.
// If you need additional functionality, put it in a helper class
// that does not live in this folder!!!  Any java file in this folder 
// will be deleted upon the next run of the FixMessageGenerator!

import java.nio.ByteBuffer;

import org.tomac.protocol.fix.FixUtils;
import org.tomac.protocol.fix.FixSessionException;
import org.tomac.protocol.fix.FixGarbledException;
import org.tomac.utils.Utils;
import org.tomac.protocol.fix.FixConstants;


import org.tomac.protocol.fix.messaging.fix50sp2.FixMessageInfo;
import org.tomac.protocol.fix.messaging.fix50sp2.FixTags;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixComplexEventDates;

public class FixComplexEvents
{

	public int noComplexEvents;
	public ComplexEvents[] group;

	public void getAll(int noComplexEvents, ByteBuffer buf) throws FixSessionException {
		this.noComplexEvents = noComplexEvents;

		if (noComplexEvents < 1) throw new FixSessionException("asdasd");
		// this will leak memory if we grow the group
		if (group == null || group.length < noComplexEvents) {
			group = new ComplexEvents[noComplexEvents];

			for ( int i = 0; i < noComplexEvents; i++ ) group[i] = new ComplexEvents();
	}

		for ( int i = 0; i < noComplexEvents; i++ ) 
			group[i].getAllGroup(buf);
	}

	public void clear() {
		for (int i = 0; i<noComplexEvents; i++)
			group[i].clear();
	}
	public void encode(ByteBuffer out) {
		for (int i = 0; i<noComplexEvents; i++)
			group[i].encode(out);
	}
	public boolean isSet() {
		for (int i = 0; i<noComplexEvents; i++)
			if (group[i].isSet()) return true;
		return false;
	}

	@Override
	public String toString() {
		String s = "";
		for (int i = 0; i<noComplexEvents; i++)
			s += group[i].toString();
		return s;
	}

public class ComplexEvents implements FixComponent
{

	public long complexEventType = 0;
	public long complexOptPayoutAmount = 0;
	public long complexEventPrice = 0;
	public long complexEventPriceBoundaryMethod = 0;
	public long complexEventPriceBoundaryPrecision = 0;
	public long complexEventPriceTimeType = 0;
	public long complexEventCondition = 0;
	public FixComplexEventDates complexEventDates;

	public ComplexEvents() {
		super();

		complexEventDates = new FixComplexEventDates();
		this.clear();

	}

	@Override
	public void clear()
	{

		// clear out all the fields that aren't msgType

		complexEventType = Long.MAX_VALUE;		
		complexOptPayoutAmount = Long.MAX_VALUE;		
		complexEventPrice = Long.MAX_VALUE;		
		complexEventPriceBoundaryMethod = Long.MAX_VALUE;		
		complexEventPriceBoundaryPrecision = Long.MAX_VALUE;		
		complexEventPriceTimeType = Long.MAX_VALUE;		
		complexEventCondition = Long.MAX_VALUE;		
		complexEventDates.clear();
	}

	public void getAllGroup(ByteBuffer buf) throws FixSessionException
	{

		int startTagPosition = buf.position();

		int id = FixUtils.getTagId( buf );
		int lastTagPosition = buf.position();
			ByteBuffer value;

			value = buf;

			if(id == FixTags.COMPLEXEVENTTYPE_INT) {
				complexEventType = FixUtils.getTagIntValue( value );
				if (!FixMessageInfo.ComplexEventType.isValid(complexEventType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + complexEventType + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.COMPLEXOPTPAYOUTAMOUNT_INT) {
				complexOptPayoutAmount = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.COMPLEXEVENTPRICE_INT) {
				complexEventPrice = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.COMPLEXEVENTPRICEBOUNDARYMETHOD_INT) {
				complexEventPriceBoundaryMethod = FixUtils.getTagIntValue( value );
				if (!FixMessageInfo.ComplexEventPriceBoundaryMethod.isValid(complexEventPriceBoundaryMethod) ) throw new FixSessionException(buf, "Invalid enumerated value(" + complexEventPriceBoundaryMethod + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.COMPLEXEVENTPRICEBOUNDARYPRECISION_INT) {
				complexEventPriceBoundaryPrecision = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.COMPLEXEVENTPRICETIMETYPE_INT) {
				complexEventPriceTimeType = FixUtils.getTagIntValue( value );
				if (!FixMessageInfo.ComplexEventPriceTimeType.isValid(complexEventPriceTimeType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + complexEventPriceTimeType + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.COMPLEXEVENTCONDITION_INT) {
				complexEventCondition = FixUtils.getTagIntValue( value );
				if (!FixMessageInfo.ComplexEventCondition.isValid(complexEventCondition) ) throw new FixSessionException(buf, "Invalid enumerated value(" + complexEventCondition + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.NOCOMPLEXEVENTDATES_INT) {
				complexEventDates.getAll(FixTags.NOCOMPLEXEVENTDATES_INT, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			id = checkRequiredTags();
			if (id > 0) throw new FixSessionException(buf, "Required tag missing: " + id );

			buf.position( lastTagPosition );
			return;

	}

	private int checkRequiredTags() {
		int tag = -1;

		return tag;

	}
	@Override
	public boolean isSet()
	{
		if (FixUtils.isSet(complexEventType)) return true;
		if (FixUtils.isSet(complexOptPayoutAmount)) return true;
		if (FixUtils.isSet(complexEventPrice)) return true;
		if (FixUtils.isSet(complexEventPriceBoundaryMethod)) return true;
		if (FixUtils.isSet(complexEventPriceBoundaryPrecision)) return true;
		if (FixUtils.isSet(complexEventPriceTimeType)) return true;
		if (FixUtils.isSet(complexEventCondition)) return true;
		if (FixUtils.isSet(complexEventDates.noComplexEventDates)) return true;
		return false;
	}
	@Override
	public void encode( ByteBuffer out )
	{
		if (FixUtils.isSet(complexEventType)) FixUtils.putFixTag( out, FixTags.COMPLEXEVENTTYPE_INT, complexEventType);
		if (FixUtils.isSet(complexOptPayoutAmount)) FixUtils.putFixTag( out, FixTags.COMPLEXOPTPAYOUTAMOUNT_INT, complexOptPayoutAmount);
		if (FixUtils.isSet(complexEventPrice)) FixUtils.putFixFloatTag( out, FixTags.COMPLEXEVENTPRICE_INT, complexEventPrice);
		if (FixUtils.isSet(complexEventPriceBoundaryMethod)) FixUtils.putFixTag( out, FixTags.COMPLEXEVENTPRICEBOUNDARYMETHOD_INT, complexEventPriceBoundaryMethod);
		if (FixUtils.isSet(complexEventPriceBoundaryPrecision)) FixUtils.putFixFloatTag( out, FixTags.COMPLEXEVENTPRICEBOUNDARYPRECISION_INT, complexEventPriceBoundaryPrecision);
		if (FixUtils.isSet(complexEventPriceTimeType)) FixUtils.putFixTag( out, FixTags.COMPLEXEVENTPRICETIMETYPE_INT, complexEventPriceTimeType);
		if (FixUtils.isSet(complexEventCondition)) FixUtils.putFixTag( out, FixTags.COMPLEXEVENTCONDITION_INT, complexEventCondition);
		if (FixUtils.isSet(complexEventDates.noComplexEventDates)) complexEventDates.encode( out );
	}
	/**
	 * If you use toString for any other purpose than administrative printout.
	 * You will end up in nifelheim!
	**/
	@Override
	public String toString() {
		char sep = '\n';
		if (Boolean.getBoolean("fix.useOneLiner")) sep = ( byte )0x01;

		String s = "";

			if (FixUtils.isSet(complexEventType)) s += "ComplexEventType(1484)=" + String.valueOf(complexEventType) + sep;
			if (FixUtils.isSet(complexOptPayoutAmount)) s += "ComplexOptPayoutAmount(1485)=" + String.valueOf(complexOptPayoutAmount) + sep;
			if (FixUtils.isSet(complexEventPrice)) s += "ComplexEventPrice(1486)=" + String.valueOf(complexEventPrice) + sep;
			if (FixUtils.isSet(complexEventPriceBoundaryMethod)) s += "ComplexEventPriceBoundaryMethod(1487)=" + String.valueOf(complexEventPriceBoundaryMethod) + sep;
			if (FixUtils.isSet(complexEventPriceBoundaryPrecision)) s += "ComplexEventPriceBoundaryPrecision(1488)=" + String.valueOf(complexEventPriceBoundaryPrecision) + sep;
			if (FixUtils.isSet(complexEventPriceTimeType)) s += "ComplexEventPriceTimeType(1489)=" + String.valueOf(complexEventPriceTimeType) + sep;
			if (FixUtils.isSet(complexEventCondition)) s += "ComplexEventCondition(1490)=" + String.valueOf(complexEventCondition) + sep;
			if (FixUtils.isSet(complexEventDates.noComplexEventDates)) s += complexEventDates.toString();
		return s;

	}

	@Override
	public boolean equals(Object o) {
		if (! ( o instanceof ComplexEvents)) return false;

			ComplexEvents msg = (ComplexEvents) o;

		if ( ! super.equals(msg) ) return false;

		if (!( complexEventType==msg.complexEventType)) return false;

		if (!( complexOptPayoutAmount==msg.complexOptPayoutAmount)) return false;

		if (!( complexEventPrice==msg.complexEventPrice)) return false;

		if (!( complexEventPriceBoundaryMethod==msg.complexEventPriceBoundaryMethod)) return false;

		if (!( complexEventPriceBoundaryPrecision==msg.complexEventPriceBoundaryPrecision)) return false;

		if (!( complexEventPriceTimeType==msg.complexEventPriceTimeType)) return false;

		if (!( complexEventCondition==msg.complexEventCondition)) return false;

		if (!complexEventDates.equals(msg.complexEventDates)) return false;

		return true;
	}
}
}
