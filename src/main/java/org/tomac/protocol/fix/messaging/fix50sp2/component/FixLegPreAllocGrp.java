package org.tomac.protocol.fix.messaging.fix50sp2.component;

// DO NOT EDIT!!!
// This file is generated by FixMessageGenerator.
// If you need additional functionality, put it in a helper class
// that does not live in this folder!!!  Any java file in this folder 
// will be deleted upon the next run of the FixMessageGenerator!

import java.nio.ByteBuffer;

import org.tomac.protocol.fix.FixUtils;
import org.tomac.protocol.fix.FixSessionException;
import org.tomac.protocol.fix.FixGarbledException;
import org.tomac.utils.Utils;
import org.tomac.protocol.fix.FixConstants;


import org.tomac.protocol.fix.messaging.fix50sp2.FixMessageInfo.*;
import org.tomac.protocol.fix.messaging.fix50sp2.FixTags;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixNestedParties2;

public class FixLegPreAllocGrp
{

	public int noLegAllocs;
	public LegPreAllocGrp[] group;

	public void getAll(int noLegAllocs, ByteBuffer buf) throws FixSessionException {
		this.noLegAllocs = noLegAllocs;

		if (noLegAllocs < 1) throw new FixSessionException("asdasd");
		// this will leak memory if we grow the group
		if (group.length < noLegAllocs) 
			group = new LegPreAllocGrp[noLegAllocs];

		for ( int i = 0; i < noLegAllocs; i++ ) 
			group[i].getAllGroup(buf);
	}

	public void clear() {
		for (int i = 0; i<noLegAllocs; i++)
			group[i].clear();
	}
	public void encode(ByteBuffer out) {
		for (int i = 0; i<noLegAllocs; i++)
			group[i].encode(out);
	}
	public boolean isSet() {
		for (int i = 0; i<noLegAllocs; i++)
			if (group[i].isSet()) return true;
		return false;
	}

	@Override
	public String toString() {
		String s = "";
		for (int i = 0; i<noLegAllocs; i++)
			s += group[i].toString();
		return s;
	}

public class LegPreAllocGrp implements FixComponent
{

	public byte[] legAllocAccount;
	public byte[] legIndividualAllocID;
	public FixNestedParties2 nestedParties2;
	public long legAllocQty = 0;
	public byte[] legAllocAcctIDSource;
	public byte[] legAllocSettlCurrency;

	public LegPreAllocGrp() {
		super();

		legAllocAccount = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		legIndividualAllocID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		nestedParties2 = new FixNestedParties2();
		legAllocAcctIDSource = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		legAllocSettlCurrency = new byte[FixUtils.CURRENCY_LENGTH];
		this.clear();

	}

	@Override
	public void clear()
	{

		// clear out all the fields that aren't msgType

		Utils.fill( legAllocAccount, (byte)0 );
		Utils.fill( legIndividualAllocID, (byte)0 );
		legAllocQty = Long.MAX_VALUE;		
		Utils.fill( legAllocAcctIDSource, (byte)0 );
		Utils.fill( legAllocSettlCurrency, (byte)0 );
		nestedParties2.clear();
	}

	public void getAllGroup(ByteBuffer buf) throws FixSessionException
	{

		int startTagPosition = buf.position();

		int id = FixUtils.getTagId( buf );
		int lastTagPosition = buf.position();
			ByteBuffer value;

			value = buf;

			if(id == FixTags.LEGALLOCACCOUNT_INT) {
				legAllocAccount = FixUtils.getTagStringValue(value, legAllocAccount);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.LEGINDIVIDUALALLOCID_INT) {
				legIndividualAllocID = FixUtils.getTagStringValue(value, legIndividualAllocID);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.NONESTED2PARTYIDS_INT) {
				nestedParties2.getAll(FixTags.NONESTED2PARTYIDS_INT, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.LEGALLOCQTY_INT) {
				legAllocQty = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.LEGALLOCACCTIDSOURCE_INT) {
				legAllocAcctIDSource = FixUtils.getTagStringValue(value, legAllocAcctIDSource);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.LEGALLOCSETTLCURRENCY_INT) {
				legAllocSettlCurrency = FixUtils.getTagStringValue(value, legAllocSettlCurrency);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			id = checkRequiredTags();
			if (id > 0) throw new FixSessionException(buf, "Required tag missing: " + id );

			buf.position( lastTagPosition );
			return;

	}

	private int checkRequiredTags() {
		int tag = -1;

		return tag;

	}
	@Override
	public boolean isSet()
	{
		if (FixUtils.isSet(legAllocAccount)) return true;
		if (FixUtils.isSet(legIndividualAllocID)) return true;
		if (FixUtils.isSet(nestedParties2.noNested2PartyIDs)) return true;
		if (FixUtils.isSet(legAllocQty)) return true;
		if (FixUtils.isSet(legAllocAcctIDSource)) return true;
		if (FixUtils.isSet(legAllocSettlCurrency)) return true;
		return false;
	}
	@Override
	public void encode( ByteBuffer out )
	{
		if (FixUtils.isSet(legAllocAccount)) FixUtils.putFixTag( out, FixTags.LEGALLOCACCOUNT_INT, legAllocAccount, 0, Utils.lastIndexTrim(legAllocAccount, (byte)0) );
		if (FixUtils.isSet(legIndividualAllocID)) FixUtils.putFixTag( out, FixTags.LEGINDIVIDUALALLOCID_INT, legIndividualAllocID, 0, Utils.lastIndexTrim(legIndividualAllocID, (byte)0) );
		if (FixUtils.isSet(nestedParties2.noNested2PartyIDs)) nestedParties2.encode( out );
		if (FixUtils.isSet(legAllocQty)) FixUtils.putFixFloatTag( out, FixTags.LEGALLOCQTY_INT, legAllocQty);
		if (FixUtils.isSet(legAllocAcctIDSource)) FixUtils.putFixTag( out, FixTags.LEGALLOCACCTIDSOURCE_INT, legAllocAcctIDSource, 0, Utils.lastIndexTrim(legAllocAcctIDSource, (byte)0) );
		if (FixUtils.isSet(legAllocSettlCurrency)) FixUtils.putFixTag( out, FixTags.LEGALLOCSETTLCURRENCY_INT, legAllocSettlCurrency, 0, Utils.lastIndexTrim(legAllocSettlCurrency, (byte)0) );
	}
	/**
	 * If you use toString for any other purpose than administrative printout.
	 * You will end up in nifelheim!
	**/
	@Override
	public String toString() {
		char sep = '\n';
		if (Boolean.getBoolean("fix.useOneLiner")) sep = ( byte )0x01;

		String s = "";

			if (FixUtils.isSet(legAllocAccount)) s += "LegAllocAccount(671)=" + new String(legAllocAccount) + sep;
			if (FixUtils.isSet(legIndividualAllocID)) s += "LegIndividualAllocID(672)=" + new String(legIndividualAllocID) + sep;
			if (FixUtils.isSet(nestedParties2.noNested2PartyIDs)) s += nestedParties2.toString();
			if (FixUtils.isSet(legAllocQty)) s += "LegAllocQty(673)=" + String.valueOf(legAllocQty) + sep;
			if (FixUtils.isSet(legAllocAcctIDSource)) s += "LegAllocAcctIDSource(674)=" + new String(legAllocAcctIDSource) + sep;
			if (FixUtils.isSet(legAllocSettlCurrency)) s += "LegAllocSettlCurrency(1367)=" + new String(legAllocSettlCurrency) + sep;
		return s;

	}

	@Override
	public boolean equals(Object o) {
		if (! ( o instanceof LegPreAllocGrp)) return false;

			LegPreAllocGrp msg = (LegPreAllocGrp) o;

		if ( ! super.equals(msg) ) return false;

		if (!Utils.equals( legAllocAccount, msg.legAllocAccount)) return false;

		if (!Utils.equals( legIndividualAllocID, msg.legIndividualAllocID)) return false;

		if (!nestedParties2.equals(msg.nestedParties2)) return false;

		if (!( legAllocQty==msg.legAllocQty)) return false;

		if (!Utils.equals( legAllocAcctIDSource, msg.legAllocAcctIDSource)) return false;

		if (!Utils.equals( legAllocSettlCurrency, msg.legAllocSettlCurrency)) return false;

		return true;
	}
}
}
