package org.tomac.protocol.fix.messaging.fix50sp2.component;

// DO NOT EDIT!!!
// This file is generated by FixMessageGenerator.
// If you need additional functionality, put it in a helper class
// that does not live in this folder!!!  Any java file in this folder 
// will be deleted upon the next run of the FixMessageGenerator!

import java.nio.ByteBuffer;

import org.tomac.protocol.fix.FixUtils;
import org.tomac.protocol.fix.FixSessionException;
import org.tomac.protocol.fix.FixGarbledException;
import org.tomac.utils.Utils;
import org.tomac.protocol.fix.FixConstants;


import org.tomac.protocol.fix.messaging.fix50sp2.FixMessageInfo;
import org.tomac.protocol.fix.messaging.fix50sp2.FixTags;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixInstrumentPtysSubGrp;

public class FixInstrumentParties
{

	public int noInstrumentParties;
	public InstrumentParties[] group;

	public void getAll(int noInstrumentParties, ByteBuffer buf) throws FixSessionException {
		this.noInstrumentParties = noInstrumentParties;

		if (noInstrumentParties < 1) throw new FixSessionException("asdasd");
		// this will leak memory if we grow the group
		if (group.length < noInstrumentParties) 
			group = new InstrumentParties[noInstrumentParties];

		for ( int i = 0; i < noInstrumentParties; i++ ) 
			group[i].getAllGroup(buf);
	}

	public void clear() {
		for (int i = 0; i<noInstrumentParties; i++)
			group[i].clear();
	}
	public void encode(ByteBuffer out) {
		for (int i = 0; i<noInstrumentParties; i++)
			group[i].encode(out);
	}
	public boolean isSet() {
		for (int i = 0; i<noInstrumentParties; i++)
			if (group[i].isSet()) return true;
		return false;
	}

	@Override
	public String toString() {
		String s = "";
		for (int i = 0; i<noInstrumentParties; i++)
			s += group[i].toString();
		return s;
	}

public class InstrumentParties implements FixComponent
{

	public byte[] instrumentPartyID;
	public byte instrumentPartyIDSource = (byte)' ';
	public long instrumentPartyRole = 0;
	public FixInstrumentPtysSubGrp instrumentPtysSubGrp;

	public InstrumentParties() {
		super();

		instrumentPartyID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		instrumentPtysSubGrp = new FixInstrumentPtysSubGrp();
		this.clear();

	}

	@Override
	public void clear()
	{

		// clear out all the fields that aren't msgType

		Utils.fill( instrumentPartyID, (byte)0 );
		instrumentPartyIDSource = Byte.MAX_VALUE;		
		instrumentPartyRole = Long.MAX_VALUE;		
		instrumentPtysSubGrp.clear();
	}

	public void getAllGroup(ByteBuffer buf) throws FixSessionException
	{

		int startTagPosition = buf.position();

		int id = FixUtils.getTagId( buf );
		int lastTagPosition = buf.position();
			ByteBuffer value;

			value = buf;

			if(id == FixTags.INSTRUMENTPARTYID_INT) {
				instrumentPartyID = FixUtils.getTagStringValue(value, instrumentPartyID);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.INSTRUMENTPARTYIDSOURCE_INT) {
				instrumentPartyIDSource = FixUtils.getTagCharValue( value );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.INSTRUMENTPARTYROLE_INT) {
				instrumentPartyRole = FixUtils.getTagIntValue( value );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.NOINSTRUMENTPARTYSUBIDS_INT) {
				instrumentPtysSubGrp.getAll(FixTags.NOINSTRUMENTPARTYSUBIDS_INT, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			id = checkRequiredTags();
			if (id > 0) throw new FixSessionException(buf, "Required tag missing: " + id );

			buf.position( lastTagPosition );
			return;

	}

	private int checkRequiredTags() {
		int tag = -1;

		return tag;

	}
	@Override
	public boolean isSet()
	{
		if (FixUtils.isSet(instrumentPartyID)) return true;
		if (FixUtils.isSet(instrumentPartyIDSource)) return true;
		if (FixUtils.isSet(instrumentPartyRole)) return true;
		if (FixUtils.isSet(instrumentPtysSubGrp.noInstrumentPartySubIDs)) return true;
		return false;
	}
	@Override
	public void encode( ByteBuffer out )
	{
		if (FixUtils.isSet(instrumentPartyID)) FixUtils.putFixTag( out, FixTags.INSTRUMENTPARTYID_INT, instrumentPartyID, 0, Utils.lastIndexTrim(instrumentPartyID, (byte)0) );
		if (FixUtils.isSet(instrumentPartyIDSource)) FixUtils.putFixTag( out, FixTags.INSTRUMENTPARTYIDSOURCE_INT, instrumentPartyIDSource );
		if (FixUtils.isSet(instrumentPartyRole)) FixUtils.putFixTag( out, FixTags.INSTRUMENTPARTYROLE_INT, instrumentPartyRole);
		if (FixUtils.isSet(instrumentPtysSubGrp.noInstrumentPartySubIDs)) instrumentPtysSubGrp.encode( out );
	}
	/**
	 * If you use toString for any other purpose than administrative printout.
	 * You will end up in nifelheim!
	**/
	@Override
	public String toString() {
		char sep = '\n';
		if (Boolean.getBoolean("fix.useOneLiner")) sep = ( byte )0x01;

		String s = "";

			if (FixUtils.isSet(instrumentPartyID)) s += "InstrumentPartyID(1019)=" + new String(instrumentPartyID) + sep;
			if (FixUtils.isSet(instrumentPartyIDSource)) s += "InstrumentPartyIDSource(1050)=" + String.valueOf(instrumentPartyIDSource) + sep;
			if (FixUtils.isSet(instrumentPartyRole)) s += "InstrumentPartyRole(1051)=" + String.valueOf(instrumentPartyRole) + sep;
			if (FixUtils.isSet(instrumentPtysSubGrp.noInstrumentPartySubIDs)) s += instrumentPtysSubGrp.toString();
		return s;

	}

	@Override
	public boolean equals(Object o) {
		if (! ( o instanceof InstrumentParties)) return false;

			InstrumentParties msg = (InstrumentParties) o;

		if ( ! super.equals(msg) ) return false;

		if (!Utils.equals( instrumentPartyID, msg.instrumentPartyID)) return false;

		if (!( instrumentPartyIDSource==msg.instrumentPartyIDSource)) return false;

		if (!( instrumentPartyRole==msg.instrumentPartyRole)) return false;

		if (!instrumentPtysSubGrp.equals(msg.instrumentPtysSubGrp)) return false;

		return true;
	}
}
}
