package org.tomac.protocol.fix.messaging.fix50sp2.component;

// DO NOT EDIT!!!
// This file is generated by FixMessageGenerator.
// If you need additional functionality, put it in a helper class
// that does not live in this folder!!!  Any java file in this folder 
// will be deleted upon the next run of the FixMessageGenerator!

import java.nio.ByteBuffer;

import org.tomac.protocol.fix.FixUtils;
import org.tomac.protocol.fix.FixSessionException;
import org.tomac.protocol.fix.FixGarbledException;
import org.tomac.utils.Utils;
import org.tomac.protocol.fix.FixConstants;


import org.tomac.protocol.fix.messaging.fix50sp2.FixMessageInfo;
import org.tomac.protocol.fix.messaging.fix50sp2.FixTags;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixInstrument;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixUndInstrmtGrp;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixInstrmtLegGrp;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixYieldData;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixSpreadOrBenchmarkCurveData;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixRateSource;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixSecSizesGrp;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixParties;
import org.tomac.protocol.fix.messaging.fix50sp2.component.FixStatsIndGrp;

public class FixMDIncGrp
{

	public int noMDEntries;
	public MDIncGrp[] group;

	public void getAll(int noMDEntries, ByteBuffer buf) throws FixSessionException {
		this.noMDEntries = noMDEntries;

		if (noMDEntries < 1) throw new FixSessionException("asdasd");
		// this will leak memory if we grow the group
		if (group.length < noMDEntries) 
			group = new MDIncGrp[noMDEntries];

		for ( int i = 0; i < noMDEntries; i++ ) 
			group[i].getAllGroup(buf);
	}

	public void clear() {
		for (int i = 0; i<noMDEntries; i++)
			group[i].clear();
	}
	public void encode(ByteBuffer out) {
		for (int i = 0; i<noMDEntries; i++)
			group[i].encode(out);
	}
	public boolean isSet() {
		for (int i = 0; i<noMDEntries; i++)
			if (group[i].isSet()) return true;
		return false;
	}

	@Override
	public String toString() {
		String s = "";
		for (int i = 0; i<noMDEntries; i++)
			s += group[i].toString();
		return s;
	}

public class MDIncGrp implements FixComponent
{

	public byte mDUpdateAction = (byte)' ';
	public byte deleteReason = (byte)' ';
	public long mDSubBookType = 0;
	public long marketDepth = 0;
	public byte mDEntryType = (byte)' ';
	public byte[] mDEntryID;
	public byte[] mDEntryRefID;
	public byte[] mDStreamID;
	public FixInstrument instrument;
	public FixUndInstrmtGrp undInstrmtGrp;
	public FixInstrmtLegGrp instrmtLegGrp;
	public byte[] financialStatus;
	public byte[] corporateAction;
	public long mDEntryPx = 0;
	public byte ordType = (byte)' ';
	public long priceType = 0;
	public FixYieldData yieldData;
	public FixSpreadOrBenchmarkCurveData spreadOrBenchmarkCurveData;
	public byte[] currency;
	public byte[] settlCurrency;
	public FixRateSource rateSource;
	public long mDEntrySize = 0;
	public byte lotType = (byte)' ';
	public FixSecSizesGrp secSizesGrp;
	public byte[] mDEntryDate;
	public byte[] mDEntryTime;
	public byte tickDirection = (byte)' ';
	public byte[] mDMkt;
	public byte[] tradingSessionID;
	public byte[] tradingSessionSubID;
	public long securityTradingStatus = 0;
	public long haltReason = 0;
	public byte[] quoteCondition;
	public byte[] tradeCondition;
	public long trdType = 0;
	public byte[] matchType;
	public byte[] mDEntryOriginator;
	public byte[] locationID;
	public byte[] deskID;
	public byte[] openCloseSettlFlag;
	public byte timeInForce = (byte)' ';
	public byte[] expireDate;
	public byte[] expireTime;
	public long minQty = 0;
	public byte[] execInst;
	public long sellerDays = 0;
	public byte[] orderID;
	public byte[] secondaryOrderID;
	public byte[] quoteEntryID;
	public byte[] tradeID;
	public byte[] mDEntryBuyer;
	public byte[] mDEntrySeller;
	public long numberOfOrders = 0;
	public long mDEntryPositionNo = 0;
	public byte[] scope;
	public long priceDelta = 0;
	public long netChgPrevDay = 0;
	public byte[] text;
	public long encodedTextLen = 0;
	public byte[] encodedText;
	public byte orderCapacity = (byte)' ';
	public long mDOriginType = 0;
	public long highPx = 0;
	public long lowPx = 0;
	public long tradeVolume = 0;
	public byte[] settlType;
	public byte[] settlDate;
	public long mDQuoteType = 0;
	public long rptSeq = 0;
	public long mDPriceLevel = 0;
	public byte[] transBkdTime;
	public byte[] transactTime;
	public long firstPx = 0;
	public long lastPx = 0;
	public byte dealingCapacity = (byte)' ';
	public long mDEntrySpotRate = 0;
	public long mDEntryForwardPoints = 0;
	public FixParties parties;
	public FixStatsIndGrp statsIndGrp;

	public MDIncGrp() {
		super();

		mDEntryID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		mDEntryRefID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		mDStreamID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		instrument = new FixInstrument();
		undInstrmtGrp = new FixUndInstrmtGrp();
		instrmtLegGrp = new FixInstrmtLegGrp();
		financialStatus = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		corporateAction = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		yieldData = new FixYieldData();
		spreadOrBenchmarkCurveData = new FixSpreadOrBenchmarkCurveData();
		currency = new byte[FixUtils.CURRENCY_LENGTH];
		settlCurrency = new byte[FixUtils.CURRENCY_LENGTH];
		rateSource = new FixRateSource();
		secSizesGrp = new FixSecSizesGrp();
		mDEntryDate = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		mDEntryTime = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		mDMkt = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		tradingSessionID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		tradingSessionSubID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		quoteCondition = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		tradeCondition = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		matchType = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		mDEntryOriginator = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		locationID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		deskID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		openCloseSettlFlag = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		expireDate = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		expireTime = new byte[FixUtils.UTCTIMESTAMP_LENGTH];
		execInst = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		orderID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		secondaryOrderID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		quoteEntryID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		tradeID = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		mDEntryBuyer = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		mDEntrySeller = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		scope = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		text = new byte[FixUtils.FIX_MAX_STRING_TEXT_LENGTH];
		encodedText = new byte[FixUtils.FIX_MAX_STRING_TEXT_LENGTH];
		settlType = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		settlDate = new byte[FixUtils.FIX_MAX_STRING_LENGTH];
		transBkdTime = new byte[FixUtils.UTCTIMESTAMP_LENGTH];
		transactTime = new byte[FixUtils.UTCTIMESTAMP_LENGTH];
		parties = new FixParties();
		statsIndGrp = new FixStatsIndGrp();
		this.clear();

	}

	@Override
	public void clear()
	{

		// clear out all the fields that aren't msgType

		mDUpdateAction = Byte.MAX_VALUE;		
		deleteReason = Byte.MAX_VALUE;		
		mDSubBookType = Long.MAX_VALUE;		
		marketDepth = Long.MAX_VALUE;		
		mDEntryType = Byte.MAX_VALUE;		
		Utils.fill( mDEntryID, (byte)0 );
		Utils.fill( mDEntryRefID, (byte)0 );
		Utils.fill( mDStreamID, (byte)0 );
		Utils.fill( financialStatus, (byte)0 );
		Utils.fill( corporateAction, (byte)0 );
		mDEntryPx = Long.MAX_VALUE;		
		ordType = Byte.MAX_VALUE;		
		priceType = Long.MAX_VALUE;		
		Utils.fill( currency, (byte)0 );
		Utils.fill( settlCurrency, (byte)0 );
		mDEntrySize = Long.MAX_VALUE;		
		lotType = Byte.MAX_VALUE;		
		Utils.fill( mDEntryDate, (byte)0 );
		Utils.fill( mDEntryTime, (byte)0 );
		tickDirection = Byte.MAX_VALUE;		
		Utils.fill( mDMkt, (byte)0 );
		Utils.fill( tradingSessionID, (byte)0 );
		Utils.fill( tradingSessionSubID, (byte)0 );
		securityTradingStatus = Long.MAX_VALUE;		
		haltReason = Long.MAX_VALUE;		
		Utils.fill( quoteCondition, (byte)0 );
		Utils.fill( tradeCondition, (byte)0 );
		trdType = Long.MAX_VALUE;		
		Utils.fill( matchType, (byte)0 );
		Utils.fill( mDEntryOriginator, (byte)0 );
		Utils.fill( locationID, (byte)0 );
		Utils.fill( deskID, (byte)0 );
		Utils.fill( openCloseSettlFlag, (byte)0 );
		timeInForce = Byte.MAX_VALUE;		
		Utils.fill( expireDate, (byte)0 );
		Utils.fill( expireTime, (byte)0 );
		minQty = Long.MAX_VALUE;		
		Utils.fill( execInst, (byte)0 );
		sellerDays = Long.MAX_VALUE;		
		Utils.fill( orderID, (byte)0 );
		Utils.fill( secondaryOrderID, (byte)0 );
		Utils.fill( quoteEntryID, (byte)0 );
		Utils.fill( tradeID, (byte)0 );
		Utils.fill( mDEntryBuyer, (byte)0 );
		Utils.fill( mDEntrySeller, (byte)0 );
		numberOfOrders = Long.MAX_VALUE;		
		mDEntryPositionNo = Long.MAX_VALUE;		
		Utils.fill( scope, (byte)0 );
		priceDelta = Long.MAX_VALUE;		
		netChgPrevDay = Long.MAX_VALUE;		
		Utils.fill( text, (byte)0 );
		encodedTextLen = Long.MAX_VALUE;		
		Utils.fill( encodedText, (byte)0 );
		orderCapacity = Byte.MAX_VALUE;		
		mDOriginType = Long.MAX_VALUE;		
		highPx = Long.MAX_VALUE;		
		lowPx = Long.MAX_VALUE;		
		tradeVolume = Long.MAX_VALUE;		
		Utils.fill( settlType, (byte)0 );
		Utils.fill( settlDate, (byte)0 );
		mDQuoteType = Long.MAX_VALUE;		
		rptSeq = Long.MAX_VALUE;		
		mDPriceLevel = Long.MAX_VALUE;		
		Utils.fill( transBkdTime, (byte)0 );
		Utils.fill( transactTime, (byte)0 );
		firstPx = Long.MAX_VALUE;		
		lastPx = Long.MAX_VALUE;		
		dealingCapacity = Byte.MAX_VALUE;		
		mDEntrySpotRate = Long.MAX_VALUE;		
		mDEntryForwardPoints = Long.MAX_VALUE;		
		instrument.clear();
		undInstrmtGrp.clear();
		instrmtLegGrp.clear();
		yieldData.clear();
		spreadOrBenchmarkCurveData.clear();
		rateSource.clear();
		secSizesGrp.clear();
		parties.clear();
		statsIndGrp.clear();
	}

	public void getAllGroup(ByteBuffer buf) throws FixSessionException
	{

		int startTagPosition = buf.position();

		int id = FixUtils.getTagId( buf );
		int lastTagPosition = buf.position();
			ByteBuffer value;

			value = buf;

			if(id == FixTags.MDUPDATEACTION_INT) {
				mDUpdateAction = FixUtils.getTagCharValue( value );
				if (!FixMessageInfo.MDUpdateAction.isValid(mDUpdateAction) ) throw new FixSessionException(buf, "Invalid enumerated value(" + mDUpdateAction + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.DELETEREASON_INT) {
				deleteReason = FixUtils.getTagCharValue( value );
				if (!FixMessageInfo.DeleteReason.isValid(deleteReason) ) throw new FixSessionException(buf, "Invalid enumerated value(" + deleteReason + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.MDSUBBOOKTYPE_INT) {
				mDSubBookType = FixUtils.getTagIntValue( value );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.MARKETDEPTH_INT) {
				marketDepth = FixUtils.getTagIntValue( value );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.MDENTRYTYPE_INT) {
				mDEntryType = FixUtils.getTagCharValue( value );
				if (!FixMessageInfo.MDEntryType.isValid(mDEntryType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + mDEntryType + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.MDENTRYID_INT) {
				mDEntryID = FixUtils.getTagStringValue(value, mDEntryID);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.MDENTRYREFID_INT) {
				mDEntryRefID = FixUtils.getTagStringValue(value, mDEntryRefID);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.MDSTREAMID_INT) {
				mDStreamID = FixUtils.getTagStringValue(value, mDStreamID);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.SYMBOL_INT) {
				instrument.getAll(FixTags.SYMBOL_INT, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.NOUNDERLYINGS_INT) {
				undInstrmtGrp.getAll(FixTags.NOUNDERLYINGS_INT, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.NOLEGS_INT) {
				instrmtLegGrp.getAll(FixTags.NOLEGS_INT, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.FINANCIALSTATUS_INT) {
				financialStatus = FixUtils.getTagStringValue(value, financialStatus);
				if (!FixMessageInfo.FinancialStatus.isValid(financialStatus) ) throw new FixSessionException(buf, "Invalid enumerated value(" + financialStatus + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.CORPORATEACTION_INT) {
				corporateAction = FixUtils.getTagStringValue(value, corporateAction);
				if (!FixMessageInfo.CorporateAction.isValid(corporateAction) ) throw new FixSessionException(buf, "Invalid enumerated value(" + corporateAction + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.MDENTRYPX_INT) {
				mDEntryPx = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.ORDTYPE_INT) {
				ordType = FixUtils.getTagCharValue( value );
				if (!FixMessageInfo.OrdType.isValid(ordType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + ordType + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.PRICETYPE_INT) {
				priceType = FixUtils.getTagIntValue( value );
				if (!FixMessageInfo.PriceType.isValid(priceType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + priceType + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.YIELDTYPE_INT) {
				yieldData.getAll(FixTags.YIELDTYPE_INT, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.SPREAD_INT) {
				spreadOrBenchmarkCurveData.getAll(FixTags.SPREAD_INT, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.CURRENCY_INT) {
				currency = FixUtils.getTagStringValue(value, currency);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.SETTLCURRENCY_INT) {
				settlCurrency = FixUtils.getTagStringValue(value, settlCurrency);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.NORATESOURCES_INT) {
				rateSource.getAll(FixTags.NORATESOURCES_INT, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.MDENTRYSIZE_INT) {
				mDEntrySize = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.LOTTYPE_INT) {
				lotType = FixUtils.getTagCharValue( value );
				if (!FixMessageInfo.LotType.isValid(lotType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + lotType + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.NOOFSECSIZES_INT) {
				secSizesGrp.getAll(FixTags.NOOFSECSIZES_INT, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.MDENTRYDATE_INT) {
				mDEntryDate = FixUtils.getTagStringValue(value, mDEntryDate);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.MDENTRYTIME_INT) {
				mDEntryTime = FixUtils.getTagStringValue(value, mDEntryTime);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.TICKDIRECTION_INT) {
				tickDirection = FixUtils.getTagCharValue( value );
				if (!FixMessageInfo.TickDirection.isValid(tickDirection) ) throw new FixSessionException(buf, "Invalid enumerated value(" + tickDirection + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.MDMKT_INT) {
				mDMkt = FixUtils.getTagStringValue(value, mDMkt);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.TRADINGSESSIONID_INT) {
				tradingSessionID = FixUtils.getTagStringValue(value, tradingSessionID);
				if (!FixMessageInfo.TradingSessionID.isValid(tradingSessionID) ) throw new FixSessionException(buf, "Invalid enumerated value(" + tradingSessionID + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.TRADINGSESSIONSUBID_INT) {
				tradingSessionSubID = FixUtils.getTagStringValue(value, tradingSessionSubID);
				if (!FixMessageInfo.TradingSessionSubID.isValid(tradingSessionSubID) ) throw new FixSessionException(buf, "Invalid enumerated value(" + tradingSessionSubID + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.SECURITYTRADINGSTATUS_INT) {
				securityTradingStatus = FixUtils.getTagIntValue( value );
				if (!FixMessageInfo.SecurityTradingStatus.isValid(securityTradingStatus) ) throw new FixSessionException(buf, "Invalid enumerated value(" + securityTradingStatus + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.HALTREASON_INT) {
				haltReason = FixUtils.getTagIntValue( value );
				if (!FixMessageInfo.HaltReason.isValid(haltReason) ) throw new FixSessionException(buf, "Invalid enumerated value(" + haltReason + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.QUOTECONDITION_INT) {
				quoteCondition = FixUtils.getTagStringValue(value, quoteCondition);
				if (!FixMessageInfo.QuoteCondition.isValid(quoteCondition) ) throw new FixSessionException(buf, "Invalid enumerated value(" + quoteCondition + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.TRADECONDITION_INT) {
				tradeCondition = FixUtils.getTagStringValue(value, tradeCondition);
				if (!FixMessageInfo.TradeCondition.isValid(tradeCondition) ) throw new FixSessionException(buf, "Invalid enumerated value(" + tradeCondition + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.TRDTYPE_INT) {
				trdType = FixUtils.getTagIntValue( value );
				if (!FixMessageInfo.TrdType.isValid(trdType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + trdType + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.MATCHTYPE_INT) {
				matchType = FixUtils.getTagStringValue(value, matchType);
				if (!FixMessageInfo.MatchType.isValid(matchType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + matchType + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.MDENTRYORIGINATOR_INT) {
				mDEntryOriginator = FixUtils.getTagStringValue(value, mDEntryOriginator);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.LOCATIONID_INT) {
				locationID = FixUtils.getTagStringValue(value, locationID);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.DESKID_INT) {
				deskID = FixUtils.getTagStringValue(value, deskID);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.OPENCLOSESETTLFLAG_INT) {
				openCloseSettlFlag = FixUtils.getTagStringValue(value, openCloseSettlFlag);
				if (!FixMessageInfo.OpenCloseSettlFlag.isValid(openCloseSettlFlag) ) throw new FixSessionException(buf, "Invalid enumerated value(" + openCloseSettlFlag + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.TIMEINFORCE_INT) {
				timeInForce = FixUtils.getTagCharValue( value );
				if (!FixMessageInfo.TimeInForce.isValid(timeInForce) ) throw new FixSessionException(buf, "Invalid enumerated value(" + timeInForce + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.EXPIREDATE_INT) {
				expireDate = FixUtils.getTagStringValue(value, expireDate);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.EXPIRETIME_INT) {
				expireTime = FixUtils.getTagStringValue(value, expireTime);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.MINQTY_INT) {
				minQty = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.EXECINST_INT) {
				execInst = FixUtils.getTagStringValue(value, execInst);
				if (!FixMessageInfo.ExecInst.isValid(execInst) ) throw new FixSessionException(buf, "Invalid enumerated value(" + execInst + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.SELLERDAYS_INT) {
				sellerDays = FixUtils.getTagIntValue( value );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.ORDERID_INT) {
				orderID = FixUtils.getTagStringValue(value, orderID);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.SECONDARYORDERID_INT) {
				secondaryOrderID = FixUtils.getTagStringValue(value, secondaryOrderID);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.QUOTEENTRYID_INT) {
				quoteEntryID = FixUtils.getTagStringValue(value, quoteEntryID);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.TRADEID_INT) {
				tradeID = FixUtils.getTagStringValue(value, tradeID);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.MDENTRYBUYER_INT) {
				mDEntryBuyer = FixUtils.getTagStringValue(value, mDEntryBuyer);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.MDENTRYSELLER_INT) {
				mDEntrySeller = FixUtils.getTagStringValue(value, mDEntrySeller);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.NUMBEROFORDERS_INT) {
				numberOfOrders = FixUtils.getTagIntValue( value );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.MDENTRYPOSITIONNO_INT) {
				mDEntryPositionNo = FixUtils.getTagIntValue( value );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.SCOPE_INT) {
				scope = FixUtils.getTagStringValue(value, scope);
				if (!FixMessageInfo.Scope.isValid(scope) ) throw new FixSessionException(buf, "Invalid enumerated value(" + scope + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.PRICEDELTA_INT) {
				priceDelta = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.NETCHGPREVDAY_INT) {
				netChgPrevDay = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.TEXT_INT) {
				text = FixUtils.getTagStringValue(value, text);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.ENCODEDTEXTLEN_INT) {
				encodedTextLen = FixUtils.getTagIntValue( value );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.ENCODEDTEXT_INT) {
				encodedText = FixUtils.getTagStringValue(value, encodedText);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.ORDERCAPACITY_INT) {
				orderCapacity = FixUtils.getTagCharValue( value );
				if (!FixMessageInfo.OrderCapacity.isValid(orderCapacity) ) throw new FixSessionException(buf, "Invalid enumerated value(" + orderCapacity + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.MDORIGINTYPE_INT) {
				mDOriginType = FixUtils.getTagIntValue( value );
				if (!FixMessageInfo.MDOriginType.isValid(mDOriginType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + mDOriginType + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.HIGHPX_INT) {
				highPx = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.LOWPX_INT) {
				lowPx = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.TRADEVOLUME_INT) {
				tradeVolume = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.SETTLTYPE_INT) {
				settlType = FixUtils.getTagStringValue(value, settlType);
				if (!FixMessageInfo.SettlType.isValid(settlType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + settlType + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.SETTLDATE_INT) {
				settlDate = FixUtils.getTagStringValue(value, settlDate);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.MDQUOTETYPE_INT) {
				mDQuoteType = FixUtils.getTagIntValue( value );
				if (!FixMessageInfo.MDQuoteType.isValid(mDQuoteType) ) throw new FixSessionException(buf, "Invalid enumerated value(" + mDQuoteType + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.RPTSEQ_INT) {
				rptSeq = FixUtils.getTagIntValue( value );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.MDPRICELEVEL_INT) {
				mDPriceLevel = FixUtils.getTagIntValue( value );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.TRANSBKDTIME_INT) {
				transBkdTime = FixUtils.getTagStringValue(value, transBkdTime);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.TRANSACTTIME_INT) {
				transactTime = FixUtils.getTagStringValue(value, transactTime);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.FIRSTPX_INT) {
				firstPx = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.LASTPX_INT) {
				lastPx = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.DEALINGCAPACITY_INT) {
				dealingCapacity = FixUtils.getTagCharValue( value );
				if (!FixMessageInfo.DealingCapacity.isValid(dealingCapacity) ) throw new FixSessionException(buf, "Invalid enumerated value(" + dealingCapacity + ") for tag: " + id );
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.MDENTRYSPOTRATE_INT) {
				mDEntrySpotRate = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.MDENTRYFORWARDPOINTS_INT) {
				mDEntryForwardPoints = FixUtils.getTagFloatValue(value);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.NOPARTYIDS_INT) {
				parties.getAll(FixTags.NOPARTYIDS_INT, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			if(id == FixTags.NOSTATSINDICATORS_INT) {
				statsIndGrp.getAll(FixTags.NOSTATSINDICATORS_INT, buf);
				lastTagPosition = buf.position();

				id = FixUtils.getTagId( buf );
			}

			id = checkRequiredTags();
			if (id > 0) throw new FixSessionException(buf, "Required tag missing: " + id );

			buf.position( lastTagPosition );
			return;

	}

	private int checkRequiredTags() {
		int tag = -1;

		if (! FixUtils.isSet(mDUpdateAction) ) return FixTags.MDUPDATEACTION_INT;
		return tag;

	}
	@Override
	public boolean isSet()
	{
		if (FixUtils.isSet(deleteReason)) return true;
		if (FixUtils.isSet(mDSubBookType)) return true;
		if (FixUtils.isSet(marketDepth)) return true;
		if (FixUtils.isSet(mDEntryType)) return true;
		if (FixUtils.isSet(mDEntryID)) return true;
		if (FixUtils.isSet(mDEntryRefID)) return true;
		if (FixUtils.isSet(mDStreamID)) return true;
		if (FixUtils.isSet(instrument.symbol)) return true;
		if (FixUtils.isSet(undInstrmtGrp.noUnderlyings)) return true;
		if (FixUtils.isSet(instrmtLegGrp.noLegs)) return true;
		if (FixUtils.isSet(financialStatus)) return true;
		if (FixUtils.isSet(corporateAction)) return true;
		if (FixUtils.isSet(mDEntryPx)) return true;
		if (FixUtils.isSet(ordType)) return true;
		if (FixUtils.isSet(priceType)) return true;
		if (FixUtils.isSet(yieldData.yieldType)) return true;
		if (FixUtils.isSet(spreadOrBenchmarkCurveData.spread)) return true;
		if (FixUtils.isSet(currency)) return true;
		if (FixUtils.isSet(settlCurrency)) return true;
		if (FixUtils.isSet(rateSource.noRateSources)) return true;
		if (FixUtils.isSet(mDEntrySize)) return true;
		if (FixUtils.isSet(lotType)) return true;
		if (FixUtils.isSet(secSizesGrp.noOfSecSizes)) return true;
		if (FixUtils.isSet(mDEntryDate)) return true;
		if (FixUtils.isSet(mDEntryTime)) return true;
		if (FixUtils.isSet(tickDirection)) return true;
		if (FixUtils.isSet(mDMkt)) return true;
		if (FixUtils.isSet(tradingSessionID)) return true;
		if (FixUtils.isSet(tradingSessionSubID)) return true;
		if (FixUtils.isSet(securityTradingStatus)) return true;
		if (FixUtils.isSet(haltReason)) return true;
		if (FixUtils.isSet(quoteCondition)) return true;
		if (FixUtils.isSet(tradeCondition)) return true;
		if (FixUtils.isSet(trdType)) return true;
		if (FixUtils.isSet(matchType)) return true;
		if (FixUtils.isSet(mDEntryOriginator)) return true;
		if (FixUtils.isSet(locationID)) return true;
		if (FixUtils.isSet(deskID)) return true;
		if (FixUtils.isSet(openCloseSettlFlag)) return true;
		if (FixUtils.isSet(timeInForce)) return true;
		if (FixUtils.isSet(expireDate)) return true;
		if (FixUtils.isSet(expireTime)) return true;
		if (FixUtils.isSet(minQty)) return true;
		if (FixUtils.isSet(execInst)) return true;
		if (FixUtils.isSet(sellerDays)) return true;
		if (FixUtils.isSet(orderID)) return true;
		if (FixUtils.isSet(secondaryOrderID)) return true;
		if (FixUtils.isSet(quoteEntryID)) return true;
		if (FixUtils.isSet(tradeID)) return true;
		if (FixUtils.isSet(mDEntryBuyer)) return true;
		if (FixUtils.isSet(mDEntrySeller)) return true;
		if (FixUtils.isSet(numberOfOrders)) return true;
		if (FixUtils.isSet(mDEntryPositionNo)) return true;
		if (FixUtils.isSet(scope)) return true;
		if (FixUtils.isSet(priceDelta)) return true;
		if (FixUtils.isSet(netChgPrevDay)) return true;
		if (FixUtils.isSet(text)) return true;
		if (FixUtils.isSet(encodedTextLen)) return true;
		if (FixUtils.isSet(encodedText)) return true;
		if (FixUtils.isSet(orderCapacity)) return true;
		if (FixUtils.isSet(mDOriginType)) return true;
		if (FixUtils.isSet(highPx)) return true;
		if (FixUtils.isSet(lowPx)) return true;
		if (FixUtils.isSet(tradeVolume)) return true;
		if (FixUtils.isSet(settlType)) return true;
		if (FixUtils.isSet(settlDate)) return true;
		if (FixUtils.isSet(mDQuoteType)) return true;
		if (FixUtils.isSet(rptSeq)) return true;
		if (FixUtils.isSet(mDPriceLevel)) return true;
		if (FixUtils.isSet(transBkdTime)) return true;
		if (FixUtils.isSet(transactTime)) return true;
		if (FixUtils.isSet(firstPx)) return true;
		if (FixUtils.isSet(lastPx)) return true;
		if (FixUtils.isSet(dealingCapacity)) return true;
		if (FixUtils.isSet(mDEntrySpotRate)) return true;
		if (FixUtils.isSet(mDEntryForwardPoints)) return true;
		if (FixUtils.isSet(parties.noPartyIDs)) return true;
		if (FixUtils.isSet(statsIndGrp.noStatsIndicators)) return true;
		return false;
	}
	@Override
	public void encode( ByteBuffer out )
	{
		FixUtils.putFixTag( out, FixTags.MDUPDATEACTION_INT, mDUpdateAction );
		if (FixUtils.isSet(deleteReason)) FixUtils.putFixTag( out, FixTags.DELETEREASON_INT, deleteReason );
		if (FixUtils.isSet(mDSubBookType)) FixUtils.putFixTag( out, FixTags.MDSUBBOOKTYPE_INT, mDSubBookType);
		if (FixUtils.isSet(marketDepth)) FixUtils.putFixTag( out, FixTags.MARKETDEPTH_INT, marketDepth);
		if (FixUtils.isSet(mDEntryType)) FixUtils.putFixTag( out, FixTags.MDENTRYTYPE_INT, mDEntryType );
		if (FixUtils.isSet(mDEntryID)) FixUtils.putFixTag( out, FixTags.MDENTRYID_INT, mDEntryID, 0, Utils.lastIndexTrim(mDEntryID, (byte)0) );
		if (FixUtils.isSet(mDEntryRefID)) FixUtils.putFixTag( out, FixTags.MDENTRYREFID_INT, mDEntryRefID, 0, Utils.lastIndexTrim(mDEntryRefID, (byte)0) );
		if (FixUtils.isSet(mDStreamID)) FixUtils.putFixTag( out, FixTags.MDSTREAMID_INT, mDStreamID, 0, Utils.lastIndexTrim(mDStreamID, (byte)0) );
		if (FixUtils.isSet(instrument.symbol)) instrument.encode( out );
		if (FixUtils.isSet(undInstrmtGrp.noUnderlyings)) undInstrmtGrp.encode( out );
		if (FixUtils.isSet(instrmtLegGrp.noLegs)) instrmtLegGrp.encode( out );
		if (FixUtils.isSet(financialStatus)) FixUtils.putFixTag( out, FixTags.FINANCIALSTATUS_INT, financialStatus, 0, Utils.lastIndexTrim(financialStatus, (byte)0) );
		if (FixUtils.isSet(corporateAction)) FixUtils.putFixTag( out, FixTags.CORPORATEACTION_INT, corporateAction, 0, Utils.lastIndexTrim(corporateAction, (byte)0) );
		if (FixUtils.isSet(mDEntryPx)) FixUtils.putFixFloatTag( out, FixTags.MDENTRYPX_INT, mDEntryPx);
		if (FixUtils.isSet(ordType)) FixUtils.putFixTag( out, FixTags.ORDTYPE_INT, ordType );
		if (FixUtils.isSet(priceType)) FixUtils.putFixTag( out, FixTags.PRICETYPE_INT, priceType);
		if (FixUtils.isSet(yieldData.yieldType)) yieldData.encode( out );
		if (FixUtils.isSet(spreadOrBenchmarkCurveData.spread)) spreadOrBenchmarkCurveData.encode( out );
		if (FixUtils.isSet(currency)) FixUtils.putFixTag( out, FixTags.CURRENCY_INT, currency, 0, Utils.lastIndexTrim(currency, (byte)0) );
		if (FixUtils.isSet(settlCurrency)) FixUtils.putFixTag( out, FixTags.SETTLCURRENCY_INT, settlCurrency, 0, Utils.lastIndexTrim(settlCurrency, (byte)0) );
		if (FixUtils.isSet(rateSource.noRateSources)) rateSource.encode( out );
		if (FixUtils.isSet(mDEntrySize)) FixUtils.putFixFloatTag( out, FixTags.MDENTRYSIZE_INT, mDEntrySize);
		if (FixUtils.isSet(lotType)) FixUtils.putFixTag( out, FixTags.LOTTYPE_INT, lotType );
		if (FixUtils.isSet(secSizesGrp.noOfSecSizes)) secSizesGrp.encode( out );
		if (FixUtils.isSet(mDEntryDate)) FixUtils.putFixTag( out, FixTags.MDENTRYDATE_INT, mDEntryDate);
		if (FixUtils.isSet(mDEntryTime)) FixUtils.putFixTag( out, FixTags.MDENTRYTIME_INT, mDEntryTime);
		if (FixUtils.isSet(tickDirection)) FixUtils.putFixTag( out, FixTags.TICKDIRECTION_INT, tickDirection );
		if (FixUtils.isSet(mDMkt)) FixUtils.putFixTag( out, FixTags.MDMKT_INT, mDMkt, 0, Utils.lastIndexTrim(mDMkt, (byte)0) );
		if (FixUtils.isSet(tradingSessionID)) FixUtils.putFixTag( out, FixTags.TRADINGSESSIONID_INT, tradingSessionID, 0, Utils.lastIndexTrim(tradingSessionID, (byte)0) );
		if (FixUtils.isSet(tradingSessionSubID)) FixUtils.putFixTag( out, FixTags.TRADINGSESSIONSUBID_INT, tradingSessionSubID, 0, Utils.lastIndexTrim(tradingSessionSubID, (byte)0) );
		if (FixUtils.isSet(securityTradingStatus)) FixUtils.putFixTag( out, FixTags.SECURITYTRADINGSTATUS_INT, securityTradingStatus);
		if (FixUtils.isSet(haltReason)) FixUtils.putFixTag( out, FixTags.HALTREASON_INT, haltReason);
		if (FixUtils.isSet(quoteCondition)) FixUtils.putFixTag( out, FixTags.QUOTECONDITION_INT, quoteCondition, 0, Utils.lastIndexTrim(quoteCondition, (byte)0) );
		if (FixUtils.isSet(tradeCondition)) FixUtils.putFixTag( out, FixTags.TRADECONDITION_INT, tradeCondition, 0, Utils.lastIndexTrim(tradeCondition, (byte)0) );
		if (FixUtils.isSet(trdType)) FixUtils.putFixTag( out, FixTags.TRDTYPE_INT, trdType);
		if (FixUtils.isSet(matchType)) FixUtils.putFixTag( out, FixTags.MATCHTYPE_INT, matchType, 0, Utils.lastIndexTrim(matchType, (byte)0) );
		if (FixUtils.isSet(mDEntryOriginator)) FixUtils.putFixTag( out, FixTags.MDENTRYORIGINATOR_INT, mDEntryOriginator, 0, Utils.lastIndexTrim(mDEntryOriginator, (byte)0) );
		if (FixUtils.isSet(locationID)) FixUtils.putFixTag( out, FixTags.LOCATIONID_INT, locationID, 0, Utils.lastIndexTrim(locationID, (byte)0) );
		if (FixUtils.isSet(deskID)) FixUtils.putFixTag( out, FixTags.DESKID_INT, deskID, 0, Utils.lastIndexTrim(deskID, (byte)0) );
		if (FixUtils.isSet(openCloseSettlFlag)) FixUtils.putFixTag( out, FixTags.OPENCLOSESETTLFLAG_INT, openCloseSettlFlag, 0, Utils.lastIndexTrim(openCloseSettlFlag, (byte)0) );
		if (FixUtils.isSet(timeInForce)) FixUtils.putFixTag( out, FixTags.TIMEINFORCE_INT, timeInForce );
		if (FixUtils.isSet(expireDate)) FixUtils.putFixTag( out, FixTags.EXPIREDATE_INT, expireDate);
		if (FixUtils.isSet(expireTime)) FixUtils.putFixTag( out, FixTags.EXPIRETIME_INT, expireTime);
		if (FixUtils.isSet(minQty)) FixUtils.putFixFloatTag( out, FixTags.MINQTY_INT, minQty);
		if (FixUtils.isSet(execInst)) FixUtils.putFixTag( out, FixTags.EXECINST_INT, execInst, 0, Utils.lastIndexTrim(execInst, (byte)0) );
		if (FixUtils.isSet(sellerDays)) FixUtils.putFixTag( out, FixTags.SELLERDAYS_INT, sellerDays);
		if (FixUtils.isSet(orderID)) FixUtils.putFixTag( out, FixTags.ORDERID_INT, orderID, 0, Utils.lastIndexTrim(orderID, (byte)0) );
		if (FixUtils.isSet(secondaryOrderID)) FixUtils.putFixTag( out, FixTags.SECONDARYORDERID_INT, secondaryOrderID, 0, Utils.lastIndexTrim(secondaryOrderID, (byte)0) );
		if (FixUtils.isSet(quoteEntryID)) FixUtils.putFixTag( out, FixTags.QUOTEENTRYID_INT, quoteEntryID, 0, Utils.lastIndexTrim(quoteEntryID, (byte)0) );
		if (FixUtils.isSet(tradeID)) FixUtils.putFixTag( out, FixTags.TRADEID_INT, tradeID, 0, Utils.lastIndexTrim(tradeID, (byte)0) );
		if (FixUtils.isSet(mDEntryBuyer)) FixUtils.putFixTag( out, FixTags.MDENTRYBUYER_INT, mDEntryBuyer, 0, Utils.lastIndexTrim(mDEntryBuyer, (byte)0) );
		if (FixUtils.isSet(mDEntrySeller)) FixUtils.putFixTag( out, FixTags.MDENTRYSELLER_INT, mDEntrySeller, 0, Utils.lastIndexTrim(mDEntrySeller, (byte)0) );
		if (FixUtils.isSet(numberOfOrders)) FixUtils.putFixTag( out, FixTags.NUMBEROFORDERS_INT, numberOfOrders);
		if (FixUtils.isSet(mDEntryPositionNo)) FixUtils.putFixTag( out, FixTags.MDENTRYPOSITIONNO_INT, mDEntryPositionNo);
		if (FixUtils.isSet(scope)) FixUtils.putFixTag( out, FixTags.SCOPE_INT, scope, 0, Utils.lastIndexTrim(scope, (byte)0) );
		if (FixUtils.isSet(priceDelta)) FixUtils.putFixFloatTag( out, FixTags.PRICEDELTA_INT, priceDelta);
		if (FixUtils.isSet(netChgPrevDay)) FixUtils.putFixFloatTag( out, FixTags.NETCHGPREVDAY_INT, netChgPrevDay);
		if (FixUtils.isSet(text)) FixUtils.putFixTag( out, FixTags.TEXT_INT, text, 0, Utils.lastIndexTrim(text, (byte)0) );
		if (FixUtils.isSet(encodedTextLen)) FixUtils.putFixTag( out, FixTags.ENCODEDTEXTLEN_INT, encodedTextLen);
		if (FixUtils.isSet(encodedText)) FixUtils.putFixTag( out, FixTags.ENCODEDTEXT_INT, encodedText, 0, Utils.lastIndexTrim(encodedText, (byte)0) );
		if (FixUtils.isSet(orderCapacity)) FixUtils.putFixTag( out, FixTags.ORDERCAPACITY_INT, orderCapacity );
		if (FixUtils.isSet(mDOriginType)) FixUtils.putFixTag( out, FixTags.MDORIGINTYPE_INT, mDOriginType);
		if (FixUtils.isSet(highPx)) FixUtils.putFixFloatTag( out, FixTags.HIGHPX_INT, highPx);
		if (FixUtils.isSet(lowPx)) FixUtils.putFixFloatTag( out, FixTags.LOWPX_INT, lowPx);
		if (FixUtils.isSet(tradeVolume)) FixUtils.putFixFloatTag( out, FixTags.TRADEVOLUME_INT, tradeVolume);
		if (FixUtils.isSet(settlType)) FixUtils.putFixTag( out, FixTags.SETTLTYPE_INT, settlType, 0, Utils.lastIndexTrim(settlType, (byte)0) );
		if (FixUtils.isSet(settlDate)) FixUtils.putFixTag( out, FixTags.SETTLDATE_INT, settlDate);
		if (FixUtils.isSet(mDQuoteType)) FixUtils.putFixTag( out, FixTags.MDQUOTETYPE_INT, mDQuoteType);
		if (FixUtils.isSet(rptSeq)) FixUtils.putFixTag( out, FixTags.RPTSEQ_INT, rptSeq);
		if (FixUtils.isSet(mDPriceLevel)) FixUtils.putFixTag( out, FixTags.MDPRICELEVEL_INT, mDPriceLevel);
		if (FixUtils.isSet(transBkdTime)) FixUtils.putFixTag( out, FixTags.TRANSBKDTIME_INT, transBkdTime);
		if (FixUtils.isSet(transactTime)) FixUtils.putFixTag( out, FixTags.TRANSACTTIME_INT, transactTime);
		if (FixUtils.isSet(firstPx)) FixUtils.putFixFloatTag( out, FixTags.FIRSTPX_INT, firstPx);
		if (FixUtils.isSet(lastPx)) FixUtils.putFixFloatTag( out, FixTags.LASTPX_INT, lastPx);
		if (FixUtils.isSet(dealingCapacity)) FixUtils.putFixTag( out, FixTags.DEALINGCAPACITY_INT, dealingCapacity );
		if (FixUtils.isSet(mDEntrySpotRate)) FixUtils.putFixFloatTag( out, FixTags.MDENTRYSPOTRATE_INT, mDEntrySpotRate);
		if (FixUtils.isSet(mDEntryForwardPoints)) FixUtils.putFixFloatTag( out, FixTags.MDENTRYFORWARDPOINTS_INT, mDEntryForwardPoints);
		if (FixUtils.isSet(parties.noPartyIDs)) parties.encode( out );
		if (FixUtils.isSet(statsIndGrp.noStatsIndicators)) statsIndGrp.encode( out );
	}
	/**
	 * If you use toString for any other purpose than administrative printout.
	 * You will end up in nifelheim!
	**/
	@Override
	public String toString() {
		char sep = '\n';
		if (Boolean.getBoolean("fix.useOneLiner")) sep = ( byte )0x01;

		String s = "";

			 s += "MDUpdateAction(279)=" + String.valueOf(mDUpdateAction) + sep;
			if (FixUtils.isSet(deleteReason)) s += "DeleteReason(285)=" + String.valueOf(deleteReason) + sep;
			if (FixUtils.isSet(mDSubBookType)) s += "MDSubBookType(1173)=" + String.valueOf(mDSubBookType) + sep;
			if (FixUtils.isSet(marketDepth)) s += "MarketDepth(264)=" + String.valueOf(marketDepth) + sep;
			if (FixUtils.isSet(mDEntryType)) s += "MDEntryType(269)=" + String.valueOf(mDEntryType) + sep;
			if (FixUtils.isSet(mDEntryID)) s += "MDEntryID(278)=" + new String(mDEntryID) + sep;
			if (FixUtils.isSet(mDEntryRefID)) s += "MDEntryRefID(280)=" + new String(mDEntryRefID) + sep;
			if (FixUtils.isSet(mDStreamID)) s += "MDStreamID(1500)=" + new String(mDStreamID) + sep;
			if (FixUtils.isSet(instrument.symbol)) s += instrument.toString();
			if (FixUtils.isSet(undInstrmtGrp.noUnderlyings)) s += undInstrmtGrp.toString();
			if (FixUtils.isSet(instrmtLegGrp.noLegs)) s += instrmtLegGrp.toString();
			if (FixUtils.isSet(financialStatus)) s += "FinancialStatus(291)=" + new String(financialStatus) + sep;
			if (FixUtils.isSet(corporateAction)) s += "CorporateAction(292)=" + new String(corporateAction) + sep;
			if (FixUtils.isSet(mDEntryPx)) s += "MDEntryPx(270)=" + String.valueOf(mDEntryPx) + sep;
			if (FixUtils.isSet(ordType)) s += "OrdType(40)=" + String.valueOf(ordType) + sep;
			if (FixUtils.isSet(priceType)) s += "PriceType(423)=" + String.valueOf(priceType) + sep;
			if (FixUtils.isSet(yieldData.yieldType)) s += yieldData.toString();
			if (FixUtils.isSet(spreadOrBenchmarkCurveData.spread)) s += spreadOrBenchmarkCurveData.toString();
			if (FixUtils.isSet(currency)) s += "Currency(15)=" + new String(currency) + sep;
			if (FixUtils.isSet(settlCurrency)) s += "SettlCurrency(120)=" + new String(settlCurrency) + sep;
			if (FixUtils.isSet(rateSource.noRateSources)) s += rateSource.toString();
			if (FixUtils.isSet(mDEntrySize)) s += "MDEntrySize(271)=" + String.valueOf(mDEntrySize) + sep;
			if (FixUtils.isSet(lotType)) s += "LotType(1093)=" + String.valueOf(lotType) + sep;
			if (FixUtils.isSet(secSizesGrp.noOfSecSizes)) s += secSizesGrp.toString();
			if (FixUtils.isSet(mDEntryDate)) s += "MDEntryDate(272)=" + new String(mDEntryDate) + sep;
			if (FixUtils.isSet(mDEntryTime)) s += "MDEntryTime(273)=" + new String(mDEntryTime) + sep;
			if (FixUtils.isSet(tickDirection)) s += "TickDirection(274)=" + String.valueOf(tickDirection) + sep;
			if (FixUtils.isSet(mDMkt)) s += "MDMkt(275)=" + new String(mDMkt) + sep;
			if (FixUtils.isSet(tradingSessionID)) s += "TradingSessionID(336)=" + new String(tradingSessionID) + sep;
			if (FixUtils.isSet(tradingSessionSubID)) s += "TradingSessionSubID(625)=" + new String(tradingSessionSubID) + sep;
			if (FixUtils.isSet(securityTradingStatus)) s += "SecurityTradingStatus(326)=" + String.valueOf(securityTradingStatus) + sep;
			if (FixUtils.isSet(haltReason)) s += "HaltReason(327)=" + String.valueOf(haltReason) + sep;
			if (FixUtils.isSet(quoteCondition)) s += "QuoteCondition(276)=" + new String(quoteCondition) + sep;
			if (FixUtils.isSet(tradeCondition)) s += "TradeCondition(277)=" + new String(tradeCondition) + sep;
			if (FixUtils.isSet(trdType)) s += "TrdType(828)=" + String.valueOf(trdType) + sep;
			if (FixUtils.isSet(matchType)) s += "MatchType(574)=" + new String(matchType) + sep;
			if (FixUtils.isSet(mDEntryOriginator)) s += "MDEntryOriginator(282)=" + new String(mDEntryOriginator) + sep;
			if (FixUtils.isSet(locationID)) s += "LocationID(283)=" + new String(locationID) + sep;
			if (FixUtils.isSet(deskID)) s += "DeskID(284)=" + new String(deskID) + sep;
			if (FixUtils.isSet(openCloseSettlFlag)) s += "OpenCloseSettlFlag(286)=" + new String(openCloseSettlFlag) + sep;
			if (FixUtils.isSet(timeInForce)) s += "TimeInForce(59)=" + String.valueOf(timeInForce) + sep;
			if (FixUtils.isSet(expireDate)) s += "ExpireDate(432)=" + new String(expireDate) + sep;
			if (FixUtils.isSet(expireTime)) s += "ExpireTime(126)=" + new String(expireTime) + sep;
			if (FixUtils.isSet(minQty)) s += "MinQty(110)=" + String.valueOf(minQty) + sep;
			if (FixUtils.isSet(execInst)) s += "ExecInst(18)=" + new String(execInst) + sep;
			if (FixUtils.isSet(sellerDays)) s += "SellerDays(287)=" + String.valueOf(sellerDays) + sep;
			if (FixUtils.isSet(orderID)) s += "OrderID(37)=" + new String(orderID) + sep;
			if (FixUtils.isSet(secondaryOrderID)) s += "SecondaryOrderID(198)=" + new String(secondaryOrderID) + sep;
			if (FixUtils.isSet(quoteEntryID)) s += "QuoteEntryID(299)=" + new String(quoteEntryID) + sep;
			if (FixUtils.isSet(tradeID)) s += "TradeID(1003)=" + new String(tradeID) + sep;
			if (FixUtils.isSet(mDEntryBuyer)) s += "MDEntryBuyer(288)=" + new String(mDEntryBuyer) + sep;
			if (FixUtils.isSet(mDEntrySeller)) s += "MDEntrySeller(289)=" + new String(mDEntrySeller) + sep;
			if (FixUtils.isSet(numberOfOrders)) s += "NumberOfOrders(346)=" + String.valueOf(numberOfOrders) + sep;
			if (FixUtils.isSet(mDEntryPositionNo)) s += "MDEntryPositionNo(290)=" + String.valueOf(mDEntryPositionNo) + sep;
			if (FixUtils.isSet(scope)) s += "Scope(546)=" + new String(scope) + sep;
			if (FixUtils.isSet(priceDelta)) s += "PriceDelta(811)=" + String.valueOf(priceDelta) + sep;
			if (FixUtils.isSet(netChgPrevDay)) s += "NetChgPrevDay(451)=" + String.valueOf(netChgPrevDay) + sep;
			if (FixUtils.isSet(text)) s += "Text(58)=" + new String(text) + sep;
			if (FixUtils.isSet(encodedTextLen)) s += "EncodedTextLen(354)=" + String.valueOf(encodedTextLen) + sep;
			if (FixUtils.isSet(encodedText)) s += "EncodedText(355)=" + new String(encodedText) + sep;
			if (FixUtils.isSet(orderCapacity)) s += "OrderCapacity(528)=" + String.valueOf(orderCapacity) + sep;
			if (FixUtils.isSet(mDOriginType)) s += "MDOriginType(1024)=" + String.valueOf(mDOriginType) + sep;
			if (FixUtils.isSet(highPx)) s += "HighPx(332)=" + String.valueOf(highPx) + sep;
			if (FixUtils.isSet(lowPx)) s += "LowPx(333)=" + String.valueOf(lowPx) + sep;
			if (FixUtils.isSet(tradeVolume)) s += "TradeVolume(1020)=" + String.valueOf(tradeVolume) + sep;
			if (FixUtils.isSet(settlType)) s += "SettlType(63)=" + new String(settlType) + sep;
			if (FixUtils.isSet(settlDate)) s += "SettlDate(64)=" + new String(settlDate) + sep;
			if (FixUtils.isSet(mDQuoteType)) s += "MDQuoteType(1070)=" + String.valueOf(mDQuoteType) + sep;
			if (FixUtils.isSet(rptSeq)) s += "RptSeq(83)=" + String.valueOf(rptSeq) + sep;
			if (FixUtils.isSet(mDPriceLevel)) s += "MDPriceLevel(1023)=" + String.valueOf(mDPriceLevel) + sep;
			if (FixUtils.isSet(transBkdTime)) s += "TransBkdTime(483)=" + new String(transBkdTime) + sep;
			if (FixUtils.isSet(transactTime)) s += "TransactTime(60)=" + new String(transactTime) + sep;
			if (FixUtils.isSet(firstPx)) s += "FirstPx(1025)=" + String.valueOf(firstPx) + sep;
			if (FixUtils.isSet(lastPx)) s += "LastPx(31)=" + String.valueOf(lastPx) + sep;
			if (FixUtils.isSet(dealingCapacity)) s += "DealingCapacity(1048)=" + String.valueOf(dealingCapacity) + sep;
			if (FixUtils.isSet(mDEntrySpotRate)) s += "MDEntrySpotRate(1026)=" + String.valueOf(mDEntrySpotRate) + sep;
			if (FixUtils.isSet(mDEntryForwardPoints)) s += "MDEntryForwardPoints(1027)=" + String.valueOf(mDEntryForwardPoints) + sep;
			if (FixUtils.isSet(parties.noPartyIDs)) s += parties.toString();
			if (FixUtils.isSet(statsIndGrp.noStatsIndicators)) s += statsIndGrp.toString();
		return s;

	}

	@Override
	public boolean equals(Object o) {
		if (! ( o instanceof MDIncGrp)) return false;

			MDIncGrp msg = (MDIncGrp) o;

		if ( ! super.equals(msg) ) return false;

		if (!( mDUpdateAction==msg.mDUpdateAction)) return false;

		if (!( deleteReason==msg.deleteReason)) return false;

		if (!( mDSubBookType==msg.mDSubBookType)) return false;

		if (!( marketDepth==msg.marketDepth)) return false;

		if (!( mDEntryType==msg.mDEntryType)) return false;

		if (!Utils.equals( mDEntryID, msg.mDEntryID)) return false;

		if (!Utils.equals( mDEntryRefID, msg.mDEntryRefID)) return false;

		if (!Utils.equals( mDStreamID, msg.mDStreamID)) return false;

		if (!instrument.equals(msg.instrument)) return false;

		if (!undInstrmtGrp.equals(msg.undInstrmtGrp)) return false;

		if (!instrmtLegGrp.equals(msg.instrmtLegGrp)) return false;

		if (!Utils.equals( financialStatus, msg.financialStatus)) return false;

		if (!Utils.equals( corporateAction, msg.corporateAction)) return false;

		if (!( mDEntryPx==msg.mDEntryPx)) return false;

		if (!( ordType==msg.ordType)) return false;

		if (!( priceType==msg.priceType)) return false;

		if (!yieldData.equals(msg.yieldData)) return false;

		if (!spreadOrBenchmarkCurveData.equals(msg.spreadOrBenchmarkCurveData)) return false;

		if (!Utils.equals( currency, msg.currency)) return false;

		if (!Utils.equals( settlCurrency, msg.settlCurrency)) return false;

		if (!rateSource.equals(msg.rateSource)) return false;

		if (!( mDEntrySize==msg.mDEntrySize)) return false;

		if (!( lotType==msg.lotType)) return false;

		if (!secSizesGrp.equals(msg.secSizesGrp)) return false;

		if (!( tickDirection==msg.tickDirection)) return false;

		if (!Utils.equals( mDMkt, msg.mDMkt)) return false;

		if (!Utils.equals( tradingSessionID, msg.tradingSessionID)) return false;

		if (!Utils.equals( tradingSessionSubID, msg.tradingSessionSubID)) return false;

		if (!( securityTradingStatus==msg.securityTradingStatus)) return false;

		if (!( haltReason==msg.haltReason)) return false;

		if (!Utils.equals( quoteCondition, msg.quoteCondition)) return false;

		if (!Utils.equals( tradeCondition, msg.tradeCondition)) return false;

		if (!( trdType==msg.trdType)) return false;

		if (!Utils.equals( matchType, msg.matchType)) return false;

		if (!Utils.equals( mDEntryOriginator, msg.mDEntryOriginator)) return false;

		if (!Utils.equals( locationID, msg.locationID)) return false;

		if (!Utils.equals( deskID, msg.deskID)) return false;

		if (!Utils.equals( openCloseSettlFlag, msg.openCloseSettlFlag)) return false;

		if (!( timeInForce==msg.timeInForce)) return false;

		if (!( minQty==msg.minQty)) return false;

		if (!Utils.equals( execInst, msg.execInst)) return false;

		if (!( sellerDays==msg.sellerDays)) return false;

		if (!Utils.equals( orderID, msg.orderID)) return false;

		if (!Utils.equals( secondaryOrderID, msg.secondaryOrderID)) return false;

		if (!Utils.equals( quoteEntryID, msg.quoteEntryID)) return false;

		if (!Utils.equals( tradeID, msg.tradeID)) return false;

		if (!Utils.equals( mDEntryBuyer, msg.mDEntryBuyer)) return false;

		if (!Utils.equals( mDEntrySeller, msg.mDEntrySeller)) return false;

		if (!( numberOfOrders==msg.numberOfOrders)) return false;

		if (!( mDEntryPositionNo==msg.mDEntryPositionNo)) return false;

		if (!Utils.equals( scope, msg.scope)) return false;

		if (!( priceDelta==msg.priceDelta)) return false;

		if (!( netChgPrevDay==msg.netChgPrevDay)) return false;

		if (!Utils.equals( text, msg.text)) return false;

		if (!( encodedTextLen==msg.encodedTextLen)) return false;

		if (!Utils.equals( encodedText, msg.encodedText)) return false;

		if (!( orderCapacity==msg.orderCapacity)) return false;

		if (!( mDOriginType==msg.mDOriginType)) return false;

		if (!( highPx==msg.highPx)) return false;

		if (!( lowPx==msg.lowPx)) return false;

		if (!( tradeVolume==msg.tradeVolume)) return false;

		if (!Utils.equals( settlType, msg.settlType)) return false;

		if (!( mDQuoteType==msg.mDQuoteType)) return false;

		if (!( rptSeq==msg.rptSeq)) return false;

		if (!( mDPriceLevel==msg.mDPriceLevel)) return false;

		if (!( firstPx==msg.firstPx)) return false;

		if (!( lastPx==msg.lastPx)) return false;

		if (!( dealingCapacity==msg.dealingCapacity)) return false;

		if (!( mDEntrySpotRate==msg.mDEntrySpotRate)) return false;

		if (!( mDEntryForwardPoints==msg.mDEntryForwardPoints)) return false;

		if (!parties.equals(msg.parties)) return false;

		if (!statsIndGrp.equals(msg.statsIndGrp)) return false;

		return true;
	}
}
}
